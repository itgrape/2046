"use strict";
(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __typeError = (msg) => {
    throw TypeError(msg);
  };
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
    mod
  ));
  var __accessCheck = (obj, member, msg) => member.has(obj) || __typeError("Cannot " + msg);
  var __privateGet = (obj, member, getter) => (__accessCheck(obj, member, "read from private field"), getter ? getter.call(obj) : member.get(obj));
  var __privateAdd = (obj, member, value) => member.has(obj) ? __typeError("Cannot add the same private member more than once") : member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
  var __privateSet = (obj, member, value, setter) => (__accessCheck(obj, member, "write to private field"), setter ? setter.call(obj, value) : member.set(obj, value), value);
  var __privateMethod = (obj, member, method) => (__accessCheck(obj, member, "access private method"), method);
  var __privateWrapper = (obj, member, setter, getter) => ({
    set _(value) {
      __privateSet(obj, member, value, setter);
    },
    get _() {
      return __privateGet(obj, member, getter);
    }
  });

  // node_modules/react/cjs/react.development.js
  var require_react_development = __commonJS({
    "node_modules/react/cjs/react.development.js"(exports, module) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var ReactVersion = "18.3.1";
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var ReactCurrentDispatcher = {
            /**
             * @internal
             * @type {ReactComponent}
             */
            current: null
          };
          var ReactCurrentBatchConfig = {
            transition: null
          };
          var ReactCurrentActQueue = {
            current: null,
            // Used to reproduce behavior of `batchedUpdates` in legacy mode.
            isBatchingLegacy: false,
            didScheduleLegacyUpdate: false
          };
          var ReactCurrentOwner = {
            /**
             * @internal
             * @type {ReactComponent}
             */
            current: null
          };
          var ReactDebugCurrentFrame = {};
          var currentExtraStackFrame = null;
          function setExtraStackFrame(stack) {
            {
              currentExtraStackFrame = stack;
            }
          }
          {
            ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
              {
                currentExtraStackFrame = stack;
              }
            };
            ReactDebugCurrentFrame.getCurrentStack = null;
            ReactDebugCurrentFrame.getStackAddendum = function() {
              var stack = "";
              if (currentExtraStackFrame) {
                stack += currentExtraStackFrame;
              }
              var impl = ReactDebugCurrentFrame.getCurrentStack;
              if (impl) {
                stack += impl() || "";
              }
              return stack;
            };
          }
          var enableScopeAPI = false;
          var enableCacheElement = false;
          var enableTransitionTracing = false;
          var enableLegacyHidden = false;
          var enableDebugTracing = false;
          var ReactSharedInternals = {
            ReactCurrentDispatcher,
            ReactCurrentBatchConfig,
            ReactCurrentOwner
          };
          {
            ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
            ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;
          }
          function warn(format) {
            {
              {
                for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  args[_key - 1] = arguments[_key];
                }
                printWarning("warn", format, args);
              }
            }
          }
          function error(format) {
            {
              {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format, args);
              }
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var didWarnStateUpdateForUnmountedComponent = {};
          function warnNoop(publicInstance, callerName) {
            {
              var _constructor = publicInstance.constructor;
              var componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
              var warningKey = componentName + "." + callerName;
              if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
                return;
              }
              error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
              didWarnStateUpdateForUnmountedComponent[warningKey] = true;
            }
          }
          var ReactNoopUpdateQueue = {
            /**
             * Checks whether or not this composite component is mounted.
             * @param {ReactClass} publicInstance The instance we want to test.
             * @return {boolean} True if mounted, false otherwise.
             * @protected
             * @final
             */
            isMounted: function(publicInstance) {
              return false;
            },
            /**
             * Forces an update. This should only be invoked when it is known with
             * certainty that we are **not** in a DOM transaction.
             *
             * You may want to call this when you know that some deeper aspect of the
             * component's state has changed but `setState` was not called.
             *
             * This will not invoke `shouldComponentUpdate`, but it will invoke
             * `componentWillUpdate` and `componentDidUpdate`.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {?function} callback Called after component is updated.
             * @param {?string} callerName name of the calling function in the public API.
             * @internal
             */
            enqueueForceUpdate: function(publicInstance, callback, callerName) {
              warnNoop(publicInstance, "forceUpdate");
            },
            /**
             * Replaces all of the state. Always use this or `setState` to mutate state.
             * You should treat `this.state` as immutable.
             *
             * There is no guarantee that `this.state` will be immediately updated, so
             * accessing `this.state` after calling this method may return the old value.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {object} completeState Next state.
             * @param {?function} callback Called after component is updated.
             * @param {?string} callerName name of the calling function in the public API.
             * @internal
             */
            enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
              warnNoop(publicInstance, "replaceState");
            },
            /**
             * Sets a subset of the state. This only exists because _pendingState is
             * internal. This provides a merging strategy that is not available to deep
             * properties which is confusing. TODO: Expose pendingState or don't use it
             * during the merge.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {object} partialState Next partial state to be merged with state.
             * @param {?function} callback Called after component is updated.
             * @param {?string} Name of the calling function in the public API.
             * @internal
             */
            enqueueSetState: function(publicInstance, partialState, callback, callerName) {
              warnNoop(publicInstance, "setState");
            }
          };
          var assign = Object.assign;
          var emptyObject = {};
          {
            Object.freeze(emptyObject);
          }
          function Component20(props, context, updater) {
            this.props = props;
            this.context = context;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          Component20.prototype.isReactComponent = {};
          Component20.prototype.setState = function(partialState, callback) {
            if (typeof partialState !== "object" && typeof partialState !== "function" && partialState != null) {
              throw new Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
            }
            this.updater.enqueueSetState(this, partialState, callback, "setState");
          };
          Component20.prototype.forceUpdate = function(callback) {
            this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
          };
          {
            var deprecatedAPIs = {
              isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
              replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
            };
            var defineDeprecationWarning = function(methodName, info2) {
              Object.defineProperty(Component20.prototype, methodName, {
                get: function() {
                  warn("%s(...) is deprecated in plain JavaScript React classes. %s", info2[0], info2[1]);
                  return void 0;
                }
              });
            };
            for (var fnName in deprecatedAPIs) {
              if (deprecatedAPIs.hasOwnProperty(fnName)) {
                defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
              }
            }
          }
          function ComponentDummy() {
          }
          ComponentDummy.prototype = Component20.prototype;
          function PureComponent(props, context, updater) {
            this.props = props;
            this.context = context;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
          pureComponentPrototype.constructor = PureComponent;
          assign(pureComponentPrototype, Component20.prototype);
          pureComponentPrototype.isPureReactComponent = true;
          function createRef15() {
            var refObject = {
              current: null
            };
            {
              Object.seal(refObject);
            }
            return refObject;
          }
          var isArrayImpl = Array.isArray;
          function isArray(a) {
            return isArrayImpl(a);
          }
          function typeName(value) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
              return type;
            }
          }
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e) {
                return true;
              }
            }
          }
          function testStringCoercion(value) {
            return "" + value;
          }
          function checkKeyStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromType(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          var hasOwnProperty = Object.prototype.hasOwnProperty;
          var RESERVED_PROPS = {
            key: true,
            ref: true,
            __self: true,
            __source: true
          };
          var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
          {
            didWarnAboutStringRefs = {};
          }
          function hasValidRef(config) {
            {
              if (hasOwnProperty.call(config, "ref")) {
                var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.ref !== void 0;
          }
          function hasValidKey(config) {
            {
              if (hasOwnProperty.call(config, "key")) {
                var getter = Object.getOwnPropertyDescriptor(config, "key").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.key !== void 0;
          }
          function defineKeyPropWarningGetter(props, displayName) {
            var warnAboutAccessingKey = function() {
              {
                if (!specialPropKeyWarningShown) {
                  specialPropKeyWarningShown = true;
                  error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            };
            warnAboutAccessingKey.isReactWarning = true;
            Object.defineProperty(props, "key", {
              get: warnAboutAccessingKey,
              configurable: true
            });
          }
          function defineRefPropWarningGetter(props, displayName) {
            var warnAboutAccessingRef = function() {
              {
                if (!specialPropRefWarningShown) {
                  specialPropRefWarningShown = true;
                  error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            };
            warnAboutAccessingRef.isReactWarning = true;
            Object.defineProperty(props, "ref", {
              get: warnAboutAccessingRef,
              configurable: true
            });
          }
          function warnIfStringRefCannotBeAutoConverted(config) {
            {
              if (typeof config.ref === "string" && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
                var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
                if (!didWarnAboutStringRefs[componentName]) {
                  error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
          }
          var ReactElement = function(type, key, ref, self2, source, owner, props) {
            var element = {
              // This tag allows us to uniquely identify this as a React Element
              $$typeof: REACT_ELEMENT_TYPE,
              // Built-in properties that belong on the element
              type,
              key,
              ref,
              props,
              // Record the component responsible for creating this element.
              _owner: owner
            };
            {
              element._store = {};
              Object.defineProperty(element._store, "validated", {
                configurable: false,
                enumerable: false,
                writable: true,
                value: false
              });
              Object.defineProperty(element, "_self", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: self2
              });
              Object.defineProperty(element, "_source", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: source
              });
              if (Object.freeze) {
                Object.freeze(element.props);
                Object.freeze(element);
              }
            }
            return element;
          };
          function createElement102(type, config, children) {
            var propName;
            var props = {};
            var key = null;
            var ref = null;
            var self2 = null;
            var source = null;
            if (config != null) {
              if (hasValidRef(config)) {
                ref = config.ref;
                {
                  warnIfStringRefCannotBeAutoConverted(config);
                }
              }
              if (hasValidKey(config)) {
                {
                  checkKeyStringCoercion(config.key);
                }
                key = "" + config.key;
              }
              self2 = config.__self === void 0 ? null : config.__self;
              source = config.__source === void 0 ? null : config.__source;
              for (propName in config) {
                if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  props[propName] = config[propName];
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i = 0; i < childrenLength; i++) {
                childArray[i] = arguments[i + 2];
              }
              {
                if (Object.freeze) {
                  Object.freeze(childArray);
                }
              }
              props.children = childArray;
            }
            if (type && type.defaultProps) {
              var defaultProps = type.defaultProps;
              for (propName in defaultProps) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps[propName];
                }
              }
            }
            {
              if (key || ref) {
                var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
                if (key) {
                  defineKeyPropWarningGetter(props, displayName);
                }
                if (ref) {
                  defineRefPropWarningGetter(props, displayName);
                }
              }
            }
            return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
          }
          function cloneAndReplaceKey(oldElement, newKey) {
            var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
            return newElement;
          }
          function cloneElement8(element, config, children) {
            if (element === null || element === void 0) {
              throw new Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
            }
            var propName;
            var props = assign({}, element.props);
            var key = element.key;
            var ref = element.ref;
            var self2 = element._self;
            var source = element._source;
            var owner = element._owner;
            if (config != null) {
              if (hasValidRef(config)) {
                ref = config.ref;
                owner = ReactCurrentOwner.current;
              }
              if (hasValidKey(config)) {
                {
                  checkKeyStringCoercion(config.key);
                }
                key = "" + config.key;
              }
              var defaultProps;
              if (element.type && element.type.defaultProps) {
                defaultProps = element.type.defaultProps;
              }
              for (propName in config) {
                if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  if (config[propName] === void 0 && defaultProps !== void 0) {
                    props[propName] = defaultProps[propName];
                  } else {
                    props[propName] = config[propName];
                  }
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i = 0; i < childrenLength; i++) {
                childArray[i] = arguments[i + 2];
              }
              props.children = childArray;
            }
            return ReactElement(element.type, key, ref, self2, source, owner, props);
          }
          function isValidElement8(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
          var SEPARATOR = ".";
          var SUBSEPARATOR = ":";
          function escape(key) {
            var escapeRegex = /[=:]/g;
            var escaperLookup = {
              "=": "=0",
              ":": "=2"
            };
            var escapedString = key.replace(escapeRegex, function(match) {
              return escaperLookup[match];
            });
            return "$" + escapedString;
          }
          var didWarnAboutMaps = false;
          var userProvidedKeyEscapeRegex = /\/+/g;
          function escapeUserProvidedKey(text) {
            return text.replace(userProvidedKeyEscapeRegex, "$&/");
          }
          function getElementKey(element, index) {
            if (typeof element === "object" && element !== null && element.key != null) {
              {
                checkKeyStringCoercion(element.key);
              }
              return escape("" + element.key);
            }
            return index.toString(36);
          }
          function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
            var type = typeof children;
            if (type === "undefined" || type === "boolean") {
              children = null;
            }
            var invokeCallback = false;
            if (children === null) {
              invokeCallback = true;
            } else {
              switch (type) {
                case "string":
                case "number":
                  invokeCallback = true;
                  break;
                case "object":
                  switch (children.$$typeof) {
                    case REACT_ELEMENT_TYPE:
                    case REACT_PORTAL_TYPE:
                      invokeCallback = true;
                  }
              }
            }
            if (invokeCallback) {
              var _child = children;
              var mappedChild = callback(_child);
              var childKey = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
              if (isArray(mappedChild)) {
                var escapedChildKey = "";
                if (childKey != null) {
                  escapedChildKey = escapeUserProvidedKey(childKey) + "/";
                }
                mapIntoArray(mappedChild, array, escapedChildKey, "", function(c) {
                  return c;
                });
              } else if (mappedChild != null) {
                if (isValidElement8(mappedChild)) {
                  {
                    if (mappedChild.key && (!_child || _child.key !== mappedChild.key)) {
                      checkKeyStringCoercion(mappedChild.key);
                    }
                  }
                  mappedChild = cloneAndReplaceKey(
                    mappedChild,
                    // Keep both the (mapped) and old keys if they differ, just as
                    // traverseAllChildren used to do for objects as children
                    escapedPrefix + // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key
                    (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? (
                      // $FlowFixMe Flow incorrectly thinks existing element's key can be a number
                      // eslint-disable-next-line react-internal/safe-string-coercion
                      escapeUserProvidedKey("" + mappedChild.key) + "/"
                    ) : "") + childKey
                  );
                }
                array.push(mappedChild);
              }
              return 1;
            }
            var child;
            var nextName;
            var subtreeCount = 0;
            var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
            if (isArray(children)) {
              for (var i = 0; i < children.length; i++) {
                child = children[i];
                nextName = nextNamePrefix + getElementKey(child, i);
                subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
              }
            } else {
              var iteratorFn = getIteratorFn(children);
              if (typeof iteratorFn === "function") {
                var iterableChildren = children;
                {
                  if (iteratorFn === iterableChildren.entries) {
                    if (!didWarnAboutMaps) {
                      warn("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                    }
                    didWarnAboutMaps = true;
                  }
                }
                var iterator = iteratorFn.call(iterableChildren);
                var step;
                var ii = 0;
                while (!(step = iterator.next()).done) {
                  child = step.value;
                  nextName = nextNamePrefix + getElementKey(child, ii++);
                  subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
                }
              } else if (type === "object") {
                var childrenString = String(children);
                throw new Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString) + "). If you meant to render a collection of children, use an array instead.");
              }
            }
            return subtreeCount;
          }
          function mapChildren(children, func, context) {
            if (children == null) {
              return children;
            }
            var result = [];
            var count = 0;
            mapIntoArray(children, result, "", "", function(child) {
              return func.call(context, child, count++);
            });
            return result;
          }
          function countChildren(children) {
            var n = 0;
            mapChildren(children, function() {
              n++;
            });
            return n;
          }
          function forEachChildren(children, forEachFunc, forEachContext) {
            mapChildren(children, function() {
              forEachFunc.apply(this, arguments);
            }, forEachContext);
          }
          function toArray(children) {
            return mapChildren(children, function(child) {
              return child;
            }) || [];
          }
          function onlyChild(children) {
            if (!isValidElement8(children)) {
              throw new Error("React.Children.only expected to receive a single React element child.");
            }
            return children;
          }
          function createContext15(defaultValue) {
            var context = {
              $$typeof: REACT_CONTEXT_TYPE,
              // As a workaround to support multiple concurrent renderers, we categorize
              // some renderers as primary and others as secondary. We only expect
              // there to be two concurrent renderers at most: React Native (primary) and
              // Fabric (secondary); React DOM (primary) and React ART (secondary).
              // Secondary renderers store their context values on separate fields.
              _currentValue: defaultValue,
              _currentValue2: defaultValue,
              // Used to track how many concurrent renderers this context currently
              // supports within in a single renderer. Such as parallel server rendering.
              _threadCount: 0,
              // These are circular
              Provider: null,
              Consumer: null,
              // Add these to use same hidden class in VM as ServerContext
              _defaultValue: null,
              _globalName: null
            };
            context.Provider = {
              $$typeof: REACT_PROVIDER_TYPE,
              _context: context
            };
            var hasWarnedAboutUsingNestedContextConsumers = false;
            var hasWarnedAboutUsingConsumerProvider = false;
            var hasWarnedAboutDisplayNameOnConsumer = false;
            {
              var Consumer = {
                $$typeof: REACT_CONTEXT_TYPE,
                _context: context
              };
              Object.defineProperties(Consumer, {
                Provider: {
                  get: function() {
                    if (!hasWarnedAboutUsingConsumerProvider) {
                      hasWarnedAboutUsingConsumerProvider = true;
                      error("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                    }
                    return context.Provider;
                  },
                  set: function(_Provider) {
                    context.Provider = _Provider;
                  }
                },
                _currentValue: {
                  get: function() {
                    return context._currentValue;
                  },
                  set: function(_currentValue) {
                    context._currentValue = _currentValue;
                  }
                },
                _currentValue2: {
                  get: function() {
                    return context._currentValue2;
                  },
                  set: function(_currentValue2) {
                    context._currentValue2 = _currentValue2;
                  }
                },
                _threadCount: {
                  get: function() {
                    return context._threadCount;
                  },
                  set: function(_threadCount) {
                    context._threadCount = _threadCount;
                  }
                },
                Consumer: {
                  get: function() {
                    if (!hasWarnedAboutUsingNestedContextConsumers) {
                      hasWarnedAboutUsingNestedContextConsumers = true;
                      error("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                    }
                    return context.Consumer;
                  }
                },
                displayName: {
                  get: function() {
                    return context.displayName;
                  },
                  set: function(displayName) {
                    if (!hasWarnedAboutDisplayNameOnConsumer) {
                      warn("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName);
                      hasWarnedAboutDisplayNameOnConsumer = true;
                    }
                  }
                }
              });
              context.Consumer = Consumer;
            }
            {
              context._currentRenderer = null;
              context._currentRenderer2 = null;
            }
            return context;
          }
          var Uninitialized = -1;
          var Pending = 0;
          var Resolved = 1;
          var Rejected = 2;
          function lazyInitializer(payload) {
            if (payload._status === Uninitialized) {
              var ctor = payload._result;
              var thenable = ctor();
              thenable.then(function(moduleObject2) {
                if (payload._status === Pending || payload._status === Uninitialized) {
                  var resolved = payload;
                  resolved._status = Resolved;
                  resolved._result = moduleObject2;
                }
              }, function(error2) {
                if (payload._status === Pending || payload._status === Uninitialized) {
                  var rejected = payload;
                  rejected._status = Rejected;
                  rejected._result = error2;
                }
              });
              if (payload._status === Uninitialized) {
                var pending = payload;
                pending._status = Pending;
                pending._result = thenable;
              }
            }
            if (payload._status === Resolved) {
              var moduleObject = payload._result;
              {
                if (moduleObject === void 0) {
                  error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))\n\nDid you accidentally put curly braces around the import?", moduleObject);
                }
              }
              {
                if (!("default" in moduleObject)) {
                  error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
                }
              }
              return moduleObject.default;
            } else {
              throw payload._result;
            }
          }
          function lazy(ctor) {
            var payload = {
              // We use these fields to store the result.
              _status: Uninitialized,
              _result: ctor
            };
            var lazyType = {
              $$typeof: REACT_LAZY_TYPE,
              _payload: payload,
              _init: lazyInitializer
            };
            {
              var defaultProps;
              var propTypes;
              Object.defineProperties(lazyType, {
                defaultProps: {
                  configurable: true,
                  get: function() {
                    return defaultProps;
                  },
                  set: function(newDefaultProps) {
                    error("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    defaultProps = newDefaultProps;
                    Object.defineProperty(lazyType, "defaultProps", {
                      enumerable: true
                    });
                  }
                },
                propTypes: {
                  configurable: true,
                  get: function() {
                    return propTypes;
                  },
                  set: function(newPropTypes) {
                    error("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    propTypes = newPropTypes;
                    Object.defineProperty(lazyType, "propTypes", {
                      enumerable: true
                    });
                  }
                }
              });
            }
            return lazyType;
          }
          function forwardRef26(render) {
            {
              if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
                error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
              } else if (typeof render !== "function") {
                error("forwardRef requires a render function but was given %s.", render === null ? "null" : typeof render);
              } else {
                if (render.length !== 0 && render.length !== 2) {
                  error("forwardRef render functions accept exactly two parameters: props and ref. %s", render.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
                }
              }
              if (render != null) {
                if (render.defaultProps != null || render.propTypes != null) {
                  error("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
                }
              }
            }
            var elementType = {
              $$typeof: REACT_FORWARD_REF_TYPE,
              render
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name) {
                  ownName = name;
                  if (!render.name && !render.displayName) {
                    render.displayName = name;
                  }
                }
              });
            }
            return elementType;
          }
          var REACT_MODULE_REFERENCE;
          {
            REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
          }
          function isValidElementType(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
              // types supported by any Flight configuration anywhere since
              // we don't know which Flight build this will end up being used
              // with.
              type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
                return true;
              }
            }
            return false;
          }
          function memo2(type, compare) {
            {
              if (!isValidElementType(type)) {
                error("memo: The first argument must be a component. Instead received: %s", type === null ? "null" : typeof type);
              }
            }
            var elementType = {
              $$typeof: REACT_MEMO_TYPE,
              type,
              compare: compare === void 0 ? null : compare
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name) {
                  ownName = name;
                  if (!type.name && !type.displayName) {
                    type.displayName = name;
                  }
                }
              });
            }
            return elementType;
          }
          function resolveDispatcher() {
            var dispatcher = ReactCurrentDispatcher.current;
            {
              if (dispatcher === null) {
                error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
              }
            }
            return dispatcher;
          }
          function useContext13(Context) {
            var dispatcher = resolveDispatcher();
            {
              if (Context._context !== void 0) {
                var realContext = Context._context;
                if (realContext.Consumer === Context) {
                  error("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
                } else if (realContext.Provider === Context) {
                  error("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
                }
              }
            }
            return dispatcher.useContext(Context);
          }
          function useState26(initialState) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useState(initialState);
          }
          function useReducer(reducer, initialArg, init) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useReducer(reducer, initialArg, init);
          }
          function useRef20(initialValue) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useRef(initialValue);
          }
          function useEffect28(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useEffect(create, deps);
          }
          function useInsertionEffect(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useInsertionEffect(create, deps);
          }
          function useLayoutEffect6(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useLayoutEffect(create, deps);
          }
          function useCallback6(callback, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useCallback(callback, deps);
          }
          function useMemo11(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useMemo(create, deps);
          }
          function useImperativeHandle2(ref, create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useImperativeHandle(ref, create, deps);
          }
          function useDebugValue(value, formatterFn) {
            {
              var dispatcher = resolveDispatcher();
              return dispatcher.useDebugValue(value, formatterFn);
            }
          }
          function useTransition() {
            var dispatcher = resolveDispatcher();
            return dispatcher.useTransition();
          }
          function useDeferredValue(value) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useDeferredValue(value);
          }
          function useId2() {
            var dispatcher = resolveDispatcher();
            return dispatcher.useId();
          }
          function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
          }
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign({}, props, {
                    value: prevLog
                  }),
                  info: assign({}, props, {
                    value: prevInfo
                  }),
                  warn: assign({}, props, {
                    value: prevWarn
                  }),
                  error: assign({}, props, {
                    value: prevError
                  }),
                  group: assign({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match = x.stack.trim().match(/\n( *(at )?)/);
                  prefix = match && match[1] || "";
                }
              }
              return "\n" + prefix + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                  c--;
                }
                for (; s >= 1 && c >= 0; s--, c--) {
                  if (sampleLines[s] !== controlLines[c]) {
                    if (s !== 1 || c !== 1) {
                      do {
                        s--;
                        c--;
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                          var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                          if (fn.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn.displayName);
                          }
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s >= 1 && c >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher$1.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component21) {
            var prototype = Component21.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x) {
                  }
                }
              }
            }
            return "";
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values, location, componentName, element) {
            {
              var has = Function.call.bind(hasOwnProperty);
              for (var typeSpecName in typeSpecs) {
                if (has(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          function setCurrentlyValidatingElement$1(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                setExtraStackFrame(stack);
              } else {
                setExtraStackFrame(null);
              }
            }
          }
          var propTypesMisspellWarningShown;
          {
            propTypesMisspellWarningShown = false;
          }
          function getDeclarationErrorAddendum() {
            if (ReactCurrentOwner.current) {
              var name = getComponentNameFromType(ReactCurrentOwner.current.type);
              if (name) {
                return "\n\nCheck the render method of `" + name + "`.";
              }
            }
            return "";
          }
          function getSourceInfoErrorAddendum(source) {
            if (source !== void 0) {
              var fileName = source.fileName.replace(/^.*[\\\/]/, "");
              var lineNumber = source.lineNumber;
              return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
            }
            return "";
          }
          function getSourceInfoErrorAddendumForProps(elementProps) {
            if (elementProps !== null && elementProps !== void 0) {
              return getSourceInfoErrorAddendum(elementProps.__source);
            }
            return "";
          }
          var ownerHasKeyUseWarning = {};
          function getCurrentComponentErrorInfo(parentType) {
            var info2 = getDeclarationErrorAddendum();
            if (!info2) {
              var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
              if (parentName) {
                info2 = "\n\nCheck the top-level render call using <" + parentName + ">.";
              }
            }
            return info2;
          }
          function validateExplicitKey(element, parentType) {
            if (!element._store || element._store.validated || element.key != null) {
              return;
            }
            element._store.validated = true;
            var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
            if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
              return;
            }
            ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
            var childOwner = "";
            if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
              childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
            }
            {
              setCurrentlyValidatingElement$1(element);
              error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
              setCurrentlyValidatingElement$1(null);
            }
          }
          function validateChildKeys(node, parentType) {
            if (typeof node !== "object") {
              return;
            }
            if (isArray(node)) {
              for (var i = 0; i < node.length; i++) {
                var child = node[i];
                if (isValidElement8(child)) {
                  validateExplicitKey(child, parentType);
                }
              }
            } else if (isValidElement8(node)) {
              if (node._store) {
                node._store.validated = true;
              }
            } else if (node) {
              var iteratorFn = getIteratorFn(node);
              if (typeof iteratorFn === "function") {
                if (iteratorFn !== node.entries) {
                  var iterator = iteratorFn.call(node);
                  var step;
                  while (!(step = iterator.next()).done) {
                    if (isValidElement8(step.value)) {
                      validateExplicitKey(step.value, parentType);
                    }
                  }
                }
              }
            }
          }
          function validatePropTypes(element) {
            {
              var type = element.type;
              if (type === null || type === void 0 || typeof type === "string") {
                return;
              }
              var propTypes;
              if (typeof type === "function") {
                propTypes = type.propTypes;
              } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
              // Inner props are checked in the reconciler.
              type.$$typeof === REACT_MEMO_TYPE)) {
                propTypes = type.propTypes;
              } else {
                return;
              }
              if (propTypes) {
                var name = getComponentNameFromType(type);
                checkPropTypes(propTypes, element.props, "prop", name, element);
              } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
                propTypesMisspellWarningShown = true;
                var _name = getComponentNameFromType(type);
                error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
              }
              if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
              }
            }
          }
          function validateFragmentProps(fragment) {
            {
              var keys = Object.keys(fragment.props);
              for (var i = 0; i < keys.length; i++) {
                var key = keys[i];
                if (key !== "children" && key !== "key") {
                  setCurrentlyValidatingElement$1(fragment);
                  error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                  setCurrentlyValidatingElement$1(null);
                  break;
                }
              }
              if (fragment.ref !== null) {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid attribute `ref` supplied to `React.Fragment`.");
                setCurrentlyValidatingElement$1(null);
              }
            }
          }
          function createElementWithValidation(type, props, children) {
            var validType = isValidElementType(type);
            if (!validType) {
              var info2 = "";
              if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                info2 += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
              }
              var sourceInfo = getSourceInfoErrorAddendumForProps(props);
              if (sourceInfo) {
                info2 += sourceInfo;
              } else {
                info2 += getDeclarationErrorAddendum();
              }
              var typeString;
              if (type === null) {
                typeString = "null";
              } else if (isArray(type)) {
                typeString = "array";
              } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
                typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
                info2 = " Did you accidentally export a JSX literal instead of a component?";
              } else {
                typeString = typeof type;
              }
              {
                error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info2);
              }
            }
            var element = createElement102.apply(this, arguments);
            if (element == null) {
              return element;
            }
            if (validType) {
              for (var i = 2; i < arguments.length; i++) {
                validateChildKeys(arguments[i], type);
              }
            }
            if (type === REACT_FRAGMENT_TYPE) {
              validateFragmentProps(element);
            } else {
              validatePropTypes(element);
            }
            return element;
          }
          var didWarnAboutDeprecatedCreateFactory = false;
          function createFactoryWithValidation(type) {
            var validatedFactory = createElementWithValidation.bind(null, type);
            validatedFactory.type = type;
            {
              if (!didWarnAboutDeprecatedCreateFactory) {
                didWarnAboutDeprecatedCreateFactory = true;
                warn("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
              }
              Object.defineProperty(validatedFactory, "type", {
                enumerable: false,
                get: function() {
                  warn("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
                  Object.defineProperty(this, "type", {
                    value: type
                  });
                  return type;
                }
              });
            }
            return validatedFactory;
          }
          function cloneElementWithValidation(element, props, children) {
            var newElement = cloneElement8.apply(this, arguments);
            for (var i = 2; i < arguments.length; i++) {
              validateChildKeys(arguments[i], newElement.type);
            }
            validatePropTypes(newElement);
            return newElement;
          }
          function startTransition3(scope, options) {
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = {};
            var currentTransition = ReactCurrentBatchConfig.transition;
            {
              ReactCurrentBatchConfig.transition._updatedFibers = /* @__PURE__ */ new Set();
            }
            try {
              scope();
            } finally {
              ReactCurrentBatchConfig.transition = prevTransition;
              {
                if (prevTransition === null && currentTransition._updatedFibers) {
                  var updatedFibersCount = currentTransition._updatedFibers.size;
                  if (updatedFibersCount > 10) {
                    warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                  }
                  currentTransition._updatedFibers.clear();
                }
              }
            }
          }
          var didWarnAboutMessageChannel = false;
          var enqueueTaskImpl = null;
          function enqueueTask(task) {
            if (enqueueTaskImpl === null) {
              try {
                var requireString = ("require" + Math.random()).slice(0, 7);
                var nodeRequire = module && module[requireString];
                enqueueTaskImpl = nodeRequire.call(module, "timers").setImmediate;
              } catch (_err) {
                enqueueTaskImpl = function(callback) {
                  {
                    if (didWarnAboutMessageChannel === false) {
                      didWarnAboutMessageChannel = true;
                      if (typeof MessageChannel === "undefined") {
                        error("This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning.");
                      }
                    }
                  }
                  var channel = new MessageChannel();
                  channel.port1.onmessage = callback;
                  channel.port2.postMessage(void 0);
                };
              }
            }
            return enqueueTaskImpl(task);
          }
          var actScopeDepth = 0;
          var didWarnNoAwaitAct = false;
          function act(callback) {
            {
              var prevActScopeDepth = actScopeDepth;
              actScopeDepth++;
              if (ReactCurrentActQueue.current === null) {
                ReactCurrentActQueue.current = [];
              }
              var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy;
              var result;
              try {
                ReactCurrentActQueue.isBatchingLegacy = true;
                result = callback();
                if (!prevIsBatchingLegacy && ReactCurrentActQueue.didScheduleLegacyUpdate) {
                  var queue = ReactCurrentActQueue.current;
                  if (queue !== null) {
                    ReactCurrentActQueue.didScheduleLegacyUpdate = false;
                    flushActQueue(queue);
                  }
                }
              } catch (error2) {
                popActScope(prevActScopeDepth);
                throw error2;
              } finally {
                ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;
              }
              if (result !== null && typeof result === "object" && typeof result.then === "function") {
                var thenableResult = result;
                var wasAwaited = false;
                var thenable = {
                  then: function(resolve, reject) {
                    wasAwaited = true;
                    thenableResult.then(function(returnValue2) {
                      popActScope(prevActScopeDepth);
                      if (actScopeDepth === 0) {
                        recursivelyFlushAsyncActWork(returnValue2, resolve, reject);
                      } else {
                        resolve(returnValue2);
                      }
                    }, function(error2) {
                      popActScope(prevActScopeDepth);
                      reject(error2);
                    });
                  }
                };
                {
                  if (!didWarnNoAwaitAct && typeof Promise !== "undefined") {
                    Promise.resolve().then(function() {
                    }).then(function() {
                      if (!wasAwaited) {
                        didWarnNoAwaitAct = true;
                        error("You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);");
                      }
                    });
                  }
                }
                return thenable;
              } else {
                var returnValue = result;
                popActScope(prevActScopeDepth);
                if (actScopeDepth === 0) {
                  var _queue2 = ReactCurrentActQueue.current;
                  if (_queue2 !== null) {
                    flushActQueue(_queue2);
                    ReactCurrentActQueue.current = null;
                  }
                  var _thenable = {
                    then: function(resolve, reject) {
                      if (ReactCurrentActQueue.current === null) {
                        ReactCurrentActQueue.current = [];
                        recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                      } else {
                        resolve(returnValue);
                      }
                    }
                  };
                  return _thenable;
                } else {
                  var _thenable2 = {
                    then: function(resolve, reject) {
                      resolve(returnValue);
                    }
                  };
                  return _thenable2;
                }
              }
            }
          }
          function popActScope(prevActScopeDepth) {
            {
              if (prevActScopeDepth !== actScopeDepth - 1) {
                error("You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. ");
              }
              actScopeDepth = prevActScopeDepth;
            }
          }
          function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {
            {
              var queue = ReactCurrentActQueue.current;
              if (queue !== null) {
                try {
                  flushActQueue(queue);
                  enqueueTask(function() {
                    if (queue.length === 0) {
                      ReactCurrentActQueue.current = null;
                      resolve(returnValue);
                    } else {
                      recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                    }
                  });
                } catch (error2) {
                  reject(error2);
                }
              } else {
                resolve(returnValue);
              }
            }
          }
          var isFlushing = false;
          function flushActQueue(queue) {
            {
              if (!isFlushing) {
                isFlushing = true;
                var i = 0;
                try {
                  for (; i < queue.length; i++) {
                    var callback = queue[i];
                    do {
                      callback = callback(true);
                    } while (callback !== null);
                  }
                  queue.length = 0;
                } catch (error2) {
                  queue = queue.slice(i + 1);
                  throw error2;
                } finally {
                  isFlushing = false;
                }
              }
            }
          }
          var createElement$1 = createElementWithValidation;
          var cloneElement$1 = cloneElementWithValidation;
          var createFactory = createFactoryWithValidation;
          var Children2 = {
            map: mapChildren,
            forEach: forEachChildren,
            count: countChildren,
            toArray,
            only: onlyChild
          };
          exports.Children = Children2;
          exports.Component = Component20;
          exports.Fragment = REACT_FRAGMENT_TYPE;
          exports.Profiler = REACT_PROFILER_TYPE;
          exports.PureComponent = PureComponent;
          exports.StrictMode = REACT_STRICT_MODE_TYPE;
          exports.Suspense = REACT_SUSPENSE_TYPE;
          exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
          exports.act = act;
          exports.cloneElement = cloneElement$1;
          exports.createContext = createContext15;
          exports.createElement = createElement$1;
          exports.createFactory = createFactory;
          exports.createRef = createRef15;
          exports.forwardRef = forwardRef26;
          exports.isValidElement = isValidElement8;
          exports.lazy = lazy;
          exports.memo = memo2;
          exports.startTransition = startTransition3;
          exports.unstable_act = act;
          exports.useCallback = useCallback6;
          exports.useContext = useContext13;
          exports.useDebugValue = useDebugValue;
          exports.useDeferredValue = useDeferredValue;
          exports.useEffect = useEffect28;
          exports.useId = useId2;
          exports.useImperativeHandle = useImperativeHandle2;
          exports.useInsertionEffect = useInsertionEffect;
          exports.useLayoutEffect = useLayoutEffect6;
          exports.useMemo = useMemo11;
          exports.useReducer = useReducer;
          exports.useRef = useRef20;
          exports.useState = useState26;
          exports.useSyncExternalStore = useSyncExternalStore;
          exports.useTransition = useTransition;
          exports.version = ReactVersion;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // node_modules/react/index.js
  var require_react = __commonJS({
    "node_modules/react/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_development();
      }
    }
  });

  // node_modules/scheduler/cjs/scheduler.development.js
  var require_scheduler_development = __commonJS({
    "node_modules/scheduler/cjs/scheduler.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var enableSchedulerDebugging = false;
          var enableProfiling = false;
          var frameYieldMs = 5;
          function push(heap, node) {
            var index = heap.length;
            heap.push(node);
            siftUp(heap, node, index);
          }
          function peek(heap) {
            return heap.length === 0 ? null : heap[0];
          }
          function pop(heap) {
            if (heap.length === 0) {
              return null;
            }
            var first = heap[0];
            var last = heap.pop();
            if (last !== first) {
              heap[0] = last;
              siftDown(heap, last, 0);
            }
            return first;
          }
          function siftUp(heap, node, i) {
            var index = i;
            while (index > 0) {
              var parentIndex = index - 1 >>> 1;
              var parent2 = heap[parentIndex];
              if (compare(parent2, node) > 0) {
                heap[parentIndex] = node;
                heap[index] = parent2;
                index = parentIndex;
              } else {
                return;
              }
            }
          }
          function siftDown(heap, node, i) {
            var index = i;
            var length = heap.length;
            var halfLength = length >>> 1;
            while (index < halfLength) {
              var leftIndex = (index + 1) * 2 - 1;
              var left3 = heap[leftIndex];
              var rightIndex = leftIndex + 1;
              var right3 = heap[rightIndex];
              if (compare(left3, node) < 0) {
                if (rightIndex < length && compare(right3, left3) < 0) {
                  heap[index] = right3;
                  heap[rightIndex] = node;
                  index = rightIndex;
                } else {
                  heap[index] = left3;
                  heap[leftIndex] = node;
                  index = leftIndex;
                }
              } else if (rightIndex < length && compare(right3, node) < 0) {
                heap[index] = right3;
                heap[rightIndex] = node;
                index = rightIndex;
              } else {
                return;
              }
            }
          }
          function compare(a, b) {
            var diff = a.sortIndex - b.sortIndex;
            return diff !== 0 ? diff : a.id - b.id;
          }
          var ImmediatePriority = 1;
          var UserBlockingPriority = 2;
          var NormalPriority = 3;
          var LowPriority = 4;
          var IdlePriority = 5;
          function markTaskErrored(task, ms) {
          }
          var hasPerformanceNow = typeof performance === "object" && typeof performance.now === "function";
          if (hasPerformanceNow) {
            var localPerformance = performance;
            exports.unstable_now = function() {
              return localPerformance.now();
            };
          } else {
            var localDate = Date;
            var initialTime = localDate.now();
            exports.unstable_now = function() {
              return localDate.now() - initialTime;
            };
          }
          var maxSigned31BitInt = 1073741823;
          var IMMEDIATE_PRIORITY_TIMEOUT = -1;
          var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
          var NORMAL_PRIORITY_TIMEOUT = 5e3;
          var LOW_PRIORITY_TIMEOUT = 1e4;
          var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;
          var taskQueue = [];
          var timerQueue = [];
          var taskIdCounter = 1;
          var currentTask = null;
          var currentPriorityLevel = NormalPriority;
          var isPerformingWork = false;
          var isHostCallbackScheduled = false;
          var isHostTimeoutScheduled = false;
          var localSetTimeout = typeof setTimeout === "function" ? setTimeout : null;
          var localClearTimeout = typeof clearTimeout === "function" ? clearTimeout : null;
          var localSetImmediate = typeof setImmediate !== "undefined" ? setImmediate : null;
          var isInputPending = typeof navigator !== "undefined" && navigator.scheduling !== void 0 && navigator.scheduling.isInputPending !== void 0 ? navigator.scheduling.isInputPending.bind(navigator.scheduling) : null;
          function advanceTimers(currentTime) {
            var timer = peek(timerQueue);
            while (timer !== null) {
              if (timer.callback === null) {
                pop(timerQueue);
              } else if (timer.startTime <= currentTime) {
                pop(timerQueue);
                timer.sortIndex = timer.expirationTime;
                push(taskQueue, timer);
              } else {
                return;
              }
              timer = peek(timerQueue);
            }
          }
          function handleTimeout(currentTime) {
            isHostTimeoutScheduled = false;
            advanceTimers(currentTime);
            if (!isHostCallbackScheduled) {
              if (peek(taskQueue) !== null) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              } else {
                var firstTimer = peek(timerQueue);
                if (firstTimer !== null) {
                  requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
                }
              }
            }
          }
          function flushWork(hasTimeRemaining, initialTime2) {
            isHostCallbackScheduled = false;
            if (isHostTimeoutScheduled) {
              isHostTimeoutScheduled = false;
              cancelHostTimeout();
            }
            isPerformingWork = true;
            var previousPriorityLevel = currentPriorityLevel;
            try {
              if (enableProfiling) {
                try {
                  return workLoop(hasTimeRemaining, initialTime2);
                } catch (error) {
                  if (currentTask !== null) {
                    var currentTime = exports.unstable_now();
                    markTaskErrored(currentTask, currentTime);
                    currentTask.isQueued = false;
                  }
                  throw error;
                }
              } else {
                return workLoop(hasTimeRemaining, initialTime2);
              }
            } finally {
              currentTask = null;
              currentPriorityLevel = previousPriorityLevel;
              isPerformingWork = false;
            }
          }
          function workLoop(hasTimeRemaining, initialTime2) {
            var currentTime = initialTime2;
            advanceTimers(currentTime);
            currentTask = peek(taskQueue);
            while (currentTask !== null && !enableSchedulerDebugging) {
              if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {
                break;
              }
              var callback = currentTask.callback;
              if (typeof callback === "function") {
                currentTask.callback = null;
                currentPriorityLevel = currentTask.priorityLevel;
                var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
                var continuationCallback = callback(didUserCallbackTimeout);
                currentTime = exports.unstable_now();
                if (typeof continuationCallback === "function") {
                  currentTask.callback = continuationCallback;
                } else {
                  if (currentTask === peek(taskQueue)) {
                    pop(taskQueue);
                  }
                }
                advanceTimers(currentTime);
              } else {
                pop(taskQueue);
              }
              currentTask = peek(taskQueue);
            }
            if (currentTask !== null) {
              return true;
            } else {
              var firstTimer = peek(timerQueue);
              if (firstTimer !== null) {
                requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
              }
              return false;
            }
          }
          function unstable_runWithPriority(priorityLevel, eventHandler) {
            switch (priorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
              case LowPriority:
              case IdlePriority:
                break;
              default:
                priorityLevel = NormalPriority;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_next(eventHandler) {
            var priorityLevel;
            switch (currentPriorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
                priorityLevel = NormalPriority;
                break;
              default:
                priorityLevel = currentPriorityLevel;
                break;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_wrapCallback(callback) {
            var parentPriorityLevel = currentPriorityLevel;
            return function() {
              var previousPriorityLevel = currentPriorityLevel;
              currentPriorityLevel = parentPriorityLevel;
              try {
                return callback.apply(this, arguments);
              } finally {
                currentPriorityLevel = previousPriorityLevel;
              }
            };
          }
          function unstable_scheduleCallback(priorityLevel, callback, options) {
            var currentTime = exports.unstable_now();
            var startTime2;
            if (typeof options === "object" && options !== null) {
              var delay3 = options.delay;
              if (typeof delay3 === "number" && delay3 > 0) {
                startTime2 = currentTime + delay3;
              } else {
                startTime2 = currentTime;
              }
            } else {
              startTime2 = currentTime;
            }
            var timeout;
            switch (priorityLevel) {
              case ImmediatePriority:
                timeout = IMMEDIATE_PRIORITY_TIMEOUT;
                break;
              case UserBlockingPriority:
                timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
                break;
              case IdlePriority:
                timeout = IDLE_PRIORITY_TIMEOUT;
                break;
              case LowPriority:
                timeout = LOW_PRIORITY_TIMEOUT;
                break;
              case NormalPriority:
              default:
                timeout = NORMAL_PRIORITY_TIMEOUT;
                break;
            }
            var expirationTime = startTime2 + timeout;
            var newTask = {
              id: taskIdCounter++,
              callback,
              priorityLevel,
              startTime: startTime2,
              expirationTime,
              sortIndex: -1
            };
            if (startTime2 > currentTime) {
              newTask.sortIndex = startTime2;
              push(timerQueue, newTask);
              if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
                if (isHostTimeoutScheduled) {
                  cancelHostTimeout();
                } else {
                  isHostTimeoutScheduled = true;
                }
                requestHostTimeout(handleTimeout, startTime2 - currentTime);
              }
            } else {
              newTask.sortIndex = expirationTime;
              push(taskQueue, newTask);
              if (!isHostCallbackScheduled && !isPerformingWork) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              }
            }
            return newTask;
          }
          function unstable_pauseExecution() {
          }
          function unstable_continueExecution() {
            if (!isHostCallbackScheduled && !isPerformingWork) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            }
          }
          function unstable_getFirstCallbackNode() {
            return peek(taskQueue);
          }
          function unstable_cancelCallback(task) {
            task.callback = null;
          }
          function unstable_getCurrentPriorityLevel() {
            return currentPriorityLevel;
          }
          var isMessageLoopRunning = false;
          var scheduledHostCallback = null;
          var taskTimeoutID = -1;
          var frameInterval = frameYieldMs;
          var startTime = -1;
          function shouldYieldToHost() {
            var timeElapsed = exports.unstable_now() - startTime;
            if (timeElapsed < frameInterval) {
              return false;
            }
            return true;
          }
          function requestPaint() {
          }
          function forceFrameRate(fps) {
            if (fps < 0 || fps > 125) {
              console["error"]("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
              return;
            }
            if (fps > 0) {
              frameInterval = Math.floor(1e3 / fps);
            } else {
              frameInterval = frameYieldMs;
            }
          }
          var performWorkUntilDeadline = function() {
            if (scheduledHostCallback !== null) {
              var currentTime = exports.unstable_now();
              startTime = currentTime;
              var hasTimeRemaining = true;
              var hasMoreWork = true;
              try {
                hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
              } finally {
                if (hasMoreWork) {
                  schedulePerformWorkUntilDeadline();
                } else {
                  isMessageLoopRunning = false;
                  scheduledHostCallback = null;
                }
              }
            } else {
              isMessageLoopRunning = false;
            }
          };
          var schedulePerformWorkUntilDeadline;
          if (typeof localSetImmediate === "function") {
            schedulePerformWorkUntilDeadline = function() {
              localSetImmediate(performWorkUntilDeadline);
            };
          } else if (typeof MessageChannel !== "undefined") {
            var channel = new MessageChannel();
            var port = channel.port2;
            channel.port1.onmessage = performWorkUntilDeadline;
            schedulePerformWorkUntilDeadline = function() {
              port.postMessage(null);
            };
          } else {
            schedulePerformWorkUntilDeadline = function() {
              localSetTimeout(performWorkUntilDeadline, 0);
            };
          }
          function requestHostCallback(callback) {
            scheduledHostCallback = callback;
            if (!isMessageLoopRunning) {
              isMessageLoopRunning = true;
              schedulePerformWorkUntilDeadline();
            }
          }
          function requestHostTimeout(callback, ms) {
            taskTimeoutID = localSetTimeout(function() {
              callback(exports.unstable_now());
            }, ms);
          }
          function cancelHostTimeout() {
            localClearTimeout(taskTimeoutID);
            taskTimeoutID = -1;
          }
          var unstable_requestPaint = requestPaint;
          var unstable_Profiling = null;
          exports.unstable_IdlePriority = IdlePriority;
          exports.unstable_ImmediatePriority = ImmediatePriority;
          exports.unstable_LowPriority = LowPriority;
          exports.unstable_NormalPriority = NormalPriority;
          exports.unstable_Profiling = unstable_Profiling;
          exports.unstable_UserBlockingPriority = UserBlockingPriority;
          exports.unstable_cancelCallback = unstable_cancelCallback;
          exports.unstable_continueExecution = unstable_continueExecution;
          exports.unstable_forceFrameRate = forceFrameRate;
          exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
          exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
          exports.unstable_next = unstable_next;
          exports.unstable_pauseExecution = unstable_pauseExecution;
          exports.unstable_requestPaint = unstable_requestPaint;
          exports.unstable_runWithPriority = unstable_runWithPriority;
          exports.unstable_scheduleCallback = unstable_scheduleCallback;
          exports.unstable_shouldYield = shouldYieldToHost;
          exports.unstable_wrapCallback = unstable_wrapCallback;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // node_modules/scheduler/index.js
  var require_scheduler = __commonJS({
    "node_modules/scheduler/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_scheduler_development();
      }
    }
  });

  // node_modules/react-dom/cjs/react-dom.development.js
  var require_react_dom_development = __commonJS({
    "node_modules/react-dom/cjs/react-dom.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var React128 = require_react();
          var Scheduler = require_scheduler();
          var ReactSharedInternals = React128.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
          var suppressWarning = false;
          function setSuppressWarning(newSuppressWarning) {
            {
              suppressWarning = newSuppressWarning;
            }
          }
          function warn(format) {
            {
              if (!suppressWarning) {
                for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  args[_key - 1] = arguments[_key];
                }
                printWarning("warn", format, args);
              }
            }
          }
          function error(format) {
            {
              if (!suppressWarning) {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format, args);
              }
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var FunctionComponent = 0;
          var ClassComponent = 1;
          var IndeterminateComponent = 2;
          var HostRoot = 3;
          var HostPortal = 4;
          var HostComponent = 5;
          var HostText = 6;
          var Fragment27 = 7;
          var Mode = 8;
          var ContextConsumer = 9;
          var ContextProvider = 10;
          var ForwardRef = 11;
          var Profiler = 12;
          var SuspenseComponent = 13;
          var MemoComponent = 14;
          var SimpleMemoComponent = 15;
          var LazyComponent = 16;
          var IncompleteClassComponent = 17;
          var DehydratedFragment = 18;
          var SuspenseListComponent = 19;
          var ScopeComponent = 21;
          var OffscreenComponent = 22;
          var LegacyHiddenComponent = 23;
          var CacheComponent = 24;
          var TracingMarkerComponent = 25;
          var enableClientRenderFallbackOnTextMismatch = true;
          var enableNewReconciler = false;
          var enableLazyContextPropagation = false;
          var enableLegacyHidden = false;
          var enableSuspenseAvoidThisFallback = false;
          var disableCommentsAsDOMContainers = true;
          var enableCustomElementPropertySupport = false;
          var warnAboutStringRefs = true;
          var enableSchedulingProfiler = true;
          var enableProfilerTimer = true;
          var enableProfilerCommitHooks = true;
          var allNativeEvents = /* @__PURE__ */ new Set();
          var registrationNameDependencies = {};
          var possibleRegistrationNames = {};
          function registerTwoPhaseEvent(registrationName, dependencies) {
            registerDirectEvent(registrationName, dependencies);
            registerDirectEvent(registrationName + "Capture", dependencies);
          }
          function registerDirectEvent(registrationName, dependencies) {
            {
              if (registrationNameDependencies[registrationName]) {
                error("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
              }
            }
            registrationNameDependencies[registrationName] = dependencies;
            {
              var lowerCasedName = registrationName.toLowerCase();
              possibleRegistrationNames[lowerCasedName] = registrationName;
              if (registrationName === "onDoubleClick") {
                possibleRegistrationNames.ondblclick = registrationName;
              }
            }
            for (var i = 0; i < dependencies.length; i++) {
              allNativeEvents.add(dependencies[i]);
            }
          }
          var canUseDOM3 = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
          var hasOwnProperty = Object.prototype.hasOwnProperty;
          function typeName(value) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
              return type;
            }
          }
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e) {
                return true;
              }
            }
          }
          function testStringCoercion(value) {
            return "" + value;
          }
          function checkAttributeStringCoercion(value, attributeName) {
            {
              if (willCoercionThrow(value)) {
                error("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before before using it here.", attributeName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkKeyStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkPropStringCoercion(value, propName) {
            {
              if (willCoercionThrow(value)) {
                error("The provided `%s` prop is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkCSSPropertyStringCoercion(value, propName) {
            {
              if (willCoercionThrow(value)) {
                error("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkHtmlStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkFormFieldValueStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("Form field values (value, checked, defaultValue, or defaultChecked props) must be strings, not %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          var RESERVED = 0;
          var STRING = 1;
          var BOOLEANISH_STRING = 2;
          var BOOLEAN = 3;
          var OVERLOADED_BOOLEAN = 4;
          var NUMERIC = 5;
          var POSITIVE_NUMERIC = 6;
          var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
          var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
          var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
          var illegalAttributeNameCache = {};
          var validatedAttributeNameCache = {};
          function isAttributeNameSafe(attributeName) {
            if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
              return true;
            }
            if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
              return false;
            }
            if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
              validatedAttributeNameCache[attributeName] = true;
              return true;
            }
            illegalAttributeNameCache[attributeName] = true;
            {
              error("Invalid attribute name: `%s`", attributeName);
            }
            return false;
          }
          function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null) {
              return propertyInfo.type === RESERVED;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N")) {
              return true;
            }
            return false;
          }
          function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null && propertyInfo.type === RESERVED) {
              return false;
            }
            switch (typeof value) {
              case "function":
              // $FlowIssue symbol is perfectly valid here
              case "symbol":
                return true;
              case "boolean": {
                if (isCustomComponentTag) {
                  return false;
                }
                if (propertyInfo !== null) {
                  return !propertyInfo.acceptsBooleans;
                } else {
                  var prefix2 = name.toLowerCase().slice(0, 5);
                  return prefix2 !== "data-" && prefix2 !== "aria-";
                }
              }
              default:
                return false;
            }
          }
          function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
            if (value === null || typeof value === "undefined") {
              return true;
            }
            if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
              return true;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (propertyInfo !== null) {
              switch (propertyInfo.type) {
                case BOOLEAN:
                  return !value;
                case OVERLOADED_BOOLEAN:
                  return value === false;
                case NUMERIC:
                  return isNaN(value);
                case POSITIVE_NUMERIC:
                  return isNaN(value) || value < 1;
              }
            }
            return false;
          }
          function getPropertyInfo(name) {
            return properties.hasOwnProperty(name) ? properties[name] : null;
          }
          function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
            this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
            this.attributeName = attributeName;
            this.attributeNamespace = attributeNamespace;
            this.mustUseProperty = mustUseProperty;
            this.propertyName = name;
            this.type = type;
            this.sanitizeURL = sanitizeURL2;
            this.removeEmptyString = removeEmptyString;
          }
          var properties = {};
          var reservedProps = [
            "children",
            "dangerouslySetInnerHTML",
            // TODO: This prevents the assignment of defaultValue to regular
            // elements (not just inputs). Now that ReactDOMInput assigns to the
            // defaultValue property -- do we need this?
            "defaultValue",
            "defaultChecked",
            "innerHTML",
            "suppressContentEditableWarning",
            "suppressHydrationWarning",
            "style"
          ];
          reservedProps.forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              RESERVED,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref) {
            var name = _ref[0], attributeName = _ref[1];
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEANISH_STRING,
              false,
              // mustUseProperty
              name.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEANISH_STRING,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "allowFullScreen",
            "async",
            // Note: there is a special case that prevents it from being written to the DOM
            // on the client side because the browsers are inconsistent. Instead we call focus().
            "autoFocus",
            "autoPlay",
            "controls",
            "default",
            "defer",
            "disabled",
            "disablePictureInPicture",
            "disableRemotePlayback",
            "formNoValidate",
            "hidden",
            "loop",
            "noModule",
            "noValidate",
            "open",
            "playsInline",
            "readOnly",
            "required",
            "reversed",
            "scoped",
            "seamless",
            // Microdata
            "itemScope"
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEAN,
              false,
              // mustUseProperty
              name.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "checked",
            // Note: `option.selected` is not updated if `select.multiple` is
            // disabled with `removeAttribute`. We have special logic for handling this.
            "multiple",
            "muted",
            "selected"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEAN,
              true,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "capture",
            "download"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              OVERLOADED_BOOLEAN,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "cols",
            "rows",
            "size",
            "span"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              POSITIVE_NUMERIC,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          ["rowSpan", "start"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              NUMERIC,
              false,
              // mustUseProperty
              name.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          var CAMELIZE = /[\-\:]([a-z])/g;
          var capitalize3 = function(token) {
            return token[1].toUpperCase();
          };
          [
            "accent-height",
            "alignment-baseline",
            "arabic-form",
            "baseline-shift",
            "cap-height",
            "clip-path",
            "clip-rule",
            "color-interpolation",
            "color-interpolation-filters",
            "color-profile",
            "color-rendering",
            "dominant-baseline",
            "enable-background",
            "fill-opacity",
            "fill-rule",
            "flood-color",
            "flood-opacity",
            "font-family",
            "font-size",
            "font-size-adjust",
            "font-stretch",
            "font-style",
            "font-variant",
            "font-weight",
            "glyph-name",
            "glyph-orientation-horizontal",
            "glyph-orientation-vertical",
            "horiz-adv-x",
            "horiz-origin-x",
            "image-rendering",
            "letter-spacing",
            "lighting-color",
            "marker-end",
            "marker-mid",
            "marker-start",
            "overline-position",
            "overline-thickness",
            "paint-order",
            "panose-1",
            "pointer-events",
            "rendering-intent",
            "shape-rendering",
            "stop-color",
            "stop-opacity",
            "strikethrough-position",
            "strikethrough-thickness",
            "stroke-dasharray",
            "stroke-dashoffset",
            "stroke-linecap",
            "stroke-linejoin",
            "stroke-miterlimit",
            "stroke-opacity",
            "stroke-width",
            "text-anchor",
            "text-decoration",
            "text-rendering",
            "underline-position",
            "underline-thickness",
            "unicode-bidi",
            "unicode-range",
            "units-per-em",
            "v-alphabetic",
            "v-hanging",
            "v-ideographic",
            "v-mathematical",
            "vector-effect",
            "vert-adv-y",
            "vert-origin-x",
            "vert-origin-y",
            "word-spacing",
            "writing-mode",
            "xmlns:xlink",
            "x-height"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize3);
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "xlink:actuate",
            "xlink:arcrole",
            "xlink:role",
            "xlink:show",
            "xlink:title",
            "xlink:type"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize3);
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              "http://www.w3.org/1999/xlink",
              false,
              // sanitizeURL
              false
            );
          });
          [
            "xml:base",
            "xml:lang",
            "xml:space"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize3);
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              "http://www.w3.org/XML/1998/namespace",
              false,
              // sanitizeURL
              false
            );
          });
          ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
            properties[attributeName] = new PropertyInfoRecord(
              attributeName,
              STRING,
              false,
              // mustUseProperty
              attributeName.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          var xlinkHref = "xlinkHref";
          properties[xlinkHref] = new PropertyInfoRecord(
            "xlinkHref",
            STRING,
            false,
            // mustUseProperty
            "xlink:href",
            "http://www.w3.org/1999/xlink",
            true,
            // sanitizeURL
            false
          );
          ["src", "href", "action", "formAction"].forEach(function(attributeName) {
            properties[attributeName] = new PropertyInfoRecord(
              attributeName,
              STRING,
              false,
              // mustUseProperty
              attributeName.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              true,
              // sanitizeURL
              true
            );
          });
          var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
          var didWarn = false;
          function sanitizeURL(url) {
            {
              if (!didWarn && isJavaScriptProtocol.test(url)) {
                didWarn = true;
                error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url));
              }
            }
          }
          function getValueForProperty(node, name, expected, propertyInfo) {
            {
              if (propertyInfo.mustUseProperty) {
                var propertyName = propertyInfo.propertyName;
                return node[propertyName];
              } else {
                {
                  checkAttributeStringCoercion(expected, name);
                }
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL("" + expected);
                }
                var attributeName = propertyInfo.attributeName;
                var stringValue = null;
                if (propertyInfo.type === OVERLOADED_BOOLEAN) {
                  if (node.hasAttribute(attributeName)) {
                    var value = node.getAttribute(attributeName);
                    if (value === "") {
                      return true;
                    }
                    if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                      return value;
                    }
                    if (value === "" + expected) {
                      return expected;
                    }
                    return value;
                  }
                } else if (node.hasAttribute(attributeName)) {
                  if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                    return node.getAttribute(attributeName);
                  }
                  if (propertyInfo.type === BOOLEAN) {
                    return expected;
                  }
                  stringValue = node.getAttribute(attributeName);
                }
                if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                  return stringValue === null ? expected : stringValue;
                } else if (stringValue === "" + expected) {
                  return expected;
                } else {
                  return stringValue;
                }
              }
            }
          }
          function getValueForAttribute(node, name, expected, isCustomComponentTag) {
            {
              if (!isAttributeNameSafe(name)) {
                return;
              }
              if (!node.hasAttribute(name)) {
                return expected === void 0 ? void 0 : null;
              }
              var value = node.getAttribute(name);
              {
                checkAttributeStringCoercion(expected, name);
              }
              if (value === "" + expected) {
                return expected;
              }
              return value;
            }
          }
          function setValueForProperty(node, name, value, isCustomComponentTag) {
            var propertyInfo = getPropertyInfo(name);
            if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
              return;
            }
            if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
              value = null;
            }
            if (isCustomComponentTag || propertyInfo === null) {
              if (isAttributeNameSafe(name)) {
                var _attributeName = name;
                if (value === null) {
                  node.removeAttribute(_attributeName);
                } else {
                  {
                    checkAttributeStringCoercion(value, name);
                  }
                  node.setAttribute(_attributeName, "" + value);
                }
              }
              return;
            }
            var mustUseProperty = propertyInfo.mustUseProperty;
            if (mustUseProperty) {
              var propertyName = propertyInfo.propertyName;
              if (value === null) {
                var type = propertyInfo.type;
                node[propertyName] = type === BOOLEAN ? false : "";
              } else {
                node[propertyName] = value;
              }
              return;
            }
            var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
            if (value === null) {
              node.removeAttribute(attributeName);
            } else {
              var _type = propertyInfo.type;
              var attributeValue;
              if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
                attributeValue = "";
              } else {
                {
                  {
                    checkAttributeStringCoercion(value, attributeName);
                  }
                  attributeValue = "" + value;
                }
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL(attributeValue.toString());
                }
              }
              if (attributeNamespace) {
                node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
              } else {
                node.setAttribute(attributeName, attributeValue);
              }
            }
          }
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_SCOPE_TYPE = Symbol.for("react.scope");
          var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var REACT_LEGACY_HIDDEN_TYPE = Symbol.for("react.legacy_hidden");
          var REACT_CACHE_TYPE = Symbol.for("react.cache");
          var REACT_TRACING_MARKER_TYPE = Symbol.for("react.tracing_marker");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var assign = Object.assign;
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign({}, props, {
                    value: prevLog
                  }),
                  info: assign({}, props, {
                    value: prevInfo
                  }),
                  warn: assign({}, props, {
                    value: prevWarn
                  }),
                  error: assign({}, props, {
                    value: prevError
                  }),
                  group: assign({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match = x.stack.trim().match(/\n( *(at )?)/);
                  prefix = match && match[1] || "";
                }
              }
              return "\n" + prefix + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                  c--;
                }
                for (; s >= 1 && c >= 0; s--, c--) {
                  if (sampleLines[s] !== controlLines[c]) {
                    if (s !== 1 || c !== 1) {
                      do {
                        s--;
                        c--;
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                          var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                          if (fn.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn.displayName);
                          }
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s >= 1 && c >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeClassComponentFrame(ctor, source, ownerFn) {
            {
              return describeNativeComponentFrame(ctor, true);
            }
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component20) {
            var prototype = Component20.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x) {
                  }
                }
              }
            }
            return "";
          }
          function describeFiber(fiber) {
            var owner = fiber._debugOwner ? fiber._debugOwner.type : null;
            var source = fiber._debugSource;
            switch (fiber.tag) {
              case HostComponent:
                return describeBuiltInComponentFrame(fiber.type);
              case LazyComponent:
                return describeBuiltInComponentFrame("Lazy");
              case SuspenseComponent:
                return describeBuiltInComponentFrame("Suspense");
              case SuspenseListComponent:
                return describeBuiltInComponentFrame("SuspenseList");
              case FunctionComponent:
              case IndeterminateComponent:
              case SimpleMemoComponent:
                return describeFunctionComponentFrame(fiber.type);
              case ForwardRef:
                return describeFunctionComponentFrame(fiber.type.render);
              case ClassComponent:
                return describeClassComponentFrame(fiber.type);
              default:
                return "";
            }
          }
          function getStackByFiberInDevAndProd(workInProgress2) {
            try {
              var info2 = "";
              var node = workInProgress2;
              do {
                info2 += describeFiber(node);
                node = node.return;
              } while (node);
              return info2;
            } catch (x) {
              return "\nError generating stack: " + x.message + "\n" + x.stack;
            }
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromType(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          function getWrappedName$1(outerType, innerType, wrapperName) {
            var functionName = innerType.displayName || innerType.name || "";
            return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
          }
          function getContextName$1(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromFiber(fiber) {
            var tag = fiber.tag, type = fiber.type;
            switch (tag) {
              case CacheComponent:
                return "Cache";
              case ContextConsumer:
                var context = type;
                return getContextName$1(context) + ".Consumer";
              case ContextProvider:
                var provider = type;
                return getContextName$1(provider._context) + ".Provider";
              case DehydratedFragment:
                return "DehydratedFragment";
              case ForwardRef:
                return getWrappedName$1(type, type.render, "ForwardRef");
              case Fragment27:
                return "Fragment";
              case HostComponent:
                return type;
              case HostPortal:
                return "Portal";
              case HostRoot:
                return "Root";
              case HostText:
                return "Text";
              case LazyComponent:
                return getComponentNameFromType(type);
              case Mode:
                if (type === REACT_STRICT_MODE_TYPE) {
                  return "StrictMode";
                }
                return "Mode";
              case OffscreenComponent:
                return "Offscreen";
              case Profiler:
                return "Profiler";
              case ScopeComponent:
                return "Scope";
              case SuspenseComponent:
                return "Suspense";
              case SuspenseListComponent:
                return "SuspenseList";
              case TracingMarkerComponent:
                return "TracingMarker";
              // The display name for this tags come from the user-provided type:
              case ClassComponent:
              case FunctionComponent:
              case IncompleteClassComponent:
              case IndeterminateComponent:
              case MemoComponent:
              case SimpleMemoComponent:
                if (typeof type === "function") {
                  return type.displayName || type.name || null;
                }
                if (typeof type === "string") {
                  return type;
                }
                break;
            }
            return null;
          }
          var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
          var current = null;
          var isRendering = false;
          function getCurrentFiberOwnerNameInDevOrNull() {
            {
              if (current === null) {
                return null;
              }
              var owner = current._debugOwner;
              if (owner !== null && typeof owner !== "undefined") {
                return getComponentNameFromFiber(owner);
              }
            }
            return null;
          }
          function getCurrentFiberStackInDev() {
            {
              if (current === null) {
                return "";
              }
              return getStackByFiberInDevAndProd(current);
            }
          }
          function resetCurrentFiber() {
            {
              ReactDebugCurrentFrame.getCurrentStack = null;
              current = null;
              isRendering = false;
            }
          }
          function setCurrentFiber(fiber) {
            {
              ReactDebugCurrentFrame.getCurrentStack = fiber === null ? null : getCurrentFiberStackInDev;
              current = fiber;
              isRendering = false;
            }
          }
          function getCurrentFiber() {
            {
              return current;
            }
          }
          function setIsRendering(rendering) {
            {
              isRendering = rendering;
            }
          }
          function toString(value) {
            return "" + value;
          }
          function getToStringValue(value) {
            switch (typeof value) {
              case "boolean":
              case "number":
              case "string":
              case "undefined":
                return value;
              case "object":
                {
                  checkFormFieldValueStringCoercion(value);
                }
                return value;
              default:
                return "";
            }
          }
          var hasReadOnlyValue = {
            button: true,
            checkbox: true,
            image: true,
            hidden: true,
            radio: true,
            reset: true,
            submit: true
          };
          function checkControlledValueProps(tagName, props) {
            {
              if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
                error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
              }
              if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
                error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
              }
            }
          }
          function isCheckable(elem) {
            var type = elem.type;
            var nodeName = elem.nodeName;
            return nodeName && nodeName.toLowerCase() === "input" && (type === "checkbox" || type === "radio");
          }
          function getTracker(node) {
            return node._valueTracker;
          }
          function detachTracker(node) {
            node._valueTracker = null;
          }
          function getValueFromNode(node) {
            var value = "";
            if (!node) {
              return value;
            }
            if (isCheckable(node)) {
              value = node.checked ? "true" : "false";
            } else {
              value = node.value;
            }
            return value;
          }
          function trackValueOnNode(node) {
            var valueField = isCheckable(node) ? "checked" : "value";
            var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
            {
              checkFormFieldValueStringCoercion(node[valueField]);
            }
            var currentValue = "" + node[valueField];
            if (node.hasOwnProperty(valueField) || typeof descriptor === "undefined" || typeof descriptor.get !== "function" || typeof descriptor.set !== "function") {
              return;
            }
            var get2 = descriptor.get, set2 = descriptor.set;
            Object.defineProperty(node, valueField, {
              configurable: true,
              get: function() {
                return get2.call(this);
              },
              set: function(value) {
                {
                  checkFormFieldValueStringCoercion(value);
                }
                currentValue = "" + value;
                set2.call(this, value);
              }
            });
            Object.defineProperty(node, valueField, {
              enumerable: descriptor.enumerable
            });
            var tracker = {
              getValue: function() {
                return currentValue;
              },
              setValue: function(value) {
                {
                  checkFormFieldValueStringCoercion(value);
                }
                currentValue = "" + value;
              },
              stopTracking: function() {
                detachTracker(node);
                delete node[valueField];
              }
            };
            return tracker;
          }
          function track(node) {
            if (getTracker(node)) {
              return;
            }
            node._valueTracker = trackValueOnNode(node);
          }
          function updateValueIfChanged(node) {
            if (!node) {
              return false;
            }
            var tracker = getTracker(node);
            if (!tracker) {
              return true;
            }
            var lastValue = tracker.getValue();
            var nextValue = getValueFromNode(node);
            if (nextValue !== lastValue) {
              tracker.setValue(nextValue);
              return true;
            }
            return false;
          }
          function getActiveElement(doc) {
            doc = doc || (typeof document !== "undefined" ? document : void 0);
            if (typeof doc === "undefined") {
              return null;
            }
            try {
              return doc.activeElement || doc.body;
            } catch (e) {
              return doc.body;
            }
          }
          var didWarnValueDefaultValue = false;
          var didWarnCheckedDefaultChecked = false;
          var didWarnControlledToUncontrolled = false;
          var didWarnUncontrolledToControlled = false;
          function isControlled(props) {
            var usesChecked = props.type === "checkbox" || props.type === "radio";
            return usesChecked ? props.checked != null : props.value != null;
          }
          function getHostProps(element, props) {
            var node = element;
            var checked = props.checked;
            var hostProps = assign({}, props, {
              defaultChecked: void 0,
              defaultValue: void 0,
              value: void 0,
              checked: checked != null ? checked : node._wrapperState.initialChecked
            });
            return hostProps;
          }
          function initWrapperState(element, props) {
            {
              checkControlledValueProps("input", props);
              if (props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnCheckedDefaultChecked) {
                error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnCheckedDefaultChecked = true;
              }
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue) {
                error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnValueDefaultValue = true;
              }
            }
            var node = element;
            var defaultValue = props.defaultValue == null ? "" : props.defaultValue;
            node._wrapperState = {
              initialChecked: props.checked != null ? props.checked : props.defaultChecked,
              initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
              controlled: isControlled(props)
            };
          }
          function updateChecked(element, props) {
            var node = element;
            var checked = props.checked;
            if (checked != null) {
              setValueForProperty(node, "checked", checked, false);
            }
          }
          function updateWrapper(element, props) {
            var node = element;
            {
              var controlled = isControlled(props);
              if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
                error("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnUncontrolledToControlled = true;
              }
              if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
                error("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnControlledToUncontrolled = true;
              }
            }
            updateChecked(element, props);
            var value = getToStringValue(props.value);
            var type = props.type;
            if (value != null) {
              if (type === "number") {
                if (value === 0 && node.value === "" || // We explicitly want to coerce to number here if possible.
                // eslint-disable-next-line
                node.value != value) {
                  node.value = toString(value);
                }
              } else if (node.value !== toString(value)) {
                node.value = toString(value);
              }
            } else if (type === "submit" || type === "reset") {
              node.removeAttribute("value");
              return;
            }
            {
              if (props.hasOwnProperty("value")) {
                setDefaultValue(node, props.type, value);
              } else if (props.hasOwnProperty("defaultValue")) {
                setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
              }
            }
            {
              if (props.checked == null && props.defaultChecked != null) {
                node.defaultChecked = !!props.defaultChecked;
              }
            }
          }
          function postMountWrapper(element, props, isHydrating2) {
            var node = element;
            if (props.hasOwnProperty("value") || props.hasOwnProperty("defaultValue")) {
              var type = props.type;
              var isButton = type === "submit" || type === "reset";
              if (isButton && (props.value === void 0 || props.value === null)) {
                return;
              }
              var initialValue = toString(node._wrapperState.initialValue);
              if (!isHydrating2) {
                {
                  if (initialValue !== node.value) {
                    node.value = initialValue;
                  }
                }
              }
              {
                node.defaultValue = initialValue;
              }
            }
            var name = node.name;
            if (name !== "") {
              node.name = "";
            }
            {
              node.defaultChecked = !node.defaultChecked;
              node.defaultChecked = !!node._wrapperState.initialChecked;
            }
            if (name !== "") {
              node.name = name;
            }
          }
          function restoreControlledState(element, props) {
            var node = element;
            updateWrapper(node, props);
            updateNamedCousins(node, props);
          }
          function updateNamedCousins(rootNode, props) {
            var name = props.name;
            if (props.type === "radio" && name != null) {
              var queryRoot = rootNode;
              while (queryRoot.parentNode) {
                queryRoot = queryRoot.parentNode;
              }
              {
                checkAttributeStringCoercion(name, "name");
              }
              var group = queryRoot.querySelectorAll("input[name=" + JSON.stringify("" + name) + '][type="radio"]');
              for (var i = 0; i < group.length; i++) {
                var otherNode = group[i];
                if (otherNode === rootNode || otherNode.form !== rootNode.form) {
                  continue;
                }
                var otherProps = getFiberCurrentPropsFromNode(otherNode);
                if (!otherProps) {
                  throw new Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
                }
                updateValueIfChanged(otherNode);
                updateWrapper(otherNode, otherProps);
              }
            }
          }
          function setDefaultValue(node, type, value) {
            if (
              // Focused number inputs synchronize on blur. See ChangeEventPlugin.js
              type !== "number" || getActiveElement(node.ownerDocument) !== node
            ) {
              if (value == null) {
                node.defaultValue = toString(node._wrapperState.initialValue);
              } else if (node.defaultValue !== toString(value)) {
                node.defaultValue = toString(value);
              }
            }
          }
          var didWarnSelectedSetOnOption = false;
          var didWarnInvalidChild = false;
          var didWarnInvalidInnerHTML = false;
          function validateProps(element, props) {
            {
              if (props.value == null) {
                if (typeof props.children === "object" && props.children !== null) {
                  React128.Children.forEach(props.children, function(child) {
                    if (child == null) {
                      return;
                    }
                    if (typeof child === "string" || typeof child === "number") {
                      return;
                    }
                    if (!didWarnInvalidChild) {
                      didWarnInvalidChild = true;
                      error("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>.");
                    }
                  });
                } else if (props.dangerouslySetInnerHTML != null) {
                  if (!didWarnInvalidInnerHTML) {
                    didWarnInvalidInnerHTML = true;
                    error("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected.");
                  }
                }
              }
              if (props.selected != null && !didWarnSelectedSetOnOption) {
                error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
                didWarnSelectedSetOnOption = true;
              }
            }
          }
          function postMountWrapper$1(element, props) {
            if (props.value != null) {
              element.setAttribute("value", toString(getToStringValue(props.value)));
            }
          }
          var isArrayImpl = Array.isArray;
          function isArray(a) {
            return isArrayImpl(a);
          }
          var didWarnValueDefaultValue$1;
          {
            didWarnValueDefaultValue$1 = false;
          }
          function getDeclarationErrorAddendum() {
            var ownerName = getCurrentFiberOwnerNameInDevOrNull();
            if (ownerName) {
              return "\n\nCheck the render method of `" + ownerName + "`.";
            }
            return "";
          }
          var valuePropNames = ["value", "defaultValue"];
          function checkSelectPropTypes(props) {
            {
              checkControlledValueProps("select", props);
              for (var i = 0; i < valuePropNames.length; i++) {
                var propName = valuePropNames[i];
                if (props[propName] == null) {
                  continue;
                }
                var propNameIsArray = isArray(props[propName]);
                if (props.multiple && !propNameIsArray) {
                  error("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
                } else if (!props.multiple && propNameIsArray) {
                  error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
                }
              }
            }
          }
          function updateOptions(node, multiple, propValue, setDefaultSelected) {
            var options2 = node.options;
            if (multiple) {
              var selectedValues = propValue;
              var selectedValue = {};
              for (var i = 0; i < selectedValues.length; i++) {
                selectedValue["$" + selectedValues[i]] = true;
              }
              for (var _i = 0; _i < options2.length; _i++) {
                var selected = selectedValue.hasOwnProperty("$" + options2[_i].value);
                if (options2[_i].selected !== selected) {
                  options2[_i].selected = selected;
                }
                if (selected && setDefaultSelected) {
                  options2[_i].defaultSelected = true;
                }
              }
            } else {
              var _selectedValue = toString(getToStringValue(propValue));
              var defaultSelected = null;
              for (var _i2 = 0; _i2 < options2.length; _i2++) {
                if (options2[_i2].value === _selectedValue) {
                  options2[_i2].selected = true;
                  if (setDefaultSelected) {
                    options2[_i2].defaultSelected = true;
                  }
                  return;
                }
                if (defaultSelected === null && !options2[_i2].disabled) {
                  defaultSelected = options2[_i2];
                }
              }
              if (defaultSelected !== null) {
                defaultSelected.selected = true;
              }
            }
          }
          function getHostProps$1(element, props) {
            return assign({}, props, {
              value: void 0
            });
          }
          function initWrapperState$1(element, props) {
            var node = element;
            {
              checkSelectPropTypes(props);
            }
            node._wrapperState = {
              wasMultiple: !!props.multiple
            };
            {
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue$1) {
                error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
                didWarnValueDefaultValue$1 = true;
              }
            }
          }
          function postMountWrapper$2(element, props) {
            var node = element;
            node.multiple = !!props.multiple;
            var value = props.value;
            if (value != null) {
              updateOptions(node, !!props.multiple, value, false);
            } else if (props.defaultValue != null) {
              updateOptions(node, !!props.multiple, props.defaultValue, true);
            }
          }
          function postUpdateWrapper(element, props) {
            var node = element;
            var wasMultiple = node._wrapperState.wasMultiple;
            node._wrapperState.wasMultiple = !!props.multiple;
            var value = props.value;
            if (value != null) {
              updateOptions(node, !!props.multiple, value, false);
            } else if (wasMultiple !== !!props.multiple) {
              if (props.defaultValue != null) {
                updateOptions(node, !!props.multiple, props.defaultValue, true);
              } else {
                updateOptions(node, !!props.multiple, props.multiple ? [] : "", false);
              }
            }
          }
          function restoreControlledState$1(element, props) {
            var node = element;
            var value = props.value;
            if (value != null) {
              updateOptions(node, !!props.multiple, value, false);
            }
          }
          var didWarnValDefaultVal = false;
          function getHostProps$2(element, props) {
            var node = element;
            if (props.dangerouslySetInnerHTML != null) {
              throw new Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
            }
            var hostProps = assign({}, props, {
              value: void 0,
              defaultValue: void 0,
              children: toString(node._wrapperState.initialValue)
            });
            return hostProps;
          }
          function initWrapperState$2(element, props) {
            var node = element;
            {
              checkControlledValueProps("textarea", props);
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValDefaultVal) {
                error("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component");
                didWarnValDefaultVal = true;
              }
            }
            var initialValue = props.value;
            if (initialValue == null) {
              var children = props.children, defaultValue = props.defaultValue;
              if (children != null) {
                {
                  error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
                }
                {
                  if (defaultValue != null) {
                    throw new Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
                  }
                  if (isArray(children)) {
                    if (children.length > 1) {
                      throw new Error("<textarea> can only have at most one child.");
                    }
                    children = children[0];
                  }
                  defaultValue = children;
                }
              }
              if (defaultValue == null) {
                defaultValue = "";
              }
              initialValue = defaultValue;
            }
            node._wrapperState = {
              initialValue: getToStringValue(initialValue)
            };
          }
          function updateWrapper$1(element, props) {
            var node = element;
            var value = getToStringValue(props.value);
            var defaultValue = getToStringValue(props.defaultValue);
            if (value != null) {
              var newValue = toString(value);
              if (newValue !== node.value) {
                node.value = newValue;
              }
              if (props.defaultValue == null && node.defaultValue !== newValue) {
                node.defaultValue = newValue;
              }
            }
            if (defaultValue != null) {
              node.defaultValue = toString(defaultValue);
            }
          }
          function postMountWrapper$3(element, props) {
            var node = element;
            var textContent = node.textContent;
            if (textContent === node._wrapperState.initialValue) {
              if (textContent !== "" && textContent !== null) {
                node.value = textContent;
              }
            }
          }
          function restoreControlledState$2(element, props) {
            updateWrapper$1(element, props);
          }
          var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
          var MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
          var SVG_NAMESPACE = "http://www.w3.org/2000/svg";
          function getIntrinsicNamespace(type) {
            switch (type) {
              case "svg":
                return SVG_NAMESPACE;
              case "math":
                return MATH_NAMESPACE;
              default:
                return HTML_NAMESPACE;
            }
          }
          function getChildNamespace(parentNamespace, type) {
            if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
              return getIntrinsicNamespace(type);
            }
            if (parentNamespace === SVG_NAMESPACE && type === "foreignObject") {
              return HTML_NAMESPACE;
            }
            return parentNamespace;
          }
          var createMicrosoftUnsafeLocalFunction = function(func) {
            if (typeof MSApp !== "undefined" && MSApp.execUnsafeLocalFunction) {
              return function(arg0, arg1, arg2, arg3) {
                MSApp.execUnsafeLocalFunction(function() {
                  return func(arg0, arg1, arg2, arg3);
                });
              };
            } else {
              return func;
            }
          };
          var reusableSVGContainer;
          var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node, html) {
            if (node.namespaceURI === SVG_NAMESPACE) {
              if (!("innerHTML" in node)) {
                reusableSVGContainer = reusableSVGContainer || document.createElement("div");
                reusableSVGContainer.innerHTML = "<svg>" + html.valueOf().toString() + "</svg>";
                var svgNode = reusableSVGContainer.firstChild;
                while (node.firstChild) {
                  node.removeChild(node.firstChild);
                }
                while (svgNode.firstChild) {
                  node.appendChild(svgNode.firstChild);
                }
                return;
              }
            }
            node.innerHTML = html;
          });
          var ELEMENT_NODE = 1;
          var TEXT_NODE = 3;
          var COMMENT_NODE = 8;
          var DOCUMENT_NODE = 9;
          var DOCUMENT_FRAGMENT_NODE = 11;
          var setTextContent = function(node, text) {
            if (text) {
              var firstChild = node.firstChild;
              if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
                firstChild.nodeValue = text;
                return;
              }
            }
            node.textContent = text;
          };
          var shorthandToLonghand = {
            animation: ["animationDelay", "animationDirection", "animationDuration", "animationFillMode", "animationIterationCount", "animationName", "animationPlayState", "animationTimingFunction"],
            background: ["backgroundAttachment", "backgroundClip", "backgroundColor", "backgroundImage", "backgroundOrigin", "backgroundPositionX", "backgroundPositionY", "backgroundRepeat", "backgroundSize"],
            backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
            border: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth", "borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth", "borderLeftColor", "borderLeftStyle", "borderLeftWidth", "borderRightColor", "borderRightStyle", "borderRightWidth", "borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderBlockEnd: ["borderBlockEndColor", "borderBlockEndStyle", "borderBlockEndWidth"],
            borderBlockStart: ["borderBlockStartColor", "borderBlockStartStyle", "borderBlockStartWidth"],
            borderBottom: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth"],
            borderColor: ["borderBottomColor", "borderLeftColor", "borderRightColor", "borderTopColor"],
            borderImage: ["borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth"],
            borderInlineEnd: ["borderInlineEndColor", "borderInlineEndStyle", "borderInlineEndWidth"],
            borderInlineStart: ["borderInlineStartColor", "borderInlineStartStyle", "borderInlineStartWidth"],
            borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
            borderRadius: ["borderBottomLeftRadius", "borderBottomRightRadius", "borderTopLeftRadius", "borderTopRightRadius"],
            borderRight: ["borderRightColor", "borderRightStyle", "borderRightWidth"],
            borderStyle: ["borderBottomStyle", "borderLeftStyle", "borderRightStyle", "borderTopStyle"],
            borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderWidth: ["borderBottomWidth", "borderLeftWidth", "borderRightWidth", "borderTopWidth"],
            columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
            columns: ["columnCount", "columnWidth"],
            flex: ["flexBasis", "flexGrow", "flexShrink"],
            flexFlow: ["flexDirection", "flexWrap"],
            font: ["fontFamily", "fontFeatureSettings", "fontKerning", "fontLanguageOverride", "fontSize", "fontSizeAdjust", "fontStretch", "fontStyle", "fontVariant", "fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition", "fontWeight", "lineHeight"],
            fontVariant: ["fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition"],
            gap: ["columnGap", "rowGap"],
            grid: ["gridAutoColumns", "gridAutoFlow", "gridAutoRows", "gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            gridArea: ["gridColumnEnd", "gridColumnStart", "gridRowEnd", "gridRowStart"],
            gridColumn: ["gridColumnEnd", "gridColumnStart"],
            gridColumnGap: ["columnGap"],
            gridGap: ["columnGap", "rowGap"],
            gridRow: ["gridRowEnd", "gridRowStart"],
            gridRowGap: ["rowGap"],
            gridTemplate: ["gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
            margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
            marker: ["markerEnd", "markerMid", "markerStart"],
            mask: ["maskClip", "maskComposite", "maskImage", "maskMode", "maskOrigin", "maskPositionX", "maskPositionY", "maskRepeat", "maskSize"],
            maskPosition: ["maskPositionX", "maskPositionY"],
            outline: ["outlineColor", "outlineStyle", "outlineWidth"],
            overflow: ["overflowX", "overflowY"],
            padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
            placeContent: ["alignContent", "justifyContent"],
            placeItems: ["alignItems", "justifyItems"],
            placeSelf: ["alignSelf", "justifySelf"],
            textDecoration: ["textDecorationColor", "textDecorationLine", "textDecorationStyle"],
            textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
            transition: ["transitionDelay", "transitionDuration", "transitionProperty", "transitionTimingFunction"],
            wordWrap: ["overflowWrap"]
          };
          var isUnitlessNumber = {
            animationIterationCount: true,
            aspectRatio: true,
            borderImageOutset: true,
            borderImageSlice: true,
            borderImageWidth: true,
            boxFlex: true,
            boxFlexGroup: true,
            boxOrdinalGroup: true,
            columnCount: true,
            columns: true,
            flex: true,
            flexGrow: true,
            flexPositive: true,
            flexShrink: true,
            flexNegative: true,
            flexOrder: true,
            gridArea: true,
            gridRow: true,
            gridRowEnd: true,
            gridRowSpan: true,
            gridRowStart: true,
            gridColumn: true,
            gridColumnEnd: true,
            gridColumnSpan: true,
            gridColumnStart: true,
            fontWeight: true,
            lineClamp: true,
            lineHeight: true,
            opacity: true,
            order: true,
            orphans: true,
            tabSize: true,
            widows: true,
            zIndex: true,
            zoom: true,
            // SVG-related properties
            fillOpacity: true,
            floodOpacity: true,
            stopOpacity: true,
            strokeDasharray: true,
            strokeDashoffset: true,
            strokeMiterlimit: true,
            strokeOpacity: true,
            strokeWidth: true
          };
          function prefixKey(prefix2, key) {
            return prefix2 + key.charAt(0).toUpperCase() + key.substring(1);
          }
          var prefixes = ["Webkit", "ms", "Moz", "O"];
          Object.keys(isUnitlessNumber).forEach(function(prop) {
            prefixes.forEach(function(prefix2) {
              isUnitlessNumber[prefixKey(prefix2, prop)] = isUnitlessNumber[prop];
            });
          });
          function dangerousStyleValue(name, value, isCustomProperty) {
            var isEmpty = value == null || typeof value === "boolean" || value === "";
            if (isEmpty) {
              return "";
            }
            if (!isCustomProperty && typeof value === "number" && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
              return value + "px";
            }
            {
              checkCSSPropertyStringCoercion(value, name);
            }
            return ("" + value).trim();
          }
          var uppercasePattern = /([A-Z])/g;
          var msPattern = /^ms-/;
          function hyphenateStyleName(name) {
            return name.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern, "-ms-");
          }
          var warnValidStyle = function() {
          };
          {
            var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
            var msPattern$1 = /^-ms-/;
            var hyphenPattern = /-(.)/g;
            var badStyleValueWithSemicolonPattern = /;\s*$/;
            var warnedStyleNames = {};
            var warnedStyleValues = {};
            var warnedForNaNValue = false;
            var warnedForInfinityValue = false;
            var camelize4 = function(string) {
              return string.replace(hyphenPattern, function(_3, character) {
                return character.toUpperCase();
              });
            };
            var warnHyphenatedStyleName = function(name) {
              if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                return;
              }
              warnedStyleNames[name] = true;
              error(
                "Unsupported style property %s. Did you mean %s?",
                name,
                // As Andi Smith suggests
                // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
                // is converted to lowercase `ms`.
                camelize4(name.replace(msPattern$1, "ms-"))
              );
            };
            var warnBadVendoredStyleName = function(name) {
              if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                return;
              }
              warnedStyleNames[name] = true;
              error("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1));
            };
            var warnStyleValueWithSemicolon = function(name, value) {
              if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
                return;
              }
              warnedStyleValues[value] = true;
              error(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name, value.replace(badStyleValueWithSemicolonPattern, ""));
            };
            var warnStyleValueIsNaN = function(name, value) {
              if (warnedForNaNValue) {
                return;
              }
              warnedForNaNValue = true;
              error("`NaN` is an invalid value for the `%s` css style property.", name);
            };
            var warnStyleValueIsInfinity = function(name, value) {
              if (warnedForInfinityValue) {
                return;
              }
              warnedForInfinityValue = true;
              error("`Infinity` is an invalid value for the `%s` css style property.", name);
            };
            warnValidStyle = function(name, value) {
              if (name.indexOf("-") > -1) {
                warnHyphenatedStyleName(name);
              } else if (badVendoredStyleNamePattern.test(name)) {
                warnBadVendoredStyleName(name);
              } else if (badStyleValueWithSemicolonPattern.test(value)) {
                warnStyleValueWithSemicolon(name, value);
              }
              if (typeof value === "number") {
                if (isNaN(value)) {
                  warnStyleValueIsNaN(name, value);
                } else if (!isFinite(value)) {
                  warnStyleValueIsInfinity(name, value);
                }
              }
            };
          }
          var warnValidStyle$1 = warnValidStyle;
          function createDangerousStringForStyles(styles) {
            {
              var serialized = "";
              var delimiter = "";
              for (var styleName in styles) {
                if (!styles.hasOwnProperty(styleName)) {
                  continue;
                }
                var styleValue = styles[styleName];
                if (styleValue != null) {
                  var isCustomProperty = styleName.indexOf("--") === 0;
                  serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ":";
                  serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
                  delimiter = ";";
                }
              }
              return serialized || null;
            }
          }
          function setValueForStyles(node, styles) {
            var style2 = node.style;
            for (var styleName in styles) {
              if (!styles.hasOwnProperty(styleName)) {
                continue;
              }
              var isCustomProperty = styleName.indexOf("--") === 0;
              {
                if (!isCustomProperty) {
                  warnValidStyle$1(styleName, styles[styleName]);
                }
              }
              var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);
              if (styleName === "float") {
                styleName = "cssFloat";
              }
              if (isCustomProperty) {
                style2.setProperty(styleName, styleValue);
              } else {
                style2[styleName] = styleValue;
              }
            }
          }
          function isValueEmpty(value) {
            return value == null || typeof value === "boolean" || value === "";
          }
          function expandShorthandMap(styles) {
            var expanded = {};
            for (var key in styles) {
              var longhands = shorthandToLonghand[key] || [key];
              for (var i = 0; i < longhands.length; i++) {
                expanded[longhands[i]] = key;
              }
            }
            return expanded;
          }
          function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
            {
              if (!nextStyles) {
                return;
              }
              var expandedUpdates = expandShorthandMap(styleUpdates);
              var expandedStyles = expandShorthandMap(nextStyles);
              var warnedAbout = {};
              for (var key in expandedUpdates) {
                var originalKey = expandedUpdates[key];
                var correctOriginalKey = expandedStyles[key];
                if (correctOriginalKey && originalKey !== correctOriginalKey) {
                  var warningKey = originalKey + "," + correctOriginalKey;
                  if (warnedAbout[warningKey]) {
                    continue;
                  }
                  warnedAbout[warningKey] = true;
                  error("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? "Removing" : "Updating", originalKey, correctOriginalKey);
                }
              }
            }
          }
          var omittedCloseTags = {
            area: true,
            base: true,
            br: true,
            col: true,
            embed: true,
            hr: true,
            img: true,
            input: true,
            keygen: true,
            link: true,
            meta: true,
            param: true,
            source: true,
            track: true,
            wbr: true
            // NOTE: menuitem's close tag should be omitted, but that causes problems.
          };
          var voidElementTags = assign({
            menuitem: true
          }, omittedCloseTags);
          var HTML = "__html";
          function assertValidProps(tag, props) {
            if (!props) {
              return;
            }
            if (voidElementTags[tag]) {
              if (props.children != null || props.dangerouslySetInnerHTML != null) {
                throw new Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
              }
            }
            if (props.dangerouslySetInnerHTML != null) {
              if (props.children != null) {
                throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
              }
              if (typeof props.dangerouslySetInnerHTML !== "object" || !(HTML in props.dangerouslySetInnerHTML)) {
                throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
              }
            }
            {
              if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
                error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
              }
            }
            if (props.style != null && typeof props.style !== "object") {
              throw new Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
            }
          }
          function isCustomComponent(tagName, props) {
            if (tagName.indexOf("-") === -1) {
              return typeof props.is === "string";
            }
            switch (tagName) {
              // These are reserved SVG and MathML elements.
              // We don't mind this list too much because we expect it to never grow.
              // The alternative is to track the namespace in a few places which is convoluted.
              // https://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts
              case "annotation-xml":
              case "color-profile":
              case "font-face":
              case "font-face-src":
              case "font-face-uri":
              case "font-face-format":
              case "font-face-name":
              case "missing-glyph":
                return false;
              default:
                return true;
            }
          }
          var possibleStandardNames = {
            // HTML
            accept: "accept",
            acceptcharset: "acceptCharset",
            "accept-charset": "acceptCharset",
            accesskey: "accessKey",
            action: "action",
            allowfullscreen: "allowFullScreen",
            alt: "alt",
            as: "as",
            async: "async",
            autocapitalize: "autoCapitalize",
            autocomplete: "autoComplete",
            autocorrect: "autoCorrect",
            autofocus: "autoFocus",
            autoplay: "autoPlay",
            autosave: "autoSave",
            capture: "capture",
            cellpadding: "cellPadding",
            cellspacing: "cellSpacing",
            challenge: "challenge",
            charset: "charSet",
            checked: "checked",
            children: "children",
            cite: "cite",
            class: "className",
            classid: "classID",
            classname: "className",
            cols: "cols",
            colspan: "colSpan",
            content: "content",
            contenteditable: "contentEditable",
            contextmenu: "contextMenu",
            controls: "controls",
            controlslist: "controlsList",
            coords: "coords",
            crossorigin: "crossOrigin",
            dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
            data: "data",
            datetime: "dateTime",
            default: "default",
            defaultchecked: "defaultChecked",
            defaultvalue: "defaultValue",
            defer: "defer",
            dir: "dir",
            disabled: "disabled",
            disablepictureinpicture: "disablePictureInPicture",
            disableremoteplayback: "disableRemotePlayback",
            download: "download",
            draggable: "draggable",
            enctype: "encType",
            enterkeyhint: "enterKeyHint",
            for: "htmlFor",
            form: "form",
            formmethod: "formMethod",
            formaction: "formAction",
            formenctype: "formEncType",
            formnovalidate: "formNoValidate",
            formtarget: "formTarget",
            frameborder: "frameBorder",
            headers: "headers",
            height: "height",
            hidden: "hidden",
            high: "high",
            href: "href",
            hreflang: "hrefLang",
            htmlfor: "htmlFor",
            httpequiv: "httpEquiv",
            "http-equiv": "httpEquiv",
            icon: "icon",
            id: "id",
            imagesizes: "imageSizes",
            imagesrcset: "imageSrcSet",
            innerhtml: "innerHTML",
            inputmode: "inputMode",
            integrity: "integrity",
            is: "is",
            itemid: "itemID",
            itemprop: "itemProp",
            itemref: "itemRef",
            itemscope: "itemScope",
            itemtype: "itemType",
            keyparams: "keyParams",
            keytype: "keyType",
            kind: "kind",
            label: "label",
            lang: "lang",
            list: "list",
            loop: "loop",
            low: "low",
            manifest: "manifest",
            marginwidth: "marginWidth",
            marginheight: "marginHeight",
            max: "max",
            maxlength: "maxLength",
            media: "media",
            mediagroup: "mediaGroup",
            method: "method",
            min: "min",
            minlength: "minLength",
            multiple: "multiple",
            muted: "muted",
            name: "name",
            nomodule: "noModule",
            nonce: "nonce",
            novalidate: "noValidate",
            open: "open",
            optimum: "optimum",
            pattern: "pattern",
            placeholder: "placeholder",
            playsinline: "playsInline",
            poster: "poster",
            preload: "preload",
            profile: "profile",
            radiogroup: "radioGroup",
            readonly: "readOnly",
            referrerpolicy: "referrerPolicy",
            rel: "rel",
            required: "required",
            reversed: "reversed",
            role: "role",
            rows: "rows",
            rowspan: "rowSpan",
            sandbox: "sandbox",
            scope: "scope",
            scoped: "scoped",
            scrolling: "scrolling",
            seamless: "seamless",
            selected: "selected",
            shape: "shape",
            size: "size",
            sizes: "sizes",
            span: "span",
            spellcheck: "spellCheck",
            src: "src",
            srcdoc: "srcDoc",
            srclang: "srcLang",
            srcset: "srcSet",
            start: "start",
            step: "step",
            style: "style",
            summary: "summary",
            tabindex: "tabIndex",
            target: "target",
            title: "title",
            type: "type",
            usemap: "useMap",
            value: "value",
            width: "width",
            wmode: "wmode",
            wrap: "wrap",
            // SVG
            about: "about",
            accentheight: "accentHeight",
            "accent-height": "accentHeight",
            accumulate: "accumulate",
            additive: "additive",
            alignmentbaseline: "alignmentBaseline",
            "alignment-baseline": "alignmentBaseline",
            allowreorder: "allowReorder",
            alphabetic: "alphabetic",
            amplitude: "amplitude",
            arabicform: "arabicForm",
            "arabic-form": "arabicForm",
            ascent: "ascent",
            attributename: "attributeName",
            attributetype: "attributeType",
            autoreverse: "autoReverse",
            azimuth: "azimuth",
            basefrequency: "baseFrequency",
            baselineshift: "baselineShift",
            "baseline-shift": "baselineShift",
            baseprofile: "baseProfile",
            bbox: "bbox",
            begin: "begin",
            bias: "bias",
            by: "by",
            calcmode: "calcMode",
            capheight: "capHeight",
            "cap-height": "capHeight",
            clip: "clip",
            clippath: "clipPath",
            "clip-path": "clipPath",
            clippathunits: "clipPathUnits",
            cliprule: "clipRule",
            "clip-rule": "clipRule",
            color: "color",
            colorinterpolation: "colorInterpolation",
            "color-interpolation": "colorInterpolation",
            colorinterpolationfilters: "colorInterpolationFilters",
            "color-interpolation-filters": "colorInterpolationFilters",
            colorprofile: "colorProfile",
            "color-profile": "colorProfile",
            colorrendering: "colorRendering",
            "color-rendering": "colorRendering",
            contentscripttype: "contentScriptType",
            contentstyletype: "contentStyleType",
            cursor: "cursor",
            cx: "cx",
            cy: "cy",
            d: "d",
            datatype: "datatype",
            decelerate: "decelerate",
            descent: "descent",
            diffuseconstant: "diffuseConstant",
            direction: "direction",
            display: "display",
            divisor: "divisor",
            dominantbaseline: "dominantBaseline",
            "dominant-baseline": "dominantBaseline",
            dur: "dur",
            dx: "dx",
            dy: "dy",
            edgemode: "edgeMode",
            elevation: "elevation",
            enablebackground: "enableBackground",
            "enable-background": "enableBackground",
            end: "end",
            exponent: "exponent",
            externalresourcesrequired: "externalResourcesRequired",
            fill: "fill",
            fillopacity: "fillOpacity",
            "fill-opacity": "fillOpacity",
            fillrule: "fillRule",
            "fill-rule": "fillRule",
            filter: "filter",
            filterres: "filterRes",
            filterunits: "filterUnits",
            floodopacity: "floodOpacity",
            "flood-opacity": "floodOpacity",
            floodcolor: "floodColor",
            "flood-color": "floodColor",
            focusable: "focusable",
            fontfamily: "fontFamily",
            "font-family": "fontFamily",
            fontsize: "fontSize",
            "font-size": "fontSize",
            fontsizeadjust: "fontSizeAdjust",
            "font-size-adjust": "fontSizeAdjust",
            fontstretch: "fontStretch",
            "font-stretch": "fontStretch",
            fontstyle: "fontStyle",
            "font-style": "fontStyle",
            fontvariant: "fontVariant",
            "font-variant": "fontVariant",
            fontweight: "fontWeight",
            "font-weight": "fontWeight",
            format: "format",
            from: "from",
            fx: "fx",
            fy: "fy",
            g1: "g1",
            g2: "g2",
            glyphname: "glyphName",
            "glyph-name": "glyphName",
            glyphorientationhorizontal: "glyphOrientationHorizontal",
            "glyph-orientation-horizontal": "glyphOrientationHorizontal",
            glyphorientationvertical: "glyphOrientationVertical",
            "glyph-orientation-vertical": "glyphOrientationVertical",
            glyphref: "glyphRef",
            gradienttransform: "gradientTransform",
            gradientunits: "gradientUnits",
            hanging: "hanging",
            horizadvx: "horizAdvX",
            "horiz-adv-x": "horizAdvX",
            horizoriginx: "horizOriginX",
            "horiz-origin-x": "horizOriginX",
            ideographic: "ideographic",
            imagerendering: "imageRendering",
            "image-rendering": "imageRendering",
            in2: "in2",
            in: "in",
            inlist: "inlist",
            intercept: "intercept",
            k1: "k1",
            k2: "k2",
            k3: "k3",
            k4: "k4",
            k: "k",
            kernelmatrix: "kernelMatrix",
            kernelunitlength: "kernelUnitLength",
            kerning: "kerning",
            keypoints: "keyPoints",
            keysplines: "keySplines",
            keytimes: "keyTimes",
            lengthadjust: "lengthAdjust",
            letterspacing: "letterSpacing",
            "letter-spacing": "letterSpacing",
            lightingcolor: "lightingColor",
            "lighting-color": "lightingColor",
            limitingconeangle: "limitingConeAngle",
            local: "local",
            markerend: "markerEnd",
            "marker-end": "markerEnd",
            markerheight: "markerHeight",
            markermid: "markerMid",
            "marker-mid": "markerMid",
            markerstart: "markerStart",
            "marker-start": "markerStart",
            markerunits: "markerUnits",
            markerwidth: "markerWidth",
            mask: "mask",
            maskcontentunits: "maskContentUnits",
            maskunits: "maskUnits",
            mathematical: "mathematical",
            mode: "mode",
            numoctaves: "numOctaves",
            offset: "offset",
            opacity: "opacity",
            operator: "operator",
            order: "order",
            orient: "orient",
            orientation: "orientation",
            origin: "origin",
            overflow: "overflow",
            overlineposition: "overlinePosition",
            "overline-position": "overlinePosition",
            overlinethickness: "overlineThickness",
            "overline-thickness": "overlineThickness",
            paintorder: "paintOrder",
            "paint-order": "paintOrder",
            panose1: "panose1",
            "panose-1": "panose1",
            pathlength: "pathLength",
            patterncontentunits: "patternContentUnits",
            patterntransform: "patternTransform",
            patternunits: "patternUnits",
            pointerevents: "pointerEvents",
            "pointer-events": "pointerEvents",
            points: "points",
            pointsatx: "pointsAtX",
            pointsaty: "pointsAtY",
            pointsatz: "pointsAtZ",
            prefix: "prefix",
            preservealpha: "preserveAlpha",
            preserveaspectratio: "preserveAspectRatio",
            primitiveunits: "primitiveUnits",
            property: "property",
            r: "r",
            radius: "radius",
            refx: "refX",
            refy: "refY",
            renderingintent: "renderingIntent",
            "rendering-intent": "renderingIntent",
            repeatcount: "repeatCount",
            repeatdur: "repeatDur",
            requiredextensions: "requiredExtensions",
            requiredfeatures: "requiredFeatures",
            resource: "resource",
            restart: "restart",
            result: "result",
            results: "results",
            rotate: "rotate",
            rx: "rx",
            ry: "ry",
            scale: "scale",
            security: "security",
            seed: "seed",
            shaperendering: "shapeRendering",
            "shape-rendering": "shapeRendering",
            slope: "slope",
            spacing: "spacing",
            specularconstant: "specularConstant",
            specularexponent: "specularExponent",
            speed: "speed",
            spreadmethod: "spreadMethod",
            startoffset: "startOffset",
            stddeviation: "stdDeviation",
            stemh: "stemh",
            stemv: "stemv",
            stitchtiles: "stitchTiles",
            stopcolor: "stopColor",
            "stop-color": "stopColor",
            stopopacity: "stopOpacity",
            "stop-opacity": "stopOpacity",
            strikethroughposition: "strikethroughPosition",
            "strikethrough-position": "strikethroughPosition",
            strikethroughthickness: "strikethroughThickness",
            "strikethrough-thickness": "strikethroughThickness",
            string: "string",
            stroke: "stroke",
            strokedasharray: "strokeDasharray",
            "stroke-dasharray": "strokeDasharray",
            strokedashoffset: "strokeDashoffset",
            "stroke-dashoffset": "strokeDashoffset",
            strokelinecap: "strokeLinecap",
            "stroke-linecap": "strokeLinecap",
            strokelinejoin: "strokeLinejoin",
            "stroke-linejoin": "strokeLinejoin",
            strokemiterlimit: "strokeMiterlimit",
            "stroke-miterlimit": "strokeMiterlimit",
            strokewidth: "strokeWidth",
            "stroke-width": "strokeWidth",
            strokeopacity: "strokeOpacity",
            "stroke-opacity": "strokeOpacity",
            suppresscontenteditablewarning: "suppressContentEditableWarning",
            suppresshydrationwarning: "suppressHydrationWarning",
            surfacescale: "surfaceScale",
            systemlanguage: "systemLanguage",
            tablevalues: "tableValues",
            targetx: "targetX",
            targety: "targetY",
            textanchor: "textAnchor",
            "text-anchor": "textAnchor",
            textdecoration: "textDecoration",
            "text-decoration": "textDecoration",
            textlength: "textLength",
            textrendering: "textRendering",
            "text-rendering": "textRendering",
            to: "to",
            transform: "transform",
            typeof: "typeof",
            u1: "u1",
            u2: "u2",
            underlineposition: "underlinePosition",
            "underline-position": "underlinePosition",
            underlinethickness: "underlineThickness",
            "underline-thickness": "underlineThickness",
            unicode: "unicode",
            unicodebidi: "unicodeBidi",
            "unicode-bidi": "unicodeBidi",
            unicoderange: "unicodeRange",
            "unicode-range": "unicodeRange",
            unitsperem: "unitsPerEm",
            "units-per-em": "unitsPerEm",
            unselectable: "unselectable",
            valphabetic: "vAlphabetic",
            "v-alphabetic": "vAlphabetic",
            values: "values",
            vectoreffect: "vectorEffect",
            "vector-effect": "vectorEffect",
            version: "version",
            vertadvy: "vertAdvY",
            "vert-adv-y": "vertAdvY",
            vertoriginx: "vertOriginX",
            "vert-origin-x": "vertOriginX",
            vertoriginy: "vertOriginY",
            "vert-origin-y": "vertOriginY",
            vhanging: "vHanging",
            "v-hanging": "vHanging",
            videographic: "vIdeographic",
            "v-ideographic": "vIdeographic",
            viewbox: "viewBox",
            viewtarget: "viewTarget",
            visibility: "visibility",
            vmathematical: "vMathematical",
            "v-mathematical": "vMathematical",
            vocab: "vocab",
            widths: "widths",
            wordspacing: "wordSpacing",
            "word-spacing": "wordSpacing",
            writingmode: "writingMode",
            "writing-mode": "writingMode",
            x1: "x1",
            x2: "x2",
            x: "x",
            xchannelselector: "xChannelSelector",
            xheight: "xHeight",
            "x-height": "xHeight",
            xlinkactuate: "xlinkActuate",
            "xlink:actuate": "xlinkActuate",
            xlinkarcrole: "xlinkArcrole",
            "xlink:arcrole": "xlinkArcrole",
            xlinkhref: "xlinkHref",
            "xlink:href": "xlinkHref",
            xlinkrole: "xlinkRole",
            "xlink:role": "xlinkRole",
            xlinkshow: "xlinkShow",
            "xlink:show": "xlinkShow",
            xlinktitle: "xlinkTitle",
            "xlink:title": "xlinkTitle",
            xlinktype: "xlinkType",
            "xlink:type": "xlinkType",
            xmlbase: "xmlBase",
            "xml:base": "xmlBase",
            xmllang: "xmlLang",
            "xml:lang": "xmlLang",
            xmlns: "xmlns",
            "xml:space": "xmlSpace",
            xmlnsxlink: "xmlnsXlink",
            "xmlns:xlink": "xmlnsXlink",
            xmlspace: "xmlSpace",
            y1: "y1",
            y2: "y2",
            y: "y",
            ychannelselector: "yChannelSelector",
            z: "z",
            zoomandpan: "zoomAndPan"
          };
          var ariaProperties = {
            "aria-current": 0,
            // state
            "aria-description": 0,
            "aria-details": 0,
            "aria-disabled": 0,
            // state
            "aria-hidden": 0,
            // state
            "aria-invalid": 0,
            // state
            "aria-keyshortcuts": 0,
            "aria-label": 0,
            "aria-roledescription": 0,
            // Widget Attributes
            "aria-autocomplete": 0,
            "aria-checked": 0,
            "aria-expanded": 0,
            "aria-haspopup": 0,
            "aria-level": 0,
            "aria-modal": 0,
            "aria-multiline": 0,
            "aria-multiselectable": 0,
            "aria-orientation": 0,
            "aria-placeholder": 0,
            "aria-pressed": 0,
            "aria-readonly": 0,
            "aria-required": 0,
            "aria-selected": 0,
            "aria-sort": 0,
            "aria-valuemax": 0,
            "aria-valuemin": 0,
            "aria-valuenow": 0,
            "aria-valuetext": 0,
            // Live Region Attributes
            "aria-atomic": 0,
            "aria-busy": 0,
            "aria-live": 0,
            "aria-relevant": 0,
            // Drag-and-Drop Attributes
            "aria-dropeffect": 0,
            "aria-grabbed": 0,
            // Relationship Attributes
            "aria-activedescendant": 0,
            "aria-colcount": 0,
            "aria-colindex": 0,
            "aria-colspan": 0,
            "aria-controls": 0,
            "aria-describedby": 0,
            "aria-errormessage": 0,
            "aria-flowto": 0,
            "aria-labelledby": 0,
            "aria-owns": 0,
            "aria-posinset": 0,
            "aria-rowcount": 0,
            "aria-rowindex": 0,
            "aria-rowspan": 0,
            "aria-setsize": 0
          };
          var warnedProperties = {};
          var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
          var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
          function validateProperty(tagName, name) {
            {
              if (hasOwnProperty.call(warnedProperties, name) && warnedProperties[name]) {
                return true;
              }
              if (rARIACamel.test(name)) {
                var ariaName = "aria-" + name.slice(4).toLowerCase();
                var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
                if (correctName == null) {
                  error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name);
                  warnedProperties[name] = true;
                  return true;
                }
                if (name !== correctName) {
                  error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName);
                  warnedProperties[name] = true;
                  return true;
                }
              }
              if (rARIA.test(name)) {
                var lowerCasedName = name.toLowerCase();
                var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
                if (standardName == null) {
                  warnedProperties[name] = true;
                  return false;
                }
                if (name !== standardName) {
                  error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName);
                  warnedProperties[name] = true;
                  return true;
                }
              }
            }
            return true;
          }
          function warnInvalidARIAProps(type, props) {
            {
              var invalidProps = [];
              for (var key in props) {
                var isValid = validateProperty(type, key);
                if (!isValid) {
                  invalidProps.push(key);
                }
              }
              var unknownPropString = invalidProps.map(function(prop) {
                return "`" + prop + "`";
              }).join(", ");
              if (invalidProps.length === 1) {
                error("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
              } else if (invalidProps.length > 1) {
                error("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
              }
            }
          }
          function validateProperties(type, props) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnInvalidARIAProps(type, props);
          }
          var didWarnValueNull = false;
          function validateProperties$1(type, props) {
            {
              if (type !== "input" && type !== "textarea" && type !== "select") {
                return;
              }
              if (props != null && props.value === null && !didWarnValueNull) {
                didWarnValueNull = true;
                if (type === "select" && props.multiple) {
                  error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
                } else {
                  error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
                }
              }
            }
          }
          var validateProperty$1 = function() {
          };
          {
            var warnedProperties$1 = {};
            var EVENT_NAME_REGEX = /^on./;
            var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
            var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
            var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
            validateProperty$1 = function(tagName, name, value, eventRegistry) {
              if (hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
                return true;
              }
              var lowerCasedName = name.toLowerCase();
              if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
                error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (eventRegistry != null) {
                var registrationNameDependencies2 = eventRegistry.registrationNameDependencies, possibleRegistrationNames2 = eventRegistry.possibleRegistrationNames;
                if (registrationNameDependencies2.hasOwnProperty(name)) {
                  return true;
                }
                var registrationName = possibleRegistrationNames2.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames2[lowerCasedName] : null;
                if (registrationName != null) {
                  error("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName);
                  warnedProperties$1[name] = true;
                  return true;
                }
                if (EVENT_NAME_REGEX.test(name)) {
                  error("Unknown event handler property `%s`. It will be ignored.", name);
                  warnedProperties$1[name] = true;
                  return true;
                }
              } else if (EVENT_NAME_REGEX.test(name)) {
                if (INVALID_EVENT_NAME_REGEX.test(name)) {
                  error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
                }
                warnedProperties$1[name] = true;
                return true;
              }
              if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
                return true;
              }
              if (lowerCasedName === "innerhtml") {
                error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (lowerCasedName === "aria") {
                error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value !== "string") {
                error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
                warnedProperties$1[name] = true;
                return true;
              }
              if (typeof value === "number" && isNaN(value)) {
                error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name);
                warnedProperties$1[name] = true;
                return true;
              }
              var propertyInfo = getPropertyInfo(name);
              var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
              if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                var standardName = possibleStandardNames[lowerCasedName];
                if (standardName !== name) {
                  error("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName);
                  warnedProperties$1[name] = true;
                  return true;
                }
              } else if (!isReserved && name !== lowerCasedName) {
                error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName);
                warnedProperties$1[name] = true;
                return true;
              }
              if (typeof value === "boolean" && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                if (value) {
                  error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name);
                } else {
                  error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
                }
                warnedProperties$1[name] = true;
                return true;
              }
              if (isReserved) {
                return true;
              }
              if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                warnedProperties$1[name] = true;
                return false;
              }
              if ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
                error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
                warnedProperties$1[name] = true;
                return true;
              }
              return true;
            };
          }
          var warnUnknownProperties = function(type, props, eventRegistry) {
            {
              var unknownProps = [];
              for (var key in props) {
                var isValid = validateProperty$1(type, key, props[key], eventRegistry);
                if (!isValid) {
                  unknownProps.push(key);
                }
              }
              var unknownPropString = unknownProps.map(function(prop) {
                return "`" + prop + "`";
              }).join(", ");
              if (unknownProps.length === 1) {
                error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
              } else if (unknownProps.length > 1) {
                error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
              }
            }
          };
          function validateProperties$2(type, props, eventRegistry) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnUnknownProperties(type, props, eventRegistry);
          }
          var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
          var IS_NON_DELEGATED = 1 << 1;
          var IS_CAPTURE_PHASE = 1 << 2;
          var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;
          var currentReplayingEvent = null;
          function setReplayingEvent(event) {
            {
              if (currentReplayingEvent !== null) {
                error("Expected currently replaying event to be null. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            currentReplayingEvent = event;
          }
          function resetReplayingEvent() {
            {
              if (currentReplayingEvent === null) {
                error("Expected currently replaying event to not be null. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            currentReplayingEvent = null;
          }
          function isReplayingEvent(event) {
            return event === currentReplayingEvent;
          }
          function getEventTarget(nativeEvent) {
            var target = nativeEvent.target || nativeEvent.srcElement || window;
            if (target.correspondingUseElement) {
              target = target.correspondingUseElement;
            }
            return target.nodeType === TEXT_NODE ? target.parentNode : target;
          }
          var restoreImpl = null;
          var restoreTarget = null;
          var restoreQueue = null;
          function restoreStateOfTarget(target) {
            var internalInstance = getInstanceFromNode(target);
            if (!internalInstance) {
              return;
            }
            if (typeof restoreImpl !== "function") {
              throw new Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
            }
            var stateNode = internalInstance.stateNode;
            if (stateNode) {
              var _props = getFiberCurrentPropsFromNode(stateNode);
              restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
            }
          }
          function setRestoreImplementation(impl) {
            restoreImpl = impl;
          }
          function enqueueStateRestore(target) {
            if (restoreTarget) {
              if (restoreQueue) {
                restoreQueue.push(target);
              } else {
                restoreQueue = [target];
              }
            } else {
              restoreTarget = target;
            }
          }
          function needsStateRestore() {
            return restoreTarget !== null || restoreQueue !== null;
          }
          function restoreStateIfNeeded() {
            if (!restoreTarget) {
              return;
            }
            var target = restoreTarget;
            var queuedTargets = restoreQueue;
            restoreTarget = null;
            restoreQueue = null;
            restoreStateOfTarget(target);
            if (queuedTargets) {
              for (var i = 0; i < queuedTargets.length; i++) {
                restoreStateOfTarget(queuedTargets[i]);
              }
            }
          }
          var batchedUpdatesImpl = function(fn, bookkeeping) {
            return fn(bookkeeping);
          };
          var flushSyncImpl = function() {
          };
          var isInsideEventHandler = false;
          function finishEventHandler() {
            var controlledComponentsHavePendingUpdates = needsStateRestore();
            if (controlledComponentsHavePendingUpdates) {
              flushSyncImpl();
              restoreStateIfNeeded();
            }
          }
          function batchedUpdates(fn, a, b) {
            if (isInsideEventHandler) {
              return fn(a, b);
            }
            isInsideEventHandler = true;
            try {
              return batchedUpdatesImpl(fn, a, b);
            } finally {
              isInsideEventHandler = false;
              finishEventHandler();
            }
          }
          function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushSyncImpl) {
            batchedUpdatesImpl = _batchedUpdatesImpl;
            flushSyncImpl = _flushSyncImpl;
          }
          function isInteractive(tag) {
            return tag === "button" || tag === "input" || tag === "select" || tag === "textarea";
          }
          function shouldPreventMouseEvent(name, type, props) {
            switch (name) {
              case "onClick":
              case "onClickCapture":
              case "onDoubleClick":
              case "onDoubleClickCapture":
              case "onMouseDown":
              case "onMouseDownCapture":
              case "onMouseMove":
              case "onMouseMoveCapture":
              case "onMouseUp":
              case "onMouseUpCapture":
              case "onMouseEnter":
                return !!(props.disabled && isInteractive(type));
              default:
                return false;
            }
          }
          function getListener(inst, registrationName) {
            var stateNode = inst.stateNode;
            if (stateNode === null) {
              return null;
            }
            var props = getFiberCurrentPropsFromNode(stateNode);
            if (props === null) {
              return null;
            }
            var listener = props[registrationName];
            if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
              return null;
            }
            if (listener && typeof listener !== "function") {
              throw new Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
            }
            return listener;
          }
          var passiveBrowserEventsSupported = false;
          if (canUseDOM3) {
            try {
              var options = {};
              Object.defineProperty(options, "passive", {
                get: function() {
                  passiveBrowserEventsSupported = true;
                }
              });
              window.addEventListener("test", options, options);
              window.removeEventListener("test", options, options);
            } catch (e) {
              passiveBrowserEventsSupported = false;
            }
          }
          function invokeGuardedCallbackProd(name, func, context, a, b, c, d, e, f) {
            var funcArgs = Array.prototype.slice.call(arguments, 3);
            try {
              func.apply(context, funcArgs);
            } catch (error2) {
              this.onError(error2);
            }
          }
          var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
          {
            if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
              var fakeNode = document.createElement("react");
              invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a, b, c, d, e, f) {
                if (typeof document === "undefined" || document === null) {
                  throw new Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
                }
                var evt = document.createEvent("Event");
                var didCall = false;
                var didError = true;
                var windowEvent = window.event;
                var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
                function restoreAfterDispatch() {
                  fakeNode.removeEventListener(evtType, callCallback2, false);
                  if (typeof window.event !== "undefined" && window.hasOwnProperty("event")) {
                    window.event = windowEvent;
                  }
                }
                var funcArgs = Array.prototype.slice.call(arguments, 3);
                function callCallback2() {
                  didCall = true;
                  restoreAfterDispatch();
                  func.apply(context, funcArgs);
                  didError = false;
                }
                var error2;
                var didSetError = false;
                var isCrossOriginError = false;
                function handleWindowError(event) {
                  error2 = event.error;
                  didSetError = true;
                  if (error2 === null && event.colno === 0 && event.lineno === 0) {
                    isCrossOriginError = true;
                  }
                  if (event.defaultPrevented) {
                    if (error2 != null && typeof error2 === "object") {
                      try {
                        error2._suppressLogging = true;
                      } catch (inner) {
                      }
                    }
                  }
                }
                var evtType = "react-" + (name ? name : "invokeguardedcallback");
                window.addEventListener("error", handleWindowError);
                fakeNode.addEventListener(evtType, callCallback2, false);
                evt.initEvent(evtType, false, false);
                fakeNode.dispatchEvent(evt);
                if (windowEventDescriptor) {
                  Object.defineProperty(window, "event", windowEventDescriptor);
                }
                if (didCall && didError) {
                  if (!didSetError) {
                    error2 = new Error(`An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the "Pause on exceptions" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.`);
                  } else if (isCrossOriginError) {
                    error2 = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.");
                  }
                  this.onError(error2);
                }
                window.removeEventListener("error", handleWindowError);
                if (!didCall) {
                  restoreAfterDispatch();
                  return invokeGuardedCallbackProd.apply(this, arguments);
                }
              };
            }
          }
          var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
          var hasError = false;
          var caughtError = null;
          var hasRethrowError = false;
          var rethrowError = null;
          var reporter = {
            onError: function(error2) {
              hasError = true;
              caughtError = error2;
            }
          };
          function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
            hasError = false;
            caughtError = null;
            invokeGuardedCallbackImpl$1.apply(reporter, arguments);
          }
          function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
            invokeGuardedCallback.apply(this, arguments);
            if (hasError) {
              var error2 = clearCaughtError();
              if (!hasRethrowError) {
                hasRethrowError = true;
                rethrowError = error2;
              }
            }
          }
          function rethrowCaughtError() {
            if (hasRethrowError) {
              var error2 = rethrowError;
              hasRethrowError = false;
              rethrowError = null;
              throw error2;
            }
          }
          function hasCaughtError() {
            return hasError;
          }
          function clearCaughtError() {
            if (hasError) {
              var error2 = caughtError;
              hasError = false;
              caughtError = null;
              return error2;
            } else {
              throw new Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          function get(key) {
            return key._reactInternals;
          }
          function has(key) {
            return key._reactInternals !== void 0;
          }
          function set(key, value) {
            key._reactInternals = value;
          }
          var NoFlags = (
            /*                      */
            0
          );
          var PerformedWork = (
            /*                */
            1
          );
          var Placement = (
            /*                    */
            2
          );
          var Update = (
            /*                       */
            4
          );
          var ChildDeletion = (
            /*                */
            16
          );
          var ContentReset = (
            /*                 */
            32
          );
          var Callback = (
            /*                     */
            64
          );
          var DidCapture = (
            /*                   */
            128
          );
          var ForceClientRender = (
            /*            */
            256
          );
          var Ref3 = (
            /*                          */
            512
          );
          var Snapshot = (
            /*                     */
            1024
          );
          var Passive = (
            /*                      */
            2048
          );
          var Hydrating = (
            /*                    */
            4096
          );
          var Visibility2 = (
            /*                   */
            8192
          );
          var StoreConsistency = (
            /*             */
            16384
          );
          var LifecycleEffectMask = Passive | Update | Callback | Ref3 | Snapshot | StoreConsistency;
          var HostEffectMask = (
            /*               */
            32767
          );
          var Incomplete = (
            /*                   */
            32768
          );
          var ShouldCapture = (
            /*                */
            65536
          );
          var ForceUpdateForLegacySuspense = (
            /* */
            131072
          );
          var Forked = (
            /*                       */
            1048576
          );
          var RefStatic = (
            /*                    */
            2097152
          );
          var LayoutStatic = (
            /*                 */
            4194304
          );
          var PassiveStatic = (
            /*                */
            8388608
          );
          var MountLayoutDev = (
            /*               */
            16777216
          );
          var MountPassiveDev = (
            /*              */
            33554432
          );
          var BeforeMutationMask = (
            // TODO: Remove Update flag from before mutation phase by re-landing Visibility
            // flag logic (see #20043)
            Update | Snapshot | 0
          );
          var MutationMask = Placement | Update | ChildDeletion | ContentReset | Ref3 | Hydrating | Visibility2;
          var LayoutMask = Update | Callback | Ref3 | Visibility2;
          var PassiveMask = Passive | ChildDeletion;
          var StaticMask = LayoutStatic | PassiveStatic | RefStatic;
          var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
          function getNearestMountedFiber(fiber) {
            var node = fiber;
            var nearestMounted = fiber;
            if (!fiber.alternate) {
              var nextNode = node;
              do {
                node = nextNode;
                if ((node.flags & (Placement | Hydrating)) !== NoFlags) {
                  nearestMounted = node.return;
                }
                nextNode = node.return;
              } while (nextNode);
            } else {
              while (node.return) {
                node = node.return;
              }
            }
            if (node.tag === HostRoot) {
              return nearestMounted;
            }
            return null;
          }
          function getSuspenseInstanceFromFiber(fiber) {
            if (fiber.tag === SuspenseComponent) {
              var suspenseState = fiber.memoizedState;
              if (suspenseState === null) {
                var current2 = fiber.alternate;
                if (current2 !== null) {
                  suspenseState = current2.memoizedState;
                }
              }
              if (suspenseState !== null) {
                return suspenseState.dehydrated;
              }
            }
            return null;
          }
          function getContainerFromFiber(fiber) {
            return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
          }
          function isFiberMounted(fiber) {
            return getNearestMountedFiber(fiber) === fiber;
          }
          function isMounted(component) {
            {
              var owner = ReactCurrentOwner.current;
              if (owner !== null && owner.tag === ClassComponent) {
                var ownerFiber = owner;
                var instance = ownerFiber.stateNode;
                if (!instance._warnedAboutRefsInRender) {
                  error("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromFiber(ownerFiber) || "A component");
                }
                instance._warnedAboutRefsInRender = true;
              }
            }
            var fiber = get(component);
            if (!fiber) {
              return false;
            }
            return getNearestMountedFiber(fiber) === fiber;
          }
          function assertIsMounted(fiber) {
            if (getNearestMountedFiber(fiber) !== fiber) {
              throw new Error("Unable to find node on an unmounted component.");
            }
          }
          function findCurrentFiberUsingSlowPath(fiber) {
            var alternate = fiber.alternate;
            if (!alternate) {
              var nearestMounted = getNearestMountedFiber(fiber);
              if (nearestMounted === null) {
                throw new Error("Unable to find node on an unmounted component.");
              }
              if (nearestMounted !== fiber) {
                return null;
              }
              return fiber;
            }
            var a = fiber;
            var b = alternate;
            while (true) {
              var parentA = a.return;
              if (parentA === null) {
                break;
              }
              var parentB = parentA.alternate;
              if (parentB === null) {
                var nextParent = parentA.return;
                if (nextParent !== null) {
                  a = b = nextParent;
                  continue;
                }
                break;
              }
              if (parentA.child === parentB.child) {
                var child = parentA.child;
                while (child) {
                  if (child === a) {
                    assertIsMounted(parentA);
                    return fiber;
                  }
                  if (child === b) {
                    assertIsMounted(parentA);
                    return alternate;
                  }
                  child = child.sibling;
                }
                throw new Error("Unable to find node on an unmounted component.");
              }
              if (a.return !== b.return) {
                a = parentA;
                b = parentB;
              } else {
                var didFindChild = false;
                var _child = parentA.child;
                while (_child) {
                  if (_child === a) {
                    didFindChild = true;
                    a = parentA;
                    b = parentB;
                    break;
                  }
                  if (_child === b) {
                    didFindChild = true;
                    b = parentA;
                    a = parentB;
                    break;
                  }
                  _child = _child.sibling;
                }
                if (!didFindChild) {
                  _child = parentB.child;
                  while (_child) {
                    if (_child === a) {
                      didFindChild = true;
                      a = parentB;
                      b = parentA;
                      break;
                    }
                    if (_child === b) {
                      didFindChild = true;
                      b = parentB;
                      a = parentA;
                      break;
                    }
                    _child = _child.sibling;
                  }
                  if (!didFindChild) {
                    throw new Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
                  }
                }
              }
              if (a.alternate !== b) {
                throw new Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            if (a.tag !== HostRoot) {
              throw new Error("Unable to find node on an unmounted component.");
            }
            if (a.stateNode.current === a) {
              return fiber;
            }
            return alternate;
          }
          function findCurrentHostFiber(parent2) {
            var currentParent = findCurrentFiberUsingSlowPath(parent2);
            return currentParent !== null ? findCurrentHostFiberImpl(currentParent) : null;
          }
          function findCurrentHostFiberImpl(node) {
            if (node.tag === HostComponent || node.tag === HostText) {
              return node;
            }
            var child = node.child;
            while (child !== null) {
              var match = findCurrentHostFiberImpl(child);
              if (match !== null) {
                return match;
              }
              child = child.sibling;
            }
            return null;
          }
          function findCurrentHostFiberWithNoPortals(parent2) {
            var currentParent = findCurrentFiberUsingSlowPath(parent2);
            return currentParent !== null ? findCurrentHostFiberWithNoPortalsImpl(currentParent) : null;
          }
          function findCurrentHostFiberWithNoPortalsImpl(node) {
            if (node.tag === HostComponent || node.tag === HostText) {
              return node;
            }
            var child = node.child;
            while (child !== null) {
              if (child.tag !== HostPortal) {
                var match = findCurrentHostFiberWithNoPortalsImpl(child);
                if (match !== null) {
                  return match;
                }
              }
              child = child.sibling;
            }
            return null;
          }
          var scheduleCallback = Scheduler.unstable_scheduleCallback;
          var cancelCallback = Scheduler.unstable_cancelCallback;
          var shouldYield = Scheduler.unstable_shouldYield;
          var requestPaint = Scheduler.unstable_requestPaint;
          var now = Scheduler.unstable_now;
          var getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel;
          var ImmediatePriority = Scheduler.unstable_ImmediatePriority;
          var UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;
          var NormalPriority = Scheduler.unstable_NormalPriority;
          var LowPriority = Scheduler.unstable_LowPriority;
          var IdlePriority = Scheduler.unstable_IdlePriority;
          var unstable_yieldValue = Scheduler.unstable_yieldValue;
          var unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue;
          var rendererID = null;
          var injectedHook = null;
          var injectedProfilingHooks = null;
          var hasLoggedError = false;
          var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined";
          function injectInternals(internals) {
            if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
              return false;
            }
            var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
            if (hook.isDisabled) {
              return true;
            }
            if (!hook.supportsFiber) {
              {
                error("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools");
              }
              return true;
            }
            try {
              if (enableSchedulingProfiler) {
                internals = assign({}, internals, {
                  getLaneLabelMap,
                  injectProfilingHooks
                });
              }
              rendererID = hook.inject(internals);
              injectedHook = hook;
            } catch (err) {
              {
                error("React instrumentation encountered an error: %s.", err);
              }
            }
            if (hook.checkDCE) {
              return true;
            } else {
              return false;
            }
          }
          function onScheduleRoot(root2, children) {
            {
              if (injectedHook && typeof injectedHook.onScheduleFiberRoot === "function") {
                try {
                  injectedHook.onScheduleFiberRoot(rendererID, root2, children);
                } catch (err) {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onCommitRoot(root2, eventPriority) {
            if (injectedHook && typeof injectedHook.onCommitFiberRoot === "function") {
              try {
                var didError = (root2.current.flags & DidCapture) === DidCapture;
                if (enableProfilerTimer) {
                  var schedulerPriority;
                  switch (eventPriority) {
                    case DiscreteEventPriority:
                      schedulerPriority = ImmediatePriority;
                      break;
                    case ContinuousEventPriority:
                      schedulerPriority = UserBlockingPriority;
                      break;
                    case DefaultEventPriority:
                      schedulerPriority = NormalPriority;
                      break;
                    case IdleEventPriority:
                      schedulerPriority = IdlePriority;
                      break;
                    default:
                      schedulerPriority = NormalPriority;
                      break;
                  }
                  injectedHook.onCommitFiberRoot(rendererID, root2, schedulerPriority, didError);
                } else {
                  injectedHook.onCommitFiberRoot(rendererID, root2, void 0, didError);
                }
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onPostCommitRoot(root2) {
            if (injectedHook && typeof injectedHook.onPostCommitFiberRoot === "function") {
              try {
                injectedHook.onPostCommitFiberRoot(rendererID, root2);
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onCommitUnmount(fiber) {
            if (injectedHook && typeof injectedHook.onCommitFiberUnmount === "function") {
              try {
                injectedHook.onCommitFiberUnmount(rendererID, fiber);
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function setIsStrictModeForDevtools(newIsStrictMode) {
            {
              if (typeof unstable_yieldValue === "function") {
                unstable_setDisableYieldValue(newIsStrictMode);
                setSuppressWarning(newIsStrictMode);
              }
              if (injectedHook && typeof injectedHook.setStrictMode === "function") {
                try {
                  injectedHook.setStrictMode(rendererID, newIsStrictMode);
                } catch (err) {
                  {
                    if (!hasLoggedError) {
                      hasLoggedError = true;
                      error("React instrumentation encountered an error: %s", err);
                    }
                  }
                }
              }
            }
          }
          function injectProfilingHooks(profilingHooks) {
            injectedProfilingHooks = profilingHooks;
          }
          function getLaneLabelMap() {
            {
              var map = /* @__PURE__ */ new Map();
              var lane = 1;
              for (var index2 = 0; index2 < TotalLanes; index2++) {
                var label = getLabelForLane(lane);
                map.set(lane, label);
                lane *= 2;
              }
              return map;
            }
          }
          function markCommitStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStarted === "function") {
                injectedProfilingHooks.markCommitStarted(lanes);
              }
            }
          }
          function markCommitStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStopped === "function") {
                injectedProfilingHooks.markCommitStopped();
              }
            }
          }
          function markComponentRenderStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStarted === "function") {
                injectedProfilingHooks.markComponentRenderStarted(fiber);
              }
            }
          }
          function markComponentRenderStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStopped === "function") {
                injectedProfilingHooks.markComponentRenderStopped();
              }
            }
          }
          function markComponentPassiveEffectMountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted === "function") {
                injectedProfilingHooks.markComponentPassiveEffectMountStarted(fiber);
              }
            }
          }
          function markComponentPassiveEffectMountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped === "function") {
                injectedProfilingHooks.markComponentPassiveEffectMountStopped();
              }
            }
          }
          function markComponentPassiveEffectUnmountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted === "function") {
                injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(fiber);
              }
            }
          }
          function markComponentPassiveEffectUnmountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped === "function") {
                injectedProfilingHooks.markComponentPassiveEffectUnmountStopped();
              }
            }
          }
          function markComponentLayoutEffectMountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted === "function") {
                injectedProfilingHooks.markComponentLayoutEffectMountStarted(fiber);
              }
            }
          }
          function markComponentLayoutEffectMountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped === "function") {
                injectedProfilingHooks.markComponentLayoutEffectMountStopped();
              }
            }
          }
          function markComponentLayoutEffectUnmountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted === "function") {
                injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(fiber);
              }
            }
          }
          function markComponentLayoutEffectUnmountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped === "function") {
                injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();
              }
            }
          }
          function markComponentErrored(fiber, thrownValue, lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentErrored === "function") {
                injectedProfilingHooks.markComponentErrored(fiber, thrownValue, lanes);
              }
            }
          }
          function markComponentSuspended(fiber, wakeable, lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentSuspended === "function") {
                injectedProfilingHooks.markComponentSuspended(fiber, wakeable, lanes);
              }
            }
          }
          function markLayoutEffectsStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStarted === "function") {
                injectedProfilingHooks.markLayoutEffectsStarted(lanes);
              }
            }
          }
          function markLayoutEffectsStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStopped === "function") {
                injectedProfilingHooks.markLayoutEffectsStopped();
              }
            }
          }
          function markPassiveEffectsStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStarted === "function") {
                injectedProfilingHooks.markPassiveEffectsStarted(lanes);
              }
            }
          }
          function markPassiveEffectsStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStopped === "function") {
                injectedProfilingHooks.markPassiveEffectsStopped();
              }
            }
          }
          function markRenderStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStarted === "function") {
                injectedProfilingHooks.markRenderStarted(lanes);
              }
            }
          }
          function markRenderYielded() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderYielded === "function") {
                injectedProfilingHooks.markRenderYielded();
              }
            }
          }
          function markRenderStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStopped === "function") {
                injectedProfilingHooks.markRenderStopped();
              }
            }
          }
          function markRenderScheduled(lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderScheduled === "function") {
                injectedProfilingHooks.markRenderScheduled(lane);
              }
            }
          }
          function markForceUpdateScheduled(fiber, lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markForceUpdateScheduled === "function") {
                injectedProfilingHooks.markForceUpdateScheduled(fiber, lane);
              }
            }
          }
          function markStateUpdateScheduled(fiber, lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markStateUpdateScheduled === "function") {
                injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);
              }
            }
          }
          var NoMode = (
            /*                         */
            0
          );
          var ConcurrentMode = (
            /*                 */
            1
          );
          var ProfileMode = (
            /*                    */
            2
          );
          var StrictLegacyMode = (
            /*               */
            8
          );
          var StrictEffectsMode = (
            /*              */
            16
          );
          var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
          var log = Math.log;
          var LN2 = Math.LN2;
          function clz32Fallback(x) {
            var asUint = x >>> 0;
            if (asUint === 0) {
              return 32;
            }
            return 31 - (log(asUint) / LN2 | 0) | 0;
          }
          var TotalLanes = 31;
          var NoLanes = (
            /*                        */
            0
          );
          var NoLane = (
            /*                          */
            0
          );
          var SyncLane = (
            /*                        */
            1
          );
          var InputContinuousHydrationLane = (
            /*    */
            2
          );
          var InputContinuousLane = (
            /*             */
            4
          );
          var DefaultHydrationLane = (
            /*            */
            8
          );
          var DefaultLane = (
            /*                     */
            16
          );
          var TransitionHydrationLane = (
            /*                */
            32
          );
          var TransitionLanes = (
            /*                       */
            4194240
          );
          var TransitionLane1 = (
            /*                        */
            64
          );
          var TransitionLane2 = (
            /*                        */
            128
          );
          var TransitionLane3 = (
            /*                        */
            256
          );
          var TransitionLane4 = (
            /*                        */
            512
          );
          var TransitionLane5 = (
            /*                        */
            1024
          );
          var TransitionLane6 = (
            /*                        */
            2048
          );
          var TransitionLane7 = (
            /*                        */
            4096
          );
          var TransitionLane8 = (
            /*                        */
            8192
          );
          var TransitionLane9 = (
            /*                        */
            16384
          );
          var TransitionLane10 = (
            /*                       */
            32768
          );
          var TransitionLane11 = (
            /*                       */
            65536
          );
          var TransitionLane12 = (
            /*                       */
            131072
          );
          var TransitionLane13 = (
            /*                       */
            262144
          );
          var TransitionLane14 = (
            /*                       */
            524288
          );
          var TransitionLane15 = (
            /*                       */
            1048576
          );
          var TransitionLane16 = (
            /*                       */
            2097152
          );
          var RetryLanes = (
            /*                            */
            130023424
          );
          var RetryLane1 = (
            /*                             */
            4194304
          );
          var RetryLane2 = (
            /*                             */
            8388608
          );
          var RetryLane3 = (
            /*                             */
            16777216
          );
          var RetryLane4 = (
            /*                             */
            33554432
          );
          var RetryLane5 = (
            /*                             */
            67108864
          );
          var SomeRetryLane = RetryLane1;
          var SelectiveHydrationLane = (
            /*          */
            134217728
          );
          var NonIdleLanes = (
            /*                          */
            268435455
          );
          var IdleHydrationLane = (
            /*               */
            268435456
          );
          var IdleLane = (
            /*                        */
            536870912
          );
          var OffscreenLane = (
            /*                   */
            1073741824
          );
          function getLabelForLane(lane) {
            {
              if (lane & SyncLane) {
                return "Sync";
              }
              if (lane & InputContinuousHydrationLane) {
                return "InputContinuousHydration";
              }
              if (lane & InputContinuousLane) {
                return "InputContinuous";
              }
              if (lane & DefaultHydrationLane) {
                return "DefaultHydration";
              }
              if (lane & DefaultLane) {
                return "Default";
              }
              if (lane & TransitionHydrationLane) {
                return "TransitionHydration";
              }
              if (lane & TransitionLanes) {
                return "Transition";
              }
              if (lane & RetryLanes) {
                return "Retry";
              }
              if (lane & SelectiveHydrationLane) {
                return "SelectiveHydration";
              }
              if (lane & IdleHydrationLane) {
                return "IdleHydration";
              }
              if (lane & IdleLane) {
                return "Idle";
              }
              if (lane & OffscreenLane) {
                return "Offscreen";
              }
            }
          }
          var NoTimestamp = -1;
          var nextTransitionLane = TransitionLane1;
          var nextRetryLane = RetryLane1;
          function getHighestPriorityLanes(lanes) {
            switch (getHighestPriorityLane(lanes)) {
              case SyncLane:
                return SyncLane;
              case InputContinuousHydrationLane:
                return InputContinuousHydrationLane;
              case InputContinuousLane:
                return InputContinuousLane;
              case DefaultHydrationLane:
                return DefaultHydrationLane;
              case DefaultLane:
                return DefaultLane;
              case TransitionHydrationLane:
                return TransitionHydrationLane;
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
                return lanes & TransitionLanes;
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                return lanes & RetryLanes;
              case SelectiveHydrationLane:
                return SelectiveHydrationLane;
              case IdleHydrationLane:
                return IdleHydrationLane;
              case IdleLane:
                return IdleLane;
              case OffscreenLane:
                return OffscreenLane;
              default:
                {
                  error("Should have found matching lanes. This is a bug in React.");
                }
                return lanes;
            }
          }
          function getNextLanes(root2, wipLanes) {
            var pendingLanes = root2.pendingLanes;
            if (pendingLanes === NoLanes) {
              return NoLanes;
            }
            var nextLanes = NoLanes;
            var suspendedLanes = root2.suspendedLanes;
            var pingedLanes = root2.pingedLanes;
            var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
            if (nonIdlePendingLanes !== NoLanes) {
              var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
              if (nonIdleUnblockedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
              } else {
                var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
                if (nonIdlePingedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
                }
              }
            } else {
              var unblockedLanes = pendingLanes & ~suspendedLanes;
              if (unblockedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(unblockedLanes);
              } else {
                if (pingedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(pingedLanes);
                }
              }
            }
            if (nextLanes === NoLanes) {
              return NoLanes;
            }
            if (wipLanes !== NoLanes && wipLanes !== nextLanes && // If we already suspended with a delay, then interrupting is fine. Don't
            // bother waiting until the root is complete.
            (wipLanes & suspendedLanes) === NoLanes) {
              var nextLane = getHighestPriorityLane(nextLanes);
              var wipLane = getHighestPriorityLane(wipLanes);
              if (
                // Tests whether the next lane is equal or lower priority than the wip
                // one. This works because the bits decrease in priority as you go left.
                nextLane >= wipLane || // Default priority updates should not interrupt transition updates. The
                // only difference between default updates and transition updates is that
                // default updates do not support refresh transitions.
                nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes
              ) {
                return wipLanes;
              }
            }
            if ((nextLanes & InputContinuousLane) !== NoLanes) {
              nextLanes |= pendingLanes & DefaultLane;
            }
            var entangledLanes = root2.entangledLanes;
            if (entangledLanes !== NoLanes) {
              var entanglements = root2.entanglements;
              var lanes = nextLanes & entangledLanes;
              while (lanes > 0) {
                var index2 = pickArbitraryLaneIndex(lanes);
                var lane = 1 << index2;
                nextLanes |= entanglements[index2];
                lanes &= ~lane;
              }
            }
            return nextLanes;
          }
          function getMostRecentEventTime(root2, lanes) {
            var eventTimes = root2.eventTimes;
            var mostRecentEventTime = NoTimestamp;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              var eventTime = eventTimes[index2];
              if (eventTime > mostRecentEventTime) {
                mostRecentEventTime = eventTime;
              }
              lanes &= ~lane;
            }
            return mostRecentEventTime;
          }
          function computeExpirationTime(lane, currentTime) {
            switch (lane) {
              case SyncLane:
              case InputContinuousHydrationLane:
              case InputContinuousLane:
                return currentTime + 250;
              case DefaultHydrationLane:
              case DefaultLane:
              case TransitionHydrationLane:
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
                return currentTime + 5e3;
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                return NoTimestamp;
              case SelectiveHydrationLane:
              case IdleHydrationLane:
              case IdleLane:
              case OffscreenLane:
                return NoTimestamp;
              default:
                {
                  error("Should have found matching lanes. This is a bug in React.");
                }
                return NoTimestamp;
            }
          }
          function markStarvedLanesAsExpired(root2, currentTime) {
            var pendingLanes = root2.pendingLanes;
            var suspendedLanes = root2.suspendedLanes;
            var pingedLanes = root2.pingedLanes;
            var expirationTimes = root2.expirationTimes;
            var lanes = pendingLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              var expirationTime = expirationTimes[index2];
              if (expirationTime === NoTimestamp) {
                if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
                  expirationTimes[index2] = computeExpirationTime(lane, currentTime);
                }
              } else if (expirationTime <= currentTime) {
                root2.expiredLanes |= lane;
              }
              lanes &= ~lane;
            }
          }
          function getHighestPriorityPendingLanes(root2) {
            return getHighestPriorityLanes(root2.pendingLanes);
          }
          function getLanesToRetrySynchronouslyOnError(root2) {
            var everythingButOffscreen = root2.pendingLanes & ~OffscreenLane;
            if (everythingButOffscreen !== NoLanes) {
              return everythingButOffscreen;
            }
            if (everythingButOffscreen & OffscreenLane) {
              return OffscreenLane;
            }
            return NoLanes;
          }
          function includesSyncLane(lanes) {
            return (lanes & SyncLane) !== NoLanes;
          }
          function includesNonIdleWork(lanes) {
            return (lanes & NonIdleLanes) !== NoLanes;
          }
          function includesOnlyRetries(lanes) {
            return (lanes & RetryLanes) === lanes;
          }
          function includesOnlyNonUrgentLanes(lanes) {
            var UrgentLanes = SyncLane | InputContinuousLane | DefaultLane;
            return (lanes & UrgentLanes) === NoLanes;
          }
          function includesOnlyTransitions(lanes) {
            return (lanes & TransitionLanes) === lanes;
          }
          function includesBlockingLane(root2, lanes) {
            var SyncDefaultLanes = InputContinuousHydrationLane | InputContinuousLane | DefaultHydrationLane | DefaultLane;
            return (lanes & SyncDefaultLanes) !== NoLanes;
          }
          function includesExpiredLane(root2, lanes) {
            return (lanes & root2.expiredLanes) !== NoLanes;
          }
          function isTransitionLane(lane) {
            return (lane & TransitionLanes) !== NoLanes;
          }
          function claimNextTransitionLane() {
            var lane = nextTransitionLane;
            nextTransitionLane <<= 1;
            if ((nextTransitionLane & TransitionLanes) === NoLanes) {
              nextTransitionLane = TransitionLane1;
            }
            return lane;
          }
          function claimNextRetryLane() {
            var lane = nextRetryLane;
            nextRetryLane <<= 1;
            if ((nextRetryLane & RetryLanes) === NoLanes) {
              nextRetryLane = RetryLane1;
            }
            return lane;
          }
          function getHighestPriorityLane(lanes) {
            return lanes & -lanes;
          }
          function pickArbitraryLane(lanes) {
            return getHighestPriorityLane(lanes);
          }
          function pickArbitraryLaneIndex(lanes) {
            return 31 - clz32(lanes);
          }
          function laneToIndex(lane) {
            return pickArbitraryLaneIndex(lane);
          }
          function includesSomeLane(a, b) {
            return (a & b) !== NoLanes;
          }
          function isSubsetOfLanes(set2, subset) {
            return (set2 & subset) === subset;
          }
          function mergeLanes(a, b) {
            return a | b;
          }
          function removeLanes(set2, subset) {
            return set2 & ~subset;
          }
          function intersectLanes(a, b) {
            return a & b;
          }
          function laneToLanes(lane) {
            return lane;
          }
          function higherPriorityLane(a, b) {
            return a !== NoLane && a < b ? a : b;
          }
          function createLaneMap(initial) {
            var laneMap = [];
            for (var i = 0; i < TotalLanes; i++) {
              laneMap.push(initial);
            }
            return laneMap;
          }
          function markRootUpdated(root2, updateLane, eventTime) {
            root2.pendingLanes |= updateLane;
            if (updateLane !== IdleLane) {
              root2.suspendedLanes = NoLanes;
              root2.pingedLanes = NoLanes;
            }
            var eventTimes = root2.eventTimes;
            var index2 = laneToIndex(updateLane);
            eventTimes[index2] = eventTime;
          }
          function markRootSuspended(root2, suspendedLanes) {
            root2.suspendedLanes |= suspendedLanes;
            root2.pingedLanes &= ~suspendedLanes;
            var expirationTimes = root2.expirationTimes;
            var lanes = suspendedLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              expirationTimes[index2] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          function markRootPinged(root2, pingedLanes, eventTime) {
            root2.pingedLanes |= root2.suspendedLanes & pingedLanes;
          }
          function markRootFinished(root2, remainingLanes) {
            var noLongerPendingLanes = root2.pendingLanes & ~remainingLanes;
            root2.pendingLanes = remainingLanes;
            root2.suspendedLanes = NoLanes;
            root2.pingedLanes = NoLanes;
            root2.expiredLanes &= remainingLanes;
            root2.mutableReadLanes &= remainingLanes;
            root2.entangledLanes &= remainingLanes;
            var entanglements = root2.entanglements;
            var eventTimes = root2.eventTimes;
            var expirationTimes = root2.expirationTimes;
            var lanes = noLongerPendingLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              entanglements[index2] = NoLanes;
              eventTimes[index2] = NoTimestamp;
              expirationTimes[index2] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          function markRootEntangled(root2, entangledLanes) {
            var rootEntangledLanes = root2.entangledLanes |= entangledLanes;
            var entanglements = root2.entanglements;
            var lanes = rootEntangledLanes;
            while (lanes) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              if (
                // Is this one of the newly entangled lanes?
                lane & entangledLanes | // Is this lane transitively entangled with the newly entangled lanes?
                entanglements[index2] & entangledLanes
              ) {
                entanglements[index2] |= entangledLanes;
              }
              lanes &= ~lane;
            }
          }
          function getBumpedLaneForHydration(root2, renderLanes2) {
            var renderLane = getHighestPriorityLane(renderLanes2);
            var lane;
            switch (renderLane) {
              case InputContinuousLane:
                lane = InputContinuousHydrationLane;
                break;
              case DefaultLane:
                lane = DefaultHydrationLane;
                break;
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                lane = TransitionHydrationLane;
                break;
              case IdleLane:
                lane = IdleHydrationLane;
                break;
              default:
                lane = NoLane;
                break;
            }
            if ((lane & (root2.suspendedLanes | renderLanes2)) !== NoLane) {
              return NoLane;
            }
            return lane;
          }
          function addFiberToLanesMap(root2, fiber, lanes) {
            if (!isDevToolsPresent) {
              return;
            }
            var pendingUpdatersLaneMap = root2.pendingUpdatersLaneMap;
            while (lanes > 0) {
              var index2 = laneToIndex(lanes);
              var lane = 1 << index2;
              var updaters = pendingUpdatersLaneMap[index2];
              updaters.add(fiber);
              lanes &= ~lane;
            }
          }
          function movePendingFibersToMemoized(root2, lanes) {
            if (!isDevToolsPresent) {
              return;
            }
            var pendingUpdatersLaneMap = root2.pendingUpdatersLaneMap;
            var memoizedUpdaters = root2.memoizedUpdaters;
            while (lanes > 0) {
              var index2 = laneToIndex(lanes);
              var lane = 1 << index2;
              var updaters = pendingUpdatersLaneMap[index2];
              if (updaters.size > 0) {
                updaters.forEach(function(fiber) {
                  var alternate = fiber.alternate;
                  if (alternate === null || !memoizedUpdaters.has(alternate)) {
                    memoizedUpdaters.add(fiber);
                  }
                });
                updaters.clear();
              }
              lanes &= ~lane;
            }
          }
          function getTransitionsForLanes(root2, lanes) {
            {
              return null;
            }
          }
          var DiscreteEventPriority = SyncLane;
          var ContinuousEventPriority = InputContinuousLane;
          var DefaultEventPriority = DefaultLane;
          var IdleEventPriority = IdleLane;
          var currentUpdatePriority = NoLane;
          function getCurrentUpdatePriority() {
            return currentUpdatePriority;
          }
          function setCurrentUpdatePriority(newPriority) {
            currentUpdatePriority = newPriority;
          }
          function runWithPriority(priority, fn) {
            var previousPriority = currentUpdatePriority;
            try {
              currentUpdatePriority = priority;
              return fn();
            } finally {
              currentUpdatePriority = previousPriority;
            }
          }
          function higherEventPriority(a, b) {
            return a !== 0 && a < b ? a : b;
          }
          function lowerEventPriority(a, b) {
            return a === 0 || a > b ? a : b;
          }
          function isHigherEventPriority(a, b) {
            return a !== 0 && a < b;
          }
          function lanesToEventPriority(lanes) {
            var lane = getHighestPriorityLane(lanes);
            if (!isHigherEventPriority(DiscreteEventPriority, lane)) {
              return DiscreteEventPriority;
            }
            if (!isHigherEventPriority(ContinuousEventPriority, lane)) {
              return ContinuousEventPriority;
            }
            if (includesNonIdleWork(lane)) {
              return DefaultEventPriority;
            }
            return IdleEventPriority;
          }
          function isRootDehydrated(root2) {
            var currentState = root2.current.memoizedState;
            return currentState.isDehydrated;
          }
          var _attemptSynchronousHydration;
          function setAttemptSynchronousHydration(fn) {
            _attemptSynchronousHydration = fn;
          }
          function attemptSynchronousHydration(fiber) {
            _attemptSynchronousHydration(fiber);
          }
          var attemptContinuousHydration;
          function setAttemptContinuousHydration(fn) {
            attemptContinuousHydration = fn;
          }
          var attemptHydrationAtCurrentPriority;
          function setAttemptHydrationAtCurrentPriority(fn) {
            attemptHydrationAtCurrentPriority = fn;
          }
          var getCurrentUpdatePriority$1;
          function setGetCurrentUpdatePriority(fn) {
            getCurrentUpdatePriority$1 = fn;
          }
          var attemptHydrationAtPriority;
          function setAttemptHydrationAtPriority(fn) {
            attemptHydrationAtPriority = fn;
          }
          var hasScheduledReplayAttempt = false;
          var queuedDiscreteEvents = [];
          var queuedFocus = null;
          var queuedDrag = null;
          var queuedMouse = null;
          var queuedPointers = /* @__PURE__ */ new Map();
          var queuedPointerCaptures = /* @__PURE__ */ new Map();
          var queuedExplicitHydrationTargets = [];
          var discreteReplayableEvents = [
            "mousedown",
            "mouseup",
            "touchcancel",
            "touchend",
            "touchstart",
            "auxclick",
            "dblclick",
            "pointercancel",
            "pointerdown",
            "pointerup",
            "dragend",
            "dragstart",
            "drop",
            "compositionend",
            "compositionstart",
            "keydown",
            "keypress",
            "keyup",
            "input",
            "textInput",
            // Intentionally camelCase
            "copy",
            "cut",
            "paste",
            "click",
            "change",
            "contextmenu",
            "reset",
            "submit"
          ];
          function isDiscreteEventThatRequiresHydration(eventType) {
            return discreteReplayableEvents.indexOf(eventType) > -1;
          }
          function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            return {
              blockedOn,
              domEventName,
              eventSystemFlags,
              nativeEvent,
              targetContainers: [targetContainer]
            };
          }
          function clearIfContinuousEvent(domEventName, nativeEvent) {
            switch (domEventName) {
              case "focusin":
              case "focusout":
                queuedFocus = null;
                break;
              case "dragenter":
              case "dragleave":
                queuedDrag = null;
                break;
              case "mouseover":
              case "mouseout":
                queuedMouse = null;
                break;
              case "pointerover":
              case "pointerout": {
                var pointerId = nativeEvent.pointerId;
                queuedPointers.delete(pointerId);
                break;
              }
              case "gotpointercapture":
              case "lostpointercapture": {
                var _pointerId = nativeEvent.pointerId;
                queuedPointerCaptures.delete(_pointerId);
                break;
              }
            }
          }
          function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
              var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
              if (blockedOn !== null) {
                var _fiber2 = getInstanceFromNode(blockedOn);
                if (_fiber2 !== null) {
                  attemptContinuousHydration(_fiber2);
                }
              }
              return queuedEvent;
            }
            existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
            var targetContainers = existingQueuedEvent.targetContainers;
            if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) {
              targetContainers.push(targetContainer);
            }
            return existingQueuedEvent;
          }
          function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            switch (domEventName) {
              case "focusin": {
                var focusEvent = nativeEvent;
                queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
                return true;
              }
              case "dragenter": {
                var dragEvent = nativeEvent;
                queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
                return true;
              }
              case "mouseover": {
                var mouseEvent = nativeEvent;
                queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
                return true;
              }
              case "pointerover": {
                var pointerEvent = nativeEvent;
                var pointerId = pointerEvent.pointerId;
                queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
                return true;
              }
              case "gotpointercapture": {
                var _pointerEvent = nativeEvent;
                var _pointerId2 = _pointerEvent.pointerId;
                queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
                return true;
              }
            }
            return false;
          }
          function attemptExplicitHydrationTarget(queuedTarget) {
            var targetInst = getClosestInstanceFromNode(queuedTarget.target);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted !== null) {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    queuedTarget.blockedOn = instance;
                    attemptHydrationAtPriority(queuedTarget.priority, function() {
                      attemptHydrationAtCurrentPriority(nearestMounted);
                    });
                    return;
                  }
                } else if (tag === HostRoot) {
                  var root2 = nearestMounted.stateNode;
                  if (isRootDehydrated(root2)) {
                    queuedTarget.blockedOn = getContainerFromFiber(nearestMounted);
                    return;
                  }
                }
              }
            }
            queuedTarget.blockedOn = null;
          }
          function queueExplicitHydrationTarget(target) {
            var updatePriority = getCurrentUpdatePriority$1();
            var queuedTarget = {
              blockedOn: null,
              target,
              priority: updatePriority
            };
            var i = 0;
            for (; i < queuedExplicitHydrationTargets.length; i++) {
              if (!isHigherEventPriority(updatePriority, queuedExplicitHydrationTargets[i].priority)) {
                break;
              }
            }
            queuedExplicitHydrationTargets.splice(i, 0, queuedTarget);
            if (i === 0) {
              attemptExplicitHydrationTarget(queuedTarget);
            }
          }
          function attemptReplayContinuousQueuedEvent(queuedEvent) {
            if (queuedEvent.blockedOn !== null) {
              return false;
            }
            var targetContainers = queuedEvent.targetContainers;
            while (targetContainers.length > 0) {
              var targetContainer = targetContainers[0];
              var nextBlockedOn = findInstanceBlockingEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);
              if (nextBlockedOn === null) {
                {
                  var nativeEvent = queuedEvent.nativeEvent;
                  var nativeEventClone = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
                  setReplayingEvent(nativeEventClone);
                  nativeEvent.target.dispatchEvent(nativeEventClone);
                  resetReplayingEvent();
                }
              } else {
                var _fiber3 = getInstanceFromNode(nextBlockedOn);
                if (_fiber3 !== null) {
                  attemptContinuousHydration(_fiber3);
                }
                queuedEvent.blockedOn = nextBlockedOn;
                return false;
              }
              targetContainers.shift();
            }
            return true;
          }
          function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
            if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
              map.delete(key);
            }
          }
          function replayUnblockedEvents() {
            hasScheduledReplayAttempt = false;
            if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
              queuedFocus = null;
            }
            if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
              queuedDrag = null;
            }
            if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
              queuedMouse = null;
            }
            queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
            queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
          }
          function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
            if (queuedEvent.blockedOn === unblocked) {
              queuedEvent.blockedOn = null;
              if (!hasScheduledReplayAttempt) {
                hasScheduledReplayAttempt = true;
                Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
              }
            }
          }
          function retryIfBlockedOn(unblocked) {
            if (queuedDiscreteEvents.length > 0) {
              scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked);
              for (var i = 1; i < queuedDiscreteEvents.length; i++) {
                var queuedEvent = queuedDiscreteEvents[i];
                if (queuedEvent.blockedOn === unblocked) {
                  queuedEvent.blockedOn = null;
                }
              }
            }
            if (queuedFocus !== null) {
              scheduleCallbackIfUnblocked(queuedFocus, unblocked);
            }
            if (queuedDrag !== null) {
              scheduleCallbackIfUnblocked(queuedDrag, unblocked);
            }
            if (queuedMouse !== null) {
              scheduleCallbackIfUnblocked(queuedMouse, unblocked);
            }
            var unblock = function(queuedEvent2) {
              return scheduleCallbackIfUnblocked(queuedEvent2, unblocked);
            };
            queuedPointers.forEach(unblock);
            queuedPointerCaptures.forEach(unblock);
            for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
              var queuedTarget = queuedExplicitHydrationTargets[_i];
              if (queuedTarget.blockedOn === unblocked) {
                queuedTarget.blockedOn = null;
              }
            }
            while (queuedExplicitHydrationTargets.length > 0) {
              var nextExplicitTarget = queuedExplicitHydrationTargets[0];
              if (nextExplicitTarget.blockedOn !== null) {
                break;
              } else {
                attemptExplicitHydrationTarget(nextExplicitTarget);
                if (nextExplicitTarget.blockedOn === null) {
                  queuedExplicitHydrationTargets.shift();
                }
              }
            }
          }
          var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
          var _enabled = true;
          function setEnabled(enabled) {
            _enabled = !!enabled;
          }
          function isEnabled() {
            return _enabled;
          }
          function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
            var eventPriority = getEventPriority(domEventName);
            var listenerWrapper;
            switch (eventPriority) {
              case DiscreteEventPriority:
                listenerWrapper = dispatchDiscreteEvent;
                break;
              case ContinuousEventPriority:
                listenerWrapper = dispatchContinuousEvent;
                break;
              case DefaultEventPriority:
              default:
                listenerWrapper = dispatchEvent;
                break;
            }
            return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
          }
          function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = null;
            try {
              setCurrentUpdatePriority(DiscreteEventPriority);
              dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig.transition = prevTransition;
            }
          }
          function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = null;
            try {
              setCurrentUpdatePriority(ContinuousEventPriority);
              dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig.transition = prevTransition;
            }
          }
          function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (!_enabled) {
              return;
            }
            {
              dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent);
            }
          }
          function dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            var blockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
            if (blockedOn === null) {
              dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
              clearIfContinuousEvent(domEventName, nativeEvent);
              return;
            }
            if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
              nativeEvent.stopPropagation();
              return;
            }
            clearIfContinuousEvent(domEventName, nativeEvent);
            if (eventSystemFlags & IS_CAPTURE_PHASE && isDiscreteEventThatRequiresHydration(domEventName)) {
              while (blockedOn !== null) {
                var fiber = getInstanceFromNode(blockedOn);
                if (fiber !== null) {
                  attemptSynchronousHydration(fiber);
                }
                var nextBlockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
                if (nextBlockedOn === null) {
                  dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
                }
                if (nextBlockedOn === blockedOn) {
                  break;
                }
                blockedOn = nextBlockedOn;
              }
              if (blockedOn !== null) {
                nativeEvent.stopPropagation();
              }
              return;
            }
            dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
          }
          var return_targetInst = null;
          function findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            return_targetInst = null;
            var nativeEventTarget = getEventTarget(nativeEvent);
            var targetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted === null) {
                targetInst = null;
              } else {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    return instance;
                  }
                  targetInst = null;
                } else if (tag === HostRoot) {
                  var root2 = nearestMounted.stateNode;
                  if (isRootDehydrated(root2)) {
                    return getContainerFromFiber(nearestMounted);
                  }
                  targetInst = null;
                } else if (nearestMounted !== targetInst) {
                  targetInst = null;
                }
              }
            }
            return_targetInst = targetInst;
            return null;
          }
          function getEventPriority(domEventName) {
            switch (domEventName) {
              // Used by SimpleEventPlugin:
              case "cancel":
              case "click":
              case "close":
              case "contextmenu":
              case "copy":
              case "cut":
              case "auxclick":
              case "dblclick":
              case "dragend":
              case "dragstart":
              case "drop":
              case "focusin":
              case "focusout":
              case "input":
              case "invalid":
              case "keydown":
              case "keypress":
              case "keyup":
              case "mousedown":
              case "mouseup":
              case "paste":
              case "pause":
              case "play":
              case "pointercancel":
              case "pointerdown":
              case "pointerup":
              case "ratechange":
              case "reset":
              case "resize":
              case "seeked":
              case "submit":
              case "touchcancel":
              case "touchend":
              case "touchstart":
              case "volumechange":
              // Used by polyfills:
              // eslint-disable-next-line no-fallthrough
              case "change":
              case "selectionchange":
              case "textInput":
              case "compositionstart":
              case "compositionend":
              case "compositionupdate":
              // Only enableCreateEventHandleAPI:
              // eslint-disable-next-line no-fallthrough
              case "beforeblur":
              case "afterblur":
              // Not used by React but could be by user code:
              // eslint-disable-next-line no-fallthrough
              case "beforeinput":
              case "blur":
              case "fullscreenchange":
              case "focus":
              case "hashchange":
              case "popstate":
              case "select":
              case "selectstart":
                return DiscreteEventPriority;
              case "drag":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "mousemove":
              case "mouseout":
              case "mouseover":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "scroll":
              case "toggle":
              case "touchmove":
              case "wheel":
              // Not used by React but could be by user code:
              // eslint-disable-next-line no-fallthrough
              case "mouseenter":
              case "mouseleave":
              case "pointerenter":
              case "pointerleave":
                return ContinuousEventPriority;
              case "message": {
                var schedulerPriority = getCurrentPriorityLevel();
                switch (schedulerPriority) {
                  case ImmediatePriority:
                    return DiscreteEventPriority;
                  case UserBlockingPriority:
                    return ContinuousEventPriority;
                  case NormalPriority:
                  case LowPriority:
                    return DefaultEventPriority;
                  case IdlePriority:
                    return IdleEventPriority;
                  default:
                    return DefaultEventPriority;
                }
              }
              default:
                return DefaultEventPriority;
            }
          }
          function addEventBubbleListener(target, eventType, listener) {
            target.addEventListener(eventType, listener, false);
            return listener;
          }
          function addEventCaptureListener(target, eventType, listener) {
            target.addEventListener(eventType, listener, true);
            return listener;
          }
          function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive3) {
            target.addEventListener(eventType, listener, {
              capture: true,
              passive: passive3
            });
            return listener;
          }
          function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive3) {
            target.addEventListener(eventType, listener, {
              passive: passive3
            });
            return listener;
          }
          var root = null;
          var startText = null;
          var fallbackText = null;
          function initialize(nativeEventTarget) {
            root = nativeEventTarget;
            startText = getText();
            return true;
          }
          function reset() {
            root = null;
            startText = null;
            fallbackText = null;
          }
          function getData() {
            if (fallbackText) {
              return fallbackText;
            }
            var start3;
            var startValue = startText;
            var startLength = startValue.length;
            var end3;
            var endValue = getText();
            var endLength = endValue.length;
            for (start3 = 0; start3 < startLength; start3++) {
              if (startValue[start3] !== endValue[start3]) {
                break;
              }
            }
            var minEnd = startLength - start3;
            for (end3 = 1; end3 <= minEnd; end3++) {
              if (startValue[startLength - end3] !== endValue[endLength - end3]) {
                break;
              }
            }
            var sliceTail = end3 > 1 ? 1 - end3 : void 0;
            fallbackText = endValue.slice(start3, sliceTail);
            return fallbackText;
          }
          function getText() {
            if ("value" in root) {
              return root.value;
            }
            return root.textContent;
          }
          function getEventCharCode(nativeEvent) {
            var charCode;
            var keyCode = nativeEvent.keyCode;
            if ("charCode" in nativeEvent) {
              charCode = nativeEvent.charCode;
              if (charCode === 0 && keyCode === 13) {
                charCode = 13;
              }
            } else {
              charCode = keyCode;
            }
            if (charCode === 10) {
              charCode = 13;
            }
            if (charCode >= 32 || charCode === 13) {
              return charCode;
            }
            return 0;
          }
          function functionThatReturnsTrue() {
            return true;
          }
          function functionThatReturnsFalse() {
            return false;
          }
          function createSyntheticEvent(Interface) {
            function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
              this._reactName = reactName;
              this._targetInst = targetInst;
              this.type = reactEventType;
              this.nativeEvent = nativeEvent;
              this.target = nativeEventTarget;
              this.currentTarget = null;
              for (var _propName in Interface) {
                if (!Interface.hasOwnProperty(_propName)) {
                  continue;
                }
                var normalize = Interface[_propName];
                if (normalize) {
                  this[_propName] = normalize(nativeEvent);
                } else {
                  this[_propName] = nativeEvent[_propName];
                }
              }
              var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
              if (defaultPrevented) {
                this.isDefaultPrevented = functionThatReturnsTrue;
              } else {
                this.isDefaultPrevented = functionThatReturnsFalse;
              }
              this.isPropagationStopped = functionThatReturnsFalse;
              return this;
            }
            assign(SyntheticBaseEvent.prototype, {
              preventDefault: function() {
                this.defaultPrevented = true;
                var event = this.nativeEvent;
                if (!event) {
                  return;
                }
                if (event.preventDefault) {
                  event.preventDefault();
                } else if (typeof event.returnValue !== "unknown") {
                  event.returnValue = false;
                }
                this.isDefaultPrevented = functionThatReturnsTrue;
              },
              stopPropagation: function() {
                var event = this.nativeEvent;
                if (!event) {
                  return;
                }
                if (event.stopPropagation) {
                  event.stopPropagation();
                } else if (typeof event.cancelBubble !== "unknown") {
                  event.cancelBubble = true;
                }
                this.isPropagationStopped = functionThatReturnsTrue;
              },
              /**
               * We release all dispatched `SyntheticEvent`s after each event loop, adding
               * them back into the pool. This allows a way to hold onto a reference that
               * won't be added back into the pool.
               */
              persist: function() {
              },
              /**
               * Checks if this event should be released back into the pool.
               *
               * @return {boolean} True if this should not be released, false otherwise.
               */
              isPersistent: functionThatReturnsTrue
            });
            return SyntheticBaseEvent;
          }
          var EventInterface = {
            eventPhase: 0,
            bubbles: 0,
            cancelable: 0,
            timeStamp: function(event) {
              return event.timeStamp || Date.now();
            },
            defaultPrevented: 0,
            isTrusted: 0
          };
          var SyntheticEvent = createSyntheticEvent(EventInterface);
          var UIEventInterface = assign({}, EventInterface, {
            view: 0,
            detail: 0
          });
          var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
          var lastMovementX;
          var lastMovementY;
          var lastMouseEvent;
          function updateMouseMovementPolyfillState(event) {
            if (event !== lastMouseEvent) {
              if (lastMouseEvent && event.type === "mousemove") {
                lastMovementX = event.screenX - lastMouseEvent.screenX;
                lastMovementY = event.screenY - lastMouseEvent.screenY;
              } else {
                lastMovementX = 0;
                lastMovementY = 0;
              }
              lastMouseEvent = event;
            }
          }
          var MouseEventInterface = assign({}, UIEventInterface, {
            screenX: 0,
            screenY: 0,
            clientX: 0,
            clientY: 0,
            pageX: 0,
            pageY: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            getModifierState: getEventModifierState,
            button: 0,
            buttons: 0,
            relatedTarget: function(event) {
              if (event.relatedTarget === void 0) return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
              return event.relatedTarget;
            },
            movementX: function(event) {
              if ("movementX" in event) {
                return event.movementX;
              }
              updateMouseMovementPolyfillState(event);
              return lastMovementX;
            },
            movementY: function(event) {
              if ("movementY" in event) {
                return event.movementY;
              }
              return lastMovementY;
            }
          });
          var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
          var DragEventInterface = assign({}, MouseEventInterface, {
            dataTransfer: 0
          });
          var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
          var FocusEventInterface = assign({}, UIEventInterface, {
            relatedTarget: 0
          });
          var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
          var AnimationEventInterface = assign({}, EventInterface, {
            animationName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          });
          var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
          var ClipboardEventInterface = assign({}, EventInterface, {
            clipboardData: function(event) {
              return "clipboardData" in event ? event.clipboardData : window.clipboardData;
            }
          });
          var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
          var CompositionEventInterface = assign({}, EventInterface, {
            data: 0
          });
          var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
          var SyntheticInputEvent = SyntheticCompositionEvent;
          var normalizeKey = {
            Esc: "Escape",
            Spacebar: " ",
            Left: "ArrowLeft",
            Up: "ArrowUp",
            Right: "ArrowRight",
            Down: "ArrowDown",
            Del: "Delete",
            Win: "OS",
            Menu: "ContextMenu",
            Apps: "ContextMenu",
            Scroll: "ScrollLock",
            MozPrintableKey: "Unidentified"
          };
          var translateToKey = {
            "8": "Backspace",
            "9": "Tab",
            "12": "Clear",
            "13": "Enter",
            "16": "Shift",
            "17": "Control",
            "18": "Alt",
            "19": "Pause",
            "20": "CapsLock",
            "27": "Escape",
            "32": " ",
            "33": "PageUp",
            "34": "PageDown",
            "35": "End",
            "36": "Home",
            "37": "ArrowLeft",
            "38": "ArrowUp",
            "39": "ArrowRight",
            "40": "ArrowDown",
            "45": "Insert",
            "46": "Delete",
            "112": "F1",
            "113": "F2",
            "114": "F3",
            "115": "F4",
            "116": "F5",
            "117": "F6",
            "118": "F7",
            "119": "F8",
            "120": "F9",
            "121": "F10",
            "122": "F11",
            "123": "F12",
            "144": "NumLock",
            "145": "ScrollLock",
            "224": "Meta"
          };
          function getEventKey(nativeEvent) {
            if (nativeEvent.key) {
              var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
              if (key !== "Unidentified") {
                return key;
              }
            }
            if (nativeEvent.type === "keypress") {
              var charCode = getEventCharCode(nativeEvent);
              return charCode === 13 ? "Enter" : String.fromCharCode(charCode);
            }
            if (nativeEvent.type === "keydown" || nativeEvent.type === "keyup") {
              return translateToKey[nativeEvent.keyCode] || "Unidentified";
            }
            return "";
          }
          var modifierKeyToProp = {
            Alt: "altKey",
            Control: "ctrlKey",
            Meta: "metaKey",
            Shift: "shiftKey"
          };
          function modifierStateGetter(keyArg) {
            var syntheticEvent = this;
            var nativeEvent = syntheticEvent.nativeEvent;
            if (nativeEvent.getModifierState) {
              return nativeEvent.getModifierState(keyArg);
            }
            var keyProp = modifierKeyToProp[keyArg];
            return keyProp ? !!nativeEvent[keyProp] : false;
          }
          function getEventModifierState(nativeEvent) {
            return modifierStateGetter;
          }
          var KeyboardEventInterface = assign({}, UIEventInterface, {
            key: getEventKey,
            code: 0,
            location: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            repeat: 0,
            locale: 0,
            getModifierState: getEventModifierState,
            // Legacy Interface
            charCode: function(event) {
              if (event.type === "keypress") {
                return getEventCharCode(event);
              }
              return 0;
            },
            keyCode: function(event) {
              if (event.type === "keydown" || event.type === "keyup") {
                return event.keyCode;
              }
              return 0;
            },
            which: function(event) {
              if (event.type === "keypress") {
                return getEventCharCode(event);
              }
              if (event.type === "keydown" || event.type === "keyup") {
                return event.keyCode;
              }
              return 0;
            }
          });
          var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
          var PointerEventInterface = assign({}, MouseEventInterface, {
            pointerId: 0,
            width: 0,
            height: 0,
            pressure: 0,
            tangentialPressure: 0,
            tiltX: 0,
            tiltY: 0,
            twist: 0,
            pointerType: 0,
            isPrimary: 0
          });
          var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
          var TouchEventInterface = assign({}, UIEventInterface, {
            touches: 0,
            targetTouches: 0,
            changedTouches: 0,
            altKey: 0,
            metaKey: 0,
            ctrlKey: 0,
            shiftKey: 0,
            getModifierState: getEventModifierState
          });
          var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
          var TransitionEventInterface = assign({}, EventInterface, {
            propertyName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          });
          var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
          var WheelEventInterface = assign({}, MouseEventInterface, {
            deltaX: function(event) {
              return "deltaX" in event ? event.deltaX : (
                // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
                "wheelDeltaX" in event ? -event.wheelDeltaX : 0
              );
            },
            deltaY: function(event) {
              return "deltaY" in event ? event.deltaY : (
                // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
                "wheelDeltaY" in event ? -event.wheelDeltaY : (
                  // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
                  "wheelDelta" in event ? -event.wheelDelta : 0
                )
              );
            },
            deltaZ: 0,
            // Browsers without "deltaMode" is reporting in raw wheel delta where one
            // notch on the scroll is always +/- 120, roughly equivalent to pixels.
            // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
            // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
            deltaMode: 0
          });
          var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
          var END_KEYCODES = [9, 13, 27, 32];
          var START_KEYCODE = 229;
          var canUseCompositionEvent = canUseDOM3 && "CompositionEvent" in window;
          var documentMode = null;
          if (canUseDOM3 && "documentMode" in document) {
            documentMode = document.documentMode;
          }
          var canUseTextInputEvent = canUseDOM3 && "TextEvent" in window && !documentMode;
          var useFallbackCompositionData = canUseDOM3 && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
          var SPACEBAR_CODE = 32;
          var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
          function registerEvents() {
            registerTwoPhaseEvent("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
            registerTwoPhaseEvent("onCompositionEnd", ["compositionend", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
            registerTwoPhaseEvent("onCompositionStart", ["compositionstart", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
            registerTwoPhaseEvent("onCompositionUpdate", ["compositionupdate", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
          }
          var hasSpaceKeypress = false;
          function isKeypressCommand(nativeEvent) {
            return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && // ctrlKey && altKey is equivalent to AltGr, and is not a command.
            !(nativeEvent.ctrlKey && nativeEvent.altKey);
          }
          function getCompositionEventType(domEventName) {
            switch (domEventName) {
              case "compositionstart":
                return "onCompositionStart";
              case "compositionend":
                return "onCompositionEnd";
              case "compositionupdate":
                return "onCompositionUpdate";
            }
          }
          function isFallbackCompositionStart(domEventName, nativeEvent) {
            return domEventName === "keydown" && nativeEvent.keyCode === START_KEYCODE;
          }
          function isFallbackCompositionEnd(domEventName, nativeEvent) {
            switch (domEventName) {
              case "keyup":
                return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
              case "keydown":
                return nativeEvent.keyCode !== START_KEYCODE;
              case "keypress":
              case "mousedown":
              case "focusout":
                return true;
              default:
                return false;
            }
          }
          function getDataFromCustomEvent(nativeEvent) {
            var detail = nativeEvent.detail;
            if (typeof detail === "object" && "data" in detail) {
              return detail.data;
            }
            return null;
          }
          function isUsingKoreanIME(nativeEvent) {
            return nativeEvent.locale === "ko";
          }
          var isComposing = false;
          function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var eventType;
            var fallbackData;
            if (canUseCompositionEvent) {
              eventType = getCompositionEventType(domEventName);
            } else if (!isComposing) {
              if (isFallbackCompositionStart(domEventName, nativeEvent)) {
                eventType = "onCompositionStart";
              }
            } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {
              eventType = "onCompositionEnd";
            }
            if (!eventType) {
              return null;
            }
            if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
              if (!isComposing && eventType === "onCompositionStart") {
                isComposing = initialize(nativeEventTarget);
              } else if (eventType === "onCompositionEnd") {
                if (isComposing) {
                  fallbackData = getData();
                }
              }
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
            if (listeners.length > 0) {
              var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              if (fallbackData) {
                event.data = fallbackData;
              } else {
                var customData = getDataFromCustomEvent(nativeEvent);
                if (customData !== null) {
                  event.data = customData;
                }
              }
            }
          }
          function getNativeBeforeInputChars(domEventName, nativeEvent) {
            switch (domEventName) {
              case "compositionend":
                return getDataFromCustomEvent(nativeEvent);
              case "keypress":
                var which = nativeEvent.which;
                if (which !== SPACEBAR_CODE) {
                  return null;
                }
                hasSpaceKeypress = true;
                return SPACEBAR_CHAR;
              case "textInput":
                var chars = nativeEvent.data;
                if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
                  return null;
                }
                return chars;
              default:
                return null;
            }
          }
          function getFallbackBeforeInputChars(domEventName, nativeEvent) {
            if (isComposing) {
              if (domEventName === "compositionend" || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
                var chars = getData();
                reset();
                isComposing = false;
                return chars;
              }
              return null;
            }
            switch (domEventName) {
              case "paste":
                return null;
              case "keypress":
                if (!isKeypressCommand(nativeEvent)) {
                  if (nativeEvent.char && nativeEvent.char.length > 1) {
                    return nativeEvent.char;
                  } else if (nativeEvent.which) {
                    return String.fromCharCode(nativeEvent.which);
                  }
                }
                return null;
              case "compositionend":
                return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
              default:
                return null;
            }
          }
          function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var chars;
            if (canUseTextInputEvent) {
              chars = getNativeBeforeInputChars(domEventName, nativeEvent);
            } else {
              chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
            }
            if (!chars) {
              return null;
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, "onBeforeInput");
            if (listeners.length > 0) {
              var event = new SyntheticInputEvent("onBeforeInput", "beforeinput", null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              event.data = chars;
            }
          }
          function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          }
          var supportedInputTypes = {
            color: true,
            date: true,
            datetime: true,
            "datetime-local": true,
            email: true,
            month: true,
            number: true,
            password: true,
            range: true,
            search: true,
            tel: true,
            text: true,
            time: true,
            url: true,
            week: true
          };
          function isTextInputElement(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            if (nodeName === "input") {
              return !!supportedInputTypes[elem.type];
            }
            if (nodeName === "textarea") {
              return true;
            }
            return false;
          }
          function isEventSupported(eventNameSuffix) {
            if (!canUseDOM3) {
              return false;
            }
            var eventName = "on" + eventNameSuffix;
            var isSupported = eventName in document;
            if (!isSupported) {
              var element = document.createElement("div");
              element.setAttribute(eventName, "return;");
              isSupported = typeof element[eventName] === "function";
            }
            return isSupported;
          }
          function registerEvents$1() {
            registerTwoPhaseEvent("onChange", ["change", "click", "focusin", "focusout", "input", "keydown", "keyup", "selectionchange"]);
          }
          function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
            enqueueStateRestore(target);
            var listeners = accumulateTwoPhaseListeners(inst, "onChange");
            if (listeners.length > 0) {
              var event = new SyntheticEvent("onChange", "change", null, nativeEvent, target);
              dispatchQueue.push({
                event,
                listeners
              });
            }
          }
          var activeElement = null;
          var activeElementInst = null;
          function shouldUseChangeEvent(elem) {
            var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName === "select" || nodeName === "input" && elem.type === "file";
          }
          function manualDispatchChangeEvent(nativeEvent) {
            var dispatchQueue = [];
            createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
            batchedUpdates(runEventInBatch, dispatchQueue);
          }
          function runEventInBatch(dispatchQueue) {
            processDispatchQueue(dispatchQueue, 0);
          }
          function getInstIfValueChanged(targetInst) {
            var targetNode = getNodeFromInstance(targetInst);
            if (updateValueIfChanged(targetNode)) {
              return targetInst;
            }
          }
          function getTargetInstForChangeEvent(domEventName, targetInst) {
            if (domEventName === "change") {
              return targetInst;
            }
          }
          var isInputEventSupported = false;
          if (canUseDOM3) {
            isInputEventSupported = isEventSupported("input") && (!document.documentMode || document.documentMode > 9);
          }
          function startWatchingForValueChange(target, targetInst) {
            activeElement = target;
            activeElementInst = targetInst;
            activeElement.attachEvent("onpropertychange", handlePropertyChange);
          }
          function stopWatchingForValueChange() {
            if (!activeElement) {
              return;
            }
            activeElement.detachEvent("onpropertychange", handlePropertyChange);
            activeElement = null;
            activeElementInst = null;
          }
          function handlePropertyChange(nativeEvent) {
            if (nativeEvent.propertyName !== "value") {
              return;
            }
            if (getInstIfValueChanged(activeElementInst)) {
              manualDispatchChangeEvent(nativeEvent);
            }
          }
          function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
            if (domEventName === "focusin") {
              stopWatchingForValueChange();
              startWatchingForValueChange(target, targetInst);
            } else if (domEventName === "focusout") {
              stopWatchingForValueChange();
            }
          }
          function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
            if (domEventName === "selectionchange" || domEventName === "keyup" || domEventName === "keydown") {
              return getInstIfValueChanged(activeElementInst);
            }
          }
          function shouldUseClickEvent(elem) {
            var nodeName = elem.nodeName;
            return nodeName && nodeName.toLowerCase() === "input" && (elem.type === "checkbox" || elem.type === "radio");
          }
          function getTargetInstForClickEvent(domEventName, targetInst) {
            if (domEventName === "click") {
              return getInstIfValueChanged(targetInst);
            }
          }
          function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
            if (domEventName === "input" || domEventName === "change") {
              return getInstIfValueChanged(targetInst);
            }
          }
          function handleControlledInputBlur(node) {
            var state = node._wrapperState;
            if (!state || !state.controlled || node.type !== "number") {
              return;
            }
            {
              setDefaultValue(node, "number", node.value);
            }
          }
          function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            var getTargetInstFunc, handleEventFunc;
            if (shouldUseChangeEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForChangeEvent;
            } else if (isTextInputElement(targetNode)) {
              if (isInputEventSupported) {
                getTargetInstFunc = getTargetInstForInputOrChangeEvent;
              } else {
                getTargetInstFunc = getTargetInstForInputEventPolyfill;
                handleEventFunc = handleEventsForInputEventPolyfill;
              }
            } else if (shouldUseClickEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForClickEvent;
            }
            if (getTargetInstFunc) {
              var inst = getTargetInstFunc(domEventName, targetInst);
              if (inst) {
                createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
                return;
              }
            }
            if (handleEventFunc) {
              handleEventFunc(domEventName, targetNode, targetInst);
            }
            if (domEventName === "focusout") {
              handleControlledInputBlur(targetNode);
            }
          }
          function registerEvents$2() {
            registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]);
            registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]);
            registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]);
            registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
          }
          function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var isOverEvent = domEventName === "mouseover" || domEventName === "pointerover";
            var isOutEvent = domEventName === "mouseout" || domEventName === "pointerout";
            if (isOverEvent && !isReplayingEvent(nativeEvent)) {
              var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
              if (related) {
                if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {
                  return;
                }
              }
            }
            if (!isOutEvent && !isOverEvent) {
              return;
            }
            var win;
            if (nativeEventTarget.window === nativeEventTarget) {
              win = nativeEventTarget;
            } else {
              var doc = nativeEventTarget.ownerDocument;
              if (doc) {
                win = doc.defaultView || doc.parentWindow;
              } else {
                win = window;
              }
            }
            var from;
            var to;
            if (isOutEvent) {
              var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
              from = targetInst;
              to = _related ? getClosestInstanceFromNode(_related) : null;
              if (to !== null) {
                var nearestMounted = getNearestMountedFiber(to);
                if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {
                  to = null;
                }
              }
            } else {
              from = null;
              to = targetInst;
            }
            if (from === to) {
              return;
            }
            var SyntheticEventCtor = SyntheticMouseEvent;
            var leaveEventType = "onMouseLeave";
            var enterEventType = "onMouseEnter";
            var eventTypePrefix = "mouse";
            if (domEventName === "pointerout" || domEventName === "pointerover") {
              SyntheticEventCtor = SyntheticPointerEvent;
              leaveEventType = "onPointerLeave";
              enterEventType = "onPointerEnter";
              eventTypePrefix = "pointer";
            }
            var fromNode = from == null ? win : getNodeFromInstance(from);
            var toNode = to == null ? win : getNodeFromInstance(to);
            var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + "leave", from, nativeEvent, nativeEventTarget);
            leave.target = fromNode;
            leave.relatedTarget = toNode;
            var enter = null;
            var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (nativeTargetInst === targetInst) {
              var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + "enter", to, nativeEvent, nativeEventTarget);
              enterEvent.target = toNode;
              enterEvent.relatedTarget = fromNode;
              enter = enterEvent;
            }
            accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);
          }
          function is(x, y) {
            return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
          }
          var objectIs = typeof Object.is === "function" ? Object.is : is;
          function shallowEqual(objA, objB) {
            if (objectIs(objA, objB)) {
              return true;
            }
            if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
              return false;
            }
            var keysA = Object.keys(objA);
            var keysB = Object.keys(objB);
            if (keysA.length !== keysB.length) {
              return false;
            }
            for (var i = 0; i < keysA.length; i++) {
              var currentKey = keysA[i];
              if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {
                return false;
              }
            }
            return true;
          }
          function getLeafNode(node) {
            while (node && node.firstChild) {
              node = node.firstChild;
            }
            return node;
          }
          function getSiblingNode(node) {
            while (node) {
              if (node.nextSibling) {
                return node.nextSibling;
              }
              node = node.parentNode;
            }
          }
          function getNodeForCharacterOffset(root2, offset3) {
            var node = getLeafNode(root2);
            var nodeStart = 0;
            var nodeEnd = 0;
            while (node) {
              if (node.nodeType === TEXT_NODE) {
                nodeEnd = nodeStart + node.textContent.length;
                if (nodeStart <= offset3 && nodeEnd >= offset3) {
                  return {
                    node,
                    offset: offset3 - nodeStart
                  };
                }
                nodeStart = nodeEnd;
              }
              node = getLeafNode(getSiblingNode(node));
            }
          }
          function getOffsets(outerNode) {
            var ownerDocument = outerNode.ownerDocument;
            var win = ownerDocument && ownerDocument.defaultView || window;
            var selection = win.getSelection && win.getSelection();
            if (!selection || selection.rangeCount === 0) {
              return null;
            }
            var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset;
            try {
              anchorNode.nodeType;
              focusNode.nodeType;
            } catch (e) {
              return null;
            }
            return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
          }
          function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
            var length = 0;
            var start3 = -1;
            var end3 = -1;
            var indexWithinAnchor = 0;
            var indexWithinFocus = 0;
            var node = outerNode;
            var parentNode = null;
            outer: while (true) {
              var next = null;
              while (true) {
                if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
                  start3 = length + anchorOffset;
                }
                if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
                  end3 = length + focusOffset;
                }
                if (node.nodeType === TEXT_NODE) {
                  length += node.nodeValue.length;
                }
                if ((next = node.firstChild) === null) {
                  break;
                }
                parentNode = node;
                node = next;
              }
              while (true) {
                if (node === outerNode) {
                  break outer;
                }
                if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
                  start3 = length;
                }
                if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
                  end3 = length;
                }
                if ((next = node.nextSibling) !== null) {
                  break;
                }
                node = parentNode;
                parentNode = node.parentNode;
              }
              node = next;
            }
            if (start3 === -1 || end3 === -1) {
              return null;
            }
            return {
              start: start3,
              end: end3
            };
          }
          function setOffsets(node, offsets) {
            var doc = node.ownerDocument || document;
            var win = doc && doc.defaultView || window;
            if (!win.getSelection) {
              return;
            }
            var selection = win.getSelection();
            var length = node.textContent.length;
            var start3 = Math.min(offsets.start, length);
            var end3 = offsets.end === void 0 ? start3 : Math.min(offsets.end, length);
            if (!selection.extend && start3 > end3) {
              var temp = end3;
              end3 = start3;
              start3 = temp;
            }
            var startMarker = getNodeForCharacterOffset(node, start3);
            var endMarker = getNodeForCharacterOffset(node, end3);
            if (startMarker && endMarker) {
              if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
                return;
              }
              var range = doc.createRange();
              range.setStart(startMarker.node, startMarker.offset);
              selection.removeAllRanges();
              if (start3 > end3) {
                selection.addRange(range);
                selection.extend(endMarker.node, endMarker.offset);
              } else {
                range.setEnd(endMarker.node, endMarker.offset);
                selection.addRange(range);
              }
            }
          }
          function isTextNode(node) {
            return node && node.nodeType === TEXT_NODE;
          }
          function containsNode(outerNode, innerNode) {
            if (!outerNode || !innerNode) {
              return false;
            } else if (outerNode === innerNode) {
              return true;
            } else if (isTextNode(outerNode)) {
              return false;
            } else if (isTextNode(innerNode)) {
              return containsNode(outerNode, innerNode.parentNode);
            } else if ("contains" in outerNode) {
              return outerNode.contains(innerNode);
            } else if (outerNode.compareDocumentPosition) {
              return !!(outerNode.compareDocumentPosition(innerNode) & 16);
            } else {
              return false;
            }
          }
          function isInDocument(node) {
            return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
          }
          function isSameOriginFrame(iframe) {
            try {
              return typeof iframe.contentWindow.location.href === "string";
            } catch (err) {
              return false;
            }
          }
          function getActiveElementDeep() {
            var win = window;
            var element = getActiveElement();
            while (element instanceof win.HTMLIFrameElement) {
              if (isSameOriginFrame(element)) {
                win = element.contentWindow;
              } else {
                return element;
              }
              element = getActiveElement(win.document);
            }
            return element;
          }
          function hasSelectionCapabilities(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName && (nodeName === "input" && (elem.type === "text" || elem.type === "search" || elem.type === "tel" || elem.type === "url" || elem.type === "password") || nodeName === "textarea" || elem.contentEditable === "true");
          }
          function getSelectionInformation() {
            var focusedElem = getActiveElementDeep();
            return {
              focusedElem,
              selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
            };
          }
          function restoreSelection(priorSelectionInformation) {
            var curFocusedElem = getActiveElementDeep();
            var priorFocusedElem = priorSelectionInformation.focusedElem;
            var priorSelectionRange = priorSelectionInformation.selectionRange;
            if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
              if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
                setSelection(priorFocusedElem, priorSelectionRange);
              }
              var ancestors = [];
              var ancestor = priorFocusedElem;
              while (ancestor = ancestor.parentNode) {
                if (ancestor.nodeType === ELEMENT_NODE) {
                  ancestors.push({
                    element: ancestor,
                    left: ancestor.scrollLeft,
                    top: ancestor.scrollTop
                  });
                }
              }
              if (typeof priorFocusedElem.focus === "function") {
                priorFocusedElem.focus();
              }
              for (var i = 0; i < ancestors.length; i++) {
                var info2 = ancestors[i];
                info2.element.scrollLeft = info2.left;
                info2.element.scrollTop = info2.top;
              }
            }
          }
          function getSelection(input) {
            var selection;
            if ("selectionStart" in input) {
              selection = {
                start: input.selectionStart,
                end: input.selectionEnd
              };
            } else {
              selection = getOffsets(input);
            }
            return selection || {
              start: 0,
              end: 0
            };
          }
          function setSelection(input, offsets) {
            var start3 = offsets.start;
            var end3 = offsets.end;
            if (end3 === void 0) {
              end3 = start3;
            }
            if ("selectionStart" in input) {
              input.selectionStart = start3;
              input.selectionEnd = Math.min(end3, input.value.length);
            } else {
              setOffsets(input, offsets);
            }
          }
          var skipSelectionChangeEvent = canUseDOM3 && "documentMode" in document && document.documentMode <= 11;
          function registerEvents$3() {
            registerTwoPhaseEvent("onSelect", ["focusout", "contextmenu", "dragend", "focusin", "keydown", "keyup", "mousedown", "mouseup", "selectionchange"]);
          }
          var activeElement$1 = null;
          var activeElementInst$1 = null;
          var lastSelection = null;
          var mouseDown = false;
          function getSelection$1(node) {
            if ("selectionStart" in node && hasSelectionCapabilities(node)) {
              return {
                start: node.selectionStart,
                end: node.selectionEnd
              };
            } else {
              var win = node.ownerDocument && node.ownerDocument.defaultView || window;
              var selection = win.getSelection();
              return {
                anchorNode: selection.anchorNode,
                anchorOffset: selection.anchorOffset,
                focusNode: selection.focusNode,
                focusOffset: selection.focusOffset
              };
            }
          }
          function getEventTargetDocument(eventTarget) {
            return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
          }
          function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
            var doc = getEventTargetDocument(nativeEventTarget);
            if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
              return;
            }
            var currentSelection = getSelection$1(activeElement$1);
            if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
              lastSelection = currentSelection;
              var listeners = accumulateTwoPhaseListeners(activeElementInst$1, "onSelect");
              if (listeners.length > 0) {
                var event = new SyntheticEvent("onSelect", "select", null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event,
                  listeners
                });
                event.target = activeElement$1;
              }
            }
          }
          function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            switch (domEventName) {
              // Track the input node that has focus.
              case "focusin":
                if (isTextInputElement(targetNode) || targetNode.contentEditable === "true") {
                  activeElement$1 = targetNode;
                  activeElementInst$1 = targetInst;
                  lastSelection = null;
                }
                break;
              case "focusout":
                activeElement$1 = null;
                activeElementInst$1 = null;
                lastSelection = null;
                break;
              // Don't fire the event while the user is dragging. This matches the
              // semantics of the native select event.
              case "mousedown":
                mouseDown = true;
                break;
              case "contextmenu":
              case "mouseup":
              case "dragend":
                mouseDown = false;
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
                break;
              // Chrome and IE fire non-standard event when selection is changed (and
              // sometimes when it hasn't). IE's event fires out of order with respect
              // to key and input events on deletion, so we discard it.
              //
              // Firefox doesn't support selectionchange, so check selection status
              // after each key entry. The selection changes after keydown and before
              // keyup, but we check on keydown as well in the case of holding down a
              // key, when multiple keydown events are fired but only one keyup is.
              // This is also our approach for IE handling, for the reason above.
              case "selectionchange":
                if (skipSelectionChangeEvent) {
                  break;
                }
              // falls through
              case "keydown":
              case "keyup":
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
            }
          }
          function makePrefixMap(styleProp, eventName) {
            var prefixes2 = {};
            prefixes2[styleProp.toLowerCase()] = eventName.toLowerCase();
            prefixes2["Webkit" + styleProp] = "webkit" + eventName;
            prefixes2["Moz" + styleProp] = "moz" + eventName;
            return prefixes2;
          }
          var vendorPrefixes = {
            animationend: makePrefixMap("Animation", "AnimationEnd"),
            animationiteration: makePrefixMap("Animation", "AnimationIteration"),
            animationstart: makePrefixMap("Animation", "AnimationStart"),
            transitionend: makePrefixMap("Transition", "TransitionEnd")
          };
          var prefixedEventNames = {};
          var style = {};
          if (canUseDOM3) {
            style = document.createElement("div").style;
            if (!("AnimationEvent" in window)) {
              delete vendorPrefixes.animationend.animation;
              delete vendorPrefixes.animationiteration.animation;
              delete vendorPrefixes.animationstart.animation;
            }
            if (!("TransitionEvent" in window)) {
              delete vendorPrefixes.transitionend.transition;
            }
          }
          function getVendorPrefixedEventName(eventName) {
            if (prefixedEventNames[eventName]) {
              return prefixedEventNames[eventName];
            } else if (!vendorPrefixes[eventName]) {
              return eventName;
            }
            var prefixMap = vendorPrefixes[eventName];
            for (var styleProp in prefixMap) {
              if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
                return prefixedEventNames[eventName] = prefixMap[styleProp];
              }
            }
            return eventName;
          }
          var ANIMATION_END = getVendorPrefixedEventName("animationend");
          var ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration");
          var ANIMATION_START = getVendorPrefixedEventName("animationstart");
          var TRANSITION_END = getVendorPrefixedEventName("transitionend");
          var topLevelEventsToReactNames = /* @__PURE__ */ new Map();
          var simpleEventPluginEvents = ["abort", "auxClick", "cancel", "canPlay", "canPlayThrough", "click", "close", "contextMenu", "copy", "cut", "drag", "dragEnd", "dragEnter", "dragExit", "dragLeave", "dragOver", "dragStart", "drop", "durationChange", "emptied", "encrypted", "ended", "error", "gotPointerCapture", "input", "invalid", "keyDown", "keyPress", "keyUp", "load", "loadedData", "loadedMetadata", "loadStart", "lostPointerCapture", "mouseDown", "mouseMove", "mouseOut", "mouseOver", "mouseUp", "paste", "pause", "play", "playing", "pointerCancel", "pointerDown", "pointerMove", "pointerOut", "pointerOver", "pointerUp", "progress", "rateChange", "reset", "resize", "seeked", "seeking", "stalled", "submit", "suspend", "timeUpdate", "touchCancel", "touchEnd", "touchStart", "volumeChange", "scroll", "toggle", "touchMove", "waiting", "wheel"];
          function registerSimpleEvent(domEventName, reactName) {
            topLevelEventsToReactNames.set(domEventName, reactName);
            registerTwoPhaseEvent(reactName, [domEventName]);
          }
          function registerSimpleEvents() {
            for (var i = 0; i < simpleEventPluginEvents.length; i++) {
              var eventName = simpleEventPluginEvents[i];
              var domEventName = eventName.toLowerCase();
              var capitalizedEvent = eventName[0].toUpperCase() + eventName.slice(1);
              registerSimpleEvent(domEventName, "on" + capitalizedEvent);
            }
            registerSimpleEvent(ANIMATION_END, "onAnimationEnd");
            registerSimpleEvent(ANIMATION_ITERATION, "onAnimationIteration");
            registerSimpleEvent(ANIMATION_START, "onAnimationStart");
            registerSimpleEvent("dblclick", "onDoubleClick");
            registerSimpleEvent("focusin", "onFocus");
            registerSimpleEvent("focusout", "onBlur");
            registerSimpleEvent(TRANSITION_END, "onTransitionEnd");
          }
          function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var reactName = topLevelEventsToReactNames.get(domEventName);
            if (reactName === void 0) {
              return;
            }
            var SyntheticEventCtor = SyntheticEvent;
            var reactEventType = domEventName;
            switch (domEventName) {
              case "keypress":
                if (getEventCharCode(nativeEvent) === 0) {
                  return;
                }
              /* falls through */
              case "keydown":
              case "keyup":
                SyntheticEventCtor = SyntheticKeyboardEvent;
                break;
              case "focusin":
                reactEventType = "focus";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "focusout":
                reactEventType = "blur";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "beforeblur":
              case "afterblur":
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "click":
                if (nativeEvent.button === 2) {
                  return;
                }
              /* falls through */
              case "auxclick":
              case "dblclick":
              case "mousedown":
              case "mousemove":
              case "mouseup":
              // TODO: Disabled elements should not respond to mouse events
              /* falls through */
              case "mouseout":
              case "mouseover":
              case "contextmenu":
                SyntheticEventCtor = SyntheticMouseEvent;
                break;
              case "drag":
              case "dragend":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "dragstart":
              case "drop":
                SyntheticEventCtor = SyntheticDragEvent;
                break;
              case "touchcancel":
              case "touchend":
              case "touchmove":
              case "touchstart":
                SyntheticEventCtor = SyntheticTouchEvent;
                break;
              case ANIMATION_END:
              case ANIMATION_ITERATION:
              case ANIMATION_START:
                SyntheticEventCtor = SyntheticAnimationEvent;
                break;
              case TRANSITION_END:
                SyntheticEventCtor = SyntheticTransitionEvent;
                break;
              case "scroll":
                SyntheticEventCtor = SyntheticUIEvent;
                break;
              case "wheel":
                SyntheticEventCtor = SyntheticWheelEvent;
                break;
              case "copy":
              case "cut":
              case "paste":
                SyntheticEventCtor = SyntheticClipboardEvent;
                break;
              case "gotpointercapture":
              case "lostpointercapture":
              case "pointercancel":
              case "pointerdown":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "pointerup":
                SyntheticEventCtor = SyntheticPointerEvent;
                break;
            }
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            {
              var accumulateTargetOnly = !inCapturePhase && // TODO: ideally, we'd eventually add all events from
              // nonDelegatedEvents list in DOMPluginEventSystem.
              // Then we can remove this special list.
              // This is a breaking change that can wait until React 18.
              domEventName === "scroll";
              var _listeners2 = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
              if (_listeners2.length > 0) {
                var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event: _event,
                  listeners: _listeners2
                });
              }
            }
          }
          registerSimpleEvents();
          registerEvents$2();
          registerEvents$1();
          registerEvents$3();
          registerEvents();
          function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0;
            if (shouldProcessPolyfillPlugins) {
              extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            }
          }
          var mediaEventTypes = ["abort", "canplay", "canplaythrough", "durationchange", "emptied", "encrypted", "ended", "error", "loadeddata", "loadedmetadata", "loadstart", "pause", "play", "playing", "progress", "ratechange", "resize", "seeked", "seeking", "stalled", "suspend", "timeupdate", "volumechange", "waiting"];
          var nonDelegatedEvents = new Set(["cancel", "close", "invalid", "load", "scroll", "toggle"].concat(mediaEventTypes));
          function executeDispatch(event, listener, currentTarget) {
            var type = event.type || "unknown-event";
            event.currentTarget = currentTarget;
            invokeGuardedCallbackAndCatchFirstError(type, listener, void 0, event);
            event.currentTarget = null;
          }
          function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
            var previousInstance;
            if (inCapturePhase) {
              for (var i = dispatchListeners.length - 1; i >= 0; i--) {
                var _dispatchListeners$i = dispatchListeners[i], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener = _dispatchListeners$i.listener;
                if (instance !== previousInstance && event.isPropagationStopped()) {
                  return;
                }
                executeDispatch(event, listener, currentTarget);
                previousInstance = instance;
              }
            } else {
              for (var _i = 0; _i < dispatchListeners.length; _i++) {
                var _dispatchListeners$_i = dispatchListeners[_i], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
                if (_instance !== previousInstance && event.isPropagationStopped()) {
                  return;
                }
                executeDispatch(event, _listener, _currentTarget);
                previousInstance = _instance;
              }
            }
          }
          function processDispatchQueue(dispatchQueue, eventSystemFlags) {
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            for (var i = 0; i < dispatchQueue.length; i++) {
              var _dispatchQueue$i = dispatchQueue[i], event = _dispatchQueue$i.event, listeners = _dispatchQueue$i.listeners;
              processDispatchQueueItemsInOrder(event, listeners, inCapturePhase);
            }
            rethrowCaughtError();
          }
          function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var nativeEventTarget = getEventTarget(nativeEvent);
            var dispatchQueue = [];
            extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            processDispatchQueue(dispatchQueue, eventSystemFlags);
          }
          function listenToNonDelegatedEvent(domEventName, targetElement) {
            {
              if (!nonDelegatedEvents.has(domEventName)) {
                error('Did not expect a listenToNonDelegatedEvent() call for "%s". This is a bug in React. Please file an issue.', domEventName);
              }
            }
            var isCapturePhaseListener = false;
            var listenerSet = getEventListenerSet(targetElement);
            var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
            if (!listenerSet.has(listenerSetKey)) {
              addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
              listenerSet.add(listenerSetKey);
            }
          }
          function listenToNativeEvent(domEventName, isCapturePhaseListener, target) {
            {
              if (nonDelegatedEvents.has(domEventName) && !isCapturePhaseListener) {
                error('Did not expect a listenToNativeEvent() call for "%s" in the bubble phase. This is a bug in React. Please file an issue.', domEventName);
              }
            }
            var eventSystemFlags = 0;
            if (isCapturePhaseListener) {
              eventSystemFlags |= IS_CAPTURE_PHASE;
            }
            addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
          }
          var listeningMarker = "_reactListening" + Math.random().toString(36).slice(2);
          function listenToAllSupportedEvents(rootContainerElement) {
            if (!rootContainerElement[listeningMarker]) {
              rootContainerElement[listeningMarker] = true;
              allNativeEvents.forEach(function(domEventName) {
                if (domEventName !== "selectionchange") {
                  if (!nonDelegatedEvents.has(domEventName)) {
                    listenToNativeEvent(domEventName, false, rootContainerElement);
                  }
                  listenToNativeEvent(domEventName, true, rootContainerElement);
                }
              });
              var ownerDocument = rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
              if (ownerDocument !== null) {
                if (!ownerDocument[listeningMarker]) {
                  ownerDocument[listeningMarker] = true;
                  listenToNativeEvent("selectionchange", false, ownerDocument);
                }
              }
            }
          }
          function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
            var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags);
            var isPassiveListener = void 0;
            if (passiveBrowserEventsSupported) {
              if (domEventName === "touchstart" || domEventName === "touchmove" || domEventName === "wheel") {
                isPassiveListener = true;
              }
            }
            targetContainer = targetContainer;
            var unsubscribeListener;
            if (isCapturePhaseListener) {
              if (isPassiveListener !== void 0) {
                unsubscribeListener = addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
              } else {
                unsubscribeListener = addEventCaptureListener(targetContainer, domEventName, listener);
              }
            } else {
              if (isPassiveListener !== void 0) {
                unsubscribeListener = addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
              } else {
                unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener);
              }
            }
          }
          function isMatchingRootContainer(grandContainer, targetContainer) {
            return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
          }
          function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var ancestorInst = targetInst;
            if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
              var targetContainerNode = targetContainer;
              if (targetInst !== null) {
                var node = targetInst;
                mainLoop: while (true) {
                  if (node === null) {
                    return;
                  }
                  var nodeTag = node.tag;
                  if (nodeTag === HostRoot || nodeTag === HostPortal) {
                    var container = node.stateNode.containerInfo;
                    if (isMatchingRootContainer(container, targetContainerNode)) {
                      break;
                    }
                    if (nodeTag === HostPortal) {
                      var grandNode = node.return;
                      while (grandNode !== null) {
                        var grandTag = grandNode.tag;
                        if (grandTag === HostRoot || grandTag === HostPortal) {
                          var grandContainer = grandNode.stateNode.containerInfo;
                          if (isMatchingRootContainer(grandContainer, targetContainerNode)) {
                            return;
                          }
                        }
                        grandNode = grandNode.return;
                      }
                    }
                    while (container !== null) {
                      var parentNode = getClosestInstanceFromNode(container);
                      if (parentNode === null) {
                        return;
                      }
                      var parentTag = parentNode.tag;
                      if (parentTag === HostComponent || parentTag === HostText) {
                        node = ancestorInst = parentNode;
                        continue mainLoop;
                      }
                      container = container.parentNode;
                    }
                  }
                  node = node.return;
                }
              }
            }
            batchedUpdates(function() {
              return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
            });
          }
          function createDispatchListener(instance, listener, currentTarget) {
            return {
              instance,
              listener,
              currentTarget
            };
          }
          function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly, nativeEvent) {
            var captureName = reactName !== null ? reactName + "Capture" : null;
            var reactEventName = inCapturePhase ? captureName : reactName;
            var listeners = [];
            var instance = targetFiber;
            var lastHostComponent = null;
            while (instance !== null) {
              var _instance2 = instance, stateNode = _instance2.stateNode, tag = _instance2.tag;
              if (tag === HostComponent && stateNode !== null) {
                lastHostComponent = stateNode;
                if (reactEventName !== null) {
                  var listener = getListener(instance, reactEventName);
                  if (listener != null) {
                    listeners.push(createDispatchListener(instance, listener, lastHostComponent));
                  }
                }
              }
              if (accumulateTargetOnly) {
                break;
              }
              instance = instance.return;
            }
            return listeners;
          }
          function accumulateTwoPhaseListeners(targetFiber, reactName) {
            var captureName = reactName + "Capture";
            var listeners = [];
            var instance = targetFiber;
            while (instance !== null) {
              var _instance3 = instance, stateNode = _instance3.stateNode, tag = _instance3.tag;
              if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                var captureListener = getListener(instance, captureName);
                if (captureListener != null) {
                  listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                }
                var bubbleListener = getListener(instance, reactName);
                if (bubbleListener != null) {
                  listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                }
              }
              instance = instance.return;
            }
            return listeners;
          }
          function getParent(inst) {
            if (inst === null) {
              return null;
            }
            do {
              inst = inst.return;
            } while (inst && inst.tag !== HostComponent);
            if (inst) {
              return inst;
            }
            return null;
          }
          function getLowestCommonAncestor(instA, instB) {
            var nodeA = instA;
            var nodeB = instB;
            var depthA = 0;
            for (var tempA = nodeA; tempA; tempA = getParent(tempA)) {
              depthA++;
            }
            var depthB = 0;
            for (var tempB = nodeB; tempB; tempB = getParent(tempB)) {
              depthB++;
            }
            while (depthA - depthB > 0) {
              nodeA = getParent(nodeA);
              depthA--;
            }
            while (depthB - depthA > 0) {
              nodeB = getParent(nodeB);
              depthB--;
            }
            var depth = depthA;
            while (depth--) {
              if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {
                return nodeA;
              }
              nodeA = getParent(nodeA);
              nodeB = getParent(nodeB);
            }
            return null;
          }
          function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
            var registrationName = event._reactName;
            var listeners = [];
            var instance = target;
            while (instance !== null) {
              if (instance === common) {
                break;
              }
              var _instance4 = instance, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag = _instance4.tag;
              if (alternate !== null && alternate === common) {
                break;
              }
              if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                if (inCapturePhase) {
                  var captureListener = getListener(instance, registrationName);
                  if (captureListener != null) {
                    listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                  }
                } else if (!inCapturePhase) {
                  var bubbleListener = getListener(instance, registrationName);
                  if (bubbleListener != null) {
                    listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                  }
                }
              }
              instance = instance.return;
            }
            if (listeners.length !== 0) {
              dispatchQueue.push({
                event,
                listeners
              });
            }
          }
          function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from, to) {
            var common = from && to ? getLowestCommonAncestor(from, to) : null;
            if (from !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from, common, false);
            }
            if (to !== null && enterEvent !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, true);
            }
          }
          function getListenerSetKey(domEventName, capture) {
            return domEventName + "__" + (capture ? "capture" : "bubble");
          }
          var didWarnInvalidHydration = false;
          var DANGEROUSLY_SET_INNER_HTML = "dangerouslySetInnerHTML";
          var SUPPRESS_CONTENT_EDITABLE_WARNING = "suppressContentEditableWarning";
          var SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning";
          var AUTOFOCUS = "autoFocus";
          var CHILDREN = "children";
          var STYLE = "style";
          var HTML$1 = "__html";
          var warnedUnknownTags;
          var validatePropertiesInDevelopment;
          var warnForPropDifference;
          var warnForExtraAttributes;
          var warnForInvalidEventListener;
          var canDiffStyleForHydrationWarning;
          var normalizeHTML;
          {
            warnedUnknownTags = {
              // There are working polyfills for <dialog>. Let people use it.
              dialog: true,
              // Electron ships a custom <webview> tag to display external web content in
              // an isolated frame and process.
              // This tag is not present in non Electron environments such as JSDom which
              // is often used for testing purposes.
              // @see https://electronjs.org/docs/api/webview-tag
              webview: true
            };
            validatePropertiesInDevelopment = function(type, props) {
              validateProperties(type, props);
              validateProperties$1(type, props);
              validateProperties$2(type, props, {
                registrationNameDependencies,
                possibleRegistrationNames
              });
            };
            canDiffStyleForHydrationWarning = canUseDOM3 && !document.documentMode;
            warnForPropDifference = function(propName, serverValue, clientValue) {
              if (didWarnInvalidHydration) {
                return;
              }
              var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
              var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
              if (normalizedServerValue === normalizedClientValue) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Prop `%s` did not match. Server: %s Client: %s", propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
            };
            warnForExtraAttributes = function(attributeNames) {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              var names = [];
              attributeNames.forEach(function(name) {
                names.push(name);
              });
              error("Extra attributes from the server: %s", names);
            };
            warnForInvalidEventListener = function(registrationName, listener) {
              if (listener === false) {
                error("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
              } else {
                error("Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener);
              }
            };
            normalizeHTML = function(parent2, html) {
              var testElement = parent2.namespaceURI === HTML_NAMESPACE ? parent2.ownerDocument.createElement(parent2.tagName) : parent2.ownerDocument.createElementNS(parent2.namespaceURI, parent2.tagName);
              testElement.innerHTML = html;
              return testElement.innerHTML;
            };
          }
          var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
          var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
          function normalizeMarkupForTextOrAttribute(markup) {
            {
              checkHtmlStringCoercion(markup);
            }
            var markupString = typeof markup === "string" ? markup : "" + markup;
            return markupString.replace(NORMALIZE_NEWLINES_REGEX, "\n").replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
          }
          function checkForUnmatchedText(serverText, clientText, isConcurrentMode, shouldWarnDev) {
            var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
            var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
            if (normalizedServerText === normalizedClientText) {
              return;
            }
            if (shouldWarnDev) {
              {
                if (!didWarnInvalidHydration) {
                  didWarnInvalidHydration = true;
                  error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
                }
              }
            }
            if (isConcurrentMode && enableClientRenderFallbackOnTextMismatch) {
              throw new Error("Text content does not match server-rendered HTML.");
            }
          }
          function getOwnerDocumentFromRootContainer(rootContainerElement) {
            return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
          }
          function noop() {
          }
          function trapClickOnNonInteractiveElement(node) {
            node.onclick = noop;
          }
          function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
            for (var propKey in nextProps) {
              if (!nextProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = nextProps[propKey];
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                setValueForStyles(domElement, nextProp);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  setInnerHTML(domElement, nextHtml);
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  var canSetTextContent = tag !== "textarea" || nextProp !== "";
                  if (canSetTextContent) {
                    setTextContent(domElement, nextProp);
                  }
                } else if (typeof nextProp === "number") {
                  setTextContent(domElement, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ;
              else if (propKey === AUTOFOCUS) ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
              } else if (nextProp != null) {
                setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
              }
            }
          }
          function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
            for (var i = 0; i < updatePayload.length; i += 2) {
              var propKey = updatePayload[i];
              var propValue = updatePayload[i + 1];
              if (propKey === STYLE) {
                setValueForStyles(domElement, propValue);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                setInnerHTML(domElement, propValue);
              } else if (propKey === CHILDREN) {
                setTextContent(domElement, propValue);
              } else {
                setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
              }
            }
          }
          function createElement102(type, props, rootContainerElement, parentNamespace) {
            var isCustomComponentTag;
            var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
            var domElement;
            var namespaceURI = parentNamespace;
            if (namespaceURI === HTML_NAMESPACE) {
              namespaceURI = getIntrinsicNamespace(type);
            }
            if (namespaceURI === HTML_NAMESPACE) {
              {
                isCustomComponentTag = isCustomComponent(type, props);
                if (!isCustomComponentTag && type !== type.toLowerCase()) {
                  error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
                }
              }
              if (type === "script") {
                var div = ownerDocument.createElement("div");
                div.innerHTML = "<script><\/script>";
                var firstChild = div.firstChild;
                domElement = div.removeChild(firstChild);
              } else if (typeof props.is === "string") {
                domElement = ownerDocument.createElement(type, {
                  is: props.is
                });
              } else {
                domElement = ownerDocument.createElement(type);
                if (type === "select") {
                  var node = domElement;
                  if (props.multiple) {
                    node.multiple = true;
                  } else if (props.size) {
                    node.size = props.size;
                  }
                }
              }
            } else {
              domElement = ownerDocument.createElementNS(namespaceURI, type);
            }
            {
              if (namespaceURI === HTML_NAMESPACE) {
                if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === "[object HTMLUnknownElement]" && !hasOwnProperty.call(warnedUnknownTags, type)) {
                  warnedUnknownTags[type] = true;
                  error("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type);
                }
              }
            }
            return domElement;
          }
          function createTextNode(text, rootContainerElement) {
            return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
          }
          function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
            var isCustomComponentTag = isCustomComponent(tag, rawProps);
            {
              validatePropertiesInDevelopment(tag, rawProps);
            }
            var props;
            switch (tag) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                props = rawProps;
                break;
              case "iframe":
              case "object":
              case "embed":
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
              case "video":
              case "audio":
                for (var i = 0; i < mediaEventTypes.length; i++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
                }
                props = rawProps;
                break;
              case "source":
                listenToNonDelegatedEvent("error", domElement);
                props = rawProps;
                break;
              case "img":
              case "image":
              case "link":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
              case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                props = rawProps;
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                props = getHostProps(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                props = rawProps;
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                props = getHostProps$1(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                props = getHostProps$2(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              default:
                props = rawProps;
            }
            assertValidProps(tag, props);
            setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
            switch (tag) {
              case "input":
                track(domElement);
                postMountWrapper(domElement, rawProps, false);
                break;
              case "textarea":
                track(domElement);
                postMountWrapper$3(domElement);
                break;
              case "option":
                postMountWrapper$1(domElement, rawProps);
                break;
              case "select":
                postMountWrapper$2(domElement, rawProps);
                break;
              default:
                if (typeof props.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
          }
          function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
            {
              validatePropertiesInDevelopment(tag, nextRawProps);
            }
            var updatePayload = null;
            var lastProps;
            var nextProps;
            switch (tag) {
              case "input":
                lastProps = getHostProps(domElement, lastRawProps);
                nextProps = getHostProps(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "select":
                lastProps = getHostProps$1(domElement, lastRawProps);
                nextProps = getHostProps$1(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "textarea":
                lastProps = getHostProps$2(domElement, lastRawProps);
                nextProps = getHostProps$2(domElement, nextRawProps);
                updatePayload = [];
                break;
              default:
                lastProps = lastRawProps;
                nextProps = nextRawProps;
                if (typeof lastProps.onClick !== "function" && typeof nextProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            assertValidProps(tag, nextProps);
            var propKey;
            var styleName;
            var styleUpdates = null;
            for (propKey in lastProps) {
              if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
                continue;
              }
              if (propKey === STYLE) {
                var lastStyle = lastProps[propKey];
                for (styleName in lastStyle) {
                  if (lastStyle.hasOwnProperty(styleName)) {
                    if (!styleUpdates) {
                      styleUpdates = {};
                    }
                    styleUpdates[styleName] = "";
                  }
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN) ;
              else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ;
              else if (propKey === AUTOFOCUS) ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (!updatePayload) {
                  updatePayload = [];
                }
              } else {
                (updatePayload = updatePayload || []).push(propKey, null);
              }
            }
            for (propKey in nextProps) {
              var nextProp = nextProps[propKey];
              var lastProp = lastProps != null ? lastProps[propKey] : void 0;
              if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
                continue;
              }
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                if (lastProp) {
                  for (styleName in lastProp) {
                    if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = "";
                    }
                  }
                  for (styleName in nextProp) {
                    if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = nextProp[styleName];
                    }
                  }
                } else {
                  if (!styleUpdates) {
                    if (!updatePayload) {
                      updatePayload = [];
                    }
                    updatePayload.push(propKey, styleUpdates);
                  }
                  styleUpdates = nextProp;
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                var lastHtml = lastProp ? lastProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  if (lastHtml !== nextHtml) {
                    (updatePayload = updatePayload || []).push(propKey, nextHtml);
                  }
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string" || typeof nextProp === "number") {
                  (updatePayload = updatePayload || []).push(propKey, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
                if (!updatePayload && lastProp !== nextProp) {
                  updatePayload = [];
                }
              } else {
                (updatePayload = updatePayload || []).push(propKey, nextProp);
              }
            }
            if (styleUpdates) {
              {
                validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
              }
              (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
            }
            return updatePayload;
          }
          function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
            if (tag === "input" && nextRawProps.type === "radio" && nextRawProps.name != null) {
              updateChecked(domElement, nextRawProps);
            }
            var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
            var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
            updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);
            switch (tag) {
              case "input":
                updateWrapper(domElement, nextRawProps);
                break;
              case "textarea":
                updateWrapper$1(domElement, nextRawProps);
                break;
              case "select":
                postUpdateWrapper(domElement, nextRawProps);
                break;
            }
          }
          function getPossibleStandardName(propName) {
            {
              var lowerCasedName = propName.toLowerCase();
              if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                return null;
              }
              return possibleStandardNames[lowerCasedName] || null;
            }
          }
          function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement, isConcurrentMode, shouldWarnDev) {
            var isCustomComponentTag;
            var extraAttributeNames;
            {
              isCustomComponentTag = isCustomComponent(tag, rawProps);
              validatePropertiesInDevelopment(tag, rawProps);
            }
            switch (tag) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                break;
              case "iframe":
              case "object":
              case "embed":
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "video":
              case "audio":
                for (var i = 0; i < mediaEventTypes.length; i++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
                }
                break;
              case "source":
                listenToNonDelegatedEvent("error", domElement);
                break;
              case "img":
              case "image":
              case "link":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
            }
            assertValidProps(tag, rawProps);
            {
              extraAttributeNames = /* @__PURE__ */ new Set();
              var attributes = domElement.attributes;
              for (var _i = 0; _i < attributes.length; _i++) {
                var name = attributes[_i].name.toLowerCase();
                switch (name) {
                  // Controlled attributes are not validated
                  // TODO: Only ignore them on controlled tags.
                  case "value":
                    break;
                  case "checked":
                    break;
                  case "selected":
                    break;
                  default:
                    extraAttributeNames.add(attributes[_i].name);
                }
              }
            }
            var updatePayload = null;
            for (var propKey in rawProps) {
              if (!rawProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = rawProps[propKey];
              if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  if (domElement.textContent !== nextProp) {
                    if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                      checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                    }
                    updatePayload = [CHILDREN, nextProp];
                  }
                } else if (typeof nextProp === "number") {
                  if (domElement.textContent !== "" + nextProp) {
                    if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                      checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                    }
                    updatePayload = [CHILDREN, "" + nextProp];
                  }
                }
              } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
              } else if (shouldWarnDev && true && // Convince Flow we've calculated it (it's DEV-only in this method.)
              typeof isCustomComponentTag === "boolean") {
                var serverValue = void 0;
                var propertyInfo = isCustomComponentTag && enableCustomElementPropertySupport ? null : getPropertyInfo(propKey);
                if (rawProps[SUPPRESS_HYDRATION_WARNING] === true) ;
                else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || // Controlled attributes are not validated
                // TODO: Only ignore them on controlled tags.
                propKey === "value" || propKey === "checked" || propKey === "selected") ;
                else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                  var serverHTML = domElement.innerHTML;
                  var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                  if (nextHtml != null) {
                    var expectedHTML = normalizeHTML(domElement, nextHtml);
                    if (expectedHTML !== serverHTML) {
                      warnForPropDifference(propKey, serverHTML, expectedHTML);
                    }
                  }
                } else if (propKey === STYLE) {
                  extraAttributeNames.delete(propKey);
                  if (canDiffStyleForHydrationWarning) {
                    var expectedStyle = createDangerousStringForStyles(nextProp);
                    serverValue = domElement.getAttribute("style");
                    if (expectedStyle !== serverValue) {
                      warnForPropDifference(propKey, serverValue, expectedStyle);
                    }
                  }
                } else if (isCustomComponentTag && !enableCustomElementPropertySupport) {
                  extraAttributeNames.delete(propKey.toLowerCase());
                  serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  if (nextProp !== serverValue) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
                  var isMismatchDueToBadCasing = false;
                  if (propertyInfo !== null) {
                    extraAttributeNames.delete(propertyInfo.attributeName);
                    serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
                  } else {
                    var ownNamespace = parentNamespace;
                    if (ownNamespace === HTML_NAMESPACE) {
                      ownNamespace = getIntrinsicNamespace(tag);
                    }
                    if (ownNamespace === HTML_NAMESPACE) {
                      extraAttributeNames.delete(propKey.toLowerCase());
                    } else {
                      var standardName = getPossibleStandardName(propKey);
                      if (standardName !== null && standardName !== propKey) {
                        isMismatchDueToBadCasing = true;
                        extraAttributeNames.delete(standardName);
                      }
                      extraAttributeNames.delete(propKey);
                    }
                    serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  }
                  var dontWarnCustomElement = enableCustomElementPropertySupport;
                  if (!dontWarnCustomElement && nextProp !== serverValue && !isMismatchDueToBadCasing) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                }
              }
            }
            {
              if (shouldWarnDev) {
                if (
                  // $FlowFixMe - Should be inferred as not undefined.
                  extraAttributeNames.size > 0 && rawProps[SUPPRESS_HYDRATION_WARNING] !== true
                ) {
                  warnForExtraAttributes(extraAttributeNames);
                }
              }
            }
            switch (tag) {
              case "input":
                track(domElement);
                postMountWrapper(domElement, rawProps, true);
                break;
              case "textarea":
                track(domElement);
                postMountWrapper$3(domElement);
                break;
              case "select":
              case "option":
                break;
              default:
                if (typeof rawProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            return updatePayload;
          }
          function diffHydratedText(textNode, text, isConcurrentMode) {
            var isDifferent = textNode.nodeValue !== text;
            return isDifferent;
          }
          function warnForDeletedHydratableElement(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Did not expect server HTML to contain a <%s> in <%s>.", child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
            }
          }
          function warnForDeletedHydratableText(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
            }
          }
          function warnForInsertedHydratedElement(parentNode, tag, props) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Expected server HTML to contain a matching <%s> in <%s>.", tag, parentNode.nodeName.toLowerCase());
            }
          }
          function warnForInsertedHydratedText(parentNode, text) {
            {
              if (text === "") {
                return;
              }
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
            }
          }
          function restoreControlledState$3(domElement, tag, props) {
            switch (tag) {
              case "input":
                restoreControlledState(domElement, props);
                return;
              case "textarea":
                restoreControlledState$2(domElement, props);
                return;
              case "select":
                restoreControlledState$1(domElement, props);
                return;
            }
          }
          var validateDOMNesting = function() {
          };
          var updatedAncestorInfo = function() {
          };
          {
            var specialTags = ["address", "applet", "area", "article", "aside", "base", "basefont", "bgsound", "blockquote", "body", "br", "button", "caption", "center", "col", "colgroup", "dd", "details", "dir", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "img", "input", "isindex", "li", "link", "listing", "main", "marquee", "menu", "menuitem", "meta", "nav", "noembed", "noframes", "noscript", "object", "ol", "p", "param", "plaintext", "pre", "script", "section", "select", "source", "style", "summary", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "title", "tr", "track", "ul", "wbr", "xmp"];
            var inScopeTags = [
              "applet",
              "caption",
              "html",
              "table",
              "td",
              "th",
              "marquee",
              "object",
              "template",
              // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
              // TODO: Distinguish by namespace here -- for <title>, including it here
              // errs on the side of fewer warnings
              "foreignObject",
              "desc",
              "title"
            ];
            var buttonScopeTags = inScopeTags.concat(["button"]);
            var impliedEndTags = ["dd", "dt", "li", "option", "optgroup", "p", "rp", "rt"];
            var emptyAncestorInfo = {
              current: null,
              formTag: null,
              aTagInScope: null,
              buttonTagInScope: null,
              nobrTagInScope: null,
              pTagInButtonScope: null,
              listItemTagAutoclosing: null,
              dlItemTagAutoclosing: null
            };
            updatedAncestorInfo = function(oldInfo, tag) {
              var ancestorInfo = assign({}, oldInfo || emptyAncestorInfo);
              var info2 = {
                tag
              };
              if (inScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.aTagInScope = null;
                ancestorInfo.buttonTagInScope = null;
                ancestorInfo.nobrTagInScope = null;
              }
              if (buttonScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.pTagInButtonScope = null;
              }
              if (specialTags.indexOf(tag) !== -1 && tag !== "address" && tag !== "div" && tag !== "p") {
                ancestorInfo.listItemTagAutoclosing = null;
                ancestorInfo.dlItemTagAutoclosing = null;
              }
              ancestorInfo.current = info2;
              if (tag === "form") {
                ancestorInfo.formTag = info2;
              }
              if (tag === "a") {
                ancestorInfo.aTagInScope = info2;
              }
              if (tag === "button") {
                ancestorInfo.buttonTagInScope = info2;
              }
              if (tag === "nobr") {
                ancestorInfo.nobrTagInScope = info2;
              }
              if (tag === "p") {
                ancestorInfo.pTagInButtonScope = info2;
              }
              if (tag === "li") {
                ancestorInfo.listItemTagAutoclosing = info2;
              }
              if (tag === "dd" || tag === "dt") {
                ancestorInfo.dlItemTagAutoclosing = info2;
              }
              return ancestorInfo;
            };
            var isTagValidWithParent = function(tag, parentTag) {
              switch (parentTag) {
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
                case "select":
                  return tag === "option" || tag === "optgroup" || tag === "#text";
                case "optgroup":
                  return tag === "option" || tag === "#text";
                // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
                // but
                case "option":
                  return tag === "#text";
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
                // No special behavior since these rules fall back to "in body" mode for
                // all except special table nodes which cause bad parsing behavior anyway.
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
                case "tr":
                  return tag === "th" || tag === "td" || tag === "style" || tag === "script" || tag === "template";
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
                case "tbody":
                case "thead":
                case "tfoot":
                  return tag === "tr" || tag === "style" || tag === "script" || tag === "template";
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
                case "colgroup":
                  return tag === "col" || tag === "template";
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
                case "table":
                  return tag === "caption" || tag === "colgroup" || tag === "tbody" || tag === "tfoot" || tag === "thead" || tag === "style" || tag === "script" || tag === "template";
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
                case "head":
                  return tag === "base" || tag === "basefont" || tag === "bgsound" || tag === "link" || tag === "meta" || tag === "title" || tag === "noscript" || tag === "noframes" || tag === "style" || tag === "script" || tag === "template";
                // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
                case "html":
                  return tag === "head" || tag === "body" || tag === "frameset";
                case "frameset":
                  return tag === "frame";
                case "#document":
                  return tag === "html";
              }
              switch (tag) {
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return parentTag !== "h1" && parentTag !== "h2" && parentTag !== "h3" && parentTag !== "h4" && parentTag !== "h5" && parentTag !== "h6";
                case "rp":
                case "rt":
                  return impliedEndTags.indexOf(parentTag) === -1;
                case "body":
                case "caption":
                case "col":
                case "colgroup":
                case "frameset":
                case "frame":
                case "head":
                case "html":
                case "tbody":
                case "td":
                case "tfoot":
                case "th":
                case "thead":
                case "tr":
                  return parentTag == null;
              }
              return true;
            };
            var findInvalidAncestorForTag = function(tag, ancestorInfo) {
              switch (tag) {
                case "address":
                case "article":
                case "aside":
                case "blockquote":
                case "center":
                case "details":
                case "dialog":
                case "dir":
                case "div":
                case "dl":
                case "fieldset":
                case "figcaption":
                case "figure":
                case "footer":
                case "header":
                case "hgroup":
                case "main":
                case "menu":
                case "nav":
                case "ol":
                case "p":
                case "section":
                case "summary":
                case "ul":
                case "pre":
                case "listing":
                case "table":
                case "hr":
                case "xmp":
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return ancestorInfo.pTagInButtonScope;
                case "form":
                  return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
                case "li":
                  return ancestorInfo.listItemTagAutoclosing;
                case "dd":
                case "dt":
                  return ancestorInfo.dlItemTagAutoclosing;
                case "button":
                  return ancestorInfo.buttonTagInScope;
                case "a":
                  return ancestorInfo.aTagInScope;
                case "nobr":
                  return ancestorInfo.nobrTagInScope;
              }
              return null;
            };
            var didWarn$1 = {};
            validateDOMNesting = function(childTag, childText, ancestorInfo) {
              ancestorInfo = ancestorInfo || emptyAncestorInfo;
              var parentInfo = ancestorInfo.current;
              var parentTag = parentInfo && parentInfo.tag;
              if (childText != null) {
                if (childTag != null) {
                  error("validateDOMNesting: when childText is passed, childTag should be null");
                }
                childTag = "#text";
              }
              var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
              var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
              var invalidParentOrAncestor = invalidParent || invalidAncestor;
              if (!invalidParentOrAncestor) {
                return;
              }
              var ancestorTag = invalidParentOrAncestor.tag;
              var warnKey = !!invalidParent + "|" + childTag + "|" + ancestorTag;
              if (didWarn$1[warnKey]) {
                return;
              }
              didWarn$1[warnKey] = true;
              var tagDisplayName = childTag;
              var whitespaceInfo = "";
              if (childTag === "#text") {
                if (/\S/.test(childText)) {
                  tagDisplayName = "Text nodes";
                } else {
                  tagDisplayName = "Whitespace text nodes";
                  whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.";
                }
              } else {
                tagDisplayName = "<" + childTag + ">";
              }
              if (invalidParent) {
                var info2 = "";
                if (ancestorTag === "table" && childTag === "tr") {
                  info2 += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
                }
                error("validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s", tagDisplayName, ancestorTag, whitespaceInfo, info2);
              } else {
                error("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
              }
            };
          }
          var SUPPRESS_HYDRATION_WARNING$1 = "suppressHydrationWarning";
          var SUSPENSE_START_DATA = "$";
          var SUSPENSE_END_DATA = "/$";
          var SUSPENSE_PENDING_START_DATA = "$?";
          var SUSPENSE_FALLBACK_START_DATA = "$!";
          var STYLE$1 = "style";
          var eventsEnabled = null;
          var selectionInformation = null;
          function getRootHostContext(rootContainerInstance) {
            var type;
            var namespace;
            var nodeType = rootContainerInstance.nodeType;
            switch (nodeType) {
              case DOCUMENT_NODE:
              case DOCUMENT_FRAGMENT_NODE: {
                type = nodeType === DOCUMENT_NODE ? "#document" : "#fragment";
                var root2 = rootContainerInstance.documentElement;
                namespace = root2 ? root2.namespaceURI : getChildNamespace(null, "");
                break;
              }
              default: {
                var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
                var ownNamespace = container.namespaceURI || null;
                type = container.tagName;
                namespace = getChildNamespace(ownNamespace, type);
                break;
              }
            }
            {
              var validatedTag = type.toLowerCase();
              var ancestorInfo = updatedAncestorInfo(null, validatedTag);
              return {
                namespace,
                ancestorInfo
              };
            }
          }
          function getChildHostContext(parentHostContext, type, rootContainerInstance) {
            {
              var parentHostContextDev = parentHostContext;
              var namespace = getChildNamespace(parentHostContextDev.namespace, type);
              var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
              return {
                namespace,
                ancestorInfo
              };
            }
          }
          function getPublicInstance(instance) {
            return instance;
          }
          function prepareForCommit(containerInfo) {
            eventsEnabled = isEnabled();
            selectionInformation = getSelectionInformation();
            var activeInstance = null;
            setEnabled(false);
            return activeInstance;
          }
          function resetAfterCommit(containerInfo) {
            restoreSelection(selectionInformation);
            setEnabled(eventsEnabled);
            eventsEnabled = null;
            selectionInformation = null;
          }
          function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              validateDOMNesting(type, null, hostContextDev.ancestorInfo);
              if (typeof props.children === "string" || typeof props.children === "number") {
                var string = "" + props.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                validateDOMNesting(null, string, ownAncestorInfo);
              }
              parentNamespace = hostContextDev.namespace;
            }
            var domElement = createElement102(type, props, rootContainerInstance, parentNamespace);
            precacheFiberNode(internalInstanceHandle, domElement);
            updateFiberProps(domElement, props);
            return domElement;
          }
          function appendInitialChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
            setInitialProperties(domElement, type, props, rootContainerInstance);
            switch (type) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                return !!props.autoFocus;
              case "img":
                return true;
              default:
                return false;
            }
          }
          function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
            {
              var hostContextDev = hostContext;
              if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === "string" || typeof newProps.children === "number")) {
                var string = "" + newProps.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                validateDOMNesting(null, string, ownAncestorInfo);
              }
            }
            return diffProperties(domElement, type, oldProps, newProps);
          }
          function shouldSetTextContent(type, props) {
            return type === "textarea" || type === "noscript" || typeof props.children === "string" || typeof props.children === "number" || typeof props.dangerouslySetInnerHTML === "object" && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
          }
          function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
            {
              var hostContextDev = hostContext;
              validateDOMNesting(null, text, hostContextDev.ancestorInfo);
            }
            var textNode = createTextNode(text, rootContainerInstance);
            precacheFiberNode(internalInstanceHandle, textNode);
            return textNode;
          }
          function getCurrentEventPriority() {
            var currentEvent = window.event;
            if (currentEvent === void 0) {
              return DefaultEventPriority;
            }
            return getEventPriority(currentEvent.type);
          }
          var scheduleTimeout = typeof setTimeout === "function" ? setTimeout : void 0;
          var cancelTimeout = typeof clearTimeout === "function" ? clearTimeout : void 0;
          var noTimeout = -1;
          var localPromise = typeof Promise === "function" ? Promise : void 0;
          var scheduleMicrotask = typeof queueMicrotask === "function" ? queueMicrotask : typeof localPromise !== "undefined" ? function(callback) {
            return localPromise.resolve(null).then(callback).catch(handleErrorInNextTick);
          } : scheduleTimeout;
          function handleErrorInNextTick(error2) {
            setTimeout(function() {
              throw error2;
            });
          }
          function commitMount(domElement, type, newProps, internalInstanceHandle) {
            switch (type) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                if (newProps.autoFocus) {
                  domElement.focus();
                }
                return;
              case "img": {
                if (newProps.src) {
                  domElement.src = newProps.src;
                }
                return;
              }
            }
          }
          function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
            updateProperties(domElement, updatePayload, type, oldProps, newProps);
            updateFiberProps(domElement, newProps);
          }
          function resetTextContent(domElement) {
            setTextContent(domElement, "");
          }
          function commitTextUpdate(textInstance, oldText, newText) {
            textInstance.nodeValue = newText;
          }
          function appendChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          function appendChildToContainer(container, child) {
            var parentNode;
            if (container.nodeType === COMMENT_NODE) {
              parentNode = container.parentNode;
              parentNode.insertBefore(child, container);
            } else {
              parentNode = container;
              parentNode.appendChild(child);
            }
            var reactRootContainer = container._reactRootContainer;
            if ((reactRootContainer === null || reactRootContainer === void 0) && parentNode.onclick === null) {
              trapClickOnNonInteractiveElement(parentNode);
            }
          }
          function insertBefore(parentInstance, child, beforeChild) {
            parentInstance.insertBefore(child, beforeChild);
          }
          function insertInContainerBefore(container, child, beforeChild) {
            if (container.nodeType === COMMENT_NODE) {
              container.parentNode.insertBefore(child, beforeChild);
            } else {
              container.insertBefore(child, beforeChild);
            }
          }
          function removeChild(parentInstance, child) {
            parentInstance.removeChild(child);
          }
          function removeChildFromContainer(container, child) {
            if (container.nodeType === COMMENT_NODE) {
              container.parentNode.removeChild(child);
            } else {
              container.removeChild(child);
            }
          }
          function clearSuspenseBoundary(parentInstance, suspenseInstance) {
            var node = suspenseInstance;
            var depth = 0;
            do {
              var nextNode = node.nextSibling;
              parentInstance.removeChild(node);
              if (nextNode && nextNode.nodeType === COMMENT_NODE) {
                var data2 = nextNode.data;
                if (data2 === SUSPENSE_END_DATA) {
                  if (depth === 0) {
                    parentInstance.removeChild(nextNode);
                    retryIfBlockedOn(suspenseInstance);
                    return;
                  } else {
                    depth--;
                  }
                } else if (data2 === SUSPENSE_START_DATA || data2 === SUSPENSE_PENDING_START_DATA || data2 === SUSPENSE_FALLBACK_START_DATA) {
                  depth++;
                }
              }
              node = nextNode;
            } while (node);
            retryIfBlockedOn(suspenseInstance);
          }
          function clearSuspenseBoundaryFromContainer(container, suspenseInstance) {
            if (container.nodeType === COMMENT_NODE) {
              clearSuspenseBoundary(container.parentNode, suspenseInstance);
            } else if (container.nodeType === ELEMENT_NODE) {
              clearSuspenseBoundary(container, suspenseInstance);
            }
            retryIfBlockedOn(container);
          }
          function hideInstance(instance) {
            instance = instance;
            var style2 = instance.style;
            if (typeof style2.setProperty === "function") {
              style2.setProperty("display", "none", "important");
            } else {
              style2.display = "none";
            }
          }
          function hideTextInstance(textInstance) {
            textInstance.nodeValue = "";
          }
          function unhideInstance(instance, props) {
            instance = instance;
            var styleProp = props[STYLE$1];
            var display = styleProp !== void 0 && styleProp !== null && styleProp.hasOwnProperty("display") ? styleProp.display : null;
            instance.style.display = dangerousStyleValue("display", display);
          }
          function unhideTextInstance(textInstance, text) {
            textInstance.nodeValue = text;
          }
          function clearContainer(container) {
            if (container.nodeType === ELEMENT_NODE) {
              container.textContent = "";
            } else if (container.nodeType === DOCUMENT_NODE) {
              if (container.documentElement) {
                container.removeChild(container.documentElement);
              }
            }
          }
          function canHydrateInstance(instance, type, props) {
            if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
              return null;
            }
            return instance;
          }
          function canHydrateTextInstance(instance, text) {
            if (text === "" || instance.nodeType !== TEXT_NODE) {
              return null;
            }
            return instance;
          }
          function canHydrateSuspenseInstance(instance) {
            if (instance.nodeType !== COMMENT_NODE) {
              return null;
            }
            return instance;
          }
          function isSuspenseInstancePending(instance) {
            return instance.data === SUSPENSE_PENDING_START_DATA;
          }
          function isSuspenseInstanceFallback(instance) {
            return instance.data === SUSPENSE_FALLBACK_START_DATA;
          }
          function getSuspenseInstanceFallbackErrorDetails(instance) {
            var dataset = instance.nextSibling && instance.nextSibling.dataset;
            var digest, message, stack;
            if (dataset) {
              digest = dataset.dgst;
              {
                message = dataset.msg;
                stack = dataset.stck;
              }
            }
            {
              return {
                message,
                digest,
                stack
              };
            }
          }
          function registerSuspenseInstanceRetry(instance, callback) {
            instance._reactRetry = callback;
          }
          function getNextHydratable(node) {
            for (; node != null; node = node.nextSibling) {
              var nodeType = node.nodeType;
              if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
                break;
              }
              if (nodeType === COMMENT_NODE) {
                var nodeData = node.data;
                if (nodeData === SUSPENSE_START_DATA || nodeData === SUSPENSE_FALLBACK_START_DATA || nodeData === SUSPENSE_PENDING_START_DATA) {
                  break;
                }
                if (nodeData === SUSPENSE_END_DATA) {
                  return null;
                }
              }
            }
            return node;
          }
          function getNextHydratableSibling(instance) {
            return getNextHydratable(instance.nextSibling);
          }
          function getFirstHydratableChild(parentInstance) {
            return getNextHydratable(parentInstance.firstChild);
          }
          function getFirstHydratableChildWithinContainer(parentContainer) {
            return getNextHydratable(parentContainer.firstChild);
          }
          function getFirstHydratableChildWithinSuspenseInstance(parentInstance) {
            return getNextHydratable(parentInstance.nextSibling);
          }
          function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle, shouldWarnDev) {
            precacheFiberNode(internalInstanceHandle, instance);
            updateFiberProps(instance, props);
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              parentNamespace = hostContextDev.namespace;
            }
            var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
            return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance, isConcurrentMode, shouldWarnDev);
          }
          function hydrateTextInstance(textInstance, text, internalInstanceHandle, shouldWarnDev) {
            precacheFiberNode(internalInstanceHandle, textInstance);
            var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
            return diffHydratedText(textInstance, text);
          }
          function hydrateSuspenseInstance(suspenseInstance, internalInstanceHandle) {
            precacheFiberNode(internalInstanceHandle, suspenseInstance);
          }
          function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
            var node = suspenseInstance.nextSibling;
            var depth = 0;
            while (node) {
              if (node.nodeType === COMMENT_NODE) {
                var data2 = node.data;
                if (data2 === SUSPENSE_END_DATA) {
                  if (depth === 0) {
                    return getNextHydratableSibling(node);
                  } else {
                    depth--;
                  }
                } else if (data2 === SUSPENSE_START_DATA || data2 === SUSPENSE_FALLBACK_START_DATA || data2 === SUSPENSE_PENDING_START_DATA) {
                  depth++;
                }
              }
              node = node.nextSibling;
            }
            return null;
          }
          function getParentSuspenseInstance(targetInstance) {
            var node = targetInstance.previousSibling;
            var depth = 0;
            while (node) {
              if (node.nodeType === COMMENT_NODE) {
                var data2 = node.data;
                if (data2 === SUSPENSE_START_DATA || data2 === SUSPENSE_FALLBACK_START_DATA || data2 === SUSPENSE_PENDING_START_DATA) {
                  if (depth === 0) {
                    return node;
                  } else {
                    depth--;
                  }
                } else if (data2 === SUSPENSE_END_DATA) {
                  depth++;
                }
              }
              node = node.previousSibling;
            }
            return null;
          }
          function commitHydratedContainer(container) {
            retryIfBlockedOn(container);
          }
          function commitHydratedSuspenseInstance(suspenseInstance) {
            retryIfBlockedOn(suspenseInstance);
          }
          function shouldDeleteUnhydratedTailInstances(parentType) {
            return parentType !== "head" && parentType !== "body";
          }
          function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text, isConcurrentMode) {
            var shouldWarnDev = true;
            checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
          }
          function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text, isConcurrentMode) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              var shouldWarnDev = true;
              checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
            }
          }
          function didNotHydrateInstanceWithinContainer(parentContainer, instance) {
            {
              if (instance.nodeType === ELEMENT_NODE) {
                warnForDeletedHydratableElement(parentContainer, instance);
              } else if (instance.nodeType === COMMENT_NODE) ;
              else {
                warnForDeletedHydratableText(parentContainer, instance);
              }
            }
          }
          function didNotHydrateInstanceWithinSuspenseInstance(parentInstance, instance) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null) {
                if (instance.nodeType === ELEMENT_NODE) {
                  warnForDeletedHydratableElement(parentNode, instance);
                } else if (instance.nodeType === COMMENT_NODE) ;
                else {
                  warnForDeletedHydratableText(parentNode, instance);
                }
              }
            }
          }
          function didNotHydrateInstance(parentType, parentProps, parentInstance, instance, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                if (instance.nodeType === ELEMENT_NODE) {
                  warnForDeletedHydratableElement(parentInstance, instance);
                } else if (instance.nodeType === COMMENT_NODE) ;
                else {
                  warnForDeletedHydratableText(parentInstance, instance);
                }
              }
            }
          }
          function didNotFindHydratableInstanceWithinContainer(parentContainer, type, props) {
            {
              warnForInsertedHydratedElement(parentContainer, type);
            }
          }
          function didNotFindHydratableTextInstanceWithinContainer(parentContainer, text) {
            {
              warnForInsertedHydratedText(parentContainer, text);
            }
          }
          function didNotFindHydratableInstanceWithinSuspenseInstance(parentInstance, type, props) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null) warnForInsertedHydratedElement(parentNode, type);
            }
          }
          function didNotFindHydratableTextInstanceWithinSuspenseInstance(parentInstance, text) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null) warnForInsertedHydratedText(parentNode, text);
            }
          }
          function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                warnForInsertedHydratedElement(parentInstance, type);
              }
            }
          }
          function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                warnForInsertedHydratedText(parentInstance, text);
              }
            }
          }
          function errorHydratingContainer(parentContainer) {
            {
              error("An error occurred during hydration. The server HTML was replaced with client content in <%s>.", parentContainer.nodeName.toLowerCase());
            }
          }
          function preparePortalMount(portalInstance) {
            listenToAllSupportedEvents(portalInstance);
          }
          var randomKey = Math.random().toString(36).slice(2);
          var internalInstanceKey = "__reactFiber$" + randomKey;
          var internalPropsKey = "__reactProps$" + randomKey;
          var internalContainerInstanceKey = "__reactContainer$" + randomKey;
          var internalEventHandlersKey = "__reactEvents$" + randomKey;
          var internalEventHandlerListenersKey = "__reactListeners$" + randomKey;
          var internalEventHandlesSetKey = "__reactHandles$" + randomKey;
          function detachDeletedInstance(node) {
            delete node[internalInstanceKey];
            delete node[internalPropsKey];
            delete node[internalEventHandlersKey];
            delete node[internalEventHandlerListenersKey];
            delete node[internalEventHandlesSetKey];
          }
          function precacheFiberNode(hostInst, node) {
            node[internalInstanceKey] = hostInst;
          }
          function markContainerAsRoot(hostRoot, node) {
            node[internalContainerInstanceKey] = hostRoot;
          }
          function unmarkContainerAsRoot(node) {
            node[internalContainerInstanceKey] = null;
          }
          function isContainerMarkedAsRoot(node) {
            return !!node[internalContainerInstanceKey];
          }
          function getClosestInstanceFromNode(targetNode) {
            var targetInst = targetNode[internalInstanceKey];
            if (targetInst) {
              return targetInst;
            }
            var parentNode = targetNode.parentNode;
            while (parentNode) {
              targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
              if (targetInst) {
                var alternate = targetInst.alternate;
                if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
                  var suspenseInstance = getParentSuspenseInstance(targetNode);
                  while (suspenseInstance !== null) {
                    var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                    if (targetSuspenseInst) {
                      return targetSuspenseInst;
                    }
                    suspenseInstance = getParentSuspenseInstance(suspenseInstance);
                  }
                }
                return targetInst;
              }
              targetNode = parentNode;
              parentNode = targetNode.parentNode;
            }
            return null;
          }
          function getInstanceFromNode(node) {
            var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];
            if (inst) {
              if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
                return inst;
              } else {
                return null;
              }
            }
            return null;
          }
          function getNodeFromInstance(inst) {
            if (inst.tag === HostComponent || inst.tag === HostText) {
              return inst.stateNode;
            }
            throw new Error("getNodeFromInstance: Invalid argument.");
          }
          function getFiberCurrentPropsFromNode(node) {
            return node[internalPropsKey] || null;
          }
          function updateFiberProps(node, props) {
            node[internalPropsKey] = props;
          }
          function getEventListenerSet(node) {
            var elementListenerSet = node[internalEventHandlersKey];
            if (elementListenerSet === void 0) {
              elementListenerSet = node[internalEventHandlersKey] = /* @__PURE__ */ new Set();
            }
            return elementListenerSet;
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values, location, componentName, element) {
            {
              var has2 = Function.call.bind(hasOwnProperty);
              for (var typeSpecName in typeSpecs) {
                if (has2(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          var valueStack = [];
          var fiberStack;
          {
            fiberStack = [];
          }
          var index = -1;
          function createCursor(defaultValue) {
            return {
              current: defaultValue
            };
          }
          function pop(cursor, fiber) {
            if (index < 0) {
              {
                error("Unexpected pop.");
              }
              return;
            }
            {
              if (fiber !== fiberStack[index]) {
                error("Unexpected Fiber popped.");
              }
            }
            cursor.current = valueStack[index];
            valueStack[index] = null;
            {
              fiberStack[index] = null;
            }
            index--;
          }
          function push(cursor, value, fiber) {
            index++;
            valueStack[index] = cursor.current;
            {
              fiberStack[index] = fiber;
            }
            cursor.current = value;
          }
          var warnedAboutMissingGetChildContext;
          {
            warnedAboutMissingGetChildContext = {};
          }
          var emptyContextObject = {};
          {
            Object.freeze(emptyContextObject);
          }
          var contextStackCursor = createCursor(emptyContextObject);
          var didPerformWorkStackCursor = createCursor(false);
          var previousContext = emptyContextObject;
          function getUnmaskedContext(workInProgress2, Component20, didPushOwnContextIfProvider) {
            {
              if (didPushOwnContextIfProvider && isContextProvider(Component20)) {
                return previousContext;
              }
              return contextStackCursor.current;
            }
          }
          function cacheContext(workInProgress2, unmaskedContext, maskedContext) {
            {
              var instance = workInProgress2.stateNode;
              instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
              instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
            }
          }
          function getMaskedContext(workInProgress2, unmaskedContext) {
            {
              var type = workInProgress2.type;
              var contextTypes = type.contextTypes;
              if (!contextTypes) {
                return emptyContextObject;
              }
              var instance = workInProgress2.stateNode;
              if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
                return instance.__reactInternalMemoizedMaskedChildContext;
              }
              var context = {};
              for (var key in contextTypes) {
                context[key] = unmaskedContext[key];
              }
              {
                var name = getComponentNameFromFiber(workInProgress2) || "Unknown";
                checkPropTypes(contextTypes, context, "context", name);
              }
              if (instance) {
                cacheContext(workInProgress2, unmaskedContext, context);
              }
              return context;
            }
          }
          function hasContextChanged() {
            {
              return didPerformWorkStackCursor.current;
            }
          }
          function isContextProvider(type) {
            {
              var childContextTypes = type.childContextTypes;
              return childContextTypes !== null && childContextTypes !== void 0;
            }
          }
          function popContext(fiber) {
            {
              pop(didPerformWorkStackCursor, fiber);
              pop(contextStackCursor, fiber);
            }
          }
          function popTopLevelContextObject(fiber) {
            {
              pop(didPerformWorkStackCursor, fiber);
              pop(contextStackCursor, fiber);
            }
          }
          function pushTopLevelContextObject(fiber, context, didChange) {
            {
              if (contextStackCursor.current !== emptyContextObject) {
                throw new Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
              }
              push(contextStackCursor, context, fiber);
              push(didPerformWorkStackCursor, didChange, fiber);
            }
          }
          function processChildContext(fiber, type, parentContext) {
            {
              var instance = fiber.stateNode;
              var childContextTypes = type.childContextTypes;
              if (typeof instance.getChildContext !== "function") {
                {
                  var componentName = getComponentNameFromFiber(fiber) || "Unknown";
                  if (!warnedAboutMissingGetChildContext[componentName]) {
                    warnedAboutMissingGetChildContext[componentName] = true;
                    error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
                  }
                }
                return parentContext;
              }
              var childContext = instance.getChildContext();
              for (var contextKey in childContext) {
                if (!(contextKey in childContextTypes)) {
                  throw new Error((getComponentNameFromFiber(fiber) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
                }
              }
              {
                var name = getComponentNameFromFiber(fiber) || "Unknown";
                checkPropTypes(childContextTypes, childContext, "child context", name);
              }
              return assign({}, parentContext, childContext);
            }
          }
          function pushContextProvider(workInProgress2) {
            {
              var instance = workInProgress2.stateNode;
              var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
              previousContext = contextStackCursor.current;
              push(contextStackCursor, memoizedMergedChildContext, workInProgress2);
              push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress2);
              return true;
            }
          }
          function invalidateContextProvider(workInProgress2, type, didChange) {
            {
              var instance = workInProgress2.stateNode;
              if (!instance) {
                throw new Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
              }
              if (didChange) {
                var mergedContext = processChildContext(workInProgress2, type, previousContext);
                instance.__reactInternalMemoizedMergedChildContext = mergedContext;
                pop(didPerformWorkStackCursor, workInProgress2);
                pop(contextStackCursor, workInProgress2);
                push(contextStackCursor, mergedContext, workInProgress2);
                push(didPerformWorkStackCursor, didChange, workInProgress2);
              } else {
                pop(didPerformWorkStackCursor, workInProgress2);
                push(didPerformWorkStackCursor, didChange, workInProgress2);
              }
            }
          }
          function findCurrentUnmaskedContext(fiber) {
            {
              if (!isFiberMounted(fiber) || fiber.tag !== ClassComponent) {
                throw new Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
              }
              var node = fiber;
              do {
                switch (node.tag) {
                  case HostRoot:
                    return node.stateNode.context;
                  case ClassComponent: {
                    var Component20 = node.type;
                    if (isContextProvider(Component20)) {
                      return node.stateNode.__reactInternalMemoizedMergedChildContext;
                    }
                    break;
                  }
                }
                node = node.return;
              } while (node !== null);
              throw new Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          var LegacyRoot = 0;
          var ConcurrentRoot = 1;
          var syncQueue = null;
          var includesLegacySyncCallbacks = false;
          var isFlushingSyncQueue = false;
          function scheduleSyncCallback(callback) {
            if (syncQueue === null) {
              syncQueue = [callback];
            } else {
              syncQueue.push(callback);
            }
          }
          function scheduleLegacySyncCallback(callback) {
            includesLegacySyncCallbacks = true;
            scheduleSyncCallback(callback);
          }
          function flushSyncCallbacksOnlyInLegacyMode() {
            if (includesLegacySyncCallbacks) {
              flushSyncCallbacks();
            }
          }
          function flushSyncCallbacks() {
            if (!isFlushingSyncQueue && syncQueue !== null) {
              isFlushingSyncQueue = true;
              var i = 0;
              var previousUpdatePriority = getCurrentUpdatePriority();
              try {
                var isSync = true;
                var queue = syncQueue;
                setCurrentUpdatePriority(DiscreteEventPriority);
                for (; i < queue.length; i++) {
                  var callback = queue[i];
                  do {
                    callback = callback(isSync);
                  } while (callback !== null);
                }
                syncQueue = null;
                includesLegacySyncCallbacks = false;
              } catch (error2) {
                if (syncQueue !== null) {
                  syncQueue = syncQueue.slice(i + 1);
                }
                scheduleCallback(ImmediatePriority, flushSyncCallbacks);
                throw error2;
              } finally {
                setCurrentUpdatePriority(previousUpdatePriority);
                isFlushingSyncQueue = false;
              }
            }
            return null;
          }
          var forkStack = [];
          var forkStackIndex = 0;
          var treeForkProvider = null;
          var treeForkCount = 0;
          var idStack = [];
          var idStackIndex = 0;
          var treeContextProvider = null;
          var treeContextId = 1;
          var treeContextOverflow = "";
          function isForkedChild(workInProgress2) {
            warnIfNotHydrating();
            return (workInProgress2.flags & Forked) !== NoFlags;
          }
          function getForksAtLevel(workInProgress2) {
            warnIfNotHydrating();
            return treeForkCount;
          }
          function getTreeId() {
            var overflow = treeContextOverflow;
            var idWithLeadingBit = treeContextId;
            var id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
            return id.toString(32) + overflow;
          }
          function pushTreeFork(workInProgress2, totalChildren) {
            warnIfNotHydrating();
            forkStack[forkStackIndex++] = treeForkCount;
            forkStack[forkStackIndex++] = treeForkProvider;
            treeForkProvider = workInProgress2;
            treeForkCount = totalChildren;
          }
          function pushTreeId(workInProgress2, totalChildren, index2) {
            warnIfNotHydrating();
            idStack[idStackIndex++] = treeContextId;
            idStack[idStackIndex++] = treeContextOverflow;
            idStack[idStackIndex++] = treeContextProvider;
            treeContextProvider = workInProgress2;
            var baseIdWithLeadingBit = treeContextId;
            var baseOverflow = treeContextOverflow;
            var baseLength = getBitLength(baseIdWithLeadingBit) - 1;
            var baseId = baseIdWithLeadingBit & ~(1 << baseLength);
            var slot = index2 + 1;
            var length = getBitLength(totalChildren) + baseLength;
            if (length > 30) {
              var numberOfOverflowBits = baseLength - baseLength % 5;
              var newOverflowBits = (1 << numberOfOverflowBits) - 1;
              var newOverflow = (baseId & newOverflowBits).toString(32);
              var restOfBaseId = baseId >> numberOfOverflowBits;
              var restOfBaseLength = baseLength - numberOfOverflowBits;
              var restOfLength = getBitLength(totalChildren) + restOfBaseLength;
              var restOfNewBits = slot << restOfBaseLength;
              var id = restOfNewBits | restOfBaseId;
              var overflow = newOverflow + baseOverflow;
              treeContextId = 1 << restOfLength | id;
              treeContextOverflow = overflow;
            } else {
              var newBits = slot << baseLength;
              var _id = newBits | baseId;
              var _overflow = baseOverflow;
              treeContextId = 1 << length | _id;
              treeContextOverflow = _overflow;
            }
          }
          function pushMaterializedTreeId(workInProgress2) {
            warnIfNotHydrating();
            var returnFiber = workInProgress2.return;
            if (returnFiber !== null) {
              var numberOfForks = 1;
              var slotIndex = 0;
              pushTreeFork(workInProgress2, numberOfForks);
              pushTreeId(workInProgress2, numberOfForks, slotIndex);
            }
          }
          function getBitLength(number) {
            return 32 - clz32(number);
          }
          function getLeadingBit(id) {
            return 1 << getBitLength(id) - 1;
          }
          function popTreeContext(workInProgress2) {
            while (workInProgress2 === treeForkProvider) {
              treeForkProvider = forkStack[--forkStackIndex];
              forkStack[forkStackIndex] = null;
              treeForkCount = forkStack[--forkStackIndex];
              forkStack[forkStackIndex] = null;
            }
            while (workInProgress2 === treeContextProvider) {
              treeContextProvider = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
              treeContextOverflow = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
              treeContextId = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
            }
          }
          function getSuspendedTreeContext() {
            warnIfNotHydrating();
            if (treeContextProvider !== null) {
              return {
                id: treeContextId,
                overflow: treeContextOverflow
              };
            } else {
              return null;
            }
          }
          function restoreSuspendedTreeContext(workInProgress2, suspendedContext) {
            warnIfNotHydrating();
            idStack[idStackIndex++] = treeContextId;
            idStack[idStackIndex++] = treeContextOverflow;
            idStack[idStackIndex++] = treeContextProvider;
            treeContextId = suspendedContext.id;
            treeContextOverflow = suspendedContext.overflow;
            treeContextProvider = workInProgress2;
          }
          function warnIfNotHydrating() {
            {
              if (!getIsHydrating()) {
                error("Expected to be hydrating. This is a bug in React. Please file an issue.");
              }
            }
          }
          var hydrationParentFiber = null;
          var nextHydratableInstance = null;
          var isHydrating = false;
          var didSuspendOrErrorDEV = false;
          var hydrationErrors = null;
          function warnIfHydrating() {
            {
              if (isHydrating) {
                error("We should not be hydrating here. This is a bug in React. Please file a bug.");
              }
            }
          }
          function markDidThrowWhileHydratingDEV() {
            {
              didSuspendOrErrorDEV = true;
            }
          }
          function didSuspendOrErrorWhileHydratingDEV() {
            {
              return didSuspendOrErrorDEV;
            }
          }
          function enterHydrationState(fiber) {
            var parentInstance = fiber.stateNode.containerInfo;
            nextHydratableInstance = getFirstHydratableChildWithinContainer(parentInstance);
            hydrationParentFiber = fiber;
            isHydrating = true;
            hydrationErrors = null;
            didSuspendOrErrorDEV = false;
            return true;
          }
          function reenterHydrationStateFromDehydratedSuspenseInstance(fiber, suspenseInstance, treeContext) {
            nextHydratableInstance = getFirstHydratableChildWithinSuspenseInstance(suspenseInstance);
            hydrationParentFiber = fiber;
            isHydrating = true;
            hydrationErrors = null;
            didSuspendOrErrorDEV = false;
            if (treeContext !== null) {
              restoreSuspendedTreeContext(fiber, treeContext);
            }
            return true;
          }
          function warnUnhydratedInstance(returnFiber, instance) {
            {
              switch (returnFiber.tag) {
                case HostRoot: {
                  didNotHydrateInstanceWithinContainer(returnFiber.stateNode.containerInfo, instance);
                  break;
                }
                case HostComponent: {
                  var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                  didNotHydrateInstance(
                    returnFiber.type,
                    returnFiber.memoizedProps,
                    returnFiber.stateNode,
                    instance,
                    // TODO: Delete this argument when we remove the legacy root API.
                    isConcurrentMode
                  );
                  break;
                }
                case SuspenseComponent: {
                  var suspenseState = returnFiber.memoizedState;
                  if (suspenseState.dehydrated !== null) didNotHydrateInstanceWithinSuspenseInstance(suspenseState.dehydrated, instance);
                  break;
                }
              }
            }
          }
          function deleteHydratableInstance(returnFiber, instance) {
            warnUnhydratedInstance(returnFiber, instance);
            var childToDelete = createFiberFromHostInstanceForDeletion();
            childToDelete.stateNode = instance;
            childToDelete.return = returnFiber;
            var deletions = returnFiber.deletions;
            if (deletions === null) {
              returnFiber.deletions = [childToDelete];
              returnFiber.flags |= ChildDeletion;
            } else {
              deletions.push(childToDelete);
            }
          }
          function warnNonhydratedInstance(returnFiber, fiber) {
            {
              if (didSuspendOrErrorDEV) {
                return;
              }
              switch (returnFiber.tag) {
                case HostRoot: {
                  var parentContainer = returnFiber.stateNode.containerInfo;
                  switch (fiber.tag) {
                    case HostComponent:
                      var type = fiber.type;
                      var props = fiber.pendingProps;
                      didNotFindHydratableInstanceWithinContainer(parentContainer, type);
                      break;
                    case HostText:
                      var text = fiber.pendingProps;
                      didNotFindHydratableTextInstanceWithinContainer(parentContainer, text);
                      break;
                  }
                  break;
                }
                case HostComponent: {
                  var parentType = returnFiber.type;
                  var parentProps = returnFiber.memoizedProps;
                  var parentInstance = returnFiber.stateNode;
                  switch (fiber.tag) {
                    case HostComponent: {
                      var _type = fiber.type;
                      var _props = fiber.pendingProps;
                      var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                      didNotFindHydratableInstance(
                        parentType,
                        parentProps,
                        parentInstance,
                        _type,
                        _props,
                        // TODO: Delete this argument when we remove the legacy root API.
                        isConcurrentMode
                      );
                      break;
                    }
                    case HostText: {
                      var _text = fiber.pendingProps;
                      var _isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                      didNotFindHydratableTextInstance(
                        parentType,
                        parentProps,
                        parentInstance,
                        _text,
                        // TODO: Delete this argument when we remove the legacy root API.
                        _isConcurrentMode
                      );
                      break;
                    }
                  }
                  break;
                }
                case SuspenseComponent: {
                  var suspenseState = returnFiber.memoizedState;
                  var _parentInstance = suspenseState.dehydrated;
                  if (_parentInstance !== null) switch (fiber.tag) {
                    case HostComponent:
                      var _type2 = fiber.type;
                      var _props2 = fiber.pendingProps;
                      didNotFindHydratableInstanceWithinSuspenseInstance(_parentInstance, _type2);
                      break;
                    case HostText:
                      var _text2 = fiber.pendingProps;
                      didNotFindHydratableTextInstanceWithinSuspenseInstance(_parentInstance, _text2);
                      break;
                  }
                  break;
                }
                default:
                  return;
              }
            }
          }
          function insertNonHydratedInstance(returnFiber, fiber) {
            fiber.flags = fiber.flags & ~Hydrating | Placement;
            warnNonhydratedInstance(returnFiber, fiber);
          }
          function tryHydrate(fiber, nextInstance) {
            switch (fiber.tag) {
              case HostComponent: {
                var type = fiber.type;
                var props = fiber.pendingProps;
                var instance = canHydrateInstance(nextInstance, type);
                if (instance !== null) {
                  fiber.stateNode = instance;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = getFirstHydratableChild(instance);
                  return true;
                }
                return false;
              }
              case HostText: {
                var text = fiber.pendingProps;
                var textInstance = canHydrateTextInstance(nextInstance, text);
                if (textInstance !== null) {
                  fiber.stateNode = textInstance;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = null;
                  return true;
                }
                return false;
              }
              case SuspenseComponent: {
                var suspenseInstance = canHydrateSuspenseInstance(nextInstance);
                if (suspenseInstance !== null) {
                  var suspenseState = {
                    dehydrated: suspenseInstance,
                    treeContext: getSuspendedTreeContext(),
                    retryLane: OffscreenLane
                  };
                  fiber.memoizedState = suspenseState;
                  var dehydratedFragment = createFiberFromDehydratedFragment(suspenseInstance);
                  dehydratedFragment.return = fiber;
                  fiber.child = dehydratedFragment;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = null;
                  return true;
                }
                return false;
              }
              default:
                return false;
            }
          }
          function shouldClientRenderOnMismatch(fiber) {
            return (fiber.mode & ConcurrentMode) !== NoMode && (fiber.flags & DidCapture) === NoFlags;
          }
          function throwOnHydrationMismatch(fiber) {
            throw new Error("Hydration failed because the initial UI does not match what was rendered on the server.");
          }
          function tryToClaimNextHydratableInstance(fiber) {
            if (!isHydrating) {
              return;
            }
            var nextInstance = nextHydratableInstance;
            if (!nextInstance) {
              if (shouldClientRenderOnMismatch(fiber)) {
                warnNonhydratedInstance(hydrationParentFiber, fiber);
                throwOnHydrationMismatch();
              }
              insertNonHydratedInstance(hydrationParentFiber, fiber);
              isHydrating = false;
              hydrationParentFiber = fiber;
              return;
            }
            var firstAttemptedInstance = nextInstance;
            if (!tryHydrate(fiber, nextInstance)) {
              if (shouldClientRenderOnMismatch(fiber)) {
                warnNonhydratedInstance(hydrationParentFiber, fiber);
                throwOnHydrationMismatch();
              }
              nextInstance = getNextHydratableSibling(firstAttemptedInstance);
              var prevHydrationParentFiber = hydrationParentFiber;
              if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
                insertNonHydratedInstance(hydrationParentFiber, fiber);
                isHydrating = false;
                hydrationParentFiber = fiber;
                return;
              }
              deleteHydratableInstance(prevHydrationParentFiber, firstAttemptedInstance);
            }
          }
          function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
            var instance = fiber.stateNode;
            var shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;
            var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber, shouldWarnIfMismatchDev);
            fiber.updateQueue = updatePayload;
            if (updatePayload !== null) {
              return true;
            }
            return false;
          }
          function prepareToHydrateHostTextInstance(fiber) {
            var textInstance = fiber.stateNode;
            var textContent = fiber.memoizedProps;
            var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
            if (shouldUpdate) {
              var returnFiber = hydrationParentFiber;
              if (returnFiber !== null) {
                switch (returnFiber.tag) {
                  case HostRoot: {
                    var parentContainer = returnFiber.stateNode.containerInfo;
                    var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotMatchHydratedContainerTextInstance(
                      parentContainer,
                      textInstance,
                      textContent,
                      // TODO: Delete this argument when we remove the legacy root API.
                      isConcurrentMode
                    );
                    break;
                  }
                  case HostComponent: {
                    var parentType = returnFiber.type;
                    var parentProps = returnFiber.memoizedProps;
                    var parentInstance = returnFiber.stateNode;
                    var _isConcurrentMode2 = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotMatchHydratedTextInstance(
                      parentType,
                      parentProps,
                      parentInstance,
                      textInstance,
                      textContent,
                      // TODO: Delete this argument when we remove the legacy root API.
                      _isConcurrentMode2
                    );
                    break;
                  }
                }
              }
            }
            return shouldUpdate;
          }
          function prepareToHydrateHostSuspenseInstance(fiber) {
            var suspenseState = fiber.memoizedState;
            var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
            if (!suspenseInstance) {
              throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
            }
            hydrateSuspenseInstance(suspenseInstance, fiber);
          }
          function skipPastDehydratedSuspenseInstance(fiber) {
            var suspenseState = fiber.memoizedState;
            var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
            if (!suspenseInstance) {
              throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
            }
            return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
          }
          function popToNextHostParent(fiber) {
            var parent2 = fiber.return;
            while (parent2 !== null && parent2.tag !== HostComponent && parent2.tag !== HostRoot && parent2.tag !== SuspenseComponent) {
              parent2 = parent2.return;
            }
            hydrationParentFiber = parent2;
          }
          function popHydrationState(fiber) {
            if (fiber !== hydrationParentFiber) {
              return false;
            }
            if (!isHydrating) {
              popToNextHostParent(fiber);
              isHydrating = true;
              return false;
            }
            if (fiber.tag !== HostRoot && (fiber.tag !== HostComponent || shouldDeleteUnhydratedTailInstances(fiber.type) && !shouldSetTextContent(fiber.type, fiber.memoizedProps))) {
              var nextInstance = nextHydratableInstance;
              if (nextInstance) {
                if (shouldClientRenderOnMismatch(fiber)) {
                  warnIfUnhydratedTailNodes(fiber);
                  throwOnHydrationMismatch();
                } else {
                  while (nextInstance) {
                    deleteHydratableInstance(fiber, nextInstance);
                    nextInstance = getNextHydratableSibling(nextInstance);
                  }
                }
              }
            }
            popToNextHostParent(fiber);
            if (fiber.tag === SuspenseComponent) {
              nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
            } else {
              nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
            }
            return true;
          }
          function hasUnhydratedTailNodes() {
            return isHydrating && nextHydratableInstance !== null;
          }
          function warnIfUnhydratedTailNodes(fiber) {
            var nextInstance = nextHydratableInstance;
            while (nextInstance) {
              warnUnhydratedInstance(fiber, nextInstance);
              nextInstance = getNextHydratableSibling(nextInstance);
            }
          }
          function resetHydrationState() {
            hydrationParentFiber = null;
            nextHydratableInstance = null;
            isHydrating = false;
            didSuspendOrErrorDEV = false;
          }
          function upgradeHydrationErrorsToRecoverable() {
            if (hydrationErrors !== null) {
              queueRecoverableErrors(hydrationErrors);
              hydrationErrors = null;
            }
          }
          function getIsHydrating() {
            return isHydrating;
          }
          function queueHydrationError(error2) {
            if (hydrationErrors === null) {
              hydrationErrors = [error2];
            } else {
              hydrationErrors.push(error2);
            }
          }
          var ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
          var NoTransition = null;
          function requestCurrentTransition() {
            return ReactCurrentBatchConfig$1.transition;
          }
          var ReactStrictModeWarnings = {
            recordUnsafeLifecycleWarnings: function(fiber, instance) {
            },
            flushPendingUnsafeLifecycleWarnings: function() {
            },
            recordLegacyContextWarning: function(fiber, instance) {
            },
            flushLegacyContextWarning: function() {
            },
            discardPendingWarnings: function() {
            }
          };
          {
            var findStrictRoot = function(fiber) {
              var maybeStrictRoot = null;
              var node = fiber;
              while (node !== null) {
                if (node.mode & StrictLegacyMode) {
                  maybeStrictRoot = node;
                }
                node = node.return;
              }
              return maybeStrictRoot;
            };
            var setToSortedString = function(set2) {
              var array = [];
              set2.forEach(function(value) {
                array.push(value);
              });
              return array.sort().join(", ");
            };
            var pendingComponentWillMountWarnings = [];
            var pendingUNSAFE_ComponentWillMountWarnings = [];
            var pendingComponentWillReceivePropsWarnings = [];
            var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            var pendingComponentWillUpdateWarnings = [];
            var pendingUNSAFE_ComponentWillUpdateWarnings = [];
            var didWarnAboutUnsafeLifecycles = /* @__PURE__ */ new Set();
            ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
              if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
                return;
              }
              if (typeof instance.componentWillMount === "function" && // Don't warn about react-lifecycles-compat polyfilled components.
              instance.componentWillMount.__suppressDeprecationWarning !== true) {
                pendingComponentWillMountWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillMount === "function") {
                pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
              }
              if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                pendingComponentWillReceivePropsWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
              }
              if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                pendingComponentWillUpdateWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillUpdate === "function") {
                pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
              var componentWillMountUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillMountWarnings.length > 0) {
                pendingComponentWillMountWarnings.forEach(function(fiber) {
                  componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillMountWarnings = [];
              }
              var UNSAFE_componentWillMountUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
                pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillMountWarnings = [];
              }
              var componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillReceivePropsWarnings.length > 0) {
                pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillReceivePropsWarnings = [];
              }
              var UNSAFE_componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              }
              var componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillUpdateWarnings.length > 0) {
                pendingComponentWillUpdateWarnings.forEach(function(fiber) {
                  componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillUpdateWarnings = [];
              }
              var UNSAFE_componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
                pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillUpdateWarnings = [];
              }
              if (UNSAFE_componentWillMountUniqueNames.size > 0) {
                var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
                error("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
              }
              if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
                error("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s", _sortedNames);
              }
              if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
                error("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
              }
              if (componentWillMountUniqueNames.size > 0) {
                var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
                warn("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
              }
              if (componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
                warn("componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
              }
              if (componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
                warn("componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
              }
            };
            var pendingLegacyContextWarning = /* @__PURE__ */ new Map();
            var didWarnAboutLegacyContext = /* @__PURE__ */ new Set();
            ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
              var strictRoot = findStrictRoot(fiber);
              if (strictRoot === null) {
                error("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
                return;
              }
              if (didWarnAboutLegacyContext.has(fiber.type)) {
                return;
              }
              var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
              if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === "function") {
                if (warningsForRoot === void 0) {
                  warningsForRoot = [];
                  pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
                }
                warningsForRoot.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushLegacyContextWarning = function() {
              pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
                if (fiberArray.length === 0) {
                  return;
                }
                var firstFiber = fiberArray[0];
                var uniqueNames = /* @__PURE__ */ new Set();
                fiberArray.forEach(function(fiber) {
                  uniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutLegacyContext.add(fiber.type);
                });
                var sortedNames = setToSortedString(uniqueNames);
                try {
                  setCurrentFiber(firstFiber);
                  error("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", sortedNames);
                } finally {
                  resetCurrentFiber();
                }
              });
            };
            ReactStrictModeWarnings.discardPendingWarnings = function() {
              pendingComponentWillMountWarnings = [];
              pendingUNSAFE_ComponentWillMountWarnings = [];
              pendingComponentWillReceivePropsWarnings = [];
              pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              pendingComponentWillUpdateWarnings = [];
              pendingUNSAFE_ComponentWillUpdateWarnings = [];
              pendingLegacyContextWarning = /* @__PURE__ */ new Map();
            };
          }
          var didWarnAboutMaps;
          var didWarnAboutGenerators;
          var didWarnAboutStringRefs;
          var ownerHasKeyUseWarning;
          var ownerHasFunctionTypeWarning;
          var warnForMissingKey = function(child, returnFiber) {
          };
          {
            didWarnAboutMaps = false;
            didWarnAboutGenerators = false;
            didWarnAboutStringRefs = {};
            ownerHasKeyUseWarning = {};
            ownerHasFunctionTypeWarning = {};
            warnForMissingKey = function(child, returnFiber) {
              if (child === null || typeof child !== "object") {
                return;
              }
              if (!child._store || child._store.validated || child.key != null) {
                return;
              }
              if (typeof child._store !== "object") {
                throw new Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
              }
              child._store.validated = true;
              var componentName = getComponentNameFromFiber(returnFiber) || "Component";
              if (ownerHasKeyUseWarning[componentName]) {
                return;
              }
              ownerHasKeyUseWarning[componentName] = true;
              error('Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.');
            };
          }
          function isReactClass(type) {
            return type.prototype && type.prototype.isReactComponent;
          }
          function coerceRef(returnFiber, current2, element) {
            var mixedRef = element.ref;
            if (mixedRef !== null && typeof mixedRef !== "function" && typeof mixedRef !== "object") {
              {
                if ((returnFiber.mode & StrictLegacyMode || warnAboutStringRefs) && // We warn in ReactElement.js if owner and self are equal for string refs
                // because these cannot be automatically converted to an arrow function
                // using a codemod. Therefore, we don't have to warn about string refs again.
                !(element._owner && element._self && element._owner.stateNode !== element._self) && // Will already throw with "Function components cannot have string refs"
                !(element._owner && element._owner.tag !== ClassComponent) && // Will already warn with "Function components cannot be given refs"
                !(typeof element.type === "function" && !isReactClass(element.type)) && // Will already throw with "Element ref was specified as a string (someStringRef) but no owner was set"
                element._owner) {
                  var componentName = getComponentNameFromFiber(returnFiber) || "Component";
                  if (!didWarnAboutStringRefs[componentName]) {
                    {
                      error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, mixedRef);
                    }
                    didWarnAboutStringRefs[componentName] = true;
                  }
                }
              }
              if (element._owner) {
                var owner = element._owner;
                var inst;
                if (owner) {
                  var ownerFiber = owner;
                  if (ownerFiber.tag !== ClassComponent) {
                    throw new Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
                  }
                  inst = ownerFiber.stateNode;
                }
                if (!inst) {
                  throw new Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
                }
                var resolvedInst = inst;
                {
                  checkPropStringCoercion(mixedRef, "ref");
                }
                var stringRef = "" + mixedRef;
                if (current2 !== null && current2.ref !== null && typeof current2.ref === "function" && current2.ref._stringRef === stringRef) {
                  return current2.ref;
                }
                var ref = function(value) {
                  var refs = resolvedInst.refs;
                  if (value === null) {
                    delete refs[stringRef];
                  } else {
                    refs[stringRef] = value;
                  }
                };
                ref._stringRef = stringRef;
                return ref;
              } else {
                if (typeof mixedRef !== "string") {
                  throw new Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
                }
                if (!element._owner) {
                  throw new Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information.");
                }
              }
            }
            return mixedRef;
          }
          function throwOnInvalidObjectType(returnFiber, newChild) {
            var childString = Object.prototype.toString.call(newChild);
            throw new Error("Objects are not valid as a React child (found: " + (childString === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : childString) + "). If you meant to render a collection of children, use an array instead.");
          }
          function warnOnFunctionType(returnFiber) {
            {
              var componentName = getComponentNameFromFiber(returnFiber) || "Component";
              if (ownerHasFunctionTypeWarning[componentName]) {
                return;
              }
              ownerHasFunctionTypeWarning[componentName] = true;
              error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
            }
          }
          function resolveLazy(lazyType) {
            var payload = lazyType._payload;
            var init = lazyType._init;
            return init(payload);
          }
          function ChildReconciler(shouldTrackSideEffects) {
            function deleteChild(returnFiber, childToDelete) {
              if (!shouldTrackSideEffects) {
                return;
              }
              var deletions = returnFiber.deletions;
              if (deletions === null) {
                returnFiber.deletions = [childToDelete];
                returnFiber.flags |= ChildDeletion;
              } else {
                deletions.push(childToDelete);
              }
            }
            function deleteRemainingChildren(returnFiber, currentFirstChild) {
              if (!shouldTrackSideEffects) {
                return null;
              }
              var childToDelete = currentFirstChild;
              while (childToDelete !== null) {
                deleteChild(returnFiber, childToDelete);
                childToDelete = childToDelete.sibling;
              }
              return null;
            }
            function mapRemainingChildren(returnFiber, currentFirstChild) {
              var existingChildren = /* @__PURE__ */ new Map();
              var existingChild = currentFirstChild;
              while (existingChild !== null) {
                if (existingChild.key !== null) {
                  existingChildren.set(existingChild.key, existingChild);
                } else {
                  existingChildren.set(existingChild.index, existingChild);
                }
                existingChild = existingChild.sibling;
              }
              return existingChildren;
            }
            function useFiber(fiber, pendingProps) {
              var clone = createWorkInProgress(fiber, pendingProps);
              clone.index = 0;
              clone.sibling = null;
              return clone;
            }
            function placeChild(newFiber, lastPlacedIndex, newIndex) {
              newFiber.index = newIndex;
              if (!shouldTrackSideEffects) {
                newFiber.flags |= Forked;
                return lastPlacedIndex;
              }
              var current2 = newFiber.alternate;
              if (current2 !== null) {
                var oldIndex = current2.index;
                if (oldIndex < lastPlacedIndex) {
                  newFiber.flags |= Placement;
                  return lastPlacedIndex;
                } else {
                  return oldIndex;
                }
              } else {
                newFiber.flags |= Placement;
                return lastPlacedIndex;
              }
            }
            function placeSingleChild(newFiber) {
              if (shouldTrackSideEffects && newFiber.alternate === null) {
                newFiber.flags |= Placement;
              }
              return newFiber;
            }
            function updateTextNode(returnFiber, current2, textContent, lanes) {
              if (current2 === null || current2.tag !== HostText) {
                var created = createFiberFromText(textContent, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, textContent);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateElement(returnFiber, current2, element, lanes) {
              var elementType = element.type;
              if (elementType === REACT_FRAGMENT_TYPE) {
                return updateFragment2(returnFiber, current2, element.props.children, lanes, element.key);
              }
              if (current2 !== null) {
                if (current2.elementType === elementType || // Keep this check inline so it only runs on the false path:
                isCompatibleFamilyForHotReloading(current2, element) || // Lazy types should reconcile their resolved type.
                // We need to do this after the Hot Reloading check above,
                // because hot reloading has different semantics than prod because
                // it doesn't resuspend. So we can't let the call below suspend.
                typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current2.type) {
                  var existing = useFiber(current2, element.props);
                  existing.ref = coerceRef(returnFiber, current2, element);
                  existing.return = returnFiber;
                  {
                    existing._debugSource = element._source;
                    existing._debugOwner = element._owner;
                  }
                  return existing;
                }
              }
              var created = createFiberFromElement(element, returnFiber.mode, lanes);
              created.ref = coerceRef(returnFiber, current2, element);
              created.return = returnFiber;
              return created;
            }
            function updatePortal(returnFiber, current2, portal, lanes) {
              if (current2 === null || current2.tag !== HostPortal || current2.stateNode.containerInfo !== portal.containerInfo || current2.stateNode.implementation !== portal.implementation) {
                var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, portal.children || []);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateFragment2(returnFiber, current2, fragment, lanes, key) {
              if (current2 === null || current2.tag !== Fragment27) {
                var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, fragment);
                existing.return = returnFiber;
                return existing;
              }
            }
            function createChild(returnFiber, newChild, lanes) {
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                var created = createFiberFromText("" + newChild, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
                    _created.ref = coerceRef(returnFiber, null, newChild);
                    _created.return = returnFiber;
                    return _created;
                  }
                  case REACT_PORTAL_TYPE: {
                    var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                    _created2.return = returnFiber;
                    return _created2;
                  }
                  case REACT_LAZY_TYPE: {
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return createChild(returnFiber, init(payload), lanes);
                  }
                }
                if (isArray(newChild) || getIteratorFn(newChild)) {
                  var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
                  _created3.return = returnFiber;
                  return _created3;
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function updateSlot(returnFiber, oldFiber, newChild, lanes) {
              var key = oldFiber !== null ? oldFiber.key : null;
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                if (key !== null) {
                  return null;
                }
                return updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    if (newChild.key === key) {
                      return updateElement(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                  case REACT_PORTAL_TYPE: {
                    if (newChild.key === key) {
                      return updatePortal(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                  case REACT_LAZY_TYPE: {
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return updateSlot(returnFiber, oldFiber, init(payload), lanes);
                  }
                }
                if (isArray(newChild) || getIteratorFn(newChild)) {
                  if (key !== null) {
                    return null;
                  }
                  return updateFragment2(returnFiber, oldFiber, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                var matchedFiber = existingChildren.get(newIdx) || null;
                return updateTextNode(returnFiber, matchedFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    return updateElement(returnFiber, _matchedFiber, newChild, lanes);
                  }
                  case REACT_PORTAL_TYPE: {
                    var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
                  }
                  case REACT_LAZY_TYPE:
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return updateFromMap(existingChildren, returnFiber, newIdx, init(payload), lanes);
                }
                if (isArray(newChild) || getIteratorFn(newChild)) {
                  var _matchedFiber3 = existingChildren.get(newIdx) || null;
                  return updateFragment2(returnFiber, _matchedFiber3, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function warnOnInvalidKey(child, knownKeys, returnFiber) {
              {
                if (typeof child !== "object" || child === null) {
                  return knownKeys;
                }
                switch (child.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                  case REACT_PORTAL_TYPE:
                    warnForMissingKey(child, returnFiber);
                    var key = child.key;
                    if (typeof key !== "string") {
                      break;
                    }
                    if (knownKeys === null) {
                      knownKeys = /* @__PURE__ */ new Set();
                      knownKeys.add(key);
                      break;
                    }
                    if (!knownKeys.has(key)) {
                      knownKeys.add(key);
                      break;
                    }
                    error("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.", key);
                    break;
                  case REACT_LAZY_TYPE:
                    var payload = child._payload;
                    var init = child._init;
                    warnOnInvalidKey(init(payload), knownKeys, returnFiber);
                    break;
                }
              }
              return knownKeys;
            }
            function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
              {
                var knownKeys = null;
                for (var i = 0; i < newChildren.length; i++) {
                  var child = newChildren[i];
                  knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                }
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (newIdx === newChildren.length) {
                deleteRemainingChildren(returnFiber, oldFiber);
                if (getIsHydrating()) {
                  var numberOfForks = newIdx;
                  pushTreeFork(returnFiber, numberOfForks);
                }
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; newIdx < newChildren.length; newIdx++) {
                  var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
                  if (_newFiber === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber;
                  } else {
                    previousNewFiber.sibling = _newFiber;
                  }
                  previousNewFiber = _newFiber;
                }
                if (getIsHydrating()) {
                  var _numberOfForks = newIdx;
                  pushTreeFork(returnFiber, _numberOfForks);
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; newIdx < newChildren.length; newIdx++) {
                var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
                if (_newFiber2 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber2.alternate !== null) {
                      existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber2;
                  } else {
                    previousNewFiber.sibling = _newFiber2;
                  }
                  previousNewFiber = _newFiber2;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              if (getIsHydrating()) {
                var _numberOfForks2 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks2);
              }
              return resultingFirstChild;
            }
            function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
              var iteratorFn = getIteratorFn(newChildrenIterable);
              if (typeof iteratorFn !== "function") {
                throw new Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
              }
              {
                if (typeof Symbol === "function" && // $FlowFixMe Flow doesn't know about toStringTag
                newChildrenIterable[Symbol.toStringTag] === "Generator") {
                  if (!didWarnAboutGenerators) {
                    error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
                  }
                  didWarnAboutGenerators = true;
                }
                if (newChildrenIterable.entries === iteratorFn) {
                  if (!didWarnAboutMaps) {
                    error("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                  }
                  didWarnAboutMaps = true;
                }
                var _newChildren = iteratorFn.call(newChildrenIterable);
                if (_newChildren) {
                  var knownKeys = null;
                  var _step = _newChildren.next();
                  for (; !_step.done; _step = _newChildren.next()) {
                    var child = _step.value;
                    knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                  }
                }
              }
              var newChildren = iteratorFn.call(newChildrenIterable);
              if (newChildren == null) {
                throw new Error("An iterable object provided no iterator.");
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              var step = newChildren.next();
              for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (step.done) {
                deleteRemainingChildren(returnFiber, oldFiber);
                if (getIsHydrating()) {
                  var numberOfForks = newIdx;
                  pushTreeFork(returnFiber, numberOfForks);
                }
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; !step.done; newIdx++, step = newChildren.next()) {
                  var _newFiber3 = createChild(returnFiber, step.value, lanes);
                  if (_newFiber3 === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber3;
                  } else {
                    previousNewFiber.sibling = _newFiber3;
                  }
                  previousNewFiber = _newFiber3;
                }
                if (getIsHydrating()) {
                  var _numberOfForks3 = newIdx;
                  pushTreeFork(returnFiber, _numberOfForks3);
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; !step.done; newIdx++, step = newChildren.next()) {
                var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);
                if (_newFiber4 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber4.alternate !== null) {
                      existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber4;
                  } else {
                    previousNewFiber.sibling = _newFiber4;
                  }
                  previousNewFiber = _newFiber4;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              if (getIsHydrating()) {
                var _numberOfForks4 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks4);
              }
              return resultingFirstChild;
            }
            function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
              if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
                deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                var existing = useFiber(currentFirstChild, textContent);
                existing.return = returnFiber;
                return existing;
              }
              deleteRemainingChildren(returnFiber, currentFirstChild);
              var created = createFiberFromText(textContent, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
              var key = element.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key) {
                  var elementType = element.type;
                  if (elementType === REACT_FRAGMENT_TYPE) {
                    if (child.tag === Fragment27) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      var existing = useFiber(child, element.props.children);
                      existing.return = returnFiber;
                      {
                        existing._debugSource = element._source;
                        existing._debugOwner = element._owner;
                      }
                      return existing;
                    }
                  } else {
                    if (child.elementType === elementType || // Keep this check inline so it only runs on the false path:
                    isCompatibleFamilyForHotReloading(child, element) || // Lazy types should reconcile their resolved type.
                    // We need to do this after the Hot Reloading check above,
                    // because hot reloading has different semantics than prod because
                    // it doesn't resuspend. So we can't let the call below suspend.
                    typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === child.type) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      var _existing = useFiber(child, element.props);
                      _existing.ref = coerceRef(returnFiber, child, element);
                      _existing.return = returnFiber;
                      {
                        _existing._debugSource = element._source;
                        _existing._debugOwner = element._owner;
                      }
                      return _existing;
                    }
                  }
                  deleteRemainingChildren(returnFiber, child);
                  break;
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              if (element.type === REACT_FRAGMENT_TYPE) {
                var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
                created.return = returnFiber;
                return created;
              } else {
                var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);
                _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
                _created4.return = returnFiber;
                return _created4;
              }
            }
            function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
              var key = portal.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key) {
                  if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    var existing = useFiber(child, portal.children || []);
                    existing.return = returnFiber;
                    return existing;
                  } else {
                    deleteRemainingChildren(returnFiber, child);
                    break;
                  }
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            function reconcileChildFibers2(returnFiber, currentFirstChild, newChild, lanes) {
              var isUnkeyedTopLevelFragment = typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
              if (isUnkeyedTopLevelFragment) {
                newChild = newChild.props.children;
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                    return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
                  case REACT_PORTAL_TYPE:
                    return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
                  case REACT_LAZY_TYPE:
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return reconcileChildFibers2(returnFiber, currentFirstChild, init(payload), lanes);
                }
                if (isArray(newChild)) {
                  return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
                }
                if (getIteratorFn(newChild)) {
                  return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, lanes));
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return deleteRemainingChildren(returnFiber, currentFirstChild);
            }
            return reconcileChildFibers2;
          }
          var reconcileChildFibers = ChildReconciler(true);
          var mountChildFibers = ChildReconciler(false);
          function cloneChildFibers(current2, workInProgress2) {
            if (current2 !== null && workInProgress2.child !== current2.child) {
              throw new Error("Resuming work not yet implemented.");
            }
            if (workInProgress2.child === null) {
              return;
            }
            var currentChild = workInProgress2.child;
            var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
            workInProgress2.child = newChild;
            newChild.return = workInProgress2;
            while (currentChild.sibling !== null) {
              currentChild = currentChild.sibling;
              newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
              newChild.return = workInProgress2;
            }
            newChild.sibling = null;
          }
          function resetChildFibers(workInProgress2, lanes) {
            var child = workInProgress2.child;
            while (child !== null) {
              resetWorkInProgress(child, lanes);
              child = child.sibling;
            }
          }
          var valueCursor = createCursor(null);
          var rendererSigil;
          {
            rendererSigil = {};
          }
          var currentlyRenderingFiber = null;
          var lastContextDependency = null;
          var lastFullyObservedContext = null;
          var isDisallowedContextReadInDEV = false;
          function resetContextDependencies() {
            currentlyRenderingFiber = null;
            lastContextDependency = null;
            lastFullyObservedContext = null;
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          function enterDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = true;
            }
          }
          function exitDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          function pushProvider(providerFiber, context, nextValue) {
            {
              push(valueCursor, context._currentValue, providerFiber);
              context._currentValue = nextValue;
              {
                if (context._currentRenderer !== void 0 && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
                  error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
                }
                context._currentRenderer = rendererSigil;
              }
            }
          }
          function popProvider(context, providerFiber) {
            var currentValue = valueCursor.current;
            pop(valueCursor, providerFiber);
            {
              {
                context._currentValue = currentValue;
              }
            }
          }
          function scheduleContextWorkOnParentPath(parent2, renderLanes2, propagationRoot) {
            var node = parent2;
            while (node !== null) {
              var alternate = node.alternate;
              if (!isSubsetOfLanes(node.childLanes, renderLanes2)) {
                node.childLanes = mergeLanes(node.childLanes, renderLanes2);
                if (alternate !== null) {
                  alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
                }
              } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes2)) {
                alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
              }
              if (node === propagationRoot) {
                break;
              }
              node = node.return;
            }
            {
              if (node !== propagationRoot) {
                error("Expected to find the propagation root when scheduling context work. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function propagateContextChange(workInProgress2, context, renderLanes2) {
            {
              propagateContextChange_eager(workInProgress2, context, renderLanes2);
            }
          }
          function propagateContextChange_eager(workInProgress2, context, renderLanes2) {
            var fiber = workInProgress2.child;
            if (fiber !== null) {
              fiber.return = workInProgress2;
            }
            while (fiber !== null) {
              var nextFiber = void 0;
              var list = fiber.dependencies;
              if (list !== null) {
                nextFiber = fiber.child;
                var dependency = list.firstContext;
                while (dependency !== null) {
                  if (dependency.context === context) {
                    if (fiber.tag === ClassComponent) {
                      var lane = pickArbitraryLane(renderLanes2);
                      var update = createUpdate(NoTimestamp, lane);
                      update.tag = ForceUpdate;
                      var updateQueue = fiber.updateQueue;
                      if (updateQueue === null) ;
                      else {
                        var sharedQueue = updateQueue.shared;
                        var pending = sharedQueue.pending;
                        if (pending === null) {
                          update.next = update;
                        } else {
                          update.next = pending.next;
                          pending.next = update;
                        }
                        sharedQueue.pending = update;
                      }
                    }
                    fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
                    var alternate = fiber.alternate;
                    if (alternate !== null) {
                      alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
                    }
                    scheduleContextWorkOnParentPath(fiber.return, renderLanes2, workInProgress2);
                    list.lanes = mergeLanes(list.lanes, renderLanes2);
                    break;
                  }
                  dependency = dependency.next;
                }
              } else if (fiber.tag === ContextProvider) {
                nextFiber = fiber.type === workInProgress2.type ? null : fiber.child;
              } else if (fiber.tag === DehydratedFragment) {
                var parentSuspense = fiber.return;
                if (parentSuspense === null) {
                  throw new Error("We just came from a parent so we must have had a parent. This is a bug in React.");
                }
                parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes2);
                var _alternate = parentSuspense.alternate;
                if (_alternate !== null) {
                  _alternate.lanes = mergeLanes(_alternate.lanes, renderLanes2);
                }
                scheduleContextWorkOnParentPath(parentSuspense, renderLanes2, workInProgress2);
                nextFiber = fiber.sibling;
              } else {
                nextFiber = fiber.child;
              }
              if (nextFiber !== null) {
                nextFiber.return = fiber;
              } else {
                nextFiber = fiber;
                while (nextFiber !== null) {
                  if (nextFiber === workInProgress2) {
                    nextFiber = null;
                    break;
                  }
                  var sibling = nextFiber.sibling;
                  if (sibling !== null) {
                    sibling.return = nextFiber.return;
                    nextFiber = sibling;
                    break;
                  }
                  nextFiber = nextFiber.return;
                }
              }
              fiber = nextFiber;
            }
          }
          function prepareToReadContext(workInProgress2, renderLanes2) {
            currentlyRenderingFiber = workInProgress2;
            lastContextDependency = null;
            lastFullyObservedContext = null;
            var dependencies = workInProgress2.dependencies;
            if (dependencies !== null) {
              {
                var firstContext = dependencies.firstContext;
                if (firstContext !== null) {
                  if (includesSomeLane(dependencies.lanes, renderLanes2)) {
                    markWorkInProgressReceivedUpdate();
                  }
                  dependencies.firstContext = null;
                }
              }
            }
          }
          function readContext(context) {
            {
              if (isDisallowedContextReadInDEV) {
                error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
              }
            }
            var value = context._currentValue;
            if (lastFullyObservedContext === context) ;
            else {
              var contextItem = {
                context,
                memoizedValue: value,
                next: null
              };
              if (lastContextDependency === null) {
                if (currentlyRenderingFiber === null) {
                  throw new Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
                }
                lastContextDependency = contextItem;
                currentlyRenderingFiber.dependencies = {
                  lanes: NoLanes,
                  firstContext: contextItem
                };
              } else {
                lastContextDependency = lastContextDependency.next = contextItem;
              }
            }
            return value;
          }
          var concurrentQueues = null;
          function pushConcurrentUpdateQueue(queue) {
            if (concurrentQueues === null) {
              concurrentQueues = [queue];
            } else {
              concurrentQueues.push(queue);
            }
          }
          function finishQueueingConcurrentUpdates() {
            if (concurrentQueues !== null) {
              for (var i = 0; i < concurrentQueues.length; i++) {
                var queue = concurrentQueues[i];
                var lastInterleavedUpdate = queue.interleaved;
                if (lastInterleavedUpdate !== null) {
                  queue.interleaved = null;
                  var firstInterleavedUpdate = lastInterleavedUpdate.next;
                  var lastPendingUpdate = queue.pending;
                  if (lastPendingUpdate !== null) {
                    var firstPendingUpdate = lastPendingUpdate.next;
                    lastPendingUpdate.next = firstInterleavedUpdate;
                    lastInterleavedUpdate.next = firstPendingUpdate;
                  }
                  queue.pending = lastInterleavedUpdate;
                }
              }
              concurrentQueues = null;
            }
          }
          function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update.next = update;
              pushConcurrentUpdateQueue(queue);
            } else {
              update.next = interleaved.next;
              interleaved.next = update;
            }
            queue.interleaved = update;
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          function enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update.next = update;
              pushConcurrentUpdateQueue(queue);
            } else {
              update.next = interleaved.next;
              interleaved.next = update;
            }
            queue.interleaved = update;
          }
          function enqueueConcurrentClassUpdate(fiber, queue, update, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update.next = update;
              pushConcurrentUpdateQueue(queue);
            } else {
              update.next = interleaved.next;
              interleaved.next = update;
            }
            queue.interleaved = update;
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          function enqueueConcurrentRenderForLane(fiber, lane) {
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          var unsafe_markUpdateLaneFromFiberToRoot = markUpdateLaneFromFiberToRoot;
          function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
            sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
            var alternate = sourceFiber.alternate;
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, lane);
            }
            {
              if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {
                warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
              }
            }
            var node = sourceFiber;
            var parent2 = sourceFiber.return;
            while (parent2 !== null) {
              parent2.childLanes = mergeLanes(parent2.childLanes, lane);
              alternate = parent2.alternate;
              if (alternate !== null) {
                alternate.childLanes = mergeLanes(alternate.childLanes, lane);
              } else {
                {
                  if ((parent2.flags & (Placement | Hydrating)) !== NoFlags) {
                    warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
                  }
                }
              }
              node = parent2;
              parent2 = parent2.return;
            }
            if (node.tag === HostRoot) {
              var root2 = node.stateNode;
              return root2;
            } else {
              return null;
            }
          }
          var UpdateState = 0;
          var ReplaceState = 1;
          var ForceUpdate = 2;
          var CaptureUpdate = 3;
          var hasForceUpdate = false;
          var didWarnUpdateInsideUpdate;
          var currentlyProcessingQueue;
          {
            didWarnUpdateInsideUpdate = false;
            currentlyProcessingQueue = null;
          }
          function initializeUpdateQueue(fiber) {
            var queue = {
              baseState: fiber.memoizedState,
              firstBaseUpdate: null,
              lastBaseUpdate: null,
              shared: {
                pending: null,
                interleaved: null,
                lanes: NoLanes
              },
              effects: null
            };
            fiber.updateQueue = queue;
          }
          function cloneUpdateQueue(current2, workInProgress2) {
            var queue = workInProgress2.updateQueue;
            var currentQueue = current2.updateQueue;
            if (queue === currentQueue) {
              var clone = {
                baseState: currentQueue.baseState,
                firstBaseUpdate: currentQueue.firstBaseUpdate,
                lastBaseUpdate: currentQueue.lastBaseUpdate,
                shared: currentQueue.shared,
                effects: currentQueue.effects
              };
              workInProgress2.updateQueue = clone;
            }
          }
          function createUpdate(eventTime, lane) {
            var update = {
              eventTime,
              lane,
              tag: UpdateState,
              payload: null,
              callback: null,
              next: null
            };
            return update;
          }
          function enqueueUpdate(fiber, update, lane) {
            var updateQueue = fiber.updateQueue;
            if (updateQueue === null) {
              return null;
            }
            var sharedQueue = updateQueue.shared;
            {
              if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
                error("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
                didWarnUpdateInsideUpdate = true;
              }
            }
            if (isUnsafeClassRenderPhaseUpdate()) {
              var pending = sharedQueue.pending;
              if (pending === null) {
                update.next = update;
              } else {
                update.next = pending.next;
                pending.next = update;
              }
              sharedQueue.pending = update;
              return unsafe_markUpdateLaneFromFiberToRoot(fiber, lane);
            } else {
              return enqueueConcurrentClassUpdate(fiber, sharedQueue, update, lane);
            }
          }
          function entangleTransitions(root2, fiber, lane) {
            var updateQueue = fiber.updateQueue;
            if (updateQueue === null) {
              return;
            }
            var sharedQueue = updateQueue.shared;
            if (isTransitionLane(lane)) {
              var queueLanes = sharedQueue.lanes;
              queueLanes = intersectLanes(queueLanes, root2.pendingLanes);
              var newQueueLanes = mergeLanes(queueLanes, lane);
              sharedQueue.lanes = newQueueLanes;
              markRootEntangled(root2, newQueueLanes);
            }
          }
          function enqueueCapturedUpdate(workInProgress2, capturedUpdate) {
            var queue = workInProgress2.updateQueue;
            var current2 = workInProgress2.alternate;
            if (current2 !== null) {
              var currentQueue = current2.updateQueue;
              if (queue === currentQueue) {
                var newFirst = null;
                var newLast = null;
                var firstBaseUpdate = queue.firstBaseUpdate;
                if (firstBaseUpdate !== null) {
                  var update = firstBaseUpdate;
                  do {
                    var clone = {
                      eventTime: update.eventTime,
                      lane: update.lane,
                      tag: update.tag,
                      payload: update.payload,
                      callback: update.callback,
                      next: null
                    };
                    if (newLast === null) {
                      newFirst = newLast = clone;
                    } else {
                      newLast.next = clone;
                      newLast = clone;
                    }
                    update = update.next;
                  } while (update !== null);
                  if (newLast === null) {
                    newFirst = newLast = capturedUpdate;
                  } else {
                    newLast.next = capturedUpdate;
                    newLast = capturedUpdate;
                  }
                } else {
                  newFirst = newLast = capturedUpdate;
                }
                queue = {
                  baseState: currentQueue.baseState,
                  firstBaseUpdate: newFirst,
                  lastBaseUpdate: newLast,
                  shared: currentQueue.shared,
                  effects: currentQueue.effects
                };
                workInProgress2.updateQueue = queue;
                return;
              }
            }
            var lastBaseUpdate = queue.lastBaseUpdate;
            if (lastBaseUpdate === null) {
              queue.firstBaseUpdate = capturedUpdate;
            } else {
              lastBaseUpdate.next = capturedUpdate;
            }
            queue.lastBaseUpdate = capturedUpdate;
          }
          function getStateFromUpdate(workInProgress2, queue, update, prevState, nextProps, instance) {
            switch (update.tag) {
              case ReplaceState: {
                var payload = update.payload;
                if (typeof payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  var nextState = payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictLegacyMode) {
                      setIsStrictModeForDevtools(true);
                      try {
                        payload.call(instance, prevState, nextProps);
                      } finally {
                        setIsStrictModeForDevtools(false);
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                  return nextState;
                }
                return payload;
              }
              case CaptureUpdate: {
                workInProgress2.flags = workInProgress2.flags & ~ShouldCapture | DidCapture;
              }
              // Intentional fallthrough
              case UpdateState: {
                var _payload = update.payload;
                var partialState;
                if (typeof _payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  partialState = _payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictLegacyMode) {
                      setIsStrictModeForDevtools(true);
                      try {
                        _payload.call(instance, prevState, nextProps);
                      } finally {
                        setIsStrictModeForDevtools(false);
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                } else {
                  partialState = _payload;
                }
                if (partialState === null || partialState === void 0) {
                  return prevState;
                }
                return assign({}, prevState, partialState);
              }
              case ForceUpdate: {
                hasForceUpdate = true;
                return prevState;
              }
            }
            return prevState;
          }
          function processUpdateQueue(workInProgress2, props, instance, renderLanes2) {
            var queue = workInProgress2.updateQueue;
            hasForceUpdate = false;
            {
              currentlyProcessingQueue = queue.shared;
            }
            var firstBaseUpdate = queue.firstBaseUpdate;
            var lastBaseUpdate = queue.lastBaseUpdate;
            var pendingQueue = queue.shared.pending;
            if (pendingQueue !== null) {
              queue.shared.pending = null;
              var lastPendingUpdate = pendingQueue;
              var firstPendingUpdate = lastPendingUpdate.next;
              lastPendingUpdate.next = null;
              if (lastBaseUpdate === null) {
                firstBaseUpdate = firstPendingUpdate;
              } else {
                lastBaseUpdate.next = firstPendingUpdate;
              }
              lastBaseUpdate = lastPendingUpdate;
              var current2 = workInProgress2.alternate;
              if (current2 !== null) {
                var currentQueue = current2.updateQueue;
                var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
                if (currentLastBaseUpdate !== lastBaseUpdate) {
                  if (currentLastBaseUpdate === null) {
                    currentQueue.firstBaseUpdate = firstPendingUpdate;
                  } else {
                    currentLastBaseUpdate.next = firstPendingUpdate;
                  }
                  currentQueue.lastBaseUpdate = lastPendingUpdate;
                }
              }
            }
            if (firstBaseUpdate !== null) {
              var newState = queue.baseState;
              var newLanes = NoLanes;
              var newBaseState = null;
              var newFirstBaseUpdate = null;
              var newLastBaseUpdate = null;
              var update = firstBaseUpdate;
              do {
                var updateLane = update.lane;
                var updateEventTime = update.eventTime;
                if (!isSubsetOfLanes(renderLanes2, updateLane)) {
                  var clone = {
                    eventTime: updateEventTime,
                    lane: updateLane,
                    tag: update.tag,
                    payload: update.payload,
                    callback: update.callback,
                    next: null
                  };
                  if (newLastBaseUpdate === null) {
                    newFirstBaseUpdate = newLastBaseUpdate = clone;
                    newBaseState = newState;
                  } else {
                    newLastBaseUpdate = newLastBaseUpdate.next = clone;
                  }
                  newLanes = mergeLanes(newLanes, updateLane);
                } else {
                  if (newLastBaseUpdate !== null) {
                    var _clone = {
                      eventTime: updateEventTime,
                      // This update is going to be committed so we never want uncommit
                      // it. Using NoLane works because 0 is a subset of all bitmasks, so
                      // this will never be skipped by the check above.
                      lane: NoLane,
                      tag: update.tag,
                      payload: update.payload,
                      callback: update.callback,
                      next: null
                    };
                    newLastBaseUpdate = newLastBaseUpdate.next = _clone;
                  }
                  newState = getStateFromUpdate(workInProgress2, queue, update, newState, props, instance);
                  var callback = update.callback;
                  if (callback !== null && // If the update was already committed, we should not queue its
                  // callback again.
                  update.lane !== NoLane) {
                    workInProgress2.flags |= Callback;
                    var effects = queue.effects;
                    if (effects === null) {
                      queue.effects = [update];
                    } else {
                      effects.push(update);
                    }
                  }
                }
                update = update.next;
                if (update === null) {
                  pendingQueue = queue.shared.pending;
                  if (pendingQueue === null) {
                    break;
                  } else {
                    var _lastPendingUpdate = pendingQueue;
                    var _firstPendingUpdate = _lastPendingUpdate.next;
                    _lastPendingUpdate.next = null;
                    update = _firstPendingUpdate;
                    queue.lastBaseUpdate = _lastPendingUpdate;
                    queue.shared.pending = null;
                  }
                }
              } while (true);
              if (newLastBaseUpdate === null) {
                newBaseState = newState;
              }
              queue.baseState = newBaseState;
              queue.firstBaseUpdate = newFirstBaseUpdate;
              queue.lastBaseUpdate = newLastBaseUpdate;
              var lastInterleaved = queue.shared.interleaved;
              if (lastInterleaved !== null) {
                var interleaved = lastInterleaved;
                do {
                  newLanes = mergeLanes(newLanes, interleaved.lane);
                  interleaved = interleaved.next;
                } while (interleaved !== lastInterleaved);
              } else if (firstBaseUpdate === null) {
                queue.shared.lanes = NoLanes;
              }
              markSkippedUpdateLanes(newLanes);
              workInProgress2.lanes = newLanes;
              workInProgress2.memoizedState = newState;
            }
            {
              currentlyProcessingQueue = null;
            }
          }
          function callCallback(callback, context) {
            if (typeof callback !== "function") {
              throw new Error("Invalid argument passed as callback. Expected a function. Instead " + ("received: " + callback));
            }
            callback.call(context);
          }
          function resetHasForceUpdateBeforeProcessing() {
            hasForceUpdate = false;
          }
          function checkHasForceUpdateAfterProcessing() {
            return hasForceUpdate;
          }
          function commitUpdateQueue(finishedWork, finishedQueue, instance) {
            var effects = finishedQueue.effects;
            finishedQueue.effects = null;
            if (effects !== null) {
              for (var i = 0; i < effects.length; i++) {
                var effect7 = effects[i];
                var callback = effect7.callback;
                if (callback !== null) {
                  effect7.callback = null;
                  callCallback(callback, instance);
                }
              }
            }
          }
          var NO_CONTEXT = {};
          var contextStackCursor$1 = createCursor(NO_CONTEXT);
          var contextFiberStackCursor = createCursor(NO_CONTEXT);
          var rootInstanceStackCursor = createCursor(NO_CONTEXT);
          function requiredContext(c) {
            if (c === NO_CONTEXT) {
              throw new Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
            }
            return c;
          }
          function getRootHostContainer() {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            return rootInstance;
          }
          function pushHostContainer(fiber, nextRootInstance) {
            push(rootInstanceStackCursor, nextRootInstance, fiber);
            push(contextFiberStackCursor, fiber, fiber);
            push(contextStackCursor$1, NO_CONTEXT, fiber);
            var nextRootContext = getRootHostContext(nextRootInstance);
            pop(contextStackCursor$1, fiber);
            push(contextStackCursor$1, nextRootContext, fiber);
          }
          function popHostContainer(fiber) {
            pop(contextStackCursor$1, fiber);
            pop(contextFiberStackCursor, fiber);
            pop(rootInstanceStackCursor, fiber);
          }
          function getHostContext() {
            var context = requiredContext(contextStackCursor$1.current);
            return context;
          }
          function pushHostContext(fiber) {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            var context = requiredContext(contextStackCursor$1.current);
            var nextContext = getChildHostContext(context, fiber.type);
            if (context === nextContext) {
              return;
            }
            push(contextFiberStackCursor, fiber, fiber);
            push(contextStackCursor$1, nextContext, fiber);
          }
          function popHostContext(fiber) {
            if (contextFiberStackCursor.current !== fiber) {
              return;
            }
            pop(contextStackCursor$1, fiber);
            pop(contextFiberStackCursor, fiber);
          }
          var DefaultSuspenseContext = 0;
          var SubtreeSuspenseContextMask = 1;
          var InvisibleParentSuspenseContext = 1;
          var ForceSuspenseFallback = 2;
          var suspenseStackCursor = createCursor(DefaultSuspenseContext);
          function hasSuspenseContext(parentContext, flag) {
            return (parentContext & flag) !== 0;
          }
          function setDefaultShallowSuspenseContext(parentContext) {
            return parentContext & SubtreeSuspenseContextMask;
          }
          function setShallowSuspenseContext(parentContext, shallowContext) {
            return parentContext & SubtreeSuspenseContextMask | shallowContext;
          }
          function addSubtreeSuspenseContext(parentContext, subtreeContext) {
            return parentContext | subtreeContext;
          }
          function pushSuspenseContext(fiber, newContext) {
            push(suspenseStackCursor, newContext, fiber);
          }
          function popSuspenseContext(fiber) {
            pop(suspenseStackCursor, fiber);
          }
          function shouldCaptureSuspense(workInProgress2, hasInvisibleParent) {
            var nextState = workInProgress2.memoizedState;
            if (nextState !== null) {
              if (nextState.dehydrated !== null) {
                return true;
              }
              return false;
            }
            var props = workInProgress2.memoizedProps;
            {
              return true;
            }
          }
          function findFirstSuspended(row) {
            var node = row;
            while (node !== null) {
              if (node.tag === SuspenseComponent) {
                var state = node.memoizedState;
                if (state !== null) {
                  var dehydrated = state.dehydrated;
                  if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
                    return node;
                  }
                }
              } else if (node.tag === SuspenseListComponent && // revealOrder undefined can't be trusted because it don't
              // keep track of whether it suspended or not.
              node.memoizedProps.revealOrder !== void 0) {
                var didSuspend = (node.flags & DidCapture) !== NoFlags;
                if (didSuspend) {
                  return node;
                }
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === row) {
                return null;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === row) {
                  return null;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
            return null;
          }
          var NoFlags$1 = (
            /*   */
            0
          );
          var HasEffect = (
            /* */
            1
          );
          var Insertion = (
            /*  */
            2
          );
          var Layout = (
            /*    */
            4
          );
          var Passive$1 = (
            /*   */
            8
          );
          var workInProgressSources = [];
          function resetWorkInProgressVersions() {
            for (var i = 0; i < workInProgressSources.length; i++) {
              var mutableSource = workInProgressSources[i];
              {
                mutableSource._workInProgressVersionPrimary = null;
              }
            }
            workInProgressSources.length = 0;
          }
          function registerMutableSourceForHydration(root2, mutableSource) {
            var getVersion = mutableSource._getVersion;
            var version = getVersion(mutableSource._source);
            if (root2.mutableSourceEagerHydrationData == null) {
              root2.mutableSourceEagerHydrationData = [mutableSource, version];
            } else {
              root2.mutableSourceEagerHydrationData.push(mutableSource, version);
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$2 = ReactSharedInternals.ReactCurrentBatchConfig;
          var didWarnAboutMismatchedHooksForComponent;
          var didWarnUncachedGetSnapshot;
          {
            didWarnAboutMismatchedHooksForComponent = /* @__PURE__ */ new Set();
          }
          var renderLanes = NoLanes;
          var currentlyRenderingFiber$1 = null;
          var currentHook = null;
          var workInProgressHook = null;
          var didScheduleRenderPhaseUpdate = false;
          var didScheduleRenderPhaseUpdateDuringThisPass = false;
          var localIdCounter = 0;
          var globalClientIdCounter = 0;
          var RE_RENDER_LIMIT = 25;
          var currentHookNameInDev = null;
          var hookTypesDev = null;
          var hookTypesUpdateIndexDev = -1;
          var ignorePreviousDependencies = false;
          function mountHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev === null) {
                hookTypesDev = [hookName];
              } else {
                hookTypesDev.push(hookName);
              }
            }
          }
          function updateHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev !== null) {
                hookTypesUpdateIndexDev++;
                if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
                  warnOnHookMismatchInDev(hookName);
                }
              }
            }
          }
          function checkDepsAreArrayDev(deps) {
            {
              if (deps !== void 0 && deps !== null && !isArray(deps)) {
                error("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
              }
            }
          }
          function warnOnHookMismatchInDev(currentHookName) {
            {
              var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);
              if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
                didWarnAboutMismatchedHooksForComponent.add(componentName);
                if (hookTypesDev !== null) {
                  var table = "";
                  var secondColumnStart = 30;
                  for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {
                    var oldHookName = hookTypesDev[i];
                    var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                    var row = i + 1 + ". " + oldHookName;
                    while (row.length < secondColumnStart) {
                      row += " ";
                    }
                    row += newHookName + "\n";
                    table += row;
                  }
                  error("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table);
                }
              }
            }
          }
          function throwInvalidHookError() {
            throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
          }
          function areHookInputsEqual(nextDeps, prevDeps) {
            {
              if (ignorePreviousDependencies) {
                return false;
              }
            }
            if (prevDeps === null) {
              {
                error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
              }
              return false;
            }
            {
              if (nextDeps.length !== prevDeps.length) {
                error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
              }
            }
            for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
              if (objectIs(nextDeps[i], prevDeps[i])) {
                continue;
              }
              return false;
            }
            return true;
          }
          function renderWithHooks(current2, workInProgress2, Component20, props, secondArg, nextRenderLanes) {
            renderLanes = nextRenderLanes;
            currentlyRenderingFiber$1 = workInProgress2;
            {
              hookTypesDev = current2 !== null ? current2._debugHookTypes : null;
              hookTypesUpdateIndexDev = -1;
              ignorePreviousDependencies = current2 !== null && current2.type !== workInProgress2.type;
            }
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            workInProgress2.lanes = NoLanes;
            {
              if (current2 !== null && current2.memoizedState !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
              } else if (hookTypesDev !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
              } else {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
              }
            }
            var children = Component20(props, secondArg);
            if (didScheduleRenderPhaseUpdateDuringThisPass) {
              var numberOfReRenders = 0;
              do {
                didScheduleRenderPhaseUpdateDuringThisPass = false;
                localIdCounter = 0;
                if (numberOfReRenders >= RE_RENDER_LIMIT) {
                  throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
                }
                numberOfReRenders += 1;
                {
                  ignorePreviousDependencies = false;
                }
                currentHook = null;
                workInProgressHook = null;
                workInProgress2.updateQueue = null;
                {
                  hookTypesUpdateIndexDev = -1;
                }
                ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
                children = Component20(props, secondArg);
              } while (didScheduleRenderPhaseUpdateDuringThisPass);
            }
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            {
              workInProgress2._debugHookTypes = hookTypesDev;
            }
            var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              currentHookNameInDev = null;
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
              if (current2 !== null && (current2.flags & StaticMask) !== (workInProgress2.flags & StaticMask) && // Disable this warning in legacy mode, because legacy Suspense is weird
              // and creates false positives. To make this work in legacy mode, we'd
              // need to mark fibers that commit in an incomplete state, somehow. For
              // now I'll disable the warning that most of the bugs that would trigger
              // it are either exclusive to concurrent mode or exist in both.
              (current2.mode & ConcurrentMode) !== NoMode) {
                error("Internal React error: Expected static flag was missing. Please notify the React team.");
              }
            }
            didScheduleRenderPhaseUpdate = false;
            if (didRenderTooFewHooks) {
              throw new Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
            }
            return children;
          }
          function checkDidRenderIdHook() {
            var didRenderIdHook = localIdCounter !== 0;
            localIdCounter = 0;
            return didRenderIdHook;
          }
          function bailoutHooks(current2, workInProgress2, lanes) {
            workInProgress2.updateQueue = current2.updateQueue;
            if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
              workInProgress2.flags &= ~(MountPassiveDev | MountLayoutDev | Passive | Update);
            } else {
              workInProgress2.flags &= ~(Passive | Update);
            }
            current2.lanes = removeLanes(current2.lanes, lanes);
          }
          function resetHooksAfterThrow() {
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            if (didScheduleRenderPhaseUpdate) {
              var hook = currentlyRenderingFiber$1.memoizedState;
              while (hook !== null) {
                var queue = hook.queue;
                if (queue !== null) {
                  queue.pending = null;
                }
                hook = hook.next;
              }
              didScheduleRenderPhaseUpdate = false;
            }
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
              currentHookNameInDev = null;
              isUpdatingOpaqueValueInRenderPhase = false;
            }
            didScheduleRenderPhaseUpdateDuringThisPass = false;
            localIdCounter = 0;
          }
          function mountWorkInProgressHook() {
            var hook = {
              memoizedState: null,
              baseState: null,
              baseQueue: null,
              queue: null,
              next: null
            };
            if (workInProgressHook === null) {
              currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
            } else {
              workInProgressHook = workInProgressHook.next = hook;
            }
            return workInProgressHook;
          }
          function updateWorkInProgressHook() {
            var nextCurrentHook;
            if (currentHook === null) {
              var current2 = currentlyRenderingFiber$1.alternate;
              if (current2 !== null) {
                nextCurrentHook = current2.memoizedState;
              } else {
                nextCurrentHook = null;
              }
            } else {
              nextCurrentHook = currentHook.next;
            }
            var nextWorkInProgressHook;
            if (workInProgressHook === null) {
              nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
            } else {
              nextWorkInProgressHook = workInProgressHook.next;
            }
            if (nextWorkInProgressHook !== null) {
              workInProgressHook = nextWorkInProgressHook;
              nextWorkInProgressHook = workInProgressHook.next;
              currentHook = nextCurrentHook;
            } else {
              if (nextCurrentHook === null) {
                throw new Error("Rendered more hooks than during the previous render.");
              }
              currentHook = nextCurrentHook;
              var newHook = {
                memoizedState: currentHook.memoizedState,
                baseState: currentHook.baseState,
                baseQueue: currentHook.baseQueue,
                queue: currentHook.queue,
                next: null
              };
              if (workInProgressHook === null) {
                currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
              } else {
                workInProgressHook = workInProgressHook.next = newHook;
              }
            }
            return workInProgressHook;
          }
          function createFunctionComponentUpdateQueue() {
            return {
              lastEffect: null,
              stores: null
            };
          }
          function basicStateReducer(state, action) {
            return typeof action === "function" ? action(state) : action;
          }
          function mountReducer(reducer, initialArg, init) {
            var hook = mountWorkInProgressHook();
            var initialState;
            if (init !== void 0) {
              initialState = init(initialArg);
            } else {
              initialState = initialArg;
            }
            hook.memoizedState = hook.baseState = initialState;
            var queue = {
              pending: null,
              interleaved: null,
              lanes: NoLanes,
              dispatch: null,
              lastRenderedReducer: reducer,
              lastRenderedState: initialState
            };
            hook.queue = queue;
            var dispatch = queue.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch];
          }
          function updateReducer(reducer, initialArg, init) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (queue === null) {
              throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
            }
            queue.lastRenderedReducer = reducer;
            var current2 = currentHook;
            var baseQueue = current2.baseQueue;
            var pendingQueue = queue.pending;
            if (pendingQueue !== null) {
              if (baseQueue !== null) {
                var baseFirst = baseQueue.next;
                var pendingFirst = pendingQueue.next;
                baseQueue.next = pendingFirst;
                pendingQueue.next = baseFirst;
              }
              {
                if (current2.baseQueue !== baseQueue) {
                  error("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.");
                }
              }
              current2.baseQueue = baseQueue = pendingQueue;
              queue.pending = null;
            }
            if (baseQueue !== null) {
              var first = baseQueue.next;
              var newState = current2.baseState;
              var newBaseState = null;
              var newBaseQueueFirst = null;
              var newBaseQueueLast = null;
              var update = first;
              do {
                var updateLane = update.lane;
                if (!isSubsetOfLanes(renderLanes, updateLane)) {
                  var clone = {
                    lane: updateLane,
                    action: update.action,
                    hasEagerState: update.hasEagerState,
                    eagerState: update.eagerState,
                    next: null
                  };
                  if (newBaseQueueLast === null) {
                    newBaseQueueFirst = newBaseQueueLast = clone;
                    newBaseState = newState;
                  } else {
                    newBaseQueueLast = newBaseQueueLast.next = clone;
                  }
                  currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
                  markSkippedUpdateLanes(updateLane);
                } else {
                  if (newBaseQueueLast !== null) {
                    var _clone = {
                      // This update is going to be committed so we never want uncommit
                      // it. Using NoLane works because 0 is a subset of all bitmasks, so
                      // this will never be skipped by the check above.
                      lane: NoLane,
                      action: update.action,
                      hasEagerState: update.hasEagerState,
                      eagerState: update.eagerState,
                      next: null
                    };
                    newBaseQueueLast = newBaseQueueLast.next = _clone;
                  }
                  if (update.hasEagerState) {
                    newState = update.eagerState;
                  } else {
                    var action = update.action;
                    newState = reducer(newState, action);
                  }
                }
                update = update.next;
              } while (update !== null && update !== first);
              if (newBaseQueueLast === null) {
                newBaseState = newState;
              } else {
                newBaseQueueLast.next = newBaseQueueFirst;
              }
              if (!objectIs(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              hook.baseState = newBaseState;
              hook.baseQueue = newBaseQueueLast;
              queue.lastRenderedState = newState;
            }
            var lastInterleaved = queue.interleaved;
            if (lastInterleaved !== null) {
              var interleaved = lastInterleaved;
              do {
                var interleavedLane = interleaved.lane;
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, interleavedLane);
                markSkippedUpdateLanes(interleavedLane);
                interleaved = interleaved.next;
              } while (interleaved !== lastInterleaved);
            } else if (baseQueue === null) {
              queue.lanes = NoLanes;
            }
            var dispatch = queue.dispatch;
            return [hook.memoizedState, dispatch];
          }
          function rerenderReducer(reducer, initialArg, init) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (queue === null) {
              throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
            }
            queue.lastRenderedReducer = reducer;
            var dispatch = queue.dispatch;
            var lastRenderPhaseUpdate = queue.pending;
            var newState = hook.memoizedState;
            if (lastRenderPhaseUpdate !== null) {
              queue.pending = null;
              var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
              var update = firstRenderPhaseUpdate;
              do {
                var action = update.action;
                newState = reducer(newState, action);
                update = update.next;
              } while (update !== firstRenderPhaseUpdate);
              if (!objectIs(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              if (hook.baseQueue === null) {
                hook.baseState = newState;
              }
              queue.lastRenderedState = newState;
            }
            return [newState, dispatch];
          }
          function mountMutableSource(source, getSnapshot, subscribe) {
            {
              return void 0;
            }
          }
          function updateMutableSource(source, getSnapshot, subscribe) {
            {
              return void 0;
            }
          }
          function mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
            var fiber = currentlyRenderingFiber$1;
            var hook = mountWorkInProgressHook();
            var nextSnapshot;
            var isHydrating2 = getIsHydrating();
            if (isHydrating2) {
              if (getServerSnapshot === void 0) {
                throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
              }
              nextSnapshot = getServerSnapshot();
              {
                if (!didWarnUncachedGetSnapshot) {
                  if (nextSnapshot !== getServerSnapshot()) {
                    error("The result of getServerSnapshot should be cached to avoid an infinite loop");
                    didWarnUncachedGetSnapshot = true;
                  }
                }
              }
            } else {
              nextSnapshot = getSnapshot();
              {
                if (!didWarnUncachedGetSnapshot) {
                  var cachedSnapshot = getSnapshot();
                  if (!objectIs(nextSnapshot, cachedSnapshot)) {
                    error("The result of getSnapshot should be cached to avoid an infinite loop");
                    didWarnUncachedGetSnapshot = true;
                  }
                }
              }
              var root2 = getWorkInProgressRoot();
              if (root2 === null) {
                throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
              }
              if (!includesBlockingLane(root2, renderLanes)) {
                pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
              }
            }
            hook.memoizedState = nextSnapshot;
            var inst = {
              value: nextSnapshot,
              getSnapshot
            };
            hook.queue = inst;
            mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
            fiber.flags |= Passive;
            pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
            return nextSnapshot;
          }
          function updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
            var fiber = currentlyRenderingFiber$1;
            var hook = updateWorkInProgressHook();
            var nextSnapshot = getSnapshot();
            {
              if (!didWarnUncachedGetSnapshot) {
                var cachedSnapshot = getSnapshot();
                if (!objectIs(nextSnapshot, cachedSnapshot)) {
                  error("The result of getSnapshot should be cached to avoid an infinite loop");
                  didWarnUncachedGetSnapshot = true;
                }
              }
            }
            var prevSnapshot = hook.memoizedState;
            var snapshotChanged = !objectIs(prevSnapshot, nextSnapshot);
            if (snapshotChanged) {
              hook.memoizedState = nextSnapshot;
              markWorkInProgressReceivedUpdate();
            }
            var inst = hook.queue;
            updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
            if (inst.getSnapshot !== getSnapshot || snapshotChanged || // Check if the susbcribe function changed. We can save some memory by
            // checking whether we scheduled a subscription effect above.
            workInProgressHook !== null && workInProgressHook.memoizedState.tag & HasEffect) {
              fiber.flags |= Passive;
              pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
              var root2 = getWorkInProgressRoot();
              if (root2 === null) {
                throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
              }
              if (!includesBlockingLane(root2, renderLanes)) {
                pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
              }
            }
            return nextSnapshot;
          }
          function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
            fiber.flags |= StoreConsistency;
            var check = {
              getSnapshot,
              value: renderedSnapshot
            };
            var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
            if (componentUpdateQueue === null) {
              componentUpdateQueue = createFunctionComponentUpdateQueue();
              currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
              componentUpdateQueue.stores = [check];
            } else {
              var stores = componentUpdateQueue.stores;
              if (stores === null) {
                componentUpdateQueue.stores = [check];
              } else {
                stores.push(check);
              }
            }
          }
          function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
            inst.value = nextSnapshot;
            inst.getSnapshot = getSnapshot;
            if (checkIfSnapshotChanged(inst)) {
              forceStoreRerender(fiber);
            }
          }
          function subscribeToStore(fiber, inst, subscribe) {
            var handleStoreChange = function() {
              if (checkIfSnapshotChanged(inst)) {
                forceStoreRerender(fiber);
              }
            };
            return subscribe(handleStoreChange);
          }
          function checkIfSnapshotChanged(inst) {
            var latestGetSnapshot = inst.getSnapshot;
            var prevValue = inst.value;
            try {
              var nextValue = latestGetSnapshot();
              return !objectIs(prevValue, nextValue);
            } catch (error2) {
              return true;
            }
          }
          function forceStoreRerender(fiber) {
            var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
            }
          }
          function mountState(initialState) {
            var hook = mountWorkInProgressHook();
            if (typeof initialState === "function") {
              initialState = initialState();
            }
            hook.memoizedState = hook.baseState = initialState;
            var queue = {
              pending: null,
              interleaved: null,
              lanes: NoLanes,
              dispatch: null,
              lastRenderedReducer: basicStateReducer,
              lastRenderedState: initialState
            };
            hook.queue = queue;
            var dispatch = queue.dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch];
          }
          function updateState(initialState) {
            return updateReducer(basicStateReducer);
          }
          function rerenderState(initialState) {
            return rerenderReducer(basicStateReducer);
          }
          function pushEffect(tag, create, destroy, deps) {
            var effect7 = {
              tag,
              create,
              destroy,
              deps,
              // Circular
              next: null
            };
            var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
            if (componentUpdateQueue === null) {
              componentUpdateQueue = createFunctionComponentUpdateQueue();
              currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
              componentUpdateQueue.lastEffect = effect7.next = effect7;
            } else {
              var lastEffect = componentUpdateQueue.lastEffect;
              if (lastEffect === null) {
                componentUpdateQueue.lastEffect = effect7.next = effect7;
              } else {
                var firstEffect = lastEffect.next;
                lastEffect.next = effect7;
                effect7.next = firstEffect;
                componentUpdateQueue.lastEffect = effect7;
              }
            }
            return effect7;
          }
          function mountRef(initialValue) {
            var hook = mountWorkInProgressHook();
            {
              var _ref2 = {
                current: initialValue
              };
              hook.memoizedState = _ref2;
              return _ref2;
            }
          }
          function updateRef(initialValue) {
            var hook = updateWorkInProgressHook();
            return hook.memoizedState;
          }
          function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create, void 0, nextDeps);
          }
          function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var destroy = void 0;
            if (currentHook !== null) {
              var prevEffect = currentHook.memoizedState;
              destroy = prevEffect.destroy;
              if (nextDeps !== null) {
                var prevDeps = prevEffect.deps;
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  hook.memoizedState = pushEffect(hookFlags, create, destroy, nextDeps);
                  return;
                }
              }
            }
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);
          }
          function mountEffect(create, deps) {
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              return mountEffectImpl(MountPassiveDev | Passive | PassiveStatic, Passive$1, create, deps);
            } else {
              return mountEffectImpl(Passive | PassiveStatic, Passive$1, create, deps);
            }
          }
          function updateEffect(create, deps) {
            return updateEffectImpl(Passive, Passive$1, create, deps);
          }
          function mountInsertionEffect(create, deps) {
            return mountEffectImpl(Update, Insertion, create, deps);
          }
          function updateInsertionEffect(create, deps) {
            return updateEffectImpl(Update, Insertion, create, deps);
          }
          function mountLayoutEffect(create, deps) {
            var fiberFlags = Update;
            {
              fiberFlags |= LayoutStatic;
            }
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              fiberFlags |= MountLayoutDev;
            }
            return mountEffectImpl(fiberFlags, Layout, create, deps);
          }
          function updateLayoutEffect(create, deps) {
            return updateEffectImpl(Update, Layout, create, deps);
          }
          function imperativeHandleEffect(create, ref) {
            if (typeof ref === "function") {
              var refCallback = ref;
              var _inst = create();
              refCallback(_inst);
              return function() {
                refCallback(null);
              };
            } else if (ref !== null && ref !== void 0) {
              var refObject = ref;
              {
                if (!refObject.hasOwnProperty("current")) {
                  error("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}");
                }
              }
              var _inst2 = create();
              refObject.current = _inst2;
              return function() {
                refObject.current = null;
              };
            }
          }
          function mountImperativeHandle(ref, create, deps) {
            {
              if (typeof create !== "function") {
                error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            var fiberFlags = Update;
            {
              fiberFlags |= LayoutStatic;
            }
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              fiberFlags |= MountLayoutDev;
            }
            return mountEffectImpl(fiberFlags, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
          }
          function updateImperativeHandle(ref, create, deps) {
            {
              if (typeof create !== "function") {
                error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
          }
          function mountDebugValue(value, formatterFn) {
          }
          var updateDebugValue = mountDebugValue;
          function mountCallback(callback, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          function updateCallback(callback, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          function mountMemo(nextCreate, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function updateMemo(nextCreate, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function mountDeferredValue(value) {
            var hook = mountWorkInProgressHook();
            hook.memoizedState = value;
            return value;
          }
          function updateDeferredValue(value) {
            var hook = updateWorkInProgressHook();
            var resolvedCurrentHook = currentHook;
            var prevValue = resolvedCurrentHook.memoizedState;
            return updateDeferredValueImpl(hook, prevValue, value);
          }
          function rerenderDeferredValue(value) {
            var hook = updateWorkInProgressHook();
            if (currentHook === null) {
              hook.memoizedState = value;
              return value;
            } else {
              var prevValue = currentHook.memoizedState;
              return updateDeferredValueImpl(hook, prevValue, value);
            }
          }
          function updateDeferredValueImpl(hook, prevValue, value) {
            var shouldDeferValue = !includesOnlyNonUrgentLanes(renderLanes);
            if (shouldDeferValue) {
              if (!objectIs(value, prevValue)) {
                var deferredLane = claimNextTransitionLane();
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, deferredLane);
                markSkippedUpdateLanes(deferredLane);
                hook.baseState = true;
              }
              return prevValue;
            } else {
              if (hook.baseState) {
                hook.baseState = false;
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = value;
              return value;
            }
          }
          function startTransition3(setPending, callback, options2) {
            var previousPriority = getCurrentUpdatePriority();
            setCurrentUpdatePriority(higherEventPriority(previousPriority, ContinuousEventPriority));
            setPending(true);
            var prevTransition = ReactCurrentBatchConfig$2.transition;
            ReactCurrentBatchConfig$2.transition = {};
            var currentTransition = ReactCurrentBatchConfig$2.transition;
            {
              ReactCurrentBatchConfig$2.transition._updatedFibers = /* @__PURE__ */ new Set();
            }
            try {
              setPending(false);
              callback();
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$2.transition = prevTransition;
              {
                if (prevTransition === null && currentTransition._updatedFibers) {
                  var updatedFibersCount = currentTransition._updatedFibers.size;
                  if (updatedFibersCount > 10) {
                    warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                  }
                  currentTransition._updatedFibers.clear();
                }
              }
            }
          }
          function mountTransition() {
            var _mountState = mountState(false), isPending = _mountState[0], setPending = _mountState[1];
            var start3 = startTransition3.bind(null, setPending);
            var hook = mountWorkInProgressHook();
            hook.memoizedState = start3;
            return [isPending, start3];
          }
          function updateTransition() {
            var _updateState = updateState(), isPending = _updateState[0];
            var hook = updateWorkInProgressHook();
            var start3 = hook.memoizedState;
            return [isPending, start3];
          }
          function rerenderTransition() {
            var _rerenderState = rerenderState(), isPending = _rerenderState[0];
            var hook = updateWorkInProgressHook();
            var start3 = hook.memoizedState;
            return [isPending, start3];
          }
          var isUpdatingOpaqueValueInRenderPhase = false;
          function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
            {
              return isUpdatingOpaqueValueInRenderPhase;
            }
          }
          function mountId() {
            var hook = mountWorkInProgressHook();
            var root2 = getWorkInProgressRoot();
            var identifierPrefix = root2.identifierPrefix;
            var id;
            if (getIsHydrating()) {
              var treeId = getTreeId();
              id = ":" + identifierPrefix + "R" + treeId;
              var localId = localIdCounter++;
              if (localId > 0) {
                id += "H" + localId.toString(32);
              }
              id += ":";
            } else {
              var globalClientId = globalClientIdCounter++;
              id = ":" + identifierPrefix + "r" + globalClientId.toString(32) + ":";
            }
            hook.memoizedState = id;
            return id;
          }
          function updateId() {
            var hook = updateWorkInProgressHook();
            var id = hook.memoizedState;
            return id;
          }
          function dispatchReducerAction(fiber, queue, action) {
            {
              if (typeof arguments[3] === "function") {
                error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
              }
            }
            var lane = requestUpdateLane(fiber);
            var update = {
              lane,
              action,
              hasEagerState: false,
              eagerState: null,
              next: null
            };
            if (isRenderPhaseUpdate(fiber)) {
              enqueueRenderPhaseUpdate(queue, update);
            } else {
              var root2 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
              if (root2 !== null) {
                var eventTime = requestEventTime();
                scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
                entangleTransitionUpdate(root2, queue, lane);
              }
            }
            markUpdateInDevTools(fiber, lane);
          }
          function dispatchSetState(fiber, queue, action) {
            {
              if (typeof arguments[3] === "function") {
                error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
              }
            }
            var lane = requestUpdateLane(fiber);
            var update = {
              lane,
              action,
              hasEagerState: false,
              eagerState: null,
              next: null
            };
            if (isRenderPhaseUpdate(fiber)) {
              enqueueRenderPhaseUpdate(queue, update);
            } else {
              var alternate = fiber.alternate;
              if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
                var lastRenderedReducer = queue.lastRenderedReducer;
                if (lastRenderedReducer !== null) {
                  var prevDispatcher;
                  {
                    prevDispatcher = ReactCurrentDispatcher$1.current;
                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                  }
                  try {
                    var currentState = queue.lastRenderedState;
                    var eagerState = lastRenderedReducer(currentState, action);
                    update.hasEagerState = true;
                    update.eagerState = eagerState;
                    if (objectIs(eagerState, currentState)) {
                      enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane);
                      return;
                    }
                  } catch (error2) {
                  } finally {
                    {
                      ReactCurrentDispatcher$1.current = prevDispatcher;
                    }
                  }
                }
              }
              var root2 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
              if (root2 !== null) {
                var eventTime = requestEventTime();
                scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
                entangleTransitionUpdate(root2, queue, lane);
              }
            }
            markUpdateInDevTools(fiber, lane);
          }
          function isRenderPhaseUpdate(fiber) {
            var alternate = fiber.alternate;
            return fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1;
          }
          function enqueueRenderPhaseUpdate(queue, update) {
            didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
            var pending = queue.pending;
            if (pending === null) {
              update.next = update;
            } else {
              update.next = pending.next;
              pending.next = update;
            }
            queue.pending = update;
          }
          function entangleTransitionUpdate(root2, queue, lane) {
            if (isTransitionLane(lane)) {
              var queueLanes = queue.lanes;
              queueLanes = intersectLanes(queueLanes, root2.pendingLanes);
              var newQueueLanes = mergeLanes(queueLanes, lane);
              queue.lanes = newQueueLanes;
              markRootEntangled(root2, newQueueLanes);
            }
          }
          function markUpdateInDevTools(fiber, lane, action) {
            {
              markStateUpdateScheduled(fiber, lane);
            }
          }
          var ContextOnlyDispatcher = {
            readContext,
            useCallback: throwInvalidHookError,
            useContext: throwInvalidHookError,
            useEffect: throwInvalidHookError,
            useImperativeHandle: throwInvalidHookError,
            useInsertionEffect: throwInvalidHookError,
            useLayoutEffect: throwInvalidHookError,
            useMemo: throwInvalidHookError,
            useReducer: throwInvalidHookError,
            useRef: throwInvalidHookError,
            useState: throwInvalidHookError,
            useDebugValue: throwInvalidHookError,
            useDeferredValue: throwInvalidHookError,
            useTransition: throwInvalidHookError,
            useMutableSource: throwInvalidHookError,
            useSyncExternalStore: throwInvalidHookError,
            useId: throwInvalidHookError,
            unstable_isNewReconciler: enableNewReconciler
          };
          var HooksDispatcherOnMountInDEV = null;
          var HooksDispatcherOnMountWithHookTypesInDEV = null;
          var HooksDispatcherOnUpdateInDEV = null;
          var HooksDispatcherOnRerenderInDEV = null;
          var InvalidNestedHooksDispatcherOnMountInDEV = null;
          var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
          var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
          {
            var warnInvalidContextAccess = function() {
              error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            };
            var warnInvalidHookAccess = function() {
              error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
            };
            HooksDispatcherOnMountInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                mountHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                mountHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                mountHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                mountHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                mountHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                mountHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                mountHookTypesDev();
                return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                mountHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnMountWithHookTypesInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return mountCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return mountImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return mountInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnUpdateInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return updateInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return updateDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return updateTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnRerenderInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return updateInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return rerenderDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return rerenderTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnMountInDEV = {
              readContext: function(context) {
                warnInvalidContextAccess();
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnUpdateInDEV = {
              readContext: function(context) {
                warnInvalidContextAccess();
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnRerenderInDEV = {
              readContext: function(context) {
                warnInvalidContextAccess();
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
          }
          var now$1 = Scheduler.unstable_now;
          var commitTime = 0;
          var layoutEffectStartTime = -1;
          var profilerStartTime = -1;
          var passiveEffectStartTime = -1;
          var currentUpdateIsNested = false;
          var nestedUpdateScheduled = false;
          function isCurrentUpdateNested() {
            return currentUpdateIsNested;
          }
          function markNestedUpdateScheduled() {
            {
              nestedUpdateScheduled = true;
            }
          }
          function resetNestedUpdateFlag() {
            {
              currentUpdateIsNested = false;
              nestedUpdateScheduled = false;
            }
          }
          function syncNestedUpdateFlag() {
            {
              currentUpdateIsNested = nestedUpdateScheduled;
              nestedUpdateScheduled = false;
            }
          }
          function getCommitTime() {
            return commitTime;
          }
          function recordCommitTime() {
            commitTime = now$1();
          }
          function startProfilerTimer(fiber) {
            profilerStartTime = now$1();
            if (fiber.actualStartTime < 0) {
              fiber.actualStartTime = now$1();
            }
          }
          function stopProfilerTimerIfRunning(fiber) {
            profilerStartTime = -1;
          }
          function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
            if (profilerStartTime >= 0) {
              var elapsedTime = now$1() - profilerStartTime;
              fiber.actualDuration += elapsedTime;
              if (overrideBaseTime) {
                fiber.selfBaseDuration = elapsedTime;
              }
              profilerStartTime = -1;
            }
          }
          function recordLayoutEffectDuration(fiber) {
            if (layoutEffectStartTime >= 0) {
              var elapsedTime = now$1() - layoutEffectStartTime;
              layoutEffectStartTime = -1;
              var parentFiber = fiber.return;
              while (parentFiber !== null) {
                switch (parentFiber.tag) {
                  case HostRoot:
                    var root2 = parentFiber.stateNode;
                    root2.effectDuration += elapsedTime;
                    return;
                  case Profiler:
                    var parentStateNode = parentFiber.stateNode;
                    parentStateNode.effectDuration += elapsedTime;
                    return;
                }
                parentFiber = parentFiber.return;
              }
            }
          }
          function recordPassiveEffectDuration(fiber) {
            if (passiveEffectStartTime >= 0) {
              var elapsedTime = now$1() - passiveEffectStartTime;
              passiveEffectStartTime = -1;
              var parentFiber = fiber.return;
              while (parentFiber !== null) {
                switch (parentFiber.tag) {
                  case HostRoot:
                    var root2 = parentFiber.stateNode;
                    if (root2 !== null) {
                      root2.passiveEffectDuration += elapsedTime;
                    }
                    return;
                  case Profiler:
                    var parentStateNode = parentFiber.stateNode;
                    if (parentStateNode !== null) {
                      parentStateNode.passiveEffectDuration += elapsedTime;
                    }
                    return;
                }
                parentFiber = parentFiber.return;
              }
            }
          }
          function startLayoutEffectTimer() {
            layoutEffectStartTime = now$1();
          }
          function startPassiveEffectTimer() {
            passiveEffectStartTime = now$1();
          }
          function transferActualDuration(fiber) {
            var child = fiber.child;
            while (child) {
              fiber.actualDuration += child.actualDuration;
              child = child.sibling;
            }
          }
          function resolveDefaultProps(Component20, baseProps) {
            if (Component20 && Component20.defaultProps) {
              var props = assign({}, baseProps);
              var defaultProps = Component20.defaultProps;
              for (var propName in defaultProps) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps[propName];
                }
              }
              return props;
            }
            return baseProps;
          }
          var fakeInternalInstance = {};
          var didWarnAboutStateAssignmentForComponent;
          var didWarnAboutUninitializedState;
          var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
          var didWarnAboutLegacyLifecyclesAndDerivedState;
          var didWarnAboutUndefinedDerivedState;
          var warnOnUndefinedDerivedState;
          var warnOnInvalidCallback;
          var didWarnAboutDirectlyAssigningPropsToState;
          var didWarnAboutContextTypeAndContextTypes;
          var didWarnAboutInvalidateContextType;
          var didWarnAboutLegacyContext$1;
          {
            didWarnAboutStateAssignmentForComponent = /* @__PURE__ */ new Set();
            didWarnAboutUninitializedState = /* @__PURE__ */ new Set();
            didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = /* @__PURE__ */ new Set();
            didWarnAboutLegacyLifecyclesAndDerivedState = /* @__PURE__ */ new Set();
            didWarnAboutDirectlyAssigningPropsToState = /* @__PURE__ */ new Set();
            didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set();
            didWarnAboutContextTypeAndContextTypes = /* @__PURE__ */ new Set();
            didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set();
            didWarnAboutLegacyContext$1 = /* @__PURE__ */ new Set();
            var didWarnOnInvalidCallback = /* @__PURE__ */ new Set();
            warnOnInvalidCallback = function(callback, callerName) {
              if (callback === null || typeof callback === "function") {
                return;
              }
              var key = callerName + "_" + callback;
              if (!didWarnOnInvalidCallback.has(key)) {
                didWarnOnInvalidCallback.add(key);
                error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            };
            warnOnUndefinedDerivedState = function(type, partialState) {
              if (partialState === void 0) {
                var componentName = getComponentNameFromType(type) || "Component";
                if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                  didWarnAboutUndefinedDerivedState.add(componentName);
                  error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
                }
              }
            };
            Object.defineProperty(fakeInternalInstance, "_processChildContext", {
              enumerable: false,
              value: function() {
                throw new Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
              }
            });
            Object.freeze(fakeInternalInstance);
          }
          function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
            var prevState = workInProgress2.memoizedState;
            var partialState = getDerivedStateFromProps(nextProps, prevState);
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  partialState = getDerivedStateFromProps(nextProps, prevState);
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              warnOnUndefinedDerivedState(ctor, partialState);
            }
            var memoizedState = partialState === null || partialState === void 0 ? prevState : assign({}, prevState, partialState);
            workInProgress2.memoizedState = memoizedState;
            if (workInProgress2.lanes === NoLanes) {
              var updateQueue = workInProgress2.updateQueue;
              updateQueue.baseState = memoizedState;
            }
          }
          var classComponentUpdater = {
            isMounted,
            enqueueSetState: function(inst, payload, callback) {
              var fiber = get(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.payload = payload;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "setState");
                }
                update.callback = callback;
              }
              var root2 = enqueueUpdate(fiber, update, lane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
                entangleTransitions(root2, fiber, lane);
              }
              {
                markStateUpdateScheduled(fiber, lane);
              }
            },
            enqueueReplaceState: function(inst, payload, callback) {
              var fiber = get(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.tag = ReplaceState;
              update.payload = payload;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "replaceState");
                }
                update.callback = callback;
              }
              var root2 = enqueueUpdate(fiber, update, lane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
                entangleTransitions(root2, fiber, lane);
              }
              {
                markStateUpdateScheduled(fiber, lane);
              }
            },
            enqueueForceUpdate: function(inst, callback) {
              var fiber = get(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.tag = ForceUpdate;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "forceUpdate");
                }
                update.callback = callback;
              }
              var root2 = enqueueUpdate(fiber, update, lane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
                entangleTransitions(root2, fiber, lane);
              }
              {
                markForceUpdateScheduled(fiber, lane);
              }
            }
          };
          function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
            var instance = workInProgress2.stateNode;
            if (typeof instance.shouldComponentUpdate === "function") {
              var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
              {
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
                if (shouldUpdate === void 0) {
                  error("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentNameFromType(ctor) || "Component");
                }
              }
              return shouldUpdate;
            }
            if (ctor.prototype && ctor.prototype.isPureReactComponent) {
              return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
            }
            return true;
          }
          function checkClassInstance(workInProgress2, ctor, newProps) {
            var instance = workInProgress2.stateNode;
            {
              var name = getComponentNameFromType(ctor) || "Component";
              var renderPresent = instance.render;
              if (!renderPresent) {
                if (ctor.prototype && typeof ctor.prototype.render === "function") {
                  error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name);
                } else {
                  error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
                }
              }
              if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
                error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
              }
              if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
              }
              if (instance.propTypes) {
                error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
              }
              if (instance.contextType) {
                error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
              }
              {
                if (ctor.childContextTypes && !didWarnAboutLegacyContext$1.has(ctor) && // Strict Mode has its own warning for legacy context, so we can skip
                // this one.
                (workInProgress2.mode & StrictLegacyMode) === NoMode) {
                  didWarnAboutLegacyContext$1.add(ctor);
                  error("%s uses the legacy childContextTypes API which is no longer supported and will be removed in the next major release. Use React.createContext() instead\n\n.Learn more about this warning here: https://reactjs.org/link/legacy-context", name);
                }
                if (ctor.contextTypes && !didWarnAboutLegacyContext$1.has(ctor) && // Strict Mode has its own warning for legacy context, so we can skip
                // this one.
                (workInProgress2.mode & StrictLegacyMode) === NoMode) {
                  didWarnAboutLegacyContext$1.add(ctor);
                  error("%s uses the legacy contextTypes API which is no longer supported and will be removed in the next major release. Use React.createContext() with static contextType instead.\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", name);
                }
                if (instance.contextTypes) {
                  error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
                }
                if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
                  didWarnAboutContextTypeAndContextTypes.add(ctor);
                  error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
                }
              }
              if (typeof instance.componentShouldUpdate === "function") {
                error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
              }
              if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
                error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentNameFromType(ctor) || "A pure component");
              }
              if (typeof instance.componentDidUnmount === "function") {
                error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
              }
              if (typeof instance.componentDidReceiveProps === "function") {
                error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
              }
              if (typeof instance.componentWillRecieveProps === "function") {
                error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
              }
              if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
                error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
              }
              var hasMutatedProps = instance.props !== newProps;
              if (instance.props !== void 0 && hasMutatedProps) {
                error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
              }
              if (instance.defaultProps) {
                error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
                didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
                error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentNameFromType(ctor));
              }
              if (typeof instance.getDerivedStateFromProps === "function") {
                error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
              }
              if (typeof instance.getDerivedStateFromError === "function") {
                error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
              }
              if (typeof ctor.getSnapshotBeforeUpdate === "function") {
                error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
              }
              var _state = instance.state;
              if (_state && (typeof _state !== "object" || isArray(_state))) {
                error("%s.state: must be set to an object or null", name);
              }
              if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
                error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
              }
            }
          }
          function adoptClassInstance(workInProgress2, instance) {
            instance.updater = classComponentUpdater;
            workInProgress2.stateNode = instance;
            set(instance, workInProgress2);
            {
              instance._reactInternalInstance = fakeInternalInstance;
            }
          }
          function constructClassInstance(workInProgress2, ctor, props) {
            var isLegacyContextConsumer = false;
            var unmaskedContext = emptyContextObject;
            var context = emptyContextObject;
            var contextType = ctor.contextType;
            {
              if ("contextType" in ctor) {
                var isValid = (
                  // Allow null for conditional declaration
                  contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0
                );
                if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
                  didWarnAboutInvalidateContextType.add(ctor);
                  var addendum = "";
                  if (contextType === void 0) {
                    addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                  } else if (typeof contextType !== "object") {
                    addendum = " However, it is set to a " + typeof contextType + ".";
                  } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                    addendum = " Did you accidentally pass the Context.Provider instead?";
                  } else if (contextType._context !== void 0) {
                    addendum = " Did you accidentally pass the Context.Consumer instead?";
                  } else {
                    addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
                  }
                  error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentNameFromType(ctor) || "Component", addendum);
                }
              }
            }
            if (typeof contextType === "object" && contextType !== null) {
              context = readContext(contextType);
            } else {
              unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              var contextTypes = ctor.contextTypes;
              isLegacyContextConsumer = contextTypes !== null && contextTypes !== void 0;
              context = isLegacyContextConsumer ? getMaskedContext(workInProgress2, unmaskedContext) : emptyContextObject;
            }
            var instance = new ctor(props, context);
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  instance = new ctor(props, context);
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
            }
            var state = workInProgress2.memoizedState = instance.state !== null && instance.state !== void 0 ? instance.state : null;
            adoptClassInstance(workInProgress2, instance);
            {
              if (typeof ctor.getDerivedStateFromProps === "function" && state === null) {
                var componentName = getComponentNameFromType(ctor) || "Component";
                if (!didWarnAboutUninitializedState.has(componentName)) {
                  didWarnAboutUninitializedState.add(componentName);
                  error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
                }
              }
              if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
                var foundWillMountName = null;
                var foundWillReceivePropsName = null;
                var foundWillUpdateName = null;
                if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                  foundWillMountName = "componentWillMount";
                } else if (typeof instance.UNSAFE_componentWillMount === "function") {
                  foundWillMountName = "UNSAFE_componentWillMount";
                }
                if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                  foundWillReceivePropsName = "componentWillReceiveProps";
                } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                  foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
                }
                if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                  foundWillUpdateName = "componentWillUpdate";
                } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  foundWillUpdateName = "UNSAFE_componentWillUpdate";
                }
                if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                  var _componentName = getComponentNameFromType(ctor) || "Component";
                  var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
                  if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                    didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                    error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
                  }
                }
              }
            }
            if (isLegacyContextConsumer) {
              cacheContext(workInProgress2, unmaskedContext, context);
            }
            return instance;
          }
          function callComponentWillMount(workInProgress2, instance) {
            var oldState = instance.state;
            if (typeof instance.componentWillMount === "function") {
              instance.componentWillMount();
            }
            if (typeof instance.UNSAFE_componentWillMount === "function") {
              instance.UNSAFE_componentWillMount();
            }
            if (oldState !== instance.state) {
              {
                error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentNameFromFiber(workInProgress2) || "Component");
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
            var oldState = instance.state;
            if (typeof instance.componentWillReceiveProps === "function") {
              instance.componentWillReceiveProps(newProps, nextContext);
            }
            if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
              instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
            }
            if (instance.state !== oldState) {
              {
                var componentName = getComponentNameFromFiber(workInProgress2) || "Component";
                if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                  didWarnAboutStateAssignmentForComponent.add(componentName);
                  error("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
                }
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function mountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            {
              checkClassInstance(workInProgress2, ctor, newProps);
            }
            var instance = workInProgress2.stateNode;
            instance.props = newProps;
            instance.state = workInProgress2.memoizedState;
            instance.refs = {};
            initializeUpdateQueue(workInProgress2);
            var contextType = ctor.contextType;
            if (typeof contextType === "object" && contextType !== null) {
              instance.context = readContext(contextType);
            } else {
              var unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              instance.context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            {
              if (instance.state === newProps) {
                var componentName = getComponentNameFromType(ctor) || "Component";
                if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                  didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                  error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
                }
              }
              if (workInProgress2.mode & StrictLegacyMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, instance);
              }
              {
                ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress2, instance);
              }
            }
            instance.state = workInProgress2.memoizedState;
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
              callComponentWillMount(workInProgress2, instance);
              processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof instance.componentDidMount === "function") {
              var fiberFlags = Update;
              {
                fiberFlags |= LayoutStatic;
              }
              if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                fiberFlags |= MountLayoutDev;
              }
              workInProgress2.flags |= fiberFlags;
            }
          }
          function resumeMountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            var instance = workInProgress2.stateNode;
            var oldProps = workInProgress2.memoizedProps;
            instance.props = oldProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextLegacyUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (oldProps !== newProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            newState = workInProgress2.memoizedState;
            if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
              if (typeof instance.componentDidMount === "function") {
                var fiberFlags = Update;
                {
                  fiberFlags |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  fiberFlags |= MountLayoutDev;
                }
                workInProgress2.flags |= fiberFlags;
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
                if (typeof instance.componentWillMount === "function") {
                  instance.componentWillMount();
                }
                if (typeof instance.UNSAFE_componentWillMount === "function") {
                  instance.UNSAFE_componentWillMount();
                }
              }
              if (typeof instance.componentDidMount === "function") {
                var _fiberFlags = Update;
                {
                  _fiberFlags |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  _fiberFlags |= MountLayoutDev;
                }
                workInProgress2.flags |= _fiberFlags;
              }
            } else {
              if (typeof instance.componentDidMount === "function") {
                var _fiberFlags2 = Update;
                {
                  _fiberFlags2 |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  _fiberFlags2 |= MountLayoutDev;
                }
                workInProgress2.flags |= _fiberFlags2;
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          function updateClassInstance(current2, workInProgress2, ctor, newProps, renderLanes2) {
            var instance = workInProgress2.stateNode;
            cloneUpdateQueue(current2, workInProgress2);
            var unresolvedOldProps = workInProgress2.memoizedProps;
            var oldProps = workInProgress2.type === workInProgress2.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress2.type, unresolvedOldProps);
            instance.props = oldProps;
            var unresolvedNewProps = workInProgress2.pendingProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            newState = workInProgress2.memoizedState;
            if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing() && !enableLazyContextPropagation) {
              if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Snapshot;
                }
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) || // TODO: In some cases, we'll end up checking if context has changed twice,
            // both before and after `shouldComponentUpdate` has been called. Not ideal,
            // but I'm loath to refactor this function. This only happens for memoized
            // components so it's not that common.
            enableLazyContextPropagation;
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === "function" || typeof instance.componentWillUpdate === "function")) {
                if (typeof instance.componentWillUpdate === "function") {
                  instance.componentWillUpdate(newProps, newState, nextContext);
                }
                if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
                }
              }
              if (typeof instance.componentDidUpdate === "function") {
                workInProgress2.flags |= Update;
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                workInProgress2.flags |= Snapshot;
              }
            } else {
              if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Snapshot;
                }
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          function createCapturedValueAtFiber(value, source) {
            return {
              value,
              source,
              stack: getStackByFiberInDevAndProd(source),
              digest: null
            };
          }
          function createCapturedValue(value, digest, stack) {
            return {
              value,
              source: null,
              stack: stack != null ? stack : null,
              digest: digest != null ? digest : null
            };
          }
          function showErrorDialog(boundary, errorInfo) {
            return true;
          }
          function logCapturedError(boundary, errorInfo) {
            try {
              var logError = showErrorDialog(boundary, errorInfo);
              if (logError === false) {
                return;
              }
              var error2 = errorInfo.value;
              if (true) {
                var source = errorInfo.source;
                var stack = errorInfo.stack;
                var componentStack = stack !== null ? stack : "";
                if (error2 != null && error2._suppressLogging) {
                  if (boundary.tag === ClassComponent) {
                    return;
                  }
                  console["error"](error2);
                }
                var componentName = source ? getComponentNameFromFiber(source) : null;
                var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:";
                var errorBoundaryMessage;
                if (boundary.tag === HostRoot) {
                  errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries.";
                } else {
                  var errorBoundaryName = getComponentNameFromFiber(boundary) || "Anonymous";
                  errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
                }
                var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage);
                console["error"](combinedMessage);
              } else {
                console["error"](error2);
              }
            } catch (e) {
              setTimeout(function() {
                throw e;
              });
            }
          }
          var PossiblyWeakMap$1 = typeof WeakMap === "function" ? WeakMap : Map;
          function createRootErrorUpdate(fiber, errorInfo, lane) {
            var update = createUpdate(NoTimestamp, lane);
            update.tag = CaptureUpdate;
            update.payload = {
              element: null
            };
            var error2 = errorInfo.value;
            update.callback = function() {
              onUncaughtError(error2);
              logCapturedError(fiber, errorInfo);
            };
            return update;
          }
          function createClassErrorUpdate(fiber, errorInfo, lane) {
            var update = createUpdate(NoTimestamp, lane);
            update.tag = CaptureUpdate;
            var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
            if (typeof getDerivedStateFromError === "function") {
              var error$1 = errorInfo.value;
              update.payload = function() {
                return getDerivedStateFromError(error$1);
              };
              update.callback = function() {
                {
                  markFailedErrorBoundaryForHotReloading(fiber);
                }
                logCapturedError(fiber, errorInfo);
              };
            }
            var inst = fiber.stateNode;
            if (inst !== null && typeof inst.componentDidCatch === "function") {
              update.callback = function callback() {
                {
                  markFailedErrorBoundaryForHotReloading(fiber);
                }
                logCapturedError(fiber, errorInfo);
                if (typeof getDerivedStateFromError !== "function") {
                  markLegacyErrorBoundaryAsFailed(this);
                }
                var error$12 = errorInfo.value;
                var stack = errorInfo.stack;
                this.componentDidCatch(error$12, {
                  componentStack: stack !== null ? stack : ""
                });
                {
                  if (typeof getDerivedStateFromError !== "function") {
                    if (!includesSomeLane(fiber.lanes, SyncLane)) {
                      error("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentNameFromFiber(fiber) || "Unknown");
                    }
                  }
                }
              };
            }
            return update;
          }
          function attachPingListener(root2, wakeable, lanes) {
            var pingCache = root2.pingCache;
            var threadIDs;
            if (pingCache === null) {
              pingCache = root2.pingCache = new PossiblyWeakMap$1();
              threadIDs = /* @__PURE__ */ new Set();
              pingCache.set(wakeable, threadIDs);
            } else {
              threadIDs = pingCache.get(wakeable);
              if (threadIDs === void 0) {
                threadIDs = /* @__PURE__ */ new Set();
                pingCache.set(wakeable, threadIDs);
              }
            }
            if (!threadIDs.has(lanes)) {
              threadIDs.add(lanes);
              var ping = pingSuspendedRoot.bind(null, root2, wakeable, lanes);
              {
                if (isDevToolsPresent) {
                  restorePendingUpdaters(root2, lanes);
                }
              }
              wakeable.then(ping, ping);
            }
          }
          function attachRetryListener(suspenseBoundary, root2, wakeable, lanes) {
            var wakeables = suspenseBoundary.updateQueue;
            if (wakeables === null) {
              var updateQueue = /* @__PURE__ */ new Set();
              updateQueue.add(wakeable);
              suspenseBoundary.updateQueue = updateQueue;
            } else {
              wakeables.add(wakeable);
            }
          }
          function resetSuspendedComponent(sourceFiber, rootRenderLanes) {
            var tag = sourceFiber.tag;
            if ((sourceFiber.mode & ConcurrentMode) === NoMode && (tag === FunctionComponent || tag === ForwardRef || tag === SimpleMemoComponent)) {
              var currentSource = sourceFiber.alternate;
              if (currentSource) {
                sourceFiber.updateQueue = currentSource.updateQueue;
                sourceFiber.memoizedState = currentSource.memoizedState;
                sourceFiber.lanes = currentSource.lanes;
              } else {
                sourceFiber.updateQueue = null;
                sourceFiber.memoizedState = null;
              }
            }
          }
          function getNearestSuspenseBoundaryToCapture(returnFiber) {
            var node = returnFiber;
            do {
              if (node.tag === SuspenseComponent && shouldCaptureSuspense(node)) {
                return node;
              }
              node = node.return;
            } while (node !== null);
            return null;
          }
          function markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes) {
            if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {
              if (suspenseBoundary === returnFiber) {
                suspenseBoundary.flags |= ShouldCapture;
              } else {
                suspenseBoundary.flags |= DidCapture;
                sourceFiber.flags |= ForceUpdateForLegacySuspense;
                sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
                if (sourceFiber.tag === ClassComponent) {
                  var currentSourceFiber = sourceFiber.alternate;
                  if (currentSourceFiber === null) {
                    sourceFiber.tag = IncompleteClassComponent;
                  } else {
                    var update = createUpdate(NoTimestamp, SyncLane);
                    update.tag = ForceUpdate;
                    enqueueUpdate(sourceFiber, update, SyncLane);
                  }
                }
                sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
              }
              return suspenseBoundary;
            }
            suspenseBoundary.flags |= ShouldCapture;
            suspenseBoundary.lanes = rootRenderLanes;
            return suspenseBoundary;
          }
          function throwException(root2, returnFiber, sourceFiber, value, rootRenderLanes) {
            sourceFiber.flags |= Incomplete;
            {
              if (isDevToolsPresent) {
                restorePendingUpdaters(root2, rootRenderLanes);
              }
            }
            if (value !== null && typeof value === "object" && typeof value.then === "function") {
              var wakeable = value;
              resetSuspendedComponent(sourceFiber);
              {
                if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
                  markDidThrowWhileHydratingDEV();
                }
              }
              var suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
              if (suspenseBoundary !== null) {
                suspenseBoundary.flags &= ~ForceClientRender;
                markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes);
                if (suspenseBoundary.mode & ConcurrentMode) {
                  attachPingListener(root2, wakeable, rootRenderLanes);
                }
                attachRetryListener(suspenseBoundary, root2, wakeable);
                return;
              } else {
                if (!includesSyncLane(rootRenderLanes)) {
                  attachPingListener(root2, wakeable, rootRenderLanes);
                  renderDidSuspendDelayIfPossible();
                  return;
                }
                var uncaughtSuspenseError = new Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition.");
                value = uncaughtSuspenseError;
              }
            } else {
              if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
                markDidThrowWhileHydratingDEV();
                var _suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
                if (_suspenseBoundary !== null) {
                  if ((_suspenseBoundary.flags & ShouldCapture) === NoFlags) {
                    _suspenseBoundary.flags |= ForceClientRender;
                  }
                  markSuspenseBoundaryShouldCapture(_suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes);
                  queueHydrationError(createCapturedValueAtFiber(value, sourceFiber));
                  return;
                }
              }
            }
            value = createCapturedValueAtFiber(value, sourceFiber);
            renderDidError(value);
            var workInProgress2 = returnFiber;
            do {
              switch (workInProgress2.tag) {
                case HostRoot: {
                  var _errorInfo = value;
                  workInProgress2.flags |= ShouldCapture;
                  var lane = pickArbitraryLane(rootRenderLanes);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                  var update = createRootErrorUpdate(workInProgress2, _errorInfo, lane);
                  enqueueCapturedUpdate(workInProgress2, update);
                  return;
                }
                case ClassComponent:
                  var errorInfo = value;
                  var ctor = workInProgress2.type;
                  var instance = workInProgress2.stateNode;
                  if ((workInProgress2.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === "function" || instance !== null && typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                    workInProgress2.flags |= ShouldCapture;
                    var _lane = pickArbitraryLane(rootRenderLanes);
                    workInProgress2.lanes = mergeLanes(workInProgress2.lanes, _lane);
                    var _update = createClassErrorUpdate(workInProgress2, errorInfo, _lane);
                    enqueueCapturedUpdate(workInProgress2, _update);
                    return;
                  }
                  break;
              }
              workInProgress2 = workInProgress2.return;
            } while (workInProgress2 !== null);
          }
          function getSuspendedCache() {
            {
              return null;
            }
          }
          var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
          var didReceiveUpdate = false;
          var didWarnAboutBadClass;
          var didWarnAboutModulePatternComponent;
          var didWarnAboutContextTypeOnFunctionComponent;
          var didWarnAboutGetDerivedStateOnFunctionComponent;
          var didWarnAboutFunctionRefs;
          var didWarnAboutReassigningProps;
          var didWarnAboutRevealOrder;
          var didWarnAboutTailOptions;
          var didWarnAboutDefaultPropsOnFunctionComponent;
          {
            didWarnAboutBadClass = {};
            didWarnAboutModulePatternComponent = {};
            didWarnAboutContextTypeOnFunctionComponent = {};
            didWarnAboutGetDerivedStateOnFunctionComponent = {};
            didWarnAboutFunctionRefs = {};
            didWarnAboutReassigningProps = false;
            didWarnAboutRevealOrder = {};
            didWarnAboutTailOptions = {};
            didWarnAboutDefaultPropsOnFunctionComponent = {};
          }
          function reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2) {
            if (current2 === null) {
              workInProgress2.child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            } else {
              workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, nextChildren, renderLanes2);
            }
          }
          function forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2) {
            workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
          }
          function updateForwardRef(current2, workInProgress2, Component20, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component20.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(Component20)
                  );
                }
              }
            }
            var render2 = Component20.render;
            var ref = workInProgress2.ref;
            var nextChildren;
            var hasId;
            prepareToReadContext(workInProgress2, renderLanes2);
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
              hasId = checkDidRenderIdHook();
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
                  hasId = checkDidRenderIdHook();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            if (current2 !== null && !didReceiveUpdate) {
              bailoutHooks(current2, workInProgress2, renderLanes2);
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            if (getIsHydrating() && hasId) {
              pushMaterializedTreeId(workInProgress2);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateMemoComponent(current2, workInProgress2, Component20, nextProps, renderLanes2) {
            if (current2 === null) {
              var type = Component20.type;
              if (isSimpleFunctionComponent(type) && Component20.compare === null && // SimpleMemoComponent codepath doesn't resolve outer props either.
              Component20.defaultProps === void 0) {
                var resolvedType = type;
                {
                  resolvedType = resolveFunctionForHotReloading(type);
                }
                workInProgress2.tag = SimpleMemoComponent;
                workInProgress2.type = resolvedType;
                {
                  validateFunctionComponentInDev(workInProgress2, type);
                }
                return updateSimpleMemoComponent(current2, workInProgress2, resolvedType, nextProps, renderLanes2);
              }
              {
                var innerPropTypes = type.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(type)
                  );
                }
                if (Component20.defaultProps !== void 0) {
                  var componentName = getComponentNameFromType(type) || "Unknown";
                  if (!didWarnAboutDefaultPropsOnFunctionComponent[componentName]) {
                    error("%s: Support for defaultProps will be removed from memo components in a future major release. Use JavaScript default parameters instead.", componentName);
                    didWarnAboutDefaultPropsOnFunctionComponent[componentName] = true;
                  }
                }
              }
              var child = createFiberFromTypeAndProps(Component20.type, null, nextProps, workInProgress2, workInProgress2.mode, renderLanes2);
              child.ref = workInProgress2.ref;
              child.return = workInProgress2;
              workInProgress2.child = child;
              return child;
            }
            {
              var _type = Component20.type;
              var _innerPropTypes = _type.propTypes;
              if (_innerPropTypes) {
                checkPropTypes(
                  _innerPropTypes,
                  nextProps,
                  // Resolved props
                  "prop",
                  getComponentNameFromType(_type)
                );
              }
            }
            var currentChild = current2.child;
            var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
            if (!hasScheduledUpdateOrContext) {
              var prevProps = currentChild.memoizedProps;
              var compare = Component20.compare;
              compare = compare !== null ? compare : shallowEqual;
              if (compare(prevProps, nextProps) && current2.ref === workInProgress2.ref) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              }
            }
            workInProgress2.flags |= PerformedWork;
            var newChild = createWorkInProgress(currentChild, nextProps);
            newChild.ref = workInProgress2.ref;
            newChild.return = workInProgress2;
            workInProgress2.child = newChild;
            return newChild;
          }
          function updateSimpleMemoComponent(current2, workInProgress2, Component20, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var outerMemoType = workInProgress2.elementType;
                if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
                  var lazyComponent = outerMemoType;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    outerMemoType = init(payload);
                  } catch (x) {
                    outerMemoType = null;
                  }
                  var outerPropTypes = outerMemoType && outerMemoType.propTypes;
                  if (outerPropTypes) {
                    checkPropTypes(
                      outerPropTypes,
                      nextProps,
                      // Resolved (SimpleMemoComponent has no defaultProps)
                      "prop",
                      getComponentNameFromType(outerMemoType)
                    );
                  }
                }
              }
            }
            if (current2 !== null) {
              var prevProps = current2.memoizedProps;
              if (shallowEqual(prevProps, nextProps) && current2.ref === workInProgress2.ref && // Prevent bailout if the implementation changed due to hot reload.
              workInProgress2.type === current2.type) {
                didReceiveUpdate = false;
                workInProgress2.pendingProps = nextProps = prevProps;
                if (!checkScheduledUpdateOrContext(current2, renderLanes2)) {
                  workInProgress2.lanes = current2.lanes;
                  return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                } else if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true;
                }
              }
            }
            return updateFunctionComponent(current2, workInProgress2, Component20, nextProps, renderLanes2);
          }
          function updateOffscreenComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            var prevState = current2 !== null ? current2.memoizedState : null;
            if (nextProps.mode === "hidden" || enableLegacyHidden) {
              if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
                var nextState = {
                  baseLanes: NoLanes,
                  cachePool: null,
                  transitions: null
                };
                workInProgress2.memoizedState = nextState;
                pushRenderLanes(workInProgress2, renderLanes2);
              } else if (!includesSomeLane(renderLanes2, OffscreenLane)) {
                var spawnedCachePool = null;
                var nextBaseLanes;
                if (prevState !== null) {
                  var prevBaseLanes = prevState.baseLanes;
                  nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes2);
                } else {
                  nextBaseLanes = renderLanes2;
                }
                workInProgress2.lanes = workInProgress2.childLanes = laneToLanes(OffscreenLane);
                var _nextState = {
                  baseLanes: nextBaseLanes,
                  cachePool: spawnedCachePool,
                  transitions: null
                };
                workInProgress2.memoizedState = _nextState;
                workInProgress2.updateQueue = null;
                pushRenderLanes(workInProgress2, nextBaseLanes);
                return null;
              } else {
                var _nextState2 = {
                  baseLanes: NoLanes,
                  cachePool: null,
                  transitions: null
                };
                workInProgress2.memoizedState = _nextState2;
                var subtreeRenderLanes2 = prevState !== null ? prevState.baseLanes : renderLanes2;
                pushRenderLanes(workInProgress2, subtreeRenderLanes2);
              }
            } else {
              var _subtreeRenderLanes;
              if (prevState !== null) {
                _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes2);
                workInProgress2.memoizedState = null;
              } else {
                _subtreeRenderLanes = renderLanes2;
              }
              pushRenderLanes(workInProgress2, _subtreeRenderLanes);
            }
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateFragment(current2, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateMode(current2, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps.children;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateProfiler(current2, workInProgress2, renderLanes2) {
            {
              workInProgress2.flags |= Update;
              {
                var stateNode = workInProgress2.stateNode;
                stateNode.effectDuration = 0;
                stateNode.passiveEffectDuration = 0;
              }
            }
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function markRef(current2, workInProgress2) {
            var ref = workInProgress2.ref;
            if (current2 === null && ref !== null || current2 !== null && current2.ref !== ref) {
              workInProgress2.flags |= Ref3;
              {
                workInProgress2.flags |= RefStatic;
              }
            }
          }
          function updateFunctionComponent(current2, workInProgress2, Component20, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component20.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(Component20)
                  );
                }
              }
            }
            var context;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component20, true);
              context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            var nextChildren;
            var hasId;
            prepareToReadContext(workInProgress2, renderLanes2);
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current2, workInProgress2, Component20, nextProps, context, renderLanes2);
              hasId = checkDidRenderIdHook();
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  nextChildren = renderWithHooks(current2, workInProgress2, Component20, nextProps, context, renderLanes2);
                  hasId = checkDidRenderIdHook();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            if (current2 !== null && !didReceiveUpdate) {
              bailoutHooks(current2, workInProgress2, renderLanes2);
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            if (getIsHydrating() && hasId) {
              pushMaterializedTreeId(workInProgress2);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateClassComponent(current2, workInProgress2, Component20, nextProps, renderLanes2) {
            {
              switch (shouldError(workInProgress2)) {
                case false: {
                  var _instance = workInProgress2.stateNode;
                  var ctor = workInProgress2.type;
                  var tempInstance = new ctor(workInProgress2.memoizedProps, _instance.context);
                  var state = tempInstance.state;
                  _instance.updater.enqueueSetState(_instance, state, null);
                  break;
                }
                case true: {
                  workInProgress2.flags |= DidCapture;
                  workInProgress2.flags |= ShouldCapture;
                  var error$1 = new Error("Simulated error coming from DevTools");
                  var lane = pickArbitraryLane(renderLanes2);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                  var update = createClassErrorUpdate(workInProgress2, createCapturedValueAtFiber(error$1, workInProgress2), lane);
                  enqueueCapturedUpdate(workInProgress2, update);
                  break;
                }
              }
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component20.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(Component20)
                  );
                }
              }
            }
            var hasContext;
            if (isContextProvider(Component20)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var instance = workInProgress2.stateNode;
            var shouldUpdate;
            if (instance === null) {
              resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2);
              constructClassInstance(workInProgress2, Component20, nextProps);
              mountClassInstance(workInProgress2, Component20, nextProps, renderLanes2);
              shouldUpdate = true;
            } else if (current2 === null) {
              shouldUpdate = resumeMountClassInstance(workInProgress2, Component20, nextProps, renderLanes2);
            } else {
              shouldUpdate = updateClassInstance(current2, workInProgress2, Component20, nextProps, renderLanes2);
            }
            var nextUnitOfWork = finishClassComponent(current2, workInProgress2, Component20, shouldUpdate, hasContext, renderLanes2);
            {
              var inst = workInProgress2.stateNode;
              if (shouldUpdate && inst.props !== nextProps) {
                if (!didWarnAboutReassigningProps) {
                  error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentNameFromFiber(workInProgress2) || "a component");
                }
                didWarnAboutReassigningProps = true;
              }
            }
            return nextUnitOfWork;
          }
          function finishClassComponent(current2, workInProgress2, Component20, shouldUpdate, hasContext, renderLanes2) {
            markRef(current2, workInProgress2);
            var didCaptureError = (workInProgress2.flags & DidCapture) !== NoFlags;
            if (!shouldUpdate && !didCaptureError) {
              if (hasContext) {
                invalidateContextProvider(workInProgress2, Component20, false);
              }
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            var instance = workInProgress2.stateNode;
            ReactCurrentOwner$1.current = workInProgress2;
            var nextChildren;
            if (didCaptureError && typeof Component20.getDerivedStateFromError !== "function") {
              nextChildren = null;
              {
                stopProfilerTimerIfRunning();
              }
            } else {
              {
                markComponentRenderStarted(workInProgress2);
              }
              {
                setIsRendering(true);
                nextChildren = instance.render();
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    instance.render();
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
                setIsRendering(false);
              }
              {
                markComponentRenderStopped();
              }
            }
            workInProgress2.flags |= PerformedWork;
            if (current2 !== null && didCaptureError) {
              forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2);
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            workInProgress2.memoizedState = instance.state;
            if (hasContext) {
              invalidateContextProvider(workInProgress2, Component20, true);
            }
            return workInProgress2.child;
          }
          function pushHostRootContext(workInProgress2) {
            var root2 = workInProgress2.stateNode;
            if (root2.pendingContext) {
              pushTopLevelContextObject(workInProgress2, root2.pendingContext, root2.pendingContext !== root2.context);
            } else if (root2.context) {
              pushTopLevelContextObject(workInProgress2, root2.context, false);
            }
            pushHostContainer(workInProgress2, root2.containerInfo);
          }
          function updateHostRoot(current2, workInProgress2, renderLanes2) {
            pushHostRootContext(workInProgress2);
            if (current2 === null) {
              throw new Error("Should have a current fiber. This is a bug in React.");
            }
            var nextProps = workInProgress2.pendingProps;
            var prevState = workInProgress2.memoizedState;
            var prevChildren = prevState.element;
            cloneUpdateQueue(current2, workInProgress2);
            processUpdateQueue(workInProgress2, nextProps, null, renderLanes2);
            var nextState = workInProgress2.memoizedState;
            var root2 = workInProgress2.stateNode;
            var nextChildren = nextState.element;
            if (prevState.isDehydrated) {
              var overrideState = {
                element: nextChildren,
                isDehydrated: false,
                cache: nextState.cache,
                pendingSuspenseBoundaries: nextState.pendingSuspenseBoundaries,
                transitions: nextState.transitions
              };
              var updateQueue = workInProgress2.updateQueue;
              updateQueue.baseState = overrideState;
              workInProgress2.memoizedState = overrideState;
              if (workInProgress2.flags & ForceClientRender) {
                var recoverableError = createCapturedValueAtFiber(new Error("There was an error while hydrating. Because the error happened outside of a Suspense boundary, the entire root will switch to client rendering."), workInProgress2);
                return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError);
              } else if (nextChildren !== prevChildren) {
                var _recoverableError = createCapturedValueAtFiber(new Error("This root received an early update, before anything was able hydrate. Switched the entire root to client rendering."), workInProgress2);
                return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, _recoverableError);
              } else {
                enterHydrationState(workInProgress2);
                var child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
                workInProgress2.child = child;
                var node = child;
                while (node) {
                  node.flags = node.flags & ~Placement | Hydrating;
                  node = node.sibling;
                }
              }
            } else {
              resetHydrationState();
              if (nextChildren === prevChildren) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              }
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            return workInProgress2.child;
          }
          function mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError) {
            resetHydrationState();
            queueHydrationError(recoverableError);
            workInProgress2.flags |= ForceClientRender;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateHostComponent(current2, workInProgress2, renderLanes2) {
            pushHostContext(workInProgress2);
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            var type = workInProgress2.type;
            var nextProps = workInProgress2.pendingProps;
            var prevProps = current2 !== null ? current2.memoizedProps : null;
            var nextChildren = nextProps.children;
            var isDirectTextChild = shouldSetTextContent(type, nextProps);
            if (isDirectTextChild) {
              nextChildren = null;
            } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
              workInProgress2.flags |= ContentReset;
            }
            markRef(current2, workInProgress2);
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateHostText(current2, workInProgress2) {
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            return null;
          }
          function mountLazyComponent(_current, workInProgress2, elementType, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            var props = workInProgress2.pendingProps;
            var lazyComponent = elementType;
            var payload = lazyComponent._payload;
            var init = lazyComponent._init;
            var Component20 = init(payload);
            workInProgress2.type = Component20;
            var resolvedTag = workInProgress2.tag = resolveLazyComponentTag(Component20);
            var resolvedProps = resolveDefaultProps(Component20, props);
            var child;
            switch (resolvedTag) {
              case FunctionComponent: {
                {
                  validateFunctionComponentInDev(workInProgress2, Component20);
                  workInProgress2.type = Component20 = resolveFunctionForHotReloading(Component20);
                }
                child = updateFunctionComponent(null, workInProgress2, Component20, resolvedProps, renderLanes2);
                return child;
              }
              case ClassComponent: {
                {
                  workInProgress2.type = Component20 = resolveClassForHotReloading(Component20);
                }
                child = updateClassComponent(null, workInProgress2, Component20, resolvedProps, renderLanes2);
                return child;
              }
              case ForwardRef: {
                {
                  workInProgress2.type = Component20 = resolveForwardRefForHotReloading(Component20);
                }
                child = updateForwardRef(null, workInProgress2, Component20, resolvedProps, renderLanes2);
                return child;
              }
              case MemoComponent: {
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = Component20.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(
                        outerPropTypes,
                        resolvedProps,
                        // Resolved for outer only
                        "prop",
                        getComponentNameFromType(Component20)
                      );
                    }
                  }
                }
                child = updateMemoComponent(
                  null,
                  workInProgress2,
                  Component20,
                  resolveDefaultProps(Component20.type, resolvedProps),
                  // The inner type can have defaults too
                  renderLanes2
                );
                return child;
              }
            }
            var hint = "";
            {
              if (Component20 !== null && typeof Component20 === "object" && Component20.$$typeof === REACT_LAZY_TYPE) {
                hint = " Did you wrap a component in React.lazy() more than once?";
              }
            }
            throw new Error("Element type is invalid. Received a promise that resolves to: " + Component20 + ". " + ("Lazy element type must resolve to a class or function." + hint));
          }
          function mountIncompleteClassComponent(_current, workInProgress2, Component20, nextProps, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            workInProgress2.tag = ClassComponent;
            var hasContext;
            if (isContextProvider(Component20)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            constructClassInstance(workInProgress2, Component20, nextProps);
            mountClassInstance(workInProgress2, Component20, nextProps, renderLanes2);
            return finishClassComponent(null, workInProgress2, Component20, true, hasContext, renderLanes2);
          }
          function mountIndeterminateComponent(_current, workInProgress2, Component20, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            var props = workInProgress2.pendingProps;
            var context;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component20, false);
              context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var value;
            var hasId;
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              if (Component20.prototype && typeof Component20.prototype.render === "function") {
                var componentName = getComponentNameFromType(Component20) || "Unknown";
                if (!didWarnAboutBadClass[componentName]) {
                  error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                  didWarnAboutBadClass[componentName] = true;
                }
              }
              if (workInProgress2.mode & StrictLegacyMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, null);
              }
              setIsRendering(true);
              ReactCurrentOwner$1.current = workInProgress2;
              value = renderWithHooks(null, workInProgress2, Component20, props, context, renderLanes2);
              hasId = checkDidRenderIdHook();
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            workInProgress2.flags |= PerformedWork;
            {
              if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
                var _componentName = getComponentNameFromType(Component20) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName]) {
                  error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                  didWarnAboutModulePatternComponent[_componentName] = true;
                }
              }
            }
            if (
              // Run these checks in production only if the flag is off.
              // Eventually we'll delete this branch altogether.
              typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0
            ) {
              {
                var _componentName2 = getComponentNameFromType(Component20) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName2]) {
                  error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
                  didWarnAboutModulePatternComponent[_componentName2] = true;
                }
              }
              workInProgress2.tag = ClassComponent;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              var hasContext = false;
              if (isContextProvider(Component20)) {
                hasContext = true;
                pushContextProvider(workInProgress2);
              } else {
                hasContext = false;
              }
              workInProgress2.memoizedState = value.state !== null && value.state !== void 0 ? value.state : null;
              initializeUpdateQueue(workInProgress2);
              adoptClassInstance(workInProgress2, value);
              mountClassInstance(workInProgress2, Component20, props, renderLanes2);
              return finishClassComponent(null, workInProgress2, Component20, true, hasContext, renderLanes2);
            } else {
              workInProgress2.tag = FunctionComponent;
              {
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    value = renderWithHooks(null, workInProgress2, Component20, props, context, renderLanes2);
                    hasId = checkDidRenderIdHook();
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
              }
              if (getIsHydrating() && hasId) {
                pushMaterializedTreeId(workInProgress2);
              }
              reconcileChildren(null, workInProgress2, value, renderLanes2);
              {
                validateFunctionComponentInDev(workInProgress2, Component20);
              }
              return workInProgress2.child;
            }
          }
          function validateFunctionComponentInDev(workInProgress2, Component20) {
            {
              if (Component20) {
                if (Component20.childContextTypes) {
                  error("%s(...): childContextTypes cannot be defined on a function component.", Component20.displayName || Component20.name || "Component");
                }
              }
              if (workInProgress2.ref !== null) {
                var info2 = "";
                var ownerName = getCurrentFiberOwnerNameInDevOrNull();
                if (ownerName) {
                  info2 += "\n\nCheck the render method of `" + ownerName + "`.";
                }
                var warningKey = ownerName || "";
                var debugSource = workInProgress2._debugSource;
                if (debugSource) {
                  warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
                }
                if (!didWarnAboutFunctionRefs[warningKey]) {
                  didWarnAboutFunctionRefs[warningKey] = true;
                  error("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info2);
                }
              }
              if (Component20.defaultProps !== void 0) {
                var componentName = getComponentNameFromType(Component20) || "Unknown";
                if (!didWarnAboutDefaultPropsOnFunctionComponent[componentName]) {
                  error("%s: Support for defaultProps will be removed from function components in a future major release. Use JavaScript default parameters instead.", componentName);
                  didWarnAboutDefaultPropsOnFunctionComponent[componentName] = true;
                }
              }
              if (typeof Component20.getDerivedStateFromProps === "function") {
                var _componentName3 = getComponentNameFromType(Component20) || "Unknown";
                if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                  error("%s: Function components do not support getDerivedStateFromProps.", _componentName3);
                  didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
                }
              }
              if (typeof Component20.contextType === "object" && Component20.contextType !== null) {
                var _componentName4 = getComponentNameFromType(Component20) || "Unknown";
                if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                  error("%s: Function components do not support contextType.", _componentName4);
                  didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
                }
              }
            }
          }
          var SUSPENDED_MARKER = {
            dehydrated: null,
            treeContext: null,
            retryLane: NoLane
          };
          function mountSuspenseOffscreenState(renderLanes2) {
            return {
              baseLanes: renderLanes2,
              cachePool: getSuspendedCache(),
              transitions: null
            };
          }
          function updateSuspenseOffscreenState(prevOffscreenState, renderLanes2) {
            var cachePool = null;
            return {
              baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes2),
              cachePool,
              transitions: prevOffscreenState.transitions
            };
          }
          function shouldRemainOnFallback(suspenseContext, current2, workInProgress2, renderLanes2) {
            if (current2 !== null) {
              var suspenseState = current2.memoizedState;
              if (suspenseState === null) {
                return false;
              }
            }
            return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
          }
          function getRemainingWorkInPrimaryTree(current2, renderLanes2) {
            return removeLanes(current2.childLanes, renderLanes2);
          }
          function updateSuspenseComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            {
              if (shouldSuspend(workInProgress2)) {
                workInProgress2.flags |= DidCapture;
              }
            }
            var suspenseContext = suspenseStackCursor.current;
            var showFallback = false;
            var didSuspend = (workInProgress2.flags & DidCapture) !== NoFlags;
            if (didSuspend || shouldRemainOnFallback(suspenseContext, current2)) {
              showFallback = true;
              workInProgress2.flags &= ~DidCapture;
            } else {
              if (current2 === null || current2.memoizedState !== null) {
                {
                  suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
                }
              }
            }
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            pushSuspenseContext(workInProgress2, suspenseContext);
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
              var suspenseState = workInProgress2.memoizedState;
              if (suspenseState !== null) {
                var dehydrated = suspenseState.dehydrated;
                if (dehydrated !== null) {
                  return mountDehydratedSuspenseComponent(workInProgress2, dehydrated);
                }
              }
              var nextPrimaryChildren = nextProps.children;
              var nextFallbackChildren = nextProps.fallback;
              if (showFallback) {
                var fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
                var primaryChildFragment = workInProgress2.child;
                primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackFragment;
              } else {
                return mountSuspensePrimaryChildren(workInProgress2, nextPrimaryChildren);
              }
            } else {
              var prevState = current2.memoizedState;
              if (prevState !== null) {
                var _dehydrated = prevState.dehydrated;
                if (_dehydrated !== null) {
                  return updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, _dehydrated, prevState, renderLanes2);
                }
              }
              if (showFallback) {
                var _nextFallbackChildren = nextProps.fallback;
                var _nextPrimaryChildren = nextProps.children;
                var fallbackChildFragment = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren, _nextFallbackChildren, renderLanes2);
                var _primaryChildFragment2 = workInProgress2.child;
                var prevOffscreenState = current2.child.memoizedState;
                _primaryChildFragment2.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes2);
                _primaryChildFragment2.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackChildFragment;
              } else {
                var _nextPrimaryChildren2 = nextProps.children;
                var _primaryChildFragment3 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren2, renderLanes2);
                workInProgress2.memoizedState = null;
                return _primaryChildFragment3;
              }
            }
          }
          function mountSuspensePrimaryChildren(workInProgress2, primaryChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var primaryChildProps = {
              mode: "visible",
              children: primaryChildren
            };
            var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
            primaryChildFragment.return = workInProgress2;
            workInProgress2.child = primaryChildFragment;
            return primaryChildFragment;
          }
          function mountSuspenseFallbackChildren(workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var progressedPrimaryFragment = workInProgress2.child;
            var primaryChildProps = {
              mode: "hidden",
              children: primaryChildren
            };
            var primaryChildFragment;
            var fallbackChildFragment;
            if ((mode & ConcurrentMode) === NoMode && progressedPrimaryFragment !== null) {
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = 0;
                primaryChildFragment.treeBaseDuration = 0;
              }
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            } else {
              primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            }
            primaryChildFragment.return = workInProgress2;
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          function mountWorkInProgressOffscreenFiber(offscreenProps, mode, renderLanes2) {
            return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);
          }
          function updateWorkInProgressOffscreenFiber(current2, offscreenProps) {
            return createWorkInProgress(current2, offscreenProps);
          }
          function updateSuspensePrimaryChildren(current2, workInProgress2, primaryChildren, renderLanes2) {
            var currentPrimaryChildFragment = current2.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
              mode: "visible",
              children: primaryChildren
            });
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              primaryChildFragment.lanes = renderLanes2;
            }
            primaryChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = null;
            if (currentFallbackChildFragment !== null) {
              var deletions = workInProgress2.deletions;
              if (deletions === null) {
                workInProgress2.deletions = [currentFallbackChildFragment];
                workInProgress2.flags |= ChildDeletion;
              } else {
                deletions.push(currentFallbackChildFragment);
              }
            }
            workInProgress2.child = primaryChildFragment;
            return primaryChildFragment;
          }
          function updateSuspenseFallbackChildren(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var currentPrimaryChildFragment = current2.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildProps = {
              mode: "hidden",
              children: primaryChildren
            };
            var primaryChildFragment;
            if (
              // In legacy mode, we commit the primary tree as if it successfully
              // completed, even though it's in an inconsistent state.
              (mode & ConcurrentMode) === NoMode && // Make sure we're on the second pass, i.e. the primary child fragment was
              // already cloned. In legacy mode, the only case where this isn't true is
              // when DevTools forces us to display a fallback; we skip the first render
              // pass entirely and go straight to rendering the fallback. (In Concurrent
              // Mode, SuspenseList can also trigger this scenario, but this is a legacy-
              // only codepath.)
              workInProgress2.child !== currentPrimaryChildFragment
            ) {
              var progressedPrimaryFragment = workInProgress2.child;
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
                primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
              }
              workInProgress2.deletions = null;
            } else {
              primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
              primaryChildFragment.subtreeFlags = currentPrimaryChildFragment.subtreeFlags & StaticMask;
            }
            var fallbackChildFragment;
            if (currentFallbackChildFragment !== null) {
              fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
            } else {
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
              fallbackChildFragment.flags |= Placement;
            }
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          function retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, recoverableError) {
            if (recoverableError !== null) {
              queueHydrationError(recoverableError);
            }
            reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            var nextProps = workInProgress2.pendingProps;
            var primaryChildren = nextProps.children;
            var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
            primaryChildFragment.flags |= Placement;
            workInProgress2.memoizedState = null;
            return primaryChildFragment;
          }
          function mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var fiberMode = workInProgress2.mode;
            var primaryChildProps = {
              mode: "visible",
              children: primaryChildren
            };
            var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, fiberMode);
            var fallbackChildFragment = createFiberFromFragment(fallbackChildren, fiberMode, renderLanes2, null);
            fallbackChildFragment.flags |= Placement;
            primaryChildFragment.return = workInProgress2;
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
              reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            }
            return fallbackChildFragment;
          }
          function mountDehydratedSuspenseComponent(workInProgress2, suspenseInstance, renderLanes2) {
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              {
                error("Cannot hydrate Suspense in legacy mode. Switch from ReactDOM.hydrate(element, container) to ReactDOMClient.hydrateRoot(container, <App />).render(element) or remove the Suspense components from the server rendered components.");
              }
              workInProgress2.lanes = laneToLanes(SyncLane);
            } else if (isSuspenseInstanceFallback(suspenseInstance)) {
              workInProgress2.lanes = laneToLanes(DefaultHydrationLane);
            } else {
              workInProgress2.lanes = laneToLanes(OffscreenLane);
            }
            return null;
          }
          function updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, suspenseInstance, suspenseState, renderLanes2) {
            if (!didSuspend) {
              warnIfHydrating();
              if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
                return retrySuspenseComponentWithoutHydrating(
                  current2,
                  workInProgress2,
                  renderLanes2,
                  // TODO: When we delete legacy mode, we should make this error argument
                  // required — every concurrent mode path that causes hydration to
                  // de-opt to client rendering should have an error message.
                  null
                );
              }
              if (isSuspenseInstanceFallback(suspenseInstance)) {
                var digest, message, stack;
                {
                  var _getSuspenseInstanceF = getSuspenseInstanceFallbackErrorDetails(suspenseInstance);
                  digest = _getSuspenseInstanceF.digest;
                  message = _getSuspenseInstanceF.message;
                  stack = _getSuspenseInstanceF.stack;
                }
                var error2;
                if (message) {
                  error2 = new Error(message);
                } else {
                  error2 = new Error("The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering.");
                }
                var capturedValue = createCapturedValue(error2, digest, stack);
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, capturedValue);
              }
              var hasContextChanged2 = includesSomeLane(renderLanes2, current2.childLanes);
              if (didReceiveUpdate || hasContextChanged2) {
                var root2 = getWorkInProgressRoot();
                if (root2 !== null) {
                  var attemptHydrationAtLane = getBumpedLaneForHydration(root2, renderLanes2);
                  if (attemptHydrationAtLane !== NoLane && attemptHydrationAtLane !== suspenseState.retryLane) {
                    suspenseState.retryLane = attemptHydrationAtLane;
                    var eventTime = NoTimestamp;
                    enqueueConcurrentRenderForLane(current2, attemptHydrationAtLane);
                    scheduleUpdateOnFiber(root2, current2, attemptHydrationAtLane, eventTime);
                  }
                }
                renderDidSuspendDelayIfPossible();
                var _capturedValue = createCapturedValue(new Error("This Suspense boundary received an update before it finished hydrating. This caused the boundary to switch to client rendering. The usual way to fix this is to wrap the original update in startTransition."));
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue);
              } else if (isSuspenseInstancePending(suspenseInstance)) {
                workInProgress2.flags |= DidCapture;
                workInProgress2.child = current2.child;
                var retry = retryDehydratedSuspenseBoundary.bind(null, current2);
                registerSuspenseInstanceRetry(suspenseInstance, retry);
                return null;
              } else {
                reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress2, suspenseInstance, suspenseState.treeContext);
                var primaryChildren = nextProps.children;
                var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
                primaryChildFragment.flags |= Hydrating;
                return primaryChildFragment;
              }
            } else {
              if (workInProgress2.flags & ForceClientRender) {
                workInProgress2.flags &= ~ForceClientRender;
                var _capturedValue2 = createCapturedValue(new Error("There was an error while hydrating this Suspense boundary. Switched to client rendering."));
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue2);
              } else if (workInProgress2.memoizedState !== null) {
                workInProgress2.child = current2.child;
                workInProgress2.flags |= DidCapture;
                return null;
              } else {
                var nextPrimaryChildren = nextProps.children;
                var nextFallbackChildren = nextProps.fallback;
                var fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
                var _primaryChildFragment4 = workInProgress2.child;
                _primaryChildFragment4.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackChildFragment;
              }
            }
          }
          function scheduleSuspenseWorkOnFiber(fiber, renderLanes2, propagationRoot) {
            fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
            var alternate = fiber.alternate;
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
            }
            scheduleContextWorkOnParentPath(fiber.return, renderLanes2, propagationRoot);
          }
          function propagateSuspenseContextChange(workInProgress2, firstChild, renderLanes2) {
            var node = firstChild;
            while (node !== null) {
              if (node.tag === SuspenseComponent) {
                var state = node.memoizedState;
                if (state !== null) {
                  scheduleSuspenseWorkOnFiber(node, renderLanes2, workInProgress2);
                }
              } else if (node.tag === SuspenseListComponent) {
                scheduleSuspenseWorkOnFiber(node, renderLanes2, workInProgress2);
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === workInProgress2) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === workInProgress2) {
                  return;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
          function findLastContentRow(firstChild) {
            var row = firstChild;
            var lastContentRow = null;
            while (row !== null) {
              var currentRow = row.alternate;
              if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                lastContentRow = row;
              }
              row = row.sibling;
            }
            return lastContentRow;
          }
          function validateRevealOrder(revealOrder) {
            {
              if (revealOrder !== void 0 && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder]) {
                didWarnAboutRevealOrder[revealOrder] = true;
                if (typeof revealOrder === "string") {
                  switch (revealOrder.toLowerCase()) {
                    case "together":
                    case "forwards":
                    case "backwards": {
                      error('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    case "forward":
                    case "backward": {
                      error('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    default:
                      error('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                      break;
                  }
                } else {
                  error('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                }
              }
            }
          }
          function validateTailOptions(tailMode, revealOrder) {
            {
              if (tailMode !== void 0 && !didWarnAboutTailOptions[tailMode]) {
                if (tailMode !== "collapsed" && tailMode !== "hidden") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', tailMode);
                } else if (revealOrder !== "forwards" && revealOrder !== "backwards") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', tailMode);
                }
              }
            }
          }
          function validateSuspenseListNestedChild(childSlot, index2) {
            {
              var isAnArray = isArray(childSlot);
              var isIterable = !isAnArray && typeof getIteratorFn(childSlot) === "function";
              if (isAnArray || isIterable) {
                var type = isAnArray ? "array" : "iterable";
                error("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type, index2, type);
                return false;
              }
            }
            return true;
          }
          function validateSuspenseListChildren(children, revealOrder) {
            {
              if ((revealOrder === "forwards" || revealOrder === "backwards") && children !== void 0 && children !== null && children !== false) {
                if (isArray(children)) {
                  for (var i = 0; i < children.length; i++) {
                    if (!validateSuspenseListNestedChild(children[i], i)) {
                      return;
                    }
                  }
                } else {
                  var iteratorFn = getIteratorFn(children);
                  if (typeof iteratorFn === "function") {
                    var childrenIterator = iteratorFn.call(children);
                    if (childrenIterator) {
                      var step = childrenIterator.next();
                      var _i = 0;
                      for (; !step.done; step = childrenIterator.next()) {
                        if (!validateSuspenseListNestedChild(step.value, _i)) {
                          return;
                        }
                        _i++;
                      }
                    }
                  } else {
                    error('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
                  }
                }
              }
            }
          }
          function initSuspenseListRenderState(workInProgress2, isBackwards, tail, lastContentRow, tailMode) {
            var renderState = workInProgress2.memoizedState;
            if (renderState === null) {
              workInProgress2.memoizedState = {
                isBackwards,
                rendering: null,
                renderingStartTime: 0,
                last: lastContentRow,
                tail,
                tailMode
              };
            } else {
              renderState.isBackwards = isBackwards;
              renderState.rendering = null;
              renderState.renderingStartTime = 0;
              renderState.last = lastContentRow;
              renderState.tail = tail;
              renderState.tailMode = tailMode;
            }
          }
          function updateSuspenseListComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            var revealOrder = nextProps.revealOrder;
            var tailMode = nextProps.tail;
            var newChildren = nextProps.children;
            validateRevealOrder(revealOrder);
            validateTailOptions(tailMode, revealOrder);
            validateSuspenseListChildren(newChildren, revealOrder);
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            var suspenseContext = suspenseStackCursor.current;
            var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
            if (shouldForceFallback) {
              suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
              workInProgress2.flags |= DidCapture;
            } else {
              var didSuspendBefore = current2 !== null && (current2.flags & DidCapture) !== NoFlags;
              if (didSuspendBefore) {
                propagateSuspenseContextChange(workInProgress2, workInProgress2.child, renderLanes2);
              }
              suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            }
            pushSuspenseContext(workInProgress2, suspenseContext);
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              workInProgress2.memoizedState = null;
            } else {
              switch (revealOrder) {
                case "forwards": {
                  var lastContentRow = findLastContentRow(workInProgress2.child);
                  var tail;
                  if (lastContentRow === null) {
                    tail = workInProgress2.child;
                    workInProgress2.child = null;
                  } else {
                    tail = lastContentRow.sibling;
                    lastContentRow.sibling = null;
                  }
                  initSuspenseListRenderState(
                    workInProgress2,
                    false,
                    // isBackwards
                    tail,
                    lastContentRow,
                    tailMode
                  );
                  break;
                }
                case "backwards": {
                  var _tail = null;
                  var row = workInProgress2.child;
                  workInProgress2.child = null;
                  while (row !== null) {
                    var currentRow = row.alternate;
                    if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                      workInProgress2.child = row;
                      break;
                    }
                    var nextRow = row.sibling;
                    row.sibling = _tail;
                    _tail = row;
                    row = nextRow;
                  }
                  initSuspenseListRenderState(
                    workInProgress2,
                    true,
                    // isBackwards
                    _tail,
                    null,
                    // last
                    tailMode
                  );
                  break;
                }
                case "together": {
                  initSuspenseListRenderState(
                    workInProgress2,
                    false,
                    // isBackwards
                    null,
                    // tail
                    null,
                    // last
                    void 0
                  );
                  break;
                }
                default: {
                  workInProgress2.memoizedState = null;
                }
              }
            }
            return workInProgress2.child;
          }
          function updatePortalComponent(current2, workInProgress2, renderLanes2) {
            pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
            var nextChildren = workInProgress2.pendingProps;
            if (current2 === null) {
              workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            return workInProgress2.child;
          }
          var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
          function updateContextProvider(current2, workInProgress2, renderLanes2) {
            var providerType = workInProgress2.type;
            var context = providerType._context;
            var newProps = workInProgress2.pendingProps;
            var oldProps = workInProgress2.memoizedProps;
            var newValue = newProps.value;
            {
              if (!("value" in newProps)) {
                if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
                  hasWarnedAboutUsingNoValuePropOnContextProvider = true;
                  error("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?");
                }
              }
              var providerPropTypes = workInProgress2.type.propTypes;
              if (providerPropTypes) {
                checkPropTypes(providerPropTypes, newProps, "prop", "Context.Provider");
              }
            }
            pushProvider(workInProgress2, context, newValue);
            {
              if (oldProps !== null) {
                var oldValue = oldProps.value;
                if (objectIs(oldValue, newValue)) {
                  if (oldProps.children === newProps.children && !hasContextChanged()) {
                    return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                  }
                } else {
                  propagateContextChange(workInProgress2, context, renderLanes2);
                }
              }
            }
            var newChildren = newProps.children;
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            return workInProgress2.child;
          }
          var hasWarnedAboutUsingContextAsConsumer = false;
          function updateContextConsumer(current2, workInProgress2, renderLanes2) {
            var context = workInProgress2.type;
            {
              if (context._context === void 0) {
                if (context !== context.Consumer) {
                  if (!hasWarnedAboutUsingContextAsConsumer) {
                    hasWarnedAboutUsingContextAsConsumer = true;
                    error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                  }
                }
              } else {
                context = context._context;
              }
            }
            var newProps = workInProgress2.pendingProps;
            var render2 = newProps.children;
            {
              if (typeof render2 !== "function") {
                error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
              }
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var newValue = readContext(context);
            {
              markComponentRenderStarted(workInProgress2);
            }
            var newChildren;
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              newChildren = render2(newValue);
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            return workInProgress2.child;
          }
          function markWorkInProgressReceivedUpdate() {
            didReceiveUpdate = true;
          }
          function resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2) {
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              if (current2 !== null) {
                current2.alternate = null;
                workInProgress2.alternate = null;
                workInProgress2.flags |= Placement;
              }
            }
          }
          function bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2) {
            if (current2 !== null) {
              workInProgress2.dependencies = current2.dependencies;
            }
            {
              stopProfilerTimerIfRunning();
            }
            markSkippedUpdateLanes(workInProgress2.lanes);
            if (!includesSomeLane(renderLanes2, workInProgress2.childLanes)) {
              {
                return null;
              }
            }
            cloneChildFibers(current2, workInProgress2);
            return workInProgress2.child;
          }
          function remountFiber(current2, oldWorkInProgress, newWorkInProgress) {
            {
              var returnFiber = oldWorkInProgress.return;
              if (returnFiber === null) {
                throw new Error("Cannot swap the root fiber.");
              }
              current2.alternate = null;
              oldWorkInProgress.alternate = null;
              newWorkInProgress.index = oldWorkInProgress.index;
              newWorkInProgress.sibling = oldWorkInProgress.sibling;
              newWorkInProgress.return = oldWorkInProgress.return;
              newWorkInProgress.ref = oldWorkInProgress.ref;
              if (oldWorkInProgress === returnFiber.child) {
                returnFiber.child = newWorkInProgress;
              } else {
                var prevSibling = returnFiber.child;
                if (prevSibling === null) {
                  throw new Error("Expected parent to have a child.");
                }
                while (prevSibling.sibling !== oldWorkInProgress) {
                  prevSibling = prevSibling.sibling;
                  if (prevSibling === null) {
                    throw new Error("Expected to find the previous sibling.");
                  }
                }
                prevSibling.sibling = newWorkInProgress;
              }
              var deletions = returnFiber.deletions;
              if (deletions === null) {
                returnFiber.deletions = [current2];
                returnFiber.flags |= ChildDeletion;
              } else {
                deletions.push(current2);
              }
              newWorkInProgress.flags |= Placement;
              return newWorkInProgress;
            }
          }
          function checkScheduledUpdateOrContext(current2, renderLanes2) {
            var updateLanes = current2.lanes;
            if (includesSomeLane(updateLanes, renderLanes2)) {
              return true;
            }
            return false;
          }
          function attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2) {
            switch (workInProgress2.tag) {
              case HostRoot:
                pushHostRootContext(workInProgress2);
                var root2 = workInProgress2.stateNode;
                resetHydrationState();
                break;
              case HostComponent:
                pushHostContext(workInProgress2);
                break;
              case ClassComponent: {
                var Component20 = workInProgress2.type;
                if (isContextProvider(Component20)) {
                  pushContextProvider(workInProgress2);
                }
                break;
              }
              case HostPortal:
                pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
                break;
              case ContextProvider: {
                var newValue = workInProgress2.memoizedProps.value;
                var context = workInProgress2.type._context;
                pushProvider(workInProgress2, context, newValue);
                break;
              }
              case Profiler:
                {
                  var hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                  if (hasChildWork) {
                    workInProgress2.flags |= Update;
                  }
                  {
                    var stateNode = workInProgress2.stateNode;
                    stateNode.effectDuration = 0;
                    stateNode.passiveEffectDuration = 0;
                  }
                }
                break;
              case SuspenseComponent: {
                var state = workInProgress2.memoizedState;
                if (state !== null) {
                  if (state.dehydrated !== null) {
                    pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                    workInProgress2.flags |= DidCapture;
                    return null;
                  }
                  var primaryChildFragment = workInProgress2.child;
                  var primaryChildLanes = primaryChildFragment.childLanes;
                  if (includesSomeLane(renderLanes2, primaryChildLanes)) {
                    return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
                  } else {
                    pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                    var child = bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                    if (child !== null) {
                      return child.sibling;
                    } else {
                      return null;
                    }
                  }
                } else {
                  pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                }
                break;
              }
              case SuspenseListComponent: {
                var didSuspendBefore = (current2.flags & DidCapture) !== NoFlags;
                var _hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                if (didSuspendBefore) {
                  if (_hasChildWork) {
                    return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
                  }
                  workInProgress2.flags |= DidCapture;
                }
                var renderState = workInProgress2.memoizedState;
                if (renderState !== null) {
                  renderState.rendering = null;
                  renderState.tail = null;
                  renderState.lastEffect = null;
                }
                pushSuspenseContext(workInProgress2, suspenseStackCursor.current);
                if (_hasChildWork) {
                  break;
                } else {
                  return null;
                }
              }
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                workInProgress2.lanes = NoLanes;
                return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
              }
            }
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          function beginWork(current2, workInProgress2, renderLanes2) {
            {
              if (workInProgress2._debugNeedsRemount && current2 !== null) {
                return remountFiber(current2, workInProgress2, createFiberFromTypeAndProps(workInProgress2.type, workInProgress2.key, workInProgress2.pendingProps, workInProgress2._debugOwner || null, workInProgress2.mode, workInProgress2.lanes));
              }
            }
            if (current2 !== null) {
              var oldProps = current2.memoizedProps;
              var newProps = workInProgress2.pendingProps;
              if (oldProps !== newProps || hasContextChanged() || // Force a re-render if the implementation changed due to hot reload:
              workInProgress2.type !== current2.type) {
                didReceiveUpdate = true;
              } else {
                var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
                if (!hasScheduledUpdateOrContext && // If this is the second pass of an error or suspense boundary, there
                // may not be work scheduled on `current`, so we check for this flag.
                (workInProgress2.flags & DidCapture) === NoFlags) {
                  didReceiveUpdate = false;
                  return attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2);
                }
                if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true;
                } else {
                  didReceiveUpdate = false;
                }
              }
            } else {
              didReceiveUpdate = false;
              if (getIsHydrating() && isForkedChild(workInProgress2)) {
                var slotIndex = workInProgress2.index;
                var numberOfForks = getForksAtLevel();
                pushTreeId(workInProgress2, numberOfForks, slotIndex);
              }
            }
            workInProgress2.lanes = NoLanes;
            switch (workInProgress2.tag) {
              case IndeterminateComponent: {
                return mountIndeterminateComponent(current2, workInProgress2, workInProgress2.type, renderLanes2);
              }
              case LazyComponent: {
                var elementType = workInProgress2.elementType;
                return mountLazyComponent(current2, workInProgress2, elementType, renderLanes2);
              }
              case FunctionComponent: {
                var Component20 = workInProgress2.type;
                var unresolvedProps = workInProgress2.pendingProps;
                var resolvedProps = workInProgress2.elementType === Component20 ? unresolvedProps : resolveDefaultProps(Component20, unresolvedProps);
                return updateFunctionComponent(current2, workInProgress2, Component20, resolvedProps, renderLanes2);
              }
              case ClassComponent: {
                var _Component = workInProgress2.type;
                var _unresolvedProps = workInProgress2.pendingProps;
                var _resolvedProps = workInProgress2.elementType === _Component ? _unresolvedProps : resolveDefaultProps(_Component, _unresolvedProps);
                return updateClassComponent(current2, workInProgress2, _Component, _resolvedProps, renderLanes2);
              }
              case HostRoot:
                return updateHostRoot(current2, workInProgress2, renderLanes2);
              case HostComponent:
                return updateHostComponent(current2, workInProgress2, renderLanes2);
              case HostText:
                return updateHostText(current2, workInProgress2);
              case SuspenseComponent:
                return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
              case HostPortal:
                return updatePortalComponent(current2, workInProgress2, renderLanes2);
              case ForwardRef: {
                var type = workInProgress2.type;
                var _unresolvedProps2 = workInProgress2.pendingProps;
                var _resolvedProps2 = workInProgress2.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
                return updateForwardRef(current2, workInProgress2, type, _resolvedProps2, renderLanes2);
              }
              case Fragment27:
                return updateFragment(current2, workInProgress2, renderLanes2);
              case Mode:
                return updateMode(current2, workInProgress2, renderLanes2);
              case Profiler:
                return updateProfiler(current2, workInProgress2, renderLanes2);
              case ContextProvider:
                return updateContextProvider(current2, workInProgress2, renderLanes2);
              case ContextConsumer:
                return updateContextConsumer(current2, workInProgress2, renderLanes2);
              case MemoComponent: {
                var _type2 = workInProgress2.type;
                var _unresolvedProps3 = workInProgress2.pendingProps;
                var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = _type2.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(
                        outerPropTypes,
                        _resolvedProps3,
                        // Resolved for outer only
                        "prop",
                        getComponentNameFromType(_type2)
                      );
                    }
                  }
                }
                _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
                return updateMemoComponent(current2, workInProgress2, _type2, _resolvedProps3, renderLanes2);
              }
              case SimpleMemoComponent: {
                return updateSimpleMemoComponent(current2, workInProgress2, workInProgress2.type, workInProgress2.pendingProps, renderLanes2);
              }
              case IncompleteClassComponent: {
                var _Component2 = workInProgress2.type;
                var _unresolvedProps4 = workInProgress2.pendingProps;
                var _resolvedProps4 = workInProgress2.elementType === _Component2 ? _unresolvedProps4 : resolveDefaultProps(_Component2, _unresolvedProps4);
                return mountIncompleteClassComponent(current2, workInProgress2, _Component2, _resolvedProps4, renderLanes2);
              }
              case SuspenseListComponent: {
                return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
              }
              case ScopeComponent: {
                break;
              }
              case OffscreenComponent: {
                return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
              }
            }
            throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
          }
          function markUpdate(workInProgress2) {
            workInProgress2.flags |= Update;
          }
          function markRef$1(workInProgress2) {
            workInProgress2.flags |= Ref3;
            {
              workInProgress2.flags |= RefStatic;
            }
          }
          var appendAllChildren;
          var updateHostContainer;
          var updateHostComponent$1;
          var updateHostText$1;
          {
            appendAllChildren = function(parent2, workInProgress2, needsVisibilityToggle, isHidden3) {
              var node = workInProgress2.child;
              while (node !== null) {
                if (node.tag === HostComponent || node.tag === HostText) {
                  appendInitialChild(parent2, node.stateNode);
                } else if (node.tag === HostPortal) ;
                else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === workInProgress2) {
                  return;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === workInProgress2) {
                    return;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            };
            updateHostContainer = function(current2, workInProgress2) {
            };
            updateHostComponent$1 = function(current2, workInProgress2, type, newProps, rootContainerInstance) {
              var oldProps = current2.memoizedProps;
              if (oldProps === newProps) {
                return;
              }
              var instance = workInProgress2.stateNode;
              var currentHostContext = getHostContext();
              var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
              workInProgress2.updateQueue = updatePayload;
              if (updatePayload) {
                markUpdate(workInProgress2);
              }
            };
            updateHostText$1 = function(current2, workInProgress2, oldText, newText) {
              if (oldText !== newText) {
                markUpdate(workInProgress2);
              }
            };
          }
          function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
            if (getIsHydrating()) {
              return;
            }
            switch (renderState.tailMode) {
              case "hidden": {
                var tailNode = renderState.tail;
                var lastTailNode = null;
                while (tailNode !== null) {
                  if (tailNode.alternate !== null) {
                    lastTailNode = tailNode;
                  }
                  tailNode = tailNode.sibling;
                }
                if (lastTailNode === null) {
                  renderState.tail = null;
                } else {
                  lastTailNode.sibling = null;
                }
                break;
              }
              case "collapsed": {
                var _tailNode = renderState.tail;
                var _lastTailNode = null;
                while (_tailNode !== null) {
                  if (_tailNode.alternate !== null) {
                    _lastTailNode = _tailNode;
                  }
                  _tailNode = _tailNode.sibling;
                }
                if (_lastTailNode === null) {
                  if (!hasRenderedATailFallback && renderState.tail !== null) {
                    renderState.tail.sibling = null;
                  } else {
                    renderState.tail = null;
                  }
                } else {
                  _lastTailNode.sibling = null;
                }
                break;
              }
            }
          }
          function bubbleProperties(completedWork) {
            var didBailout = completedWork.alternate !== null && completedWork.alternate.child === completedWork.child;
            var newChildLanes = NoLanes;
            var subtreeFlags = NoFlags;
            if (!didBailout) {
              if ((completedWork.mode & ProfileMode) !== NoMode) {
                var actualDuration = completedWork.actualDuration;
                var treeBaseDuration = completedWork.selfBaseDuration;
                var child = completedWork.child;
                while (child !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
                  subtreeFlags |= child.subtreeFlags;
                  subtreeFlags |= child.flags;
                  actualDuration += child.actualDuration;
                  treeBaseDuration += child.treeBaseDuration;
                  child = child.sibling;
                }
                completedWork.actualDuration = actualDuration;
                completedWork.treeBaseDuration = treeBaseDuration;
              } else {
                var _child = completedWork.child;
                while (_child !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
                  subtreeFlags |= _child.subtreeFlags;
                  subtreeFlags |= _child.flags;
                  _child.return = completedWork;
                  _child = _child.sibling;
                }
              }
              completedWork.subtreeFlags |= subtreeFlags;
            } else {
              if ((completedWork.mode & ProfileMode) !== NoMode) {
                var _treeBaseDuration = completedWork.selfBaseDuration;
                var _child2 = completedWork.child;
                while (_child2 !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child2.lanes, _child2.childLanes));
                  subtreeFlags |= _child2.subtreeFlags & StaticMask;
                  subtreeFlags |= _child2.flags & StaticMask;
                  _treeBaseDuration += _child2.treeBaseDuration;
                  _child2 = _child2.sibling;
                }
                completedWork.treeBaseDuration = _treeBaseDuration;
              } else {
                var _child3 = completedWork.child;
                while (_child3 !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child3.lanes, _child3.childLanes));
                  subtreeFlags |= _child3.subtreeFlags & StaticMask;
                  subtreeFlags |= _child3.flags & StaticMask;
                  _child3.return = completedWork;
                  _child3 = _child3.sibling;
                }
              }
              completedWork.subtreeFlags |= subtreeFlags;
            }
            completedWork.childLanes = newChildLanes;
            return didBailout;
          }
          function completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState) {
            if (hasUnhydratedTailNodes() && (workInProgress2.mode & ConcurrentMode) !== NoMode && (workInProgress2.flags & DidCapture) === NoFlags) {
              warnIfUnhydratedTailNodes(workInProgress2);
              resetHydrationState();
              workInProgress2.flags |= ForceClientRender | Incomplete | ShouldCapture;
              return false;
            }
            var wasHydrated = popHydrationState(workInProgress2);
            if (nextState !== null && nextState.dehydrated !== null) {
              if (current2 === null) {
                if (!wasHydrated) {
                  throw new Error("A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.");
                }
                prepareToHydrateHostSuspenseInstance(workInProgress2);
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    var isTimedOutSuspense = nextState !== null;
                    if (isTimedOutSuspense) {
                      var primaryChildFragment = workInProgress2.child;
                      if (primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return false;
              } else {
                resetHydrationState();
                if ((workInProgress2.flags & DidCapture) === NoFlags) {
                  workInProgress2.memoizedState = null;
                }
                workInProgress2.flags |= Update;
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    var _isTimedOutSuspense = nextState !== null;
                    if (_isTimedOutSuspense) {
                      var _primaryChildFragment = workInProgress2.child;
                      if (_primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= _primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return false;
              }
            } else {
              upgradeHydrationErrorsToRecoverable();
              return true;
            }
          }
          function completeWork(current2, workInProgress2, renderLanes2) {
            var newProps = workInProgress2.pendingProps;
            popTreeContext(workInProgress2);
            switch (workInProgress2.tag) {
              case IndeterminateComponent:
              case LazyComponent:
              case SimpleMemoComponent:
              case FunctionComponent:
              case ForwardRef:
              case Fragment27:
              case Mode:
              case Profiler:
              case ContextConsumer:
              case MemoComponent:
                bubbleProperties(workInProgress2);
                return null;
              case ClassComponent: {
                var Component20 = workInProgress2.type;
                if (isContextProvider(Component20)) {
                  popContext(workInProgress2);
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostRoot: {
                var fiberRoot = workInProgress2.stateNode;
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                if (fiberRoot.pendingContext) {
                  fiberRoot.context = fiberRoot.pendingContext;
                  fiberRoot.pendingContext = null;
                }
                if (current2 === null || current2.child === null) {
                  var wasHydrated = popHydrationState(workInProgress2);
                  if (wasHydrated) {
                    markUpdate(workInProgress2);
                  } else {
                    if (current2 !== null) {
                      var prevState = current2.memoizedState;
                      if (
                        // Check if this is a client root
                        !prevState.isDehydrated || // Check if we reverted to client rendering (e.g. due to an error)
                        (workInProgress2.flags & ForceClientRender) !== NoFlags
                      ) {
                        workInProgress2.flags |= Snapshot;
                        upgradeHydrationErrorsToRecoverable();
                      }
                    }
                  }
                }
                updateHostContainer(current2, workInProgress2);
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                var rootContainerInstance = getRootHostContainer();
                var type = workInProgress2.type;
                if (current2 !== null && workInProgress2.stateNode != null) {
                  updateHostComponent$1(current2, workInProgress2, type, newProps, rootContainerInstance);
                  if (current2.ref !== workInProgress2.ref) {
                    markRef$1(workInProgress2);
                  }
                } else {
                  if (!newProps) {
                    if (workInProgress2.stateNode === null) {
                      throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                    }
                    bubbleProperties(workInProgress2);
                    return null;
                  }
                  var currentHostContext = getHostContext();
                  var _wasHydrated = popHydrationState(workInProgress2);
                  if (_wasHydrated) {
                    if (prepareToHydrateHostInstance(workInProgress2, rootContainerInstance, currentHostContext)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress2);
                    appendAllChildren(instance, workInProgress2, false, false);
                    workInProgress2.stateNode = instance;
                    if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
                      markUpdate(workInProgress2);
                    }
                  }
                  if (workInProgress2.ref !== null) {
                    markRef$1(workInProgress2);
                  }
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostText: {
                var newText = newProps;
                if (current2 && workInProgress2.stateNode != null) {
                  var oldText = current2.memoizedProps;
                  updateHostText$1(current2, workInProgress2, oldText, newText);
                } else {
                  if (typeof newText !== "string") {
                    if (workInProgress2.stateNode === null) {
                      throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                    }
                  }
                  var _rootContainerInstance = getRootHostContainer();
                  var _currentHostContext = getHostContext();
                  var _wasHydrated2 = popHydrationState(workInProgress2);
                  if (_wasHydrated2) {
                    if (prepareToHydrateHostTextInstance(workInProgress2)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    workInProgress2.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress2);
                  }
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var nextState = workInProgress2.memoizedState;
                if (current2 === null || current2.memoizedState !== null && current2.memoizedState.dehydrated !== null) {
                  var fallthroughToNormalSuspensePath = completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState);
                  if (!fallthroughToNormalSuspensePath) {
                    if (workInProgress2.flags & ShouldCapture) {
                      return workInProgress2;
                    } else {
                      return null;
                    }
                  }
                }
                if ((workInProgress2.flags & DidCapture) !== NoFlags) {
                  workInProgress2.lanes = renderLanes2;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                var nextDidTimeout = nextState !== null;
                var prevDidTimeout = current2 !== null && current2.memoizedState !== null;
                if (nextDidTimeout !== prevDidTimeout) {
                  if (nextDidTimeout) {
                    var _offscreenFiber2 = workInProgress2.child;
                    _offscreenFiber2.flags |= Visibility2;
                    if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
                      var hasInvisibleChildContext = current2 === null && (workInProgress2.memoizedProps.unstable_avoidThisFallback !== true || !enableSuspenseAvoidThisFallback);
                      if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                        renderDidSuspend();
                      } else {
                        renderDidSuspendDelayIfPossible();
                      }
                    }
                  }
                }
                var wakeables = workInProgress2.updateQueue;
                if (wakeables !== null) {
                  workInProgress2.flags |= Update;
                }
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    if (nextDidTimeout) {
                      var primaryChildFragment = workInProgress2.child;
                      if (primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                updateHostContainer(current2, workInProgress2);
                if (current2 === null) {
                  preparePortalMount(workInProgress2.stateNode.containerInfo);
                }
                bubbleProperties(workInProgress2);
                return null;
              case ContextProvider:
                var context = workInProgress2.type._context;
                popProvider(context, workInProgress2);
                bubbleProperties(workInProgress2);
                return null;
              case IncompleteClassComponent: {
                var _Component = workInProgress2.type;
                if (isContextProvider(_Component)) {
                  popContext(workInProgress2);
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                var renderState = workInProgress2.memoizedState;
                if (renderState === null) {
                  bubbleProperties(workInProgress2);
                  return null;
                }
                var didSuspendAlready = (workInProgress2.flags & DidCapture) !== NoFlags;
                var renderedTail = renderState.rendering;
                if (renderedTail === null) {
                  if (!didSuspendAlready) {
                    var cannotBeSuspended = renderHasNotSuspendedYet() && (current2 === null || (current2.flags & DidCapture) === NoFlags);
                    if (!cannotBeSuspended) {
                      var row = workInProgress2.child;
                      while (row !== null) {
                        var suspended = findFirstSuspended(row);
                        if (suspended !== null) {
                          didSuspendAlready = true;
                          workInProgress2.flags |= DidCapture;
                          cutOffTailIfNeeded(renderState, false);
                          var newThenables = suspended.updateQueue;
                          if (newThenables !== null) {
                            workInProgress2.updateQueue = newThenables;
                            workInProgress2.flags |= Update;
                          }
                          workInProgress2.subtreeFlags = NoFlags;
                          resetChildFibers(workInProgress2, renderLanes2);
                          pushSuspenseContext(workInProgress2, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                          return workInProgress2.child;
                        }
                        row = row.sibling;
                      }
                    }
                    if (renderState.tail !== null && now() > getRenderTargetTime()) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                    }
                  } else {
                    cutOffTailIfNeeded(renderState, false);
                  }
                } else {
                  if (!didSuspendAlready) {
                    var _suspended = findFirstSuspended(renderedTail);
                    if (_suspended !== null) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      var _newThenables = _suspended.updateQueue;
                      if (_newThenables !== null) {
                        workInProgress2.updateQueue = _newThenables;
                        workInProgress2.flags |= Update;
                      }
                      cutOffTailIfNeeded(renderState, true);
                      if (renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate && !getIsHydrating()) {
                        bubbleProperties(workInProgress2);
                        return null;
                      }
                    } else if (
                      // The time it took to render last row is greater than the remaining
                      // time we have to render. So rendering one more row would likely
                      // exceed it.
                      now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes2 !== OffscreenLane
                    ) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                    }
                  }
                  if (renderState.isBackwards) {
                    renderedTail.sibling = workInProgress2.child;
                    workInProgress2.child = renderedTail;
                  } else {
                    var previousSibling = renderState.last;
                    if (previousSibling !== null) {
                      previousSibling.sibling = renderedTail;
                    } else {
                      workInProgress2.child = renderedTail;
                    }
                    renderState.last = renderedTail;
                  }
                }
                if (renderState.tail !== null) {
                  var next = renderState.tail;
                  renderState.rendering = next;
                  renderState.tail = next.sibling;
                  renderState.renderingStartTime = now();
                  next.sibling = null;
                  var suspenseContext = suspenseStackCursor.current;
                  if (didSuspendAlready) {
                    suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                  } else {
                    suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                  }
                  pushSuspenseContext(workInProgress2, suspenseContext);
                  return next;
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case ScopeComponent: {
                break;
              }
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                popRenderLanes(workInProgress2);
                var _nextState = workInProgress2.memoizedState;
                var nextIsHidden = _nextState !== null;
                if (current2 !== null) {
                  var _prevState = current2.memoizedState;
                  var prevIsHidden = _prevState !== null;
                  if (prevIsHidden !== nextIsHidden && // LegacyHidden doesn't do any hiding — it only pre-renders.
                  !enableLegacyHidden) {
                    workInProgress2.flags |= Visibility2;
                  }
                }
                if (!nextIsHidden || (workInProgress2.mode & ConcurrentMode) === NoMode) {
                  bubbleProperties(workInProgress2);
                } else {
                  if (includesSomeLane(subtreeRenderLanes, OffscreenLane)) {
                    bubbleProperties(workInProgress2);
                    {
                      if (workInProgress2.subtreeFlags & (Placement | Update)) {
                        workInProgress2.flags |= Visibility2;
                      }
                    }
                  }
                }
                return null;
              }
              case CacheComponent: {
                return null;
              }
              case TracingMarkerComponent: {
                return null;
              }
            }
            throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
          }
          function unwindWork(current2, workInProgress2, renderLanes2) {
            popTreeContext(workInProgress2);
            switch (workInProgress2.tag) {
              case ClassComponent: {
                var Component20 = workInProgress2.type;
                if (isContextProvider(Component20)) {
                  popContext(workInProgress2);
                }
                var flags = workInProgress2.flags;
                if (flags & ShouldCapture) {
                  workInProgress2.flags = flags & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
              case HostRoot: {
                var root2 = workInProgress2.stateNode;
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                var _flags = workInProgress2.flags;
                if ((_flags & ShouldCapture) !== NoFlags && (_flags & DidCapture) === NoFlags) {
                  workInProgress2.flags = _flags & ~ShouldCapture | DidCapture;
                  return workInProgress2;
                }
                return null;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var suspenseState = workInProgress2.memoizedState;
                if (suspenseState !== null && suspenseState.dehydrated !== null) {
                  if (workInProgress2.alternate === null) {
                    throw new Error("Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue.");
                  }
                  resetHydrationState();
                }
                var _flags2 = workInProgress2.flags;
                if (_flags2 & ShouldCapture) {
                  workInProgress2.flags = _flags2 & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                return null;
              case ContextProvider:
                var context = workInProgress2.type._context;
                popProvider(context, workInProgress2);
                return null;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(workInProgress2);
                return null;
              case CacheComponent:
                return null;
              default:
                return null;
            }
          }
          function unwindInterruptedWork(current2, interruptedWork, renderLanes2) {
            popTreeContext(interruptedWork);
            switch (interruptedWork.tag) {
              case ClassComponent: {
                var childContextTypes = interruptedWork.type.childContextTypes;
                if (childContextTypes !== null && childContextTypes !== void 0) {
                  popContext(interruptedWork);
                }
                break;
              }
              case HostRoot: {
                var root2 = interruptedWork.stateNode;
                popHostContainer(interruptedWork);
                popTopLevelContextObject(interruptedWork);
                resetWorkInProgressVersions();
                break;
              }
              case HostComponent: {
                popHostContext(interruptedWork);
                break;
              }
              case HostPortal:
                popHostContainer(interruptedWork);
                break;
              case SuspenseComponent:
                popSuspenseContext(interruptedWork);
                break;
              case SuspenseListComponent:
                popSuspenseContext(interruptedWork);
                break;
              case ContextProvider:
                var context = interruptedWork.type._context;
                popProvider(context, interruptedWork);
                break;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(interruptedWork);
                break;
            }
          }
          var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
          {
            didWarnAboutUndefinedSnapshotBeforeUpdate = /* @__PURE__ */ new Set();
          }
          var offscreenSubtreeIsHidden = false;
          var offscreenSubtreeWasHidden = false;
          var PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set;
          var nextEffect = null;
          var inProgressLanes = null;
          var inProgressRoot = null;
          function reportUncaughtErrorInDEV(error2) {
            {
              invokeGuardedCallback(null, function() {
                throw error2;
              });
              clearCaughtError();
            }
          }
          var callComponentWillUnmountWithTimer = function(current2, instance) {
            instance.props = current2.memoizedProps;
            instance.state = current2.memoizedState;
            if (current2.mode & ProfileMode) {
              try {
                startLayoutEffectTimer();
                instance.componentWillUnmount();
              } finally {
                recordLayoutEffectDuration(current2);
              }
            } else {
              instance.componentWillUnmount();
            }
          };
          function safelyCallCommitHookLayoutEffectListMount(current2, nearestMountedAncestor) {
            try {
              commitHookEffectListMount(Layout, current2);
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyCallComponentWillUnmount(current2, nearestMountedAncestor, instance) {
            try {
              callComponentWillUnmountWithTimer(current2, instance);
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyCallComponentDidMount(current2, nearestMountedAncestor, instance) {
            try {
              instance.componentDidMount();
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyAttachRef(current2, nearestMountedAncestor) {
            try {
              commitAttachRef(current2);
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyDetachRef(current2, nearestMountedAncestor) {
            var ref = current2.ref;
            if (ref !== null) {
              if (typeof ref === "function") {
                var retVal;
                try {
                  if (enableProfilerTimer && enableProfilerCommitHooks && current2.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      retVal = ref(null);
                    } finally {
                      recordLayoutEffectDuration(current2);
                    }
                  } else {
                    retVal = ref(null);
                  }
                } catch (error2) {
                  captureCommitPhaseError(current2, nearestMountedAncestor, error2);
                }
                {
                  if (typeof retVal === "function") {
                    error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(current2));
                  }
                }
              } else {
                ref.current = null;
              }
            }
          }
          function safelyCallDestroy(current2, nearestMountedAncestor, destroy) {
            try {
              destroy();
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          var focusedInstanceHandle = null;
          var shouldFireAfterActiveInstanceBlur = false;
          function commitBeforeMutationEffects(root2, firstChild) {
            focusedInstanceHandle = prepareForCommit(root2.containerInfo);
            nextEffect = firstChild;
            commitBeforeMutationEffects_begin();
            var shouldFire = shouldFireAfterActiveInstanceBlur;
            shouldFireAfterActiveInstanceBlur = false;
            focusedInstanceHandle = null;
            return shouldFire;
          }
          function commitBeforeMutationEffects_begin() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var child = fiber.child;
              if ((fiber.subtreeFlags & BeforeMutationMask) !== NoFlags && child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitBeforeMutationEffects_complete();
              }
            }
          }
          function commitBeforeMutationEffects_complete() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              try {
                commitBeforeMutationEffectsOnFiber(fiber);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              resetCurrentFiber();
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitBeforeMutationEffectsOnFiber(finishedWork) {
            var current2 = finishedWork.alternate;
            var flags = finishedWork.flags;
            if ((flags & Snapshot) !== NoFlags) {
              setCurrentFiber(finishedWork);
              switch (finishedWork.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  break;
                }
                case ClassComponent: {
                  if (current2 !== null) {
                    var prevProps = current2.memoizedProps;
                    var prevState = current2.memoizedState;
                    var instance = finishedWork.stateNode;
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                      }
                    }
                    var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                    {
                      var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                      if (snapshot === void 0 && !didWarnSet.has(finishedWork.type)) {
                        didWarnSet.add(finishedWork.type);
                        error("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentNameFromFiber(finishedWork));
                      }
                    }
                    instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                  }
                  break;
                }
                case HostRoot: {
                  {
                    var root2 = finishedWork.stateNode;
                    clearContainer(root2.containerInfo);
                  }
                  break;
                }
                case HostComponent:
                case HostText:
                case HostPortal:
                case IncompleteClassComponent:
                  break;
                default: {
                  throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              resetCurrentFiber();
            }
          }
          function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect7 = firstEffect;
              do {
                if ((effect7.tag & flags) === flags) {
                  var destroy = effect7.destroy;
                  effect7.destroy = void 0;
                  if (destroy !== void 0) {
                    {
                      if ((flags & Passive$1) !== NoFlags$1) {
                        markComponentPassiveEffectUnmountStarted(finishedWork);
                      } else if ((flags & Layout) !== NoFlags$1) {
                        markComponentLayoutEffectUnmountStarted(finishedWork);
                      }
                    }
                    {
                      if ((flags & Insertion) !== NoFlags$1) {
                        setIsRunningInsertionEffect(true);
                      }
                    }
                    safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);
                    {
                      if ((flags & Insertion) !== NoFlags$1) {
                        setIsRunningInsertionEffect(false);
                      }
                    }
                    {
                      if ((flags & Passive$1) !== NoFlags$1) {
                        markComponentPassiveEffectUnmountStopped();
                      } else if ((flags & Layout) !== NoFlags$1) {
                        markComponentLayoutEffectUnmountStopped();
                      }
                    }
                  }
                }
                effect7 = effect7.next;
              } while (effect7 !== firstEffect);
            }
          }
          function commitHookEffectListMount(flags, finishedWork) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect7 = firstEffect;
              do {
                if ((effect7.tag & flags) === flags) {
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectMountStarted(finishedWork);
                    } else if ((flags & Layout) !== NoFlags$1) {
                      markComponentLayoutEffectMountStarted(finishedWork);
                    }
                  }
                  var create = effect7.create;
                  {
                    if ((flags & Insertion) !== NoFlags$1) {
                      setIsRunningInsertionEffect(true);
                    }
                  }
                  effect7.destroy = create();
                  {
                    if ((flags & Insertion) !== NoFlags$1) {
                      setIsRunningInsertionEffect(false);
                    }
                  }
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectMountStopped();
                    } else if ((flags & Layout) !== NoFlags$1) {
                      markComponentLayoutEffectMountStopped();
                    }
                  }
                  {
                    var destroy = effect7.destroy;
                    if (destroy !== void 0 && typeof destroy !== "function") {
                      var hookName = void 0;
                      if ((effect7.tag & Layout) !== NoFlags) {
                        hookName = "useLayoutEffect";
                      } else if ((effect7.tag & Insertion) !== NoFlags) {
                        hookName = "useInsertionEffect";
                      } else {
                        hookName = "useEffect";
                      }
                      var addendum = void 0;
                      if (destroy === null) {
                        addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                      } else if (typeof destroy.then === "function") {
                        addendum = "\n\nIt looks like you wrote " + hookName + "(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\n" + hookName + "(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching";
                      } else {
                        addendum = " You returned: " + destroy;
                      }
                      error("%s must not return anything besides a function, which is used for clean-up.%s", hookName, addendum);
                    }
                  }
                }
                effect7 = effect7.next;
              } while (effect7 !== firstEffect);
            }
          }
          function commitPassiveEffectDurations(finishedRoot, finishedWork) {
            {
              if ((finishedWork.flags & Update) !== NoFlags) {
                switch (finishedWork.tag) {
                  case Profiler: {
                    var passiveEffectDuration = finishedWork.stateNode.passiveEffectDuration;
                    var _finishedWork$memoize = finishedWork.memoizedProps, id = _finishedWork$memoize.id, onPostCommit = _finishedWork$memoize.onPostCommit;
                    var commitTime2 = getCommitTime();
                    var phase = finishedWork.alternate === null ? "mount" : "update";
                    {
                      if (isCurrentUpdateNested()) {
                        phase = "nested-update";
                      }
                    }
                    if (typeof onPostCommit === "function") {
                      onPostCommit(id, phase, passiveEffectDuration, commitTime2);
                    }
                    var parentFiber = finishedWork.return;
                    outer: while (parentFiber !== null) {
                      switch (parentFiber.tag) {
                        case HostRoot:
                          var root2 = parentFiber.stateNode;
                          root2.passiveEffectDuration += passiveEffectDuration;
                          break outer;
                        case Profiler:
                          var parentStateNode = parentFiber.stateNode;
                          parentStateNode.passiveEffectDuration += passiveEffectDuration;
                          break outer;
                      }
                      parentFiber = parentFiber.return;
                    }
                    break;
                  }
                }
              }
            }
          }
          function commitLayoutEffectOnFiber(finishedRoot, current2, finishedWork, committedLanes) {
            if ((finishedWork.flags & LayoutMask) !== NoFlags) {
              switch (finishedWork.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  if (!offscreenSubtreeWasHidden) {
                    if (finishedWork.mode & ProfileMode) {
                      try {
                        startLayoutEffectTimer();
                        commitHookEffectListMount(Layout | HasEffect, finishedWork);
                      } finally {
                        recordLayoutEffectDuration(finishedWork);
                      }
                    } else {
                      commitHookEffectListMount(Layout | HasEffect, finishedWork);
                    }
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = finishedWork.stateNode;
                  if (finishedWork.flags & Update) {
                    if (!offscreenSubtreeWasHidden) {
                      if (current2 === null) {
                        {
                          if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) {
                              error("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                            if (instance.state !== finishedWork.memoizedState) {
                              error("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                          }
                        }
                        if (finishedWork.mode & ProfileMode) {
                          try {
                            startLayoutEffectTimer();
                            instance.componentDidMount();
                          } finally {
                            recordLayoutEffectDuration(finishedWork);
                          }
                        } else {
                          instance.componentDidMount();
                        }
                      } else {
                        var prevProps = finishedWork.elementType === finishedWork.type ? current2.memoizedProps : resolveDefaultProps(finishedWork.type, current2.memoizedProps);
                        var prevState = current2.memoizedState;
                        {
                          if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) {
                              error("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                            if (instance.state !== finishedWork.memoizedState) {
                              error("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                          }
                        }
                        if (finishedWork.mode & ProfileMode) {
                          try {
                            startLayoutEffectTimer();
                            instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                          } finally {
                            recordLayoutEffectDuration(finishedWork);
                          }
                        } else {
                          instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                        }
                      }
                    }
                  }
                  var updateQueue = finishedWork.updateQueue;
                  if (updateQueue !== null) {
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                      }
                    }
                    commitUpdateQueue(finishedWork, updateQueue, instance);
                  }
                  break;
                }
                case HostRoot: {
                  var _updateQueue = finishedWork.updateQueue;
                  if (_updateQueue !== null) {
                    var _instance = null;
                    if (finishedWork.child !== null) {
                      switch (finishedWork.child.tag) {
                        case HostComponent:
                          _instance = getPublicInstance(finishedWork.child.stateNode);
                          break;
                        case ClassComponent:
                          _instance = finishedWork.child.stateNode;
                          break;
                      }
                    }
                    commitUpdateQueue(finishedWork, _updateQueue, _instance);
                  }
                  break;
                }
                case HostComponent: {
                  var _instance2 = finishedWork.stateNode;
                  if (current2 === null && finishedWork.flags & Update) {
                    var type = finishedWork.type;
                    var props = finishedWork.memoizedProps;
                    commitMount(_instance2, type, props);
                  }
                  break;
                }
                case HostText: {
                  break;
                }
                case HostPortal: {
                  break;
                }
                case Profiler: {
                  {
                    var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender;
                    var effectDuration = finishedWork.stateNode.effectDuration;
                    var commitTime2 = getCommitTime();
                    var phase = current2 === null ? "mount" : "update";
                    {
                      if (isCurrentUpdateNested()) {
                        phase = "nested-update";
                      }
                    }
                    if (typeof onRender === "function") {
                      onRender(finishedWork.memoizedProps.id, phase, finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime2);
                    }
                    {
                      if (typeof onCommit === "function") {
                        onCommit(finishedWork.memoizedProps.id, phase, effectDuration, commitTime2);
                      }
                      enqueuePendingPassiveProfilerEffect(finishedWork);
                      var parentFiber = finishedWork.return;
                      outer: while (parentFiber !== null) {
                        switch (parentFiber.tag) {
                          case HostRoot:
                            var root2 = parentFiber.stateNode;
                            root2.effectDuration += effectDuration;
                            break outer;
                          case Profiler:
                            var parentStateNode = parentFiber.stateNode;
                            parentStateNode.effectDuration += effectDuration;
                            break outer;
                        }
                        parentFiber = parentFiber.return;
                      }
                    }
                  }
                  break;
                }
                case SuspenseComponent: {
                  commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
                  break;
                }
                case SuspenseListComponent:
                case IncompleteClassComponent:
                case ScopeComponent:
                case OffscreenComponent:
                case LegacyHiddenComponent:
                case TracingMarkerComponent: {
                  break;
                }
                default:
                  throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            if (!offscreenSubtreeWasHidden) {
              {
                if (finishedWork.flags & Ref3) {
                  commitAttachRef(finishedWork);
                }
              }
            }
          }
          function reappearLayoutEffectsOnFiber(node) {
            switch (node.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (node.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    safelyCallCommitHookLayoutEffectListMount(node, node.return);
                  } finally {
                    recordLayoutEffectDuration(node);
                  }
                } else {
                  safelyCallCommitHookLayoutEffectListMount(node, node.return);
                }
                break;
              }
              case ClassComponent: {
                var instance = node.stateNode;
                if (typeof instance.componentDidMount === "function") {
                  safelyCallComponentDidMount(node, node.return, instance);
                }
                safelyAttachRef(node, node.return);
                break;
              }
              case HostComponent: {
                safelyAttachRef(node, node.return);
                break;
              }
            }
          }
          function hideOrUnhideAllChildren(finishedWork, isHidden3) {
            var hostSubtreeRoot = null;
            {
              var node = finishedWork;
              while (true) {
                if (node.tag === HostComponent) {
                  if (hostSubtreeRoot === null) {
                    hostSubtreeRoot = node;
                    try {
                      var instance = node.stateNode;
                      if (isHidden3) {
                        hideInstance(instance);
                      } else {
                        unhideInstance(node.stateNode, node.memoizedProps);
                      }
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                } else if (node.tag === HostText) {
                  if (hostSubtreeRoot === null) {
                    try {
                      var _instance3 = node.stateNode;
                      if (isHidden3) {
                        hideTextInstance(_instance3);
                      } else {
                        unhideTextInstance(_instance3, node.memoizedProps);
                      }
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork) ;
                else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === finishedWork) {
                  return;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === finishedWork) {
                    return;
                  }
                  if (hostSubtreeRoot === node) {
                    hostSubtreeRoot = null;
                  }
                  node = node.return;
                }
                if (hostSubtreeRoot === node) {
                  hostSubtreeRoot = null;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            }
          }
          function commitAttachRef(finishedWork) {
            var ref = finishedWork.ref;
            if (ref !== null) {
              var instance = finishedWork.stateNode;
              var instanceToUse;
              switch (finishedWork.tag) {
                case HostComponent:
                  instanceToUse = getPublicInstance(instance);
                  break;
                default:
                  instanceToUse = instance;
              }
              if (typeof ref === "function") {
                var retVal;
                if (finishedWork.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    retVal = ref(instanceToUse);
                  } finally {
                    recordLayoutEffectDuration(finishedWork);
                  }
                } else {
                  retVal = ref(instanceToUse);
                }
                {
                  if (typeof retVal === "function") {
                    error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(finishedWork));
                  }
                }
              } else {
                {
                  if (!ref.hasOwnProperty("current")) {
                    error("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentNameFromFiber(finishedWork));
                  }
                }
                ref.current = instanceToUse;
              }
            }
          }
          function detachFiberMutation(fiber) {
            var alternate = fiber.alternate;
            if (alternate !== null) {
              alternate.return = null;
            }
            fiber.return = null;
          }
          function detachFiberAfterEffects(fiber) {
            var alternate = fiber.alternate;
            if (alternate !== null) {
              fiber.alternate = null;
              detachFiberAfterEffects(alternate);
            }
            {
              fiber.child = null;
              fiber.deletions = null;
              fiber.sibling = null;
              if (fiber.tag === HostComponent) {
                var hostInstance = fiber.stateNode;
                if (hostInstance !== null) {
                  detachDeletedInstance(hostInstance);
                }
              }
              fiber.stateNode = null;
              {
                fiber._debugOwner = null;
              }
              {
                fiber.return = null;
                fiber.dependencies = null;
                fiber.memoizedProps = null;
                fiber.memoizedState = null;
                fiber.pendingProps = null;
                fiber.stateNode = null;
                fiber.updateQueue = null;
              }
            }
          }
          function getHostParentFiber(fiber) {
            var parent2 = fiber.return;
            while (parent2 !== null) {
              if (isHostParent(parent2)) {
                return parent2;
              }
              parent2 = parent2.return;
            }
            throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
          }
          function isHostParent(fiber) {
            return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
          }
          function getHostSibling(fiber) {
            var node = fiber;
            siblings: while (true) {
              while (node.sibling === null) {
                if (node.return === null || isHostParent(node.return)) {
                  return null;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
              while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {
                if (node.flags & Placement) {
                  continue siblings;
                }
                if (node.child === null || node.tag === HostPortal) {
                  continue siblings;
                } else {
                  node.child.return = node;
                  node = node.child;
                }
              }
              if (!(node.flags & Placement)) {
                return node.stateNode;
              }
            }
          }
          function commitPlacement(finishedWork) {
            var parentFiber = getHostParentFiber(finishedWork);
            switch (parentFiber.tag) {
              case HostComponent: {
                var parent2 = parentFiber.stateNode;
                if (parentFiber.flags & ContentReset) {
                  resetTextContent(parent2);
                  parentFiber.flags &= ~ContentReset;
                }
                var before = getHostSibling(finishedWork);
                insertOrAppendPlacementNode(finishedWork, before, parent2);
                break;
              }
              case HostRoot:
              case HostPortal: {
                var _parent = parentFiber.stateNode.containerInfo;
                var _before = getHostSibling(finishedWork);
                insertOrAppendPlacementNodeIntoContainer(finishedWork, _before, _parent);
                break;
              }
              // eslint-disable-next-line-no-fallthrough
              default:
                throw new Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          function insertOrAppendPlacementNodeIntoContainer(node, before, parent2) {
            var tag = node.tag;
            var isHost = tag === HostComponent || tag === HostText;
            if (isHost) {
              var stateNode = node.stateNode;
              if (before) {
                insertInContainerBefore(parent2, stateNode, before);
              } else {
                appendChildToContainer(parent2, stateNode);
              }
            } else if (tag === HostPortal) ;
            else {
              var child = node.child;
              if (child !== null) {
                insertOrAppendPlacementNodeIntoContainer(child, before, parent2);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNodeIntoContainer(sibling, before, parent2);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          function insertOrAppendPlacementNode(node, before, parent2) {
            var tag = node.tag;
            var isHost = tag === HostComponent || tag === HostText;
            if (isHost) {
              var stateNode = node.stateNode;
              if (before) {
                insertBefore(parent2, stateNode, before);
              } else {
                appendChild(parent2, stateNode);
              }
            } else if (tag === HostPortal) ;
            else {
              var child = node.child;
              if (child !== null) {
                insertOrAppendPlacementNode(child, before, parent2);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNode(sibling, before, parent2);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          var hostParent = null;
          var hostParentIsContainer = false;
          function commitDeletionEffects(root2, returnFiber, deletedFiber) {
            {
              var parent2 = returnFiber;
              findParent: while (parent2 !== null) {
                switch (parent2.tag) {
                  case HostComponent: {
                    hostParent = parent2.stateNode;
                    hostParentIsContainer = false;
                    break findParent;
                  }
                  case HostRoot: {
                    hostParent = parent2.stateNode.containerInfo;
                    hostParentIsContainer = true;
                    break findParent;
                  }
                  case HostPortal: {
                    hostParent = parent2.stateNode.containerInfo;
                    hostParentIsContainer = true;
                    break findParent;
                  }
                }
                parent2 = parent2.return;
              }
              if (hostParent === null) {
                throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
              }
              commitDeletionEffectsOnFiber(root2, returnFiber, deletedFiber);
              hostParent = null;
              hostParentIsContainer = false;
            }
            detachFiberMutation(deletedFiber);
          }
          function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent2) {
            var child = parent2.child;
            while (child !== null) {
              commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, child);
              child = child.sibling;
            }
          }
          function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {
            onCommitUnmount(deletedFiber);
            switch (deletedFiber.tag) {
              case HostComponent: {
                if (!offscreenSubtreeWasHidden) {
                  safelyDetachRef(deletedFiber, nearestMountedAncestor);
                }
              }
              // eslint-disable-next-line-no-fallthrough
              case HostText: {
                {
                  var prevHostParent = hostParent;
                  var prevHostParentIsContainer = hostParentIsContainer;
                  hostParent = null;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  hostParent = prevHostParent;
                  hostParentIsContainer = prevHostParentIsContainer;
                  if (hostParent !== null) {
                    if (hostParentIsContainer) {
                      removeChildFromContainer(hostParent, deletedFiber.stateNode);
                    } else {
                      removeChild(hostParent, deletedFiber.stateNode);
                    }
                  }
                }
                return;
              }
              case DehydratedFragment: {
                {
                  if (hostParent !== null) {
                    if (hostParentIsContainer) {
                      clearSuspenseBoundaryFromContainer(hostParent, deletedFiber.stateNode);
                    } else {
                      clearSuspenseBoundary(hostParent, deletedFiber.stateNode);
                    }
                  }
                }
                return;
              }
              case HostPortal: {
                {
                  var _prevHostParent = hostParent;
                  var _prevHostParentIsContainer = hostParentIsContainer;
                  hostParent = deletedFiber.stateNode.containerInfo;
                  hostParentIsContainer = true;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  hostParent = _prevHostParent;
                  hostParentIsContainer = _prevHostParentIsContainer;
                }
                return;
              }
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent: {
                if (!offscreenSubtreeWasHidden) {
                  var updateQueue = deletedFiber.updateQueue;
                  if (updateQueue !== null) {
                    var lastEffect = updateQueue.lastEffect;
                    if (lastEffect !== null) {
                      var firstEffect = lastEffect.next;
                      var effect7 = firstEffect;
                      do {
                        var _effect = effect7, destroy = _effect.destroy, tag = _effect.tag;
                        if (destroy !== void 0) {
                          if ((tag & Insertion) !== NoFlags$1) {
                            safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                          } else if ((tag & Layout) !== NoFlags$1) {
                            {
                              markComponentLayoutEffectUnmountStarted(deletedFiber);
                            }
                            if (deletedFiber.mode & ProfileMode) {
                              startLayoutEffectTimer();
                              safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                              recordLayoutEffectDuration(deletedFiber);
                            } else {
                              safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                            }
                            {
                              markComponentLayoutEffectUnmountStopped();
                            }
                          }
                        }
                        effect7 = effect7.next;
                      } while (effect7 !== firstEffect);
                    }
                  }
                }
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case ClassComponent: {
                if (!offscreenSubtreeWasHidden) {
                  safelyDetachRef(deletedFiber, nearestMountedAncestor);
                  var instance = deletedFiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(deletedFiber, nearestMountedAncestor, instance);
                  }
                }
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case ScopeComponent: {
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case OffscreenComponent: {
                if (
                  // TODO: Remove this dead flag
                  deletedFiber.mode & ConcurrentMode
                ) {
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || deletedFiber.memoizedState !== null;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                } else {
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                }
                break;
              }
              default: {
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
            }
          }
          function commitSuspenseCallback(finishedWork) {
            var newState = finishedWork.memoizedState;
          }
          function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
            var newState = finishedWork.memoizedState;
            if (newState === null) {
              var current2 = finishedWork.alternate;
              if (current2 !== null) {
                var prevState = current2.memoizedState;
                if (prevState !== null) {
                  var suspenseInstance = prevState.dehydrated;
                  if (suspenseInstance !== null) {
                    commitHydratedSuspenseInstance(suspenseInstance);
                  }
                }
              }
            }
          }
          function attachSuspenseRetryListeners(finishedWork) {
            var wakeables = finishedWork.updateQueue;
            if (wakeables !== null) {
              finishedWork.updateQueue = null;
              var retryCache = finishedWork.stateNode;
              if (retryCache === null) {
                retryCache = finishedWork.stateNode = new PossiblyWeakSet();
              }
              wakeables.forEach(function(wakeable) {
                var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
                if (!retryCache.has(wakeable)) {
                  retryCache.add(wakeable);
                  {
                    if (isDevToolsPresent) {
                      if (inProgressLanes !== null && inProgressRoot !== null) {
                        restorePendingUpdaters(inProgressRoot, inProgressLanes);
                      } else {
                        throw Error("Expected finished root and lanes to be set. This is a bug in React.");
                      }
                    }
                  }
                  wakeable.then(retry, retry);
                }
              });
            }
          }
          function commitMutationEffects(root2, finishedWork, committedLanes) {
            inProgressLanes = committedLanes;
            inProgressRoot = root2;
            setCurrentFiber(finishedWork);
            commitMutationEffectsOnFiber(finishedWork, root2);
            setCurrentFiber(finishedWork);
            inProgressLanes = null;
            inProgressRoot = null;
          }
          function recursivelyTraverseMutationEffects(root2, parentFiber, lanes) {
            var deletions = parentFiber.deletions;
            if (deletions !== null) {
              for (var i = 0; i < deletions.length; i++) {
                var childToDelete = deletions[i];
                try {
                  commitDeletionEffects(root2, parentFiber, childToDelete);
                } catch (error2) {
                  captureCommitPhaseError(childToDelete, parentFiber, error2);
                }
              }
            }
            var prevDebugFiber = getCurrentFiber();
            if (parentFiber.subtreeFlags & MutationMask) {
              var child = parentFiber.child;
              while (child !== null) {
                setCurrentFiber(child);
                commitMutationEffectsOnFiber(child, root2);
                child = child.sibling;
              }
            }
            setCurrentFiber(prevDebugFiber);
          }
          function commitMutationEffectsOnFiber(finishedWork, root2, lanes) {
            var current2 = finishedWork.alternate;
            var flags = finishedWork.flags;
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  try {
                    commitHookEffectListUnmount(Insertion | HasEffect, finishedWork, finishedWork.return);
                    commitHookEffectListMount(Insertion | HasEffect, finishedWork);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                  if (finishedWork.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                    recordLayoutEffectDuration(finishedWork);
                  } else {
                    try {
                      commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                }
                return;
              }
              case ClassComponent: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Ref3) {
                  if (current2 !== null) {
                    safelyDetachRef(current2, current2.return);
                  }
                }
                return;
              }
              case HostComponent: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Ref3) {
                  if (current2 !== null) {
                    safelyDetachRef(current2, current2.return);
                  }
                }
                {
                  if (finishedWork.flags & ContentReset) {
                    var instance = finishedWork.stateNode;
                    try {
                      resetTextContent(instance);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                  if (flags & Update) {
                    var _instance4 = finishedWork.stateNode;
                    if (_instance4 != null) {
                      var newProps = finishedWork.memoizedProps;
                      var oldProps = current2 !== null ? current2.memoizedProps : newProps;
                      var type = finishedWork.type;
                      var updatePayload = finishedWork.updateQueue;
                      finishedWork.updateQueue = null;
                      if (updatePayload !== null) {
                        try {
                          commitUpdate(_instance4, updatePayload, type, oldProps, newProps, finishedWork);
                        } catch (error2) {
                          captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                        }
                      }
                    }
                  }
                }
                return;
              }
              case HostText: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  {
                    if (finishedWork.stateNode === null) {
                      throw new Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                    }
                    var textInstance = finishedWork.stateNode;
                    var newText = finishedWork.memoizedProps;
                    var oldText = current2 !== null ? current2.memoizedProps : newText;
                    try {
                      commitTextUpdate(textInstance, oldText, newText);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                }
                return;
              }
              case HostRoot: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  {
                    if (current2 !== null) {
                      var prevRootState = current2.memoizedState;
                      if (prevRootState.isDehydrated) {
                        try {
                          commitHydratedContainer(root2.containerInfo);
                        } catch (error2) {
                          captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                        }
                      }
                    }
                  }
                }
                return;
              }
              case HostPortal: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                return;
              }
              case SuspenseComponent: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                var offscreenFiber = finishedWork.child;
                if (offscreenFiber.flags & Visibility2) {
                  var offscreenInstance = offscreenFiber.stateNode;
                  var newState = offscreenFiber.memoizedState;
                  var isHidden3 = newState !== null;
                  offscreenInstance.isHidden = isHidden3;
                  if (isHidden3) {
                    var wasHidden = offscreenFiber.alternate !== null && offscreenFiber.alternate.memoizedState !== null;
                    if (!wasHidden) {
                      markCommitTimeOfFallback();
                    }
                  }
                }
                if (flags & Update) {
                  try {
                    commitSuspenseCallback(finishedWork);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                  attachSuspenseRetryListeners(finishedWork);
                }
                return;
              }
              case OffscreenComponent: {
                var _wasHidden = current2 !== null && current2.memoizedState !== null;
                if (
                  // TODO: Remove this dead flag
                  finishedWork.mode & ConcurrentMode
                ) {
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || _wasHidden;
                  recursivelyTraverseMutationEffects(root2, finishedWork);
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                } else {
                  recursivelyTraverseMutationEffects(root2, finishedWork);
                }
                commitReconciliationEffects(finishedWork);
                if (flags & Visibility2) {
                  var _offscreenInstance = finishedWork.stateNode;
                  var _newState = finishedWork.memoizedState;
                  var _isHidden = _newState !== null;
                  var offscreenBoundary = finishedWork;
                  _offscreenInstance.isHidden = _isHidden;
                  {
                    if (_isHidden) {
                      if (!_wasHidden) {
                        if ((offscreenBoundary.mode & ConcurrentMode) !== NoMode) {
                          nextEffect = offscreenBoundary;
                          var offscreenChild = offscreenBoundary.child;
                          while (offscreenChild !== null) {
                            nextEffect = offscreenChild;
                            disappearLayoutEffects_begin(offscreenChild);
                            offscreenChild = offscreenChild.sibling;
                          }
                        }
                      }
                    }
                  }
                  {
                    hideOrUnhideAllChildren(offscreenBoundary, _isHidden);
                  }
                }
                return;
              }
              case SuspenseListComponent: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  attachSuspenseRetryListeners(finishedWork);
                }
                return;
              }
              case ScopeComponent: {
                return;
              }
              default: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                return;
              }
            }
          }
          function commitReconciliationEffects(finishedWork) {
            var flags = finishedWork.flags;
            if (flags & Placement) {
              try {
                commitPlacement(finishedWork);
              } catch (error2) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error2);
              }
              finishedWork.flags &= ~Placement;
            }
            if (flags & Hydrating) {
              finishedWork.flags &= ~Hydrating;
            }
          }
          function commitLayoutEffects(finishedWork, root2, committedLanes) {
            inProgressLanes = committedLanes;
            inProgressRoot = root2;
            nextEffect = finishedWork;
            commitLayoutEffects_begin(finishedWork, root2, committedLanes);
            inProgressLanes = null;
            inProgressRoot = null;
          }
          function commitLayoutEffects_begin(subtreeRoot, root2, committedLanes) {
            var isModernRoot = (subtreeRoot.mode & ConcurrentMode) !== NoMode;
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if (fiber.tag === OffscreenComponent && isModernRoot) {
                var isHidden3 = fiber.memoizedState !== null;
                var newOffscreenSubtreeIsHidden = isHidden3 || offscreenSubtreeIsHidden;
                if (newOffscreenSubtreeIsHidden) {
                  commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
                  continue;
                } else {
                  var current2 = fiber.alternate;
                  var wasHidden = current2 !== null && current2.memoizedState !== null;
                  var newOffscreenSubtreeWasHidden = wasHidden || offscreenSubtreeWasHidden;
                  var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;
                  offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden;
                  if (offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden) {
                    nextEffect = fiber;
                    reappearLayoutEffects_begin(fiber);
                  }
                  var child = firstChild;
                  while (child !== null) {
                    nextEffect = child;
                    commitLayoutEffects_begin(
                      child,
                      // New root; bubble back up to here and stop.
                      root2,
                      committedLanes
                    );
                    child = child.sibling;
                  }
                  nextEffect = fiber;
                  offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                  commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
                  continue;
                }
              }
              if ((fiber.subtreeFlags & LayoutMask) !== NoFlags && firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
              }
            }
          }
          function commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & LayoutMask) !== NoFlags) {
                var current2 = fiber.alternate;
                setCurrentFiber(fiber);
                try {
                  commitLayoutEffectOnFiber(root2, current2, fiber, committedLanes);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                resetCurrentFiber();
              }
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function disappearLayoutEffects_begin(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case MemoComponent:
                case SimpleMemoComponent: {
                  if (fiber.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      commitHookEffectListUnmount(Layout, fiber, fiber.return);
                    } finally {
                      recordLayoutEffectDuration(fiber);
                    }
                  } else {
                    commitHookEffectListUnmount(Layout, fiber, fiber.return);
                  }
                  break;
                }
                case ClassComponent: {
                  safelyDetachRef(fiber, fiber.return);
                  var instance = fiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                  }
                  break;
                }
                case HostComponent: {
                  safelyDetachRef(fiber, fiber.return);
                  break;
                }
                case OffscreenComponent: {
                  var isHidden3 = fiber.memoizedState !== null;
                  if (isHidden3) {
                    disappearLayoutEffects_complete(subtreeRoot);
                    continue;
                  }
                  break;
                }
              }
              if (firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                disappearLayoutEffects_complete(subtreeRoot);
              }
            }
          }
          function disappearLayoutEffects_complete(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function reappearLayoutEffects_begin(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if (fiber.tag === OffscreenComponent) {
                var isHidden3 = fiber.memoizedState !== null;
                if (isHidden3) {
                  reappearLayoutEffects_complete(subtreeRoot);
                  continue;
                }
              }
              if (firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                reappearLayoutEffects_complete(subtreeRoot);
              }
            }
          }
          function reappearLayoutEffects_complete(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              try {
                reappearLayoutEffectsOnFiber(fiber);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              resetCurrentFiber();
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveMountEffects(root2, finishedWork, committedLanes, committedTransitions) {
            nextEffect = finishedWork;
            commitPassiveMountEffects_begin(finishedWork, root2, committedLanes, committedTransitions);
          }
          function commitPassiveMountEffects_begin(subtreeRoot, root2, committedLanes, committedTransitions) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                commitPassiveMountEffects_complete(subtreeRoot, root2, committedLanes, committedTransitions);
              }
            }
          }
          function commitPassiveMountEffects_complete(subtreeRoot, root2, committedLanes, committedTransitions) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & Passive) !== NoFlags) {
                setCurrentFiber(fiber);
                try {
                  commitPassiveMountOnFiber(root2, fiber, committedLanes, committedTransitions);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                resetCurrentFiber();
              }
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (finishedWork.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  try {
                    commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                  } finally {
                    recordPassiveEffectDuration(finishedWork);
                  }
                } else {
                  commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                }
                break;
              }
            }
          }
          function commitPassiveUnmountEffects(firstChild) {
            nextEffect = firstChild;
            commitPassiveUnmountEffects_begin();
          }
          function commitPassiveUnmountEffects_begin() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var child = fiber.child;
              if ((nextEffect.flags & ChildDeletion) !== NoFlags) {
                var deletions = fiber.deletions;
                if (deletions !== null) {
                  for (var i = 0; i < deletions.length; i++) {
                    var fiberToDelete = deletions[i];
                    nextEffect = fiberToDelete;
                    commitPassiveUnmountEffectsInsideOfDeletedTree_begin(fiberToDelete, fiber);
                  }
                  {
                    var previousFiber = fiber.alternate;
                    if (previousFiber !== null) {
                      var detachedChild = previousFiber.child;
                      if (detachedChild !== null) {
                        previousFiber.child = null;
                        do {
                          var detachedSibling = detachedChild.sibling;
                          detachedChild.sibling = null;
                          detachedChild = detachedSibling;
                        } while (detachedChild !== null);
                      }
                    }
                  }
                  nextEffect = fiber;
                }
              }
              if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitPassiveUnmountEffects_complete();
              }
            }
          }
          function commitPassiveUnmountEffects_complete() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & Passive) !== NoFlags) {
                setCurrentFiber(fiber);
                commitPassiveUnmountOnFiber(fiber);
                resetCurrentFiber();
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveUnmountOnFiber(finishedWork) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (finishedWork.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                  recordPassiveEffectDuration(finishedWork);
                } else {
                  commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                }
                break;
              }
            }
          }
          function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor);
              resetCurrentFiber();
              var child = fiber.child;
              if (child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot);
              }
            }
          }
          function commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var sibling = fiber.sibling;
              var returnFiber = fiber.return;
              {
                detachFiberAfterEffects(fiber);
                if (fiber === deletedSubtreeRoot) {
                  nextEffect = null;
                  return;
                }
              }
              if (sibling !== null) {
                sibling.return = returnFiber;
                nextEffect = sibling;
                return;
              }
              nextEffect = returnFiber;
            }
          }
          function commitPassiveUnmountInsideDeletedTreeOnFiber(current2, nearestMountedAncestor) {
            switch (current2.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (current2.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
                  recordPassiveEffectDuration(current2);
                } else {
                  commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
                }
                break;
              }
            }
          }
          function invokeLayoutEffectMountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListMount(Layout | HasEffect, fiber);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = fiber.stateNode;
                  try {
                    instance.componentDidMount();
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
              }
            }
          }
          function invokePassiveEffectMountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListMount(Passive$1 | HasEffect, fiber);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
              }
            }
          }
          function invokeLayoutEffectUnmountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListUnmount(Layout | HasEffect, fiber, fiber.return);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = fiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                  }
                  break;
                }
              }
            }
          }
          function invokePassiveEffectUnmountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListUnmount(Passive$1 | HasEffect, fiber, fiber.return);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                }
              }
            }
          }
          var COMPONENT_TYPE = 0;
          var HAS_PSEUDO_CLASS_TYPE = 1;
          var ROLE_TYPE = 2;
          var TEST_NAME_TYPE = 3;
          var TEXT_TYPE = 4;
          if (typeof Symbol === "function" && Symbol.for) {
            var symbolFor = Symbol.for;
            COMPONENT_TYPE = symbolFor("selector.component");
            HAS_PSEUDO_CLASS_TYPE = symbolFor("selector.has_pseudo_class");
            ROLE_TYPE = symbolFor("selector.role");
            TEST_NAME_TYPE = symbolFor("selector.test_id");
            TEXT_TYPE = symbolFor("selector.text");
          }
          var commitHooks = [];
          function onCommitRoot$1() {
            {
              commitHooks.forEach(function(commitHook) {
                return commitHook();
              });
            }
          }
          var ReactCurrentActQueue = ReactSharedInternals.ReactCurrentActQueue;
          function isLegacyActEnvironment(fiber) {
            {
              var isReactActEnvironmentGlobal = (
                // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
                typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0
              );
              var jestIsDefined = typeof jest !== "undefined";
              return jestIsDefined && isReactActEnvironmentGlobal !== false;
            }
          }
          function isConcurrentActEnvironment() {
            {
              var isReactActEnvironmentGlobal = (
                // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
                typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0
              );
              if (!isReactActEnvironmentGlobal && ReactCurrentActQueue.current !== null) {
                error("The current testing environment is not configured to support act(...)");
              }
              return isReactActEnvironmentGlobal;
            }
          }
          var ceil = Math.ceil;
          var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, ReactCurrentBatchConfig$3 = ReactSharedInternals.ReactCurrentBatchConfig, ReactCurrentActQueue$1 = ReactSharedInternals.ReactCurrentActQueue;
          var NoContext = (
            /*             */
            0
          );
          var BatchedContext = (
            /*               */
            1
          );
          var RenderContext = (
            /*                */
            2
          );
          var CommitContext = (
            /*                */
            4
          );
          var RootInProgress = 0;
          var RootFatalErrored = 1;
          var RootErrored = 2;
          var RootSuspended = 3;
          var RootSuspendedWithDelay = 4;
          var RootCompleted = 5;
          var RootDidNotComplete = 6;
          var executionContext = NoContext;
          var workInProgressRoot = null;
          var workInProgress = null;
          var workInProgressRootRenderLanes = NoLanes;
          var subtreeRenderLanes = NoLanes;
          var subtreeRenderLanesCursor = createCursor(NoLanes);
          var workInProgressRootExitStatus = RootInProgress;
          var workInProgressRootFatalError = null;
          var workInProgressRootIncludedLanes = NoLanes;
          var workInProgressRootSkippedLanes = NoLanes;
          var workInProgressRootInterleavedUpdatedLanes = NoLanes;
          var workInProgressRootPingedLanes = NoLanes;
          var workInProgressRootConcurrentErrors = null;
          var workInProgressRootRecoverableErrors = null;
          var globalMostRecentFallbackTime = 0;
          var FALLBACK_THROTTLE_MS = 500;
          var workInProgressRootRenderTargetTime = Infinity;
          var RENDER_TIMEOUT_MS = 500;
          var workInProgressTransitions = null;
          function resetRenderTimer() {
            workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;
          }
          function getRenderTargetTime() {
            return workInProgressRootRenderTargetTime;
          }
          var hasUncaughtError = false;
          var firstUncaughtError = null;
          var legacyErrorBoundariesThatAlreadyFailed = null;
          var rootDoesHavePassiveEffects = false;
          var rootWithPendingPassiveEffects = null;
          var pendingPassiveEffectsLanes = NoLanes;
          var pendingPassiveProfilerEffects = [];
          var pendingPassiveTransitions = null;
          var NESTED_UPDATE_LIMIT = 50;
          var nestedUpdateCount = 0;
          var rootWithNestedUpdates = null;
          var isFlushingPassiveEffects = false;
          var didScheduleUpdateDuringPassiveEffects = false;
          var NESTED_PASSIVE_UPDATE_LIMIT = 50;
          var nestedPassiveUpdateCount = 0;
          var rootWithPassiveNestedUpdates = null;
          var currentEventTime = NoTimestamp;
          var currentEventTransitionLane = NoLanes;
          var isRunningInsertionEffect = false;
          function getWorkInProgressRoot() {
            return workInProgressRoot;
          }
          function requestEventTime() {
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              return now();
            }
            if (currentEventTime !== NoTimestamp) {
              return currentEventTime;
            }
            currentEventTime = now();
            return currentEventTime;
          }
          function requestUpdateLane(fiber) {
            var mode = fiber.mode;
            if ((mode & ConcurrentMode) === NoMode) {
              return SyncLane;
            } else if ((executionContext & RenderContext) !== NoContext && workInProgressRootRenderLanes !== NoLanes) {
              return pickArbitraryLane(workInProgressRootRenderLanes);
            }
            var isTransition = requestCurrentTransition() !== NoTransition;
            if (isTransition) {
              if (ReactCurrentBatchConfig$3.transition !== null) {
                var transition = ReactCurrentBatchConfig$3.transition;
                if (!transition._updatedFibers) {
                  transition._updatedFibers = /* @__PURE__ */ new Set();
                }
                transition._updatedFibers.add(fiber);
              }
              if (currentEventTransitionLane === NoLane) {
                currentEventTransitionLane = claimNextTransitionLane();
              }
              return currentEventTransitionLane;
            }
            var updateLane = getCurrentUpdatePriority();
            if (updateLane !== NoLane) {
              return updateLane;
            }
            var eventLane = getCurrentEventPriority();
            return eventLane;
          }
          function requestRetryLane(fiber) {
            var mode = fiber.mode;
            if ((mode & ConcurrentMode) === NoMode) {
              return SyncLane;
            }
            return claimNextRetryLane();
          }
          function scheduleUpdateOnFiber(root2, fiber, lane, eventTime) {
            checkForNestedUpdates();
            {
              if (isRunningInsertionEffect) {
                error("useInsertionEffect must not schedule updates.");
              }
            }
            {
              if (isFlushingPassiveEffects) {
                didScheduleUpdateDuringPassiveEffects = true;
              }
            }
            markRootUpdated(root2, lane, eventTime);
            if ((executionContext & RenderContext) !== NoLanes && root2 === workInProgressRoot) {
              warnAboutRenderPhaseUpdatesInDEV(fiber);
            } else {
              {
                if (isDevToolsPresent) {
                  addFiberToLanesMap(root2, fiber, lane);
                }
              }
              warnIfUpdatesNotWrappedWithActDEV(fiber);
              if (root2 === workInProgressRoot) {
                if ((executionContext & RenderContext) === NoContext) {
                  workInProgressRootInterleavedUpdatedLanes = mergeLanes(workInProgressRootInterleavedUpdatedLanes, lane);
                }
                if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
                  markRootSuspended$1(root2, workInProgressRootRenderLanes);
                }
              }
              ensureRootIsScheduled(root2, eventTime);
              if (lane === SyncLane && executionContext === NoContext && (fiber.mode & ConcurrentMode) === NoMode && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
              !ReactCurrentActQueue$1.isBatchingLegacy) {
                resetRenderTimer();
                flushSyncCallbacksOnlyInLegacyMode();
              }
            }
          }
          function scheduleInitialHydrationOnRoot(root2, lane, eventTime) {
            var current2 = root2.current;
            current2.lanes = lane;
            markRootUpdated(root2, lane, eventTime);
            ensureRootIsScheduled(root2, eventTime);
          }
          function isUnsafeClassRenderPhaseUpdate(fiber) {
            return (
              // TODO: Remove outdated deferRenderPhaseUpdateToNextBatch experiment. We
              // decided not to enable it.
              (executionContext & RenderContext) !== NoContext
            );
          }
          function ensureRootIsScheduled(root2, currentTime) {
            var existingCallbackNode = root2.callbackNode;
            markStarvedLanesAsExpired(root2, currentTime);
            var nextLanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            if (nextLanes === NoLanes) {
              if (existingCallbackNode !== null) {
                cancelCallback$1(existingCallbackNode);
              }
              root2.callbackNode = null;
              root2.callbackPriority = NoLane;
              return;
            }
            var newCallbackPriority = getHighestPriorityLane(nextLanes);
            var existingCallbackPriority = root2.callbackPriority;
            if (existingCallbackPriority === newCallbackPriority && // Special case related to `act`. If the currently scheduled task is a
            // Scheduler task, rather than an `act` task, cancel it and re-scheduled
            // on the `act` queue.
            !(ReactCurrentActQueue$1.current !== null && existingCallbackNode !== fakeActCallbackNode)) {
              {
                if (existingCallbackNode == null && existingCallbackPriority !== SyncLane) {
                  error("Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              return;
            }
            if (existingCallbackNode != null) {
              cancelCallback$1(existingCallbackNode);
            }
            var newCallbackNode;
            if (newCallbackPriority === SyncLane) {
              if (root2.tag === LegacyRoot) {
                if (ReactCurrentActQueue$1.isBatchingLegacy !== null) {
                  ReactCurrentActQueue$1.didScheduleLegacyUpdate = true;
                }
                scheduleLegacySyncCallback(performSyncWorkOnRoot.bind(null, root2));
              } else {
                scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root2));
              }
              {
                if (ReactCurrentActQueue$1.current !== null) {
                  ReactCurrentActQueue$1.current.push(flushSyncCallbacks);
                } else {
                  scheduleMicrotask(function() {
                    if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                      flushSyncCallbacks();
                    }
                  });
                }
              }
              newCallbackNode = null;
            } else {
              var schedulerPriorityLevel;
              switch (lanesToEventPriority(nextLanes)) {
                case DiscreteEventPriority:
                  schedulerPriorityLevel = ImmediatePriority;
                  break;
                case ContinuousEventPriority:
                  schedulerPriorityLevel = UserBlockingPriority;
                  break;
                case DefaultEventPriority:
                  schedulerPriorityLevel = NormalPriority;
                  break;
                case IdleEventPriority:
                  schedulerPriorityLevel = IdlePriority;
                  break;
                default:
                  schedulerPriorityLevel = NormalPriority;
                  break;
              }
              newCallbackNode = scheduleCallback$1(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root2));
            }
            root2.callbackPriority = newCallbackPriority;
            root2.callbackNode = newCallbackNode;
          }
          function performConcurrentWorkOnRoot(root2, didTimeout) {
            {
              resetNestedUpdateFlag();
            }
            currentEventTime = NoTimestamp;
            currentEventTransitionLane = NoLanes;
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            var originalCallbackNode = root2.callbackNode;
            var didFlushPassiveEffects = flushPassiveEffects();
            if (didFlushPassiveEffects) {
              if (root2.callbackNode !== originalCallbackNode) {
                return null;
              }
            }
            var lanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            if (lanes === NoLanes) {
              return null;
            }
            var shouldTimeSlice = !includesBlockingLane(root2, lanes) && !includesExpiredLane(root2, lanes) && !didTimeout;
            var exitStatus = shouldTimeSlice ? renderRootConcurrent(root2, lanes) : renderRootSync(root2, lanes);
            if (exitStatus !== RootInProgress) {
              if (exitStatus === RootErrored) {
                var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
                if (errorRetryLanes !== NoLanes) {
                  lanes = errorRetryLanes;
                  exitStatus = recoverFromConcurrentError(root2, errorRetryLanes);
                }
              }
              if (exitStatus === RootFatalErrored) {
                var fatalError = workInProgressRootFatalError;
                prepareFreshStack(root2, NoLanes);
                markRootSuspended$1(root2, lanes);
                ensureRootIsScheduled(root2, now());
                throw fatalError;
              }
              if (exitStatus === RootDidNotComplete) {
                markRootSuspended$1(root2, lanes);
              } else {
                var renderWasConcurrent = !includesBlockingLane(root2, lanes);
                var finishedWork = root2.current.alternate;
                if (renderWasConcurrent && !isRenderConsistentWithExternalStores(finishedWork)) {
                  exitStatus = renderRootSync(root2, lanes);
                  if (exitStatus === RootErrored) {
                    var _errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
                    if (_errorRetryLanes !== NoLanes) {
                      lanes = _errorRetryLanes;
                      exitStatus = recoverFromConcurrentError(root2, _errorRetryLanes);
                    }
                  }
                  if (exitStatus === RootFatalErrored) {
                    var _fatalError = workInProgressRootFatalError;
                    prepareFreshStack(root2, NoLanes);
                    markRootSuspended$1(root2, lanes);
                    ensureRootIsScheduled(root2, now());
                    throw _fatalError;
                  }
                }
                root2.finishedWork = finishedWork;
                root2.finishedLanes = lanes;
                finishConcurrentRender(root2, exitStatus, lanes);
              }
            }
            ensureRootIsScheduled(root2, now());
            if (root2.callbackNode === originalCallbackNode) {
              return performConcurrentWorkOnRoot.bind(null, root2);
            }
            return null;
          }
          function recoverFromConcurrentError(root2, errorRetryLanes) {
            var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;
            if (isRootDehydrated(root2)) {
              var rootWorkInProgress = prepareFreshStack(root2, errorRetryLanes);
              rootWorkInProgress.flags |= ForceClientRender;
              {
                errorHydratingContainer(root2.containerInfo);
              }
            }
            var exitStatus = renderRootSync(root2, errorRetryLanes);
            if (exitStatus !== RootErrored) {
              var errorsFromSecondAttempt = workInProgressRootRecoverableErrors;
              workInProgressRootRecoverableErrors = errorsFromFirstAttempt;
              if (errorsFromSecondAttempt !== null) {
                queueRecoverableErrors(errorsFromSecondAttempt);
              }
            }
            return exitStatus;
          }
          function queueRecoverableErrors(errors) {
            if (workInProgressRootRecoverableErrors === null) {
              workInProgressRootRecoverableErrors = errors;
            } else {
              workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors);
            }
          }
          function finishConcurrentRender(root2, exitStatus, lanes) {
            switch (exitStatus) {
              case RootInProgress:
              case RootFatalErrored: {
                throw new Error("Root did not complete. This is a bug in React.");
              }
              // Flow knows about invariant, so it complains if I add a break
              // statement, but eslint doesn't know about invariant, so it complains
              // if I do. eslint-disable-next-line no-fallthrough
              case RootErrored: {
                commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootSuspended: {
                markRootSuspended$1(root2, lanes);
                if (includesOnlyRetries(lanes) && // do not delay if we're inside an act() scope
                !shouldForceFlushFallbacksInDEV()) {
                  var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now();
                  if (msUntilTimeout > 10) {
                    var nextLanes = getNextLanes(root2, NoLanes);
                    if (nextLanes !== NoLanes) {
                      break;
                    }
                    var suspendedLanes = root2.suspendedLanes;
                    if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                      var eventTime = requestEventTime();
                      markRootPinged(root2, suspendedLanes);
                      break;
                    }
                    root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2, workInProgressRootRecoverableErrors, workInProgressTransitions), msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootSuspendedWithDelay: {
                markRootSuspended$1(root2, lanes);
                if (includesOnlyTransitions(lanes)) {
                  break;
                }
                if (!shouldForceFlushFallbacksInDEV()) {
                  var mostRecentEventTime = getMostRecentEventTime(root2, lanes);
                  var eventTimeMs = mostRecentEventTime;
                  var timeElapsedMs = now() - eventTimeMs;
                  var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;
                  if (_msUntilTimeout > 10) {
                    root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2, workInProgressRootRecoverableErrors, workInProgressTransitions), _msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootCompleted: {
                commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              default: {
                throw new Error("Unknown root exit status.");
              }
            }
          }
          function isRenderConsistentWithExternalStores(finishedWork) {
            var node = finishedWork;
            while (true) {
              if (node.flags & StoreConsistency) {
                var updateQueue = node.updateQueue;
                if (updateQueue !== null) {
                  var checks = updateQueue.stores;
                  if (checks !== null) {
                    for (var i = 0; i < checks.length; i++) {
                      var check = checks[i];
                      var getSnapshot = check.getSnapshot;
                      var renderedValue = check.value;
                      try {
                        if (!objectIs(getSnapshot(), renderedValue)) {
                          return false;
                        }
                      } catch (error2) {
                        return false;
                      }
                    }
                  }
                }
              }
              var child = node.child;
              if (node.subtreeFlags & StoreConsistency && child !== null) {
                child.return = node;
                node = child;
                continue;
              }
              if (node === finishedWork) {
                return true;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === finishedWork) {
                  return true;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
            return true;
          }
          function markRootSuspended$1(root2, suspendedLanes) {
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootInterleavedUpdatedLanes);
            markRootSuspended(root2, suspendedLanes);
          }
          function performSyncWorkOnRoot(root2) {
            {
              syncNestedUpdateFlag();
            }
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            flushPassiveEffects();
            var lanes = getNextLanes(root2, NoLanes);
            if (!includesSomeLane(lanes, SyncLane)) {
              ensureRootIsScheduled(root2, now());
              return null;
            }
            var exitStatus = renderRootSync(root2, lanes);
            if (root2.tag !== LegacyRoot && exitStatus === RootErrored) {
              var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
              if (errorRetryLanes !== NoLanes) {
                lanes = errorRetryLanes;
                exitStatus = recoverFromConcurrentError(root2, errorRetryLanes);
              }
            }
            if (exitStatus === RootFatalErrored) {
              var fatalError = workInProgressRootFatalError;
              prepareFreshStack(root2, NoLanes);
              markRootSuspended$1(root2, lanes);
              ensureRootIsScheduled(root2, now());
              throw fatalError;
            }
            if (exitStatus === RootDidNotComplete) {
              throw new Error("Root did not complete. This is a bug in React.");
            }
            var finishedWork = root2.current.alternate;
            root2.finishedWork = finishedWork;
            root2.finishedLanes = lanes;
            commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
            ensureRootIsScheduled(root2, now());
            return null;
          }
          function flushRoot(root2, lanes) {
            if (lanes !== NoLanes) {
              markRootEntangled(root2, mergeLanes(lanes, SyncLane));
              ensureRootIsScheduled(root2, now());
              if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                resetRenderTimer();
                flushSyncCallbacks();
              }
            }
          }
          function batchedUpdates$1(fn, a) {
            var prevExecutionContext = executionContext;
            executionContext |= BatchedContext;
            try {
              return fn(a);
            } finally {
              executionContext = prevExecutionContext;
              if (executionContext === NoContext && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
              !ReactCurrentActQueue$1.isBatchingLegacy) {
                resetRenderTimer();
                flushSyncCallbacksOnlyInLegacyMode();
              }
            }
          }
          function discreteUpdates(fn, a, b, c, d) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              return fn(a, b, c, d);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
              if (executionContext === NoContext) {
                resetRenderTimer();
              }
            }
          }
          function flushSync(fn) {
            if (rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext) {
              flushPassiveEffects();
            }
            var prevExecutionContext = executionContext;
            executionContext |= BatchedContext;
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            var previousPriority = getCurrentUpdatePriority();
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              if (fn) {
                return fn();
              } else {
                return void 0;
              }
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
              executionContext = prevExecutionContext;
              if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                flushSyncCallbacks();
              }
            }
          }
          function isAlreadyRendering() {
            return (executionContext & (RenderContext | CommitContext)) !== NoContext;
          }
          function pushRenderLanes(fiber, lanes) {
            push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
            subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
            workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
          }
          function popRenderLanes(fiber) {
            subtreeRenderLanes = subtreeRenderLanesCursor.current;
            pop(subtreeRenderLanesCursor, fiber);
          }
          function prepareFreshStack(root2, lanes) {
            root2.finishedWork = null;
            root2.finishedLanes = NoLanes;
            var timeoutHandle = root2.timeoutHandle;
            if (timeoutHandle !== noTimeout) {
              root2.timeoutHandle = noTimeout;
              cancelTimeout(timeoutHandle);
            }
            if (workInProgress !== null) {
              var interruptedWork = workInProgress.return;
              while (interruptedWork !== null) {
                var current2 = interruptedWork.alternate;
                unwindInterruptedWork(current2, interruptedWork);
                interruptedWork = interruptedWork.return;
              }
            }
            workInProgressRoot = root2;
            var rootWorkInProgress = createWorkInProgress(root2.current, null);
            workInProgress = rootWorkInProgress;
            workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;
            workInProgressRootExitStatus = RootInProgress;
            workInProgressRootFatalError = null;
            workInProgressRootSkippedLanes = NoLanes;
            workInProgressRootInterleavedUpdatedLanes = NoLanes;
            workInProgressRootPingedLanes = NoLanes;
            workInProgressRootConcurrentErrors = null;
            workInProgressRootRecoverableErrors = null;
            finishQueueingConcurrentUpdates();
            {
              ReactStrictModeWarnings.discardPendingWarnings();
            }
            return rootWorkInProgress;
          }
          function handleError(root2, thrownValue) {
            do {
              var erroredWork = workInProgress;
              try {
                resetContextDependencies();
                resetHooksAfterThrow();
                resetCurrentFiber();
                ReactCurrentOwner$2.current = null;
                if (erroredWork === null || erroredWork.return === null) {
                  workInProgressRootExitStatus = RootFatalErrored;
                  workInProgressRootFatalError = thrownValue;
                  workInProgress = null;
                  return;
                }
                if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
                }
                if (enableSchedulingProfiler) {
                  markComponentRenderStopped();
                  if (thrownValue !== null && typeof thrownValue === "object" && typeof thrownValue.then === "function") {
                    var wakeable = thrownValue;
                    markComponentSuspended(erroredWork, wakeable, workInProgressRootRenderLanes);
                  } else {
                    markComponentErrored(erroredWork, thrownValue, workInProgressRootRenderLanes);
                  }
                }
                throwException(root2, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
                completeUnitOfWork(erroredWork);
              } catch (yetAnotherThrownValue) {
                thrownValue = yetAnotherThrownValue;
                if (workInProgress === erroredWork && erroredWork !== null) {
                  erroredWork = erroredWork.return;
                  workInProgress = erroredWork;
                } else {
                  erroredWork = workInProgress;
                }
                continue;
              }
              return;
            } while (true);
          }
          function pushDispatcher() {
            var prevDispatcher = ReactCurrentDispatcher$2.current;
            ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
            if (prevDispatcher === null) {
              return ContextOnlyDispatcher;
            } else {
              return prevDispatcher;
            }
          }
          function popDispatcher(prevDispatcher) {
            ReactCurrentDispatcher$2.current = prevDispatcher;
          }
          function markCommitTimeOfFallback() {
            globalMostRecentFallbackTime = now();
          }
          function markSkippedUpdateLanes(lane) {
            workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
          }
          function renderDidSuspend() {
            if (workInProgressRootExitStatus === RootInProgress) {
              workInProgressRootExitStatus = RootSuspended;
            }
          }
          function renderDidSuspendDelayIfPossible() {
            if (workInProgressRootExitStatus === RootInProgress || workInProgressRootExitStatus === RootSuspended || workInProgressRootExitStatus === RootErrored) {
              workInProgressRootExitStatus = RootSuspendedWithDelay;
            }
            if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes))) {
              markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
            }
          }
          function renderDidError(error2) {
            if (workInProgressRootExitStatus !== RootSuspendedWithDelay) {
              workInProgressRootExitStatus = RootErrored;
            }
            if (workInProgressRootConcurrentErrors === null) {
              workInProgressRootConcurrentErrors = [error2];
            } else {
              workInProgressRootConcurrentErrors.push(error2);
            }
          }
          function renderHasNotSuspendedYet() {
            return workInProgressRootExitStatus === RootInProgress;
          }
          function renderRootSync(root2, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
              {
                if (isDevToolsPresent) {
                  var memoizedUpdaters = root2.memoizedUpdaters;
                  if (memoizedUpdaters.size > 0) {
                    restorePendingUpdaters(root2, workInProgressRootRenderLanes);
                    memoizedUpdaters.clear();
                  }
                  movePendingFibersToMemoized(root2, lanes);
                }
              }
              workInProgressTransitions = getTransitionsForLanes();
              prepareFreshStack(root2, lanes);
            }
            {
              markRenderStarted(lanes);
            }
            do {
              try {
                workLoopSync();
                break;
              } catch (thrownValue) {
                handleError(root2, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            executionContext = prevExecutionContext;
            popDispatcher(prevDispatcher);
            if (workInProgress !== null) {
              throw new Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
            }
            {
              markRenderStopped();
            }
            workInProgressRoot = null;
            workInProgressRootRenderLanes = NoLanes;
            return workInProgressRootExitStatus;
          }
          function workLoopSync() {
            while (workInProgress !== null) {
              performUnitOfWork(workInProgress);
            }
          }
          function renderRootConcurrent(root2, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
              {
                if (isDevToolsPresent) {
                  var memoizedUpdaters = root2.memoizedUpdaters;
                  if (memoizedUpdaters.size > 0) {
                    restorePendingUpdaters(root2, workInProgressRootRenderLanes);
                    memoizedUpdaters.clear();
                  }
                  movePendingFibersToMemoized(root2, lanes);
                }
              }
              workInProgressTransitions = getTransitionsForLanes();
              resetRenderTimer();
              prepareFreshStack(root2, lanes);
            }
            {
              markRenderStarted(lanes);
            }
            do {
              try {
                workLoopConcurrent();
                break;
              } catch (thrownValue) {
                handleError(root2, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            popDispatcher(prevDispatcher);
            executionContext = prevExecutionContext;
            if (workInProgress !== null) {
              {
                markRenderYielded();
              }
              return RootInProgress;
            } else {
              {
                markRenderStopped();
              }
              workInProgressRoot = null;
              workInProgressRootRenderLanes = NoLanes;
              return workInProgressRootExitStatus;
            }
          }
          function workLoopConcurrent() {
            while (workInProgress !== null && !shouldYield()) {
              performUnitOfWork(workInProgress);
            }
          }
          function performUnitOfWork(unitOfWork) {
            var current2 = unitOfWork.alternate;
            setCurrentFiber(unitOfWork);
            var next;
            if ((unitOfWork.mode & ProfileMode) !== NoMode) {
              startProfilerTimer(unitOfWork);
              next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
              stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
            } else {
              next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
            }
            resetCurrentFiber();
            unitOfWork.memoizedProps = unitOfWork.pendingProps;
            if (next === null) {
              completeUnitOfWork(unitOfWork);
            } else {
              workInProgress = next;
            }
            ReactCurrentOwner$2.current = null;
          }
          function completeUnitOfWork(unitOfWork) {
            var completedWork = unitOfWork;
            do {
              var current2 = completedWork.alternate;
              var returnFiber = completedWork.return;
              if ((completedWork.flags & Incomplete) === NoFlags) {
                setCurrentFiber(completedWork);
                var next = void 0;
                if ((completedWork.mode & ProfileMode) === NoMode) {
                  next = completeWork(current2, completedWork, subtreeRenderLanes);
                } else {
                  startProfilerTimer(completedWork);
                  next = completeWork(current2, completedWork, subtreeRenderLanes);
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                }
                resetCurrentFiber();
                if (next !== null) {
                  workInProgress = next;
                  return;
                }
              } else {
                var _next = unwindWork(current2, completedWork);
                if (_next !== null) {
                  _next.flags &= HostEffectMask;
                  workInProgress = _next;
                  return;
                }
                if ((completedWork.mode & ProfileMode) !== NoMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                  var actualDuration = completedWork.actualDuration;
                  var child = completedWork.child;
                  while (child !== null) {
                    actualDuration += child.actualDuration;
                    child = child.sibling;
                  }
                  completedWork.actualDuration = actualDuration;
                }
                if (returnFiber !== null) {
                  returnFiber.flags |= Incomplete;
                  returnFiber.subtreeFlags = NoFlags;
                  returnFiber.deletions = null;
                } else {
                  workInProgressRootExitStatus = RootDidNotComplete;
                  workInProgress = null;
                  return;
                }
              }
              var siblingFiber = completedWork.sibling;
              if (siblingFiber !== null) {
                workInProgress = siblingFiber;
                return;
              }
              completedWork = returnFiber;
              workInProgress = completedWork;
            } while (completedWork !== null);
            if (workInProgressRootExitStatus === RootInProgress) {
              workInProgressRootExitStatus = RootCompleted;
            }
          }
          function commitRoot(root2, recoverableErrors, transitions) {
            var previousUpdateLanePriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              commitRootImpl(root2, recoverableErrors, transitions, previousUpdateLanePriority);
            } finally {
              ReactCurrentBatchConfig$3.transition = prevTransition;
              setCurrentUpdatePriority(previousUpdateLanePriority);
            }
            return null;
          }
          function commitRootImpl(root2, recoverableErrors, transitions, renderPriorityLevel) {
            do {
              flushPassiveEffects();
            } while (rootWithPendingPassiveEffects !== null);
            flushRenderPhaseStrictModeWarningsInDEV();
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            var finishedWork = root2.finishedWork;
            var lanes = root2.finishedLanes;
            {
              markCommitStarted(lanes);
            }
            if (finishedWork === null) {
              {
                markCommitStopped();
              }
              return null;
            } else {
              {
                if (lanes === NoLanes) {
                  error("root.finishedLanes should not be empty during a commit. This is a bug in React.");
                }
              }
            }
            root2.finishedWork = null;
            root2.finishedLanes = NoLanes;
            if (finishedWork === root2.current) {
              throw new Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
            }
            root2.callbackNode = null;
            root2.callbackPriority = NoLane;
            var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
            markRootFinished(root2, remainingLanes);
            if (root2 === workInProgressRoot) {
              workInProgressRoot = null;
              workInProgress = null;
              workInProgressRootRenderLanes = NoLanes;
            }
            if ((finishedWork.subtreeFlags & PassiveMask) !== NoFlags || (finishedWork.flags & PassiveMask) !== NoFlags) {
              if (!rootDoesHavePassiveEffects) {
                rootDoesHavePassiveEffects = true;
                pendingPassiveTransitions = transitions;
                scheduleCallback$1(NormalPriority, function() {
                  flushPassiveEffects();
                  return null;
                });
              }
            }
            var subtreeHasEffects = (finishedWork.subtreeFlags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
            var rootHasEffect = (finishedWork.flags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
            if (subtreeHasEffects || rootHasEffect) {
              var prevTransition = ReactCurrentBatchConfig$3.transition;
              ReactCurrentBatchConfig$3.transition = null;
              var previousPriority = getCurrentUpdatePriority();
              setCurrentUpdatePriority(DiscreteEventPriority);
              var prevExecutionContext = executionContext;
              executionContext |= CommitContext;
              ReactCurrentOwner$2.current = null;
              var shouldFireAfterActiveInstanceBlur2 = commitBeforeMutationEffects(root2, finishedWork);
              {
                recordCommitTime();
              }
              commitMutationEffects(root2, finishedWork, lanes);
              resetAfterCommit(root2.containerInfo);
              root2.current = finishedWork;
              {
                markLayoutEffectsStarted(lanes);
              }
              commitLayoutEffects(finishedWork, root2, lanes);
              {
                markLayoutEffectsStopped();
              }
              requestPaint();
              executionContext = prevExecutionContext;
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
            } else {
              root2.current = finishedWork;
              {
                recordCommitTime();
              }
            }
            var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
            if (rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = false;
              rootWithPendingPassiveEffects = root2;
              pendingPassiveEffectsLanes = lanes;
            } else {
              {
                nestedPassiveUpdateCount = 0;
                rootWithPassiveNestedUpdates = null;
              }
            }
            remainingLanes = root2.pendingLanes;
            if (remainingLanes === NoLanes) {
              legacyErrorBoundariesThatAlreadyFailed = null;
            }
            {
              if (!rootDidHavePassiveEffects) {
                commitDoubleInvokeEffectsInDEV(root2.current, false);
              }
            }
            onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
            {
              if (isDevToolsPresent) {
                root2.memoizedUpdaters.clear();
              }
            }
            {
              onCommitRoot$1();
            }
            ensureRootIsScheduled(root2, now());
            if (recoverableErrors !== null) {
              var onRecoverableError = root2.onRecoverableError;
              for (var i = 0; i < recoverableErrors.length; i++) {
                var recoverableError = recoverableErrors[i];
                var componentStack = recoverableError.stack;
                var digest = recoverableError.digest;
                onRecoverableError(recoverableError.value, {
                  componentStack,
                  digest
                });
              }
            }
            if (hasUncaughtError) {
              hasUncaughtError = false;
              var error$1 = firstUncaughtError;
              firstUncaughtError = null;
              throw error$1;
            }
            if (includesSomeLane(pendingPassiveEffectsLanes, SyncLane) && root2.tag !== LegacyRoot) {
              flushPassiveEffects();
            }
            remainingLanes = root2.pendingLanes;
            if (includesSomeLane(remainingLanes, SyncLane)) {
              {
                markNestedUpdateScheduled();
              }
              if (root2 === rootWithNestedUpdates) {
                nestedUpdateCount++;
              } else {
                nestedUpdateCount = 0;
                rootWithNestedUpdates = root2;
              }
            } else {
              nestedUpdateCount = 0;
            }
            flushSyncCallbacks();
            {
              markCommitStopped();
            }
            return null;
          }
          function flushPassiveEffects() {
            if (rootWithPendingPassiveEffects !== null) {
              var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes);
              var priority = lowerEventPriority(DefaultEventPriority, renderPriority);
              var prevTransition = ReactCurrentBatchConfig$3.transition;
              var previousPriority = getCurrentUpdatePriority();
              try {
                ReactCurrentBatchConfig$3.transition = null;
                setCurrentUpdatePriority(priority);
                return flushPassiveEffectsImpl();
              } finally {
                setCurrentUpdatePriority(previousPriority);
                ReactCurrentBatchConfig$3.transition = prevTransition;
              }
            }
            return false;
          }
          function enqueuePendingPassiveProfilerEffect(fiber) {
            {
              pendingPassiveProfilerEffects.push(fiber);
              if (!rootDoesHavePassiveEffects) {
                rootDoesHavePassiveEffects = true;
                scheduleCallback$1(NormalPriority, function() {
                  flushPassiveEffects();
                  return null;
                });
              }
            }
          }
          function flushPassiveEffectsImpl() {
            if (rootWithPendingPassiveEffects === null) {
              return false;
            }
            var transitions = pendingPassiveTransitions;
            pendingPassiveTransitions = null;
            var root2 = rootWithPendingPassiveEffects;
            var lanes = pendingPassiveEffectsLanes;
            rootWithPendingPassiveEffects = null;
            pendingPassiveEffectsLanes = NoLanes;
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Cannot flush passive effects while already rendering.");
            }
            {
              isFlushingPassiveEffects = true;
              didScheduleUpdateDuringPassiveEffects = false;
            }
            {
              markPassiveEffectsStarted(lanes);
            }
            var prevExecutionContext = executionContext;
            executionContext |= CommitContext;
            commitPassiveUnmountEffects(root2.current);
            commitPassiveMountEffects(root2, root2.current, lanes, transitions);
            {
              var profilerEffects = pendingPassiveProfilerEffects;
              pendingPassiveProfilerEffects = [];
              for (var i = 0; i < profilerEffects.length; i++) {
                var _fiber = profilerEffects[i];
                commitPassiveEffectDurations(root2, _fiber);
              }
            }
            {
              markPassiveEffectsStopped();
            }
            {
              commitDoubleInvokeEffectsInDEV(root2.current, true);
            }
            executionContext = prevExecutionContext;
            flushSyncCallbacks();
            {
              if (didScheduleUpdateDuringPassiveEffects) {
                if (root2 === rootWithPassiveNestedUpdates) {
                  nestedPassiveUpdateCount++;
                } else {
                  nestedPassiveUpdateCount = 0;
                  rootWithPassiveNestedUpdates = root2;
                }
              } else {
                nestedPassiveUpdateCount = 0;
              }
              isFlushingPassiveEffects = false;
              didScheduleUpdateDuringPassiveEffects = false;
            }
            onPostCommitRoot(root2);
            {
              var stateNode = root2.current.stateNode;
              stateNode.effectDuration = 0;
              stateNode.passiveEffectDuration = 0;
            }
            return true;
          }
          function isAlreadyFailedLegacyErrorBoundary(instance) {
            return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
          }
          function markLegacyErrorBoundaryAsFailed(instance) {
            if (legacyErrorBoundariesThatAlreadyFailed === null) {
              legacyErrorBoundariesThatAlreadyFailed = /* @__PURE__ */ new Set([instance]);
            } else {
              legacyErrorBoundariesThatAlreadyFailed.add(instance);
            }
          }
          function prepareToThrowUncaughtError(error2) {
            if (!hasUncaughtError) {
              hasUncaughtError = true;
              firstUncaughtError = error2;
            }
          }
          var onUncaughtError = prepareToThrowUncaughtError;
          function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error2) {
            var errorInfo = createCapturedValueAtFiber(error2, sourceFiber);
            var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
            var root2 = enqueueUpdate(rootFiber, update, SyncLane);
            var eventTime = requestEventTime();
            if (root2 !== null) {
              markRootUpdated(root2, SyncLane, eventTime);
              ensureRootIsScheduled(root2, eventTime);
            }
          }
          function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error$1) {
            {
              reportUncaughtErrorInDEV(error$1);
              setIsRunningInsertionEffect(false);
            }
            if (sourceFiber.tag === HostRoot) {
              captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error$1);
              return;
            }
            var fiber = null;
            {
              fiber = nearestMountedAncestor;
            }
            while (fiber !== null) {
              if (fiber.tag === HostRoot) {
                captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error$1);
                return;
              } else if (fiber.tag === ClassComponent) {
                var ctor = fiber.type;
                var instance = fiber.stateNode;
                if (typeof ctor.getDerivedStateFromError === "function" || typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                  var errorInfo = createCapturedValueAtFiber(error$1, sourceFiber);
                  var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
                  var root2 = enqueueUpdate(fiber, update, SyncLane);
                  var eventTime = requestEventTime();
                  if (root2 !== null) {
                    markRootUpdated(root2, SyncLane, eventTime);
                    ensureRootIsScheduled(root2, eventTime);
                  }
                  return;
                }
              }
              fiber = fiber.return;
            }
            {
              error("Internal React error: Attempted to capture a commit phase error inside a detached tree. This indicates a bug in React. Likely causes include deleting the same fiber more than once, committing an already-finished tree, or an inconsistent return pointer.\n\nError message:\n\n%s", error$1);
            }
          }
          function pingSuspendedRoot(root2, wakeable, pingedLanes) {
            var pingCache = root2.pingCache;
            if (pingCache !== null) {
              pingCache.delete(wakeable);
            }
            var eventTime = requestEventTime();
            markRootPinged(root2, pingedLanes);
            warnIfSuspenseResolutionNotWrappedWithActDEV(root2);
            if (workInProgressRoot === root2 && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
              if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
                prepareFreshStack(root2, NoLanes);
              } else {
                workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
              }
            }
            ensureRootIsScheduled(root2, eventTime);
          }
          function retryTimedOutBoundary(boundaryFiber, retryLane) {
            if (retryLane === NoLane) {
              retryLane = requestRetryLane(boundaryFiber);
            }
            var eventTime = requestEventTime();
            var root2 = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);
            if (root2 !== null) {
              markRootUpdated(root2, retryLane, eventTime);
              ensureRootIsScheduled(root2, eventTime);
            }
          }
          function retryDehydratedSuspenseBoundary(boundaryFiber) {
            var suspenseState = boundaryFiber.memoizedState;
            var retryLane = NoLane;
            if (suspenseState !== null) {
              retryLane = suspenseState.retryLane;
            }
            retryTimedOutBoundary(boundaryFiber, retryLane);
          }
          function resolveRetryWakeable(boundaryFiber, wakeable) {
            var retryLane = NoLane;
            var retryCache;
            switch (boundaryFiber.tag) {
              case SuspenseComponent:
                retryCache = boundaryFiber.stateNode;
                var suspenseState = boundaryFiber.memoizedState;
                if (suspenseState !== null) {
                  retryLane = suspenseState.retryLane;
                }
                break;
              case SuspenseListComponent:
                retryCache = boundaryFiber.stateNode;
                break;
              default:
                throw new Error("Pinged unknown suspense boundary type. This is probably a bug in React.");
            }
            if (retryCache !== null) {
              retryCache.delete(wakeable);
            }
            retryTimedOutBoundary(boundaryFiber, retryLane);
          }
          function jnd(timeElapsed) {
            return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3e3 ? 3e3 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
          }
          function checkForNestedUpdates() {
            if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
              nestedUpdateCount = 0;
              rootWithNestedUpdates = null;
              throw new Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
            }
            {
              if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
                nestedPassiveUpdateCount = 0;
                rootWithPassiveNestedUpdates = null;
                error("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
              }
            }
          }
          function flushRenderPhaseStrictModeWarningsInDEV() {
            {
              ReactStrictModeWarnings.flushLegacyContextWarning();
              {
                ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
              }
            }
          }
          function commitDoubleInvokeEffectsInDEV(fiber, hasPassiveEffects) {
            {
              setCurrentFiber(fiber);
              invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV);
              if (hasPassiveEffects) {
                invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectUnmountInDEV);
              }
              invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV);
              if (hasPassiveEffects) {
                invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectMountInDEV);
              }
              resetCurrentFiber();
            }
          }
          function invokeEffectsInDev(firstChild, fiberFlags, invokeEffectFn) {
            {
              var current2 = firstChild;
              var subtreeRoot = null;
              while (current2 !== null) {
                var primarySubtreeFlag = current2.subtreeFlags & fiberFlags;
                if (current2 !== subtreeRoot && current2.child !== null && primarySubtreeFlag !== NoFlags) {
                  current2 = current2.child;
                } else {
                  if ((current2.flags & fiberFlags) !== NoFlags) {
                    invokeEffectFn(current2);
                  }
                  if (current2.sibling !== null) {
                    current2 = current2.sibling;
                  } else {
                    current2 = subtreeRoot = current2.return;
                  }
                }
              }
            }
          }
          var didWarnStateUpdateForNotYetMountedComponent = null;
          function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
            {
              if ((executionContext & RenderContext) !== NoContext) {
                return;
              }
              if (!(fiber.mode & ConcurrentMode)) {
                return;
              }
              var tag = fiber.tag;
              if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent) {
                return;
              }
              var componentName = getComponentNameFromFiber(fiber) || "ReactComponent";
              if (didWarnStateUpdateForNotYetMountedComponent !== null) {
                if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
                  return;
                }
                didWarnStateUpdateForNotYetMountedComponent.add(componentName);
              } else {
                didWarnStateUpdateForNotYetMountedComponent = /* @__PURE__ */ new Set([componentName]);
              }
              var previousFiber = current;
              try {
                setCurrentFiber(fiber);
                error("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
              } finally {
                if (previousFiber) {
                  setCurrentFiber(fiber);
                } else {
                  resetCurrentFiber();
                }
              }
            }
          }
          var beginWork$1;
          {
            var dummyFiber = null;
            beginWork$1 = function(current2, unitOfWork, lanes) {
              var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
              try {
                return beginWork(current2, unitOfWork, lanes);
              } catch (originalError) {
                if (didSuspendOrErrorWhileHydratingDEV() || originalError !== null && typeof originalError === "object" && typeof originalError.then === "function") {
                  throw originalError;
                }
                resetContextDependencies();
                resetHooksAfterThrow();
                unwindInterruptedWork(current2, unitOfWork);
                assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
                if (unitOfWork.mode & ProfileMode) {
                  startProfilerTimer(unitOfWork);
                }
                invokeGuardedCallback(null, beginWork, null, current2, unitOfWork, lanes);
                if (hasCaughtError()) {
                  var replayError = clearCaughtError();
                  if (typeof replayError === "object" && replayError !== null && replayError._suppressLogging && typeof originalError === "object" && originalError !== null && !originalError._suppressLogging) {
                    originalError._suppressLogging = true;
                  }
                }
                throw originalError;
              }
            };
          }
          var didWarnAboutUpdateInRender = false;
          var didWarnAboutUpdateInRenderForAnotherComponent;
          {
            didWarnAboutUpdateInRenderForAnotherComponent = /* @__PURE__ */ new Set();
          }
          function warnAboutRenderPhaseUpdatesInDEV(fiber) {
            {
              if (isRendering && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {
                switch (fiber.tag) {
                  case FunctionComponent:
                  case ForwardRef:
                  case SimpleMemoComponent: {
                    var renderingComponentName = workInProgress && getComponentNameFromFiber(workInProgress) || "Unknown";
                    var dedupeKey = renderingComponentName;
                    if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                      didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                      var setStateComponentName = getComponentNameFromFiber(fiber) || "Unknown";
                      error("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                    }
                    break;
                  }
                  case ClassComponent: {
                    if (!didWarnAboutUpdateInRender) {
                      error("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                      didWarnAboutUpdateInRender = true;
                    }
                    break;
                  }
                }
              }
            }
          }
          function restorePendingUpdaters(root2, lanes) {
            {
              if (isDevToolsPresent) {
                var memoizedUpdaters = root2.memoizedUpdaters;
                memoizedUpdaters.forEach(function(schedulingFiber) {
                  addFiberToLanesMap(root2, schedulingFiber, lanes);
                });
              }
            }
          }
          var fakeActCallbackNode = {};
          function scheduleCallback$1(priorityLevel, callback) {
            {
              var actQueue = ReactCurrentActQueue$1.current;
              if (actQueue !== null) {
                actQueue.push(callback);
                return fakeActCallbackNode;
              } else {
                return scheduleCallback(priorityLevel, callback);
              }
            }
          }
          function cancelCallback$1(callbackNode) {
            if (callbackNode === fakeActCallbackNode) {
              return;
            }
            return cancelCallback(callbackNode);
          }
          function shouldForceFlushFallbacksInDEV() {
            return ReactCurrentActQueue$1.current !== null;
          }
          function warnIfUpdatesNotWrappedWithActDEV(fiber) {
            {
              if (fiber.mode & ConcurrentMode) {
                if (!isConcurrentActEnvironment()) {
                  return;
                }
              } else {
                if (!isLegacyActEnvironment()) {
                  return;
                }
                if (executionContext !== NoContext) {
                  return;
                }
                if (fiber.tag !== FunctionComponent && fiber.tag !== ForwardRef && fiber.tag !== SimpleMemoComponent) {
                  return;
                }
              }
              if (ReactCurrentActQueue$1.current === null) {
                var previousFiber = current;
                try {
                  setCurrentFiber(fiber);
                  error("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentNameFromFiber(fiber));
                } finally {
                  if (previousFiber) {
                    setCurrentFiber(fiber);
                  } else {
                    resetCurrentFiber();
                  }
                }
              }
            }
          }
          function warnIfSuspenseResolutionNotWrappedWithActDEV(root2) {
            {
              if (root2.tag !== LegacyRoot && isConcurrentActEnvironment() && ReactCurrentActQueue$1.current === null) {
                error("A suspended resource finished loading inside a test, but the event was not wrapped in act(...).\n\nWhen testing, code that resolves suspended data should be wrapped into act(...):\n\nact(() => {\n  /* finish loading suspended data */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act");
              }
            }
          }
          function setIsRunningInsertionEffect(isRunning) {
            {
              isRunningInsertionEffect = isRunning;
            }
          }
          var resolveFamily = null;
          var failedBoundaries = null;
          var setRefreshHandler = function(handler) {
            {
              resolveFamily = handler;
            }
          };
          function resolveFunctionForHotReloading(type) {
            {
              if (resolveFamily === null) {
                return type;
              }
              var family = resolveFamily(type);
              if (family === void 0) {
                return type;
              }
              return family.current;
            }
          }
          function resolveClassForHotReloading(type) {
            return resolveFunctionForHotReloading(type);
          }
          function resolveForwardRefForHotReloading(type) {
            {
              if (resolveFamily === null) {
                return type;
              }
              var family = resolveFamily(type);
              if (family === void 0) {
                if (type !== null && type !== void 0 && typeof type.render === "function") {
                  var currentRender = resolveFunctionForHotReloading(type.render);
                  if (type.render !== currentRender) {
                    var syntheticType = {
                      $$typeof: REACT_FORWARD_REF_TYPE,
                      render: currentRender
                    };
                    if (type.displayName !== void 0) {
                      syntheticType.displayName = type.displayName;
                    }
                    return syntheticType;
                  }
                }
                return type;
              }
              return family.current;
            }
          }
          function isCompatibleFamilyForHotReloading(fiber, element) {
            {
              if (resolveFamily === null) {
                return false;
              }
              var prevType = fiber.elementType;
              var nextType = element.type;
              var needsCompareFamilies = false;
              var $$typeofNextType = typeof nextType === "object" && nextType !== null ? nextType.$$typeof : null;
              switch (fiber.tag) {
                case ClassComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case FunctionComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case ForwardRef: {
                  if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case MemoComponent:
                case SimpleMemoComponent: {
                  if ($$typeofNextType === REACT_MEMO_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                default:
                  return false;
              }
              if (needsCompareFamilies) {
                var prevFamily = resolveFamily(prevType);
                if (prevFamily !== void 0 && prevFamily === resolveFamily(nextType)) {
                  return true;
                }
              }
              return false;
            }
          }
          function markFailedErrorBoundaryForHotReloading(fiber) {
            {
              if (resolveFamily === null) {
                return;
              }
              if (typeof WeakSet !== "function") {
                return;
              }
              if (failedBoundaries === null) {
                failedBoundaries = /* @__PURE__ */ new WeakSet();
              }
              failedBoundaries.add(fiber);
            }
          }
          var scheduleRefresh = function(root2, update) {
            {
              if (resolveFamily === null) {
                return;
              }
              var staleFamilies = update.staleFamilies, updatedFamilies = update.updatedFamilies;
              flushPassiveEffects();
              flushSync(function() {
                scheduleFibersWithFamiliesRecursively(root2.current, updatedFamilies, staleFamilies);
              });
            }
          };
          var scheduleRoot = function(root2, element) {
            {
              if (root2.context !== emptyContextObject) {
                return;
              }
              flushPassiveEffects();
              flushSync(function() {
                updateContainer(element, root2, null, null);
              });
            }
          };
          function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
            {
              var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
              var candidateType = null;
              switch (tag) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type;
                  break;
                case ForwardRef:
                  candidateType = type.render;
                  break;
              }
              if (resolveFamily === null) {
                throw new Error("Expected resolveFamily to be set during hot reload.");
              }
              var needsRender = false;
              var needsRemount = false;
              if (candidateType !== null) {
                var family = resolveFamily(candidateType);
                if (family !== void 0) {
                  if (staleFamilies.has(family)) {
                    needsRemount = true;
                  } else if (updatedFamilies.has(family)) {
                    if (tag === ClassComponent) {
                      needsRemount = true;
                    } else {
                      needsRender = true;
                    }
                  }
                }
              }
              if (failedBoundaries !== null) {
                if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
                  needsRemount = true;
                }
              }
              if (needsRemount) {
                fiber._debugNeedsRemount = true;
              }
              if (needsRemount || needsRender) {
                var _root = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (_root !== null) {
                  scheduleUpdateOnFiber(_root, fiber, SyncLane, NoTimestamp);
                }
              }
              if (child !== null && !needsRemount) {
                scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
              }
              if (sibling !== null) {
                scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
              }
            }
          }
          var findHostInstancesForRefresh = function(root2, families) {
            {
              var hostInstances = /* @__PURE__ */ new Set();
              var types = new Set(families.map(function(family) {
                return family.current;
              }));
              findHostInstancesForMatchingFibersRecursively(root2.current, types, hostInstances);
              return hostInstances;
            }
          };
          function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
            {
              var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
              var candidateType = null;
              switch (tag) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type;
                  break;
                case ForwardRef:
                  candidateType = type.render;
                  break;
              }
              var didMatch = false;
              if (candidateType !== null) {
                if (types.has(candidateType)) {
                  didMatch = true;
                }
              }
              if (didMatch) {
                findHostInstancesForFiberShallowly(fiber, hostInstances);
              } else {
                if (child !== null) {
                  findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
                }
              }
              if (sibling !== null) {
                findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
              }
            }
          }
          function findHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
              if (foundHostInstances) {
                return;
              }
              var node = fiber;
              while (true) {
                switch (node.tag) {
                  case HostComponent:
                    hostInstances.add(node.stateNode);
                    return;
                  case HostPortal:
                    hostInstances.add(node.stateNode.containerInfo);
                    return;
                  case HostRoot:
                    hostInstances.add(node.stateNode.containerInfo);
                    return;
                }
                if (node.return === null) {
                  throw new Error("Expected to reach root first.");
                }
                node = node.return;
              }
            }
          }
          function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var node = fiber;
              var foundHostInstances = false;
              while (true) {
                if (node.tag === HostComponent) {
                  foundHostInstances = true;
                  hostInstances.add(node.stateNode);
                } else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === fiber) {
                  return foundHostInstances;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === fiber) {
                    return foundHostInstances;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            }
            return false;
          }
          var hasBadMapPolyfill;
          {
            hasBadMapPolyfill = false;
            try {
              var nonExtensibleObject = Object.preventExtensions({});
              /* @__PURE__ */ new Map([[nonExtensibleObject, null]]);
              /* @__PURE__ */ new Set([nonExtensibleObject]);
            } catch (e) {
              hasBadMapPolyfill = true;
            }
          }
          function FiberNode(tag, pendingProps, key, mode) {
            this.tag = tag;
            this.key = key;
            this.elementType = null;
            this.type = null;
            this.stateNode = null;
            this.return = null;
            this.child = null;
            this.sibling = null;
            this.index = 0;
            this.ref = null;
            this.pendingProps = pendingProps;
            this.memoizedProps = null;
            this.updateQueue = null;
            this.memoizedState = null;
            this.dependencies = null;
            this.mode = mode;
            this.flags = NoFlags;
            this.subtreeFlags = NoFlags;
            this.deletions = null;
            this.lanes = NoLanes;
            this.childLanes = NoLanes;
            this.alternate = null;
            {
              this.actualDuration = Number.NaN;
              this.actualStartTime = Number.NaN;
              this.selfBaseDuration = Number.NaN;
              this.treeBaseDuration = Number.NaN;
              this.actualDuration = 0;
              this.actualStartTime = -1;
              this.selfBaseDuration = 0;
              this.treeBaseDuration = 0;
            }
            {
              this._debugSource = null;
              this._debugOwner = null;
              this._debugNeedsRemount = false;
              this._debugHookTypes = null;
              if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") {
                Object.preventExtensions(this);
              }
            }
          }
          var createFiber = function(tag, pendingProps, key, mode) {
            return new FiberNode(tag, pendingProps, key, mode);
          };
          function shouldConstruct$1(Component20) {
            var prototype = Component20.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function isSimpleFunctionComponent(type) {
            return typeof type === "function" && !shouldConstruct$1(type) && type.defaultProps === void 0;
          }
          function resolveLazyComponentTag(Component20) {
            if (typeof Component20 === "function") {
              return shouldConstruct$1(Component20) ? ClassComponent : FunctionComponent;
            } else if (Component20 !== void 0 && Component20 !== null) {
              var $$typeof = Component20.$$typeof;
              if ($$typeof === REACT_FORWARD_REF_TYPE) {
                return ForwardRef;
              }
              if ($$typeof === REACT_MEMO_TYPE) {
                return MemoComponent;
              }
            }
            return IndeterminateComponent;
          }
          function createWorkInProgress(current2, pendingProps) {
            var workInProgress2 = current2.alternate;
            if (workInProgress2 === null) {
              workInProgress2 = createFiber(current2.tag, pendingProps, current2.key, current2.mode);
              workInProgress2.elementType = current2.elementType;
              workInProgress2.type = current2.type;
              workInProgress2.stateNode = current2.stateNode;
              {
                workInProgress2._debugSource = current2._debugSource;
                workInProgress2._debugOwner = current2._debugOwner;
                workInProgress2._debugHookTypes = current2._debugHookTypes;
              }
              workInProgress2.alternate = current2;
              current2.alternate = workInProgress2;
            } else {
              workInProgress2.pendingProps = pendingProps;
              workInProgress2.type = current2.type;
              workInProgress2.flags = NoFlags;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.deletions = null;
              {
                workInProgress2.actualDuration = 0;
                workInProgress2.actualStartTime = -1;
              }
            }
            workInProgress2.flags = current2.flags & StaticMask;
            workInProgress2.childLanes = current2.childLanes;
            workInProgress2.lanes = current2.lanes;
            workInProgress2.child = current2.child;
            workInProgress2.memoizedProps = current2.memoizedProps;
            workInProgress2.memoizedState = current2.memoizedState;
            workInProgress2.updateQueue = current2.updateQueue;
            var currentDependencies = current2.dependencies;
            workInProgress2.dependencies = currentDependencies === null ? null : {
              lanes: currentDependencies.lanes,
              firstContext: currentDependencies.firstContext
            };
            workInProgress2.sibling = current2.sibling;
            workInProgress2.index = current2.index;
            workInProgress2.ref = current2.ref;
            {
              workInProgress2.selfBaseDuration = current2.selfBaseDuration;
              workInProgress2.treeBaseDuration = current2.treeBaseDuration;
            }
            {
              workInProgress2._debugNeedsRemount = current2._debugNeedsRemount;
              switch (workInProgress2.tag) {
                case IndeterminateComponent:
                case FunctionComponent:
                case SimpleMemoComponent:
                  workInProgress2.type = resolveFunctionForHotReloading(current2.type);
                  break;
                case ClassComponent:
                  workInProgress2.type = resolveClassForHotReloading(current2.type);
                  break;
                case ForwardRef:
                  workInProgress2.type = resolveForwardRefForHotReloading(current2.type);
                  break;
              }
            }
            return workInProgress2;
          }
          function resetWorkInProgress(workInProgress2, renderLanes2) {
            workInProgress2.flags &= StaticMask | Placement;
            var current2 = workInProgress2.alternate;
            if (current2 === null) {
              workInProgress2.childLanes = NoLanes;
              workInProgress2.lanes = renderLanes2;
              workInProgress2.child = null;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.memoizedProps = null;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              workInProgress2.dependencies = null;
              workInProgress2.stateNode = null;
              {
                workInProgress2.selfBaseDuration = 0;
                workInProgress2.treeBaseDuration = 0;
              }
            } else {
              workInProgress2.childLanes = current2.childLanes;
              workInProgress2.lanes = current2.lanes;
              workInProgress2.child = current2.child;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.deletions = null;
              workInProgress2.memoizedProps = current2.memoizedProps;
              workInProgress2.memoizedState = current2.memoizedState;
              workInProgress2.updateQueue = current2.updateQueue;
              workInProgress2.type = current2.type;
              var currentDependencies = current2.dependencies;
              workInProgress2.dependencies = currentDependencies === null ? null : {
                lanes: currentDependencies.lanes,
                firstContext: currentDependencies.firstContext
              };
              {
                workInProgress2.selfBaseDuration = current2.selfBaseDuration;
                workInProgress2.treeBaseDuration = current2.treeBaseDuration;
              }
            }
            return workInProgress2;
          }
          function createHostRootFiber(tag, isStrictMode, concurrentUpdatesByDefaultOverride) {
            var mode;
            if (tag === ConcurrentRoot) {
              mode = ConcurrentMode;
              if (isStrictMode === true) {
                mode |= StrictLegacyMode;
                {
                  mode |= StrictEffectsMode;
                }
              }
            } else {
              mode = NoMode;
            }
            if (isDevToolsPresent) {
              mode |= ProfileMode;
            }
            return createFiber(HostRoot, null, null, mode);
          }
          function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
            var fiberTag = IndeterminateComponent;
            var resolvedType = type;
            if (typeof type === "function") {
              if (shouldConstruct$1(type)) {
                fiberTag = ClassComponent;
                {
                  resolvedType = resolveClassForHotReloading(resolvedType);
                }
              } else {
                {
                  resolvedType = resolveFunctionForHotReloading(resolvedType);
                }
              }
            } else if (typeof type === "string") {
              fiberTag = HostComponent;
            } else {
              getTag: switch (type) {
                case REACT_FRAGMENT_TYPE:
                  return createFiberFromFragment(pendingProps.children, mode, lanes, key);
                case REACT_STRICT_MODE_TYPE:
                  fiberTag = Mode;
                  mode |= StrictLegacyMode;
                  if ((mode & ConcurrentMode) !== NoMode) {
                    mode |= StrictEffectsMode;
                  }
                  break;
                case REACT_PROFILER_TYPE:
                  return createFiberFromProfiler(pendingProps, mode, lanes, key);
                case REACT_SUSPENSE_TYPE:
                  return createFiberFromSuspense(pendingProps, mode, lanes, key);
                case REACT_SUSPENSE_LIST_TYPE:
                  return createFiberFromSuspenseList(pendingProps, mode, lanes, key);
                case REACT_OFFSCREEN_TYPE:
                  return createFiberFromOffscreen(pendingProps, mode, lanes, key);
                case REACT_LEGACY_HIDDEN_TYPE:
                // eslint-disable-next-line no-fallthrough
                case REACT_SCOPE_TYPE:
                // eslint-disable-next-line no-fallthrough
                case REACT_CACHE_TYPE:
                // eslint-disable-next-line no-fallthrough
                case REACT_TRACING_MARKER_TYPE:
                // eslint-disable-next-line no-fallthrough
                case REACT_DEBUG_TRACING_MODE_TYPE:
                // eslint-disable-next-line no-fallthrough
                default: {
                  if (typeof type === "object" && type !== null) {
                    switch (type.$$typeof) {
                      case REACT_PROVIDER_TYPE:
                        fiberTag = ContextProvider;
                        break getTag;
                      case REACT_CONTEXT_TYPE:
                        fiberTag = ContextConsumer;
                        break getTag;
                      case REACT_FORWARD_REF_TYPE:
                        fiberTag = ForwardRef;
                        {
                          resolvedType = resolveForwardRefForHotReloading(resolvedType);
                        }
                        break getTag;
                      case REACT_MEMO_TYPE:
                        fiberTag = MemoComponent;
                        break getTag;
                      case REACT_LAZY_TYPE:
                        fiberTag = LazyComponent;
                        resolvedType = null;
                        break getTag;
                    }
                  }
                  var info2 = "";
                  {
                    if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                      info2 += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                    }
                    var ownerName = owner ? getComponentNameFromFiber(owner) : null;
                    if (ownerName) {
                      info2 += "\n\nCheck the render method of `" + ownerName + "`.";
                    }
                  }
                  throw new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " + ("but got: " + (type == null ? type : typeof type) + "." + info2));
                }
              }
            }
            var fiber = createFiber(fiberTag, pendingProps, key, mode);
            fiber.elementType = type;
            fiber.type = resolvedType;
            fiber.lanes = lanes;
            {
              fiber._debugOwner = owner;
            }
            return fiber;
          }
          function createFiberFromElement(element, mode, lanes) {
            var owner = null;
            {
              owner = element._owner;
            }
            var type = element.type;
            var key = element.key;
            var pendingProps = element.props;
            var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);
            {
              fiber._debugSource = element._source;
              fiber._debugOwner = element._owner;
            }
            return fiber;
          }
          function createFiberFromFragment(elements, mode, lanes, key) {
            var fiber = createFiber(Fragment27, elements, key, mode);
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromProfiler(pendingProps, mode, lanes, key) {
            {
              if (typeof pendingProps.id !== "string") {
                error('Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.', typeof pendingProps.id);
              }
            }
            var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
            fiber.elementType = REACT_PROFILER_TYPE;
            fiber.lanes = lanes;
            {
              fiber.stateNode = {
                effectDuration: 0,
                passiveEffectDuration: 0
              };
            }
            return fiber;
          }
          function createFiberFromSuspense(pendingProps, mode, lanes, key) {
            var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
            fiber.elementType = REACT_SUSPENSE_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
            var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
            fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
            var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);
            fiber.elementType = REACT_OFFSCREEN_TYPE;
            fiber.lanes = lanes;
            var primaryChildInstance = {
              isHidden: false
            };
            fiber.stateNode = primaryChildInstance;
            return fiber;
          }
          function createFiberFromText(content, mode, lanes) {
            var fiber = createFiber(HostText, content, null, mode);
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromHostInstanceForDeletion() {
            var fiber = createFiber(HostComponent, null, null, NoMode);
            fiber.elementType = "DELETED";
            return fiber;
          }
          function createFiberFromDehydratedFragment(dehydratedNode) {
            var fiber = createFiber(DehydratedFragment, null, null, NoMode);
            fiber.stateNode = dehydratedNode;
            return fiber;
          }
          function createFiberFromPortal(portal, mode, lanes) {
            var pendingProps = portal.children !== null ? portal.children : [];
            var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
            fiber.lanes = lanes;
            fiber.stateNode = {
              containerInfo: portal.containerInfo,
              pendingChildren: null,
              // Used by persistent updates
              implementation: portal.implementation
            };
            return fiber;
          }
          function assignFiberPropertiesInDEV(target, source) {
            if (target === null) {
              target = createFiber(IndeterminateComponent, null, null, NoMode);
            }
            target.tag = source.tag;
            target.key = source.key;
            target.elementType = source.elementType;
            target.type = source.type;
            target.stateNode = source.stateNode;
            target.return = source.return;
            target.child = source.child;
            target.sibling = source.sibling;
            target.index = source.index;
            target.ref = source.ref;
            target.pendingProps = source.pendingProps;
            target.memoizedProps = source.memoizedProps;
            target.updateQueue = source.updateQueue;
            target.memoizedState = source.memoizedState;
            target.dependencies = source.dependencies;
            target.mode = source.mode;
            target.flags = source.flags;
            target.subtreeFlags = source.subtreeFlags;
            target.deletions = source.deletions;
            target.lanes = source.lanes;
            target.childLanes = source.childLanes;
            target.alternate = source.alternate;
            {
              target.actualDuration = source.actualDuration;
              target.actualStartTime = source.actualStartTime;
              target.selfBaseDuration = source.selfBaseDuration;
              target.treeBaseDuration = source.treeBaseDuration;
            }
            target._debugSource = source._debugSource;
            target._debugOwner = source._debugOwner;
            target._debugNeedsRemount = source._debugNeedsRemount;
            target._debugHookTypes = source._debugHookTypes;
            return target;
          }
          function FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError) {
            this.tag = tag;
            this.containerInfo = containerInfo;
            this.pendingChildren = null;
            this.current = null;
            this.pingCache = null;
            this.finishedWork = null;
            this.timeoutHandle = noTimeout;
            this.context = null;
            this.pendingContext = null;
            this.callbackNode = null;
            this.callbackPriority = NoLane;
            this.eventTimes = createLaneMap(NoLanes);
            this.expirationTimes = createLaneMap(NoTimestamp);
            this.pendingLanes = NoLanes;
            this.suspendedLanes = NoLanes;
            this.pingedLanes = NoLanes;
            this.expiredLanes = NoLanes;
            this.mutableReadLanes = NoLanes;
            this.finishedLanes = NoLanes;
            this.entangledLanes = NoLanes;
            this.entanglements = createLaneMap(NoLanes);
            this.identifierPrefix = identifierPrefix;
            this.onRecoverableError = onRecoverableError;
            {
              this.mutableSourceEagerHydrationData = null;
            }
            {
              this.effectDuration = 0;
              this.passiveEffectDuration = 0;
            }
            {
              this.memoizedUpdaters = /* @__PURE__ */ new Set();
              var pendingUpdatersLaneMap = this.pendingUpdatersLaneMap = [];
              for (var _i = 0; _i < TotalLanes; _i++) {
                pendingUpdatersLaneMap.push(/* @__PURE__ */ new Set());
              }
            }
            {
              switch (tag) {
                case ConcurrentRoot:
                  this._debugRootType = hydrate2 ? "hydrateRoot()" : "createRoot()";
                  break;
                case LegacyRoot:
                  this._debugRootType = hydrate2 ? "hydrate()" : "render()";
                  break;
              }
            }
          }
          function createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var root2 = new FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError);
            var uninitializedFiber = createHostRootFiber(tag, isStrictMode);
            root2.current = uninitializedFiber;
            uninitializedFiber.stateNode = root2;
            {
              var _initialState = {
                element: initialChildren,
                isDehydrated: hydrate2,
                cache: null,
                // not enabled yet
                transitions: null,
                pendingSuspenseBoundaries: null
              };
              uninitializedFiber.memoizedState = _initialState;
            }
            initializeUpdateQueue(uninitializedFiber);
            return root2;
          }
          var ReactVersion = "18.3.1";
          function createPortal3(children, containerInfo, implementation) {
            var key = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
            {
              checkKeyStringCoercion(key);
            }
            return {
              // This tag allow us to uniquely identify this as a React Portal
              $$typeof: REACT_PORTAL_TYPE,
              key: key == null ? null : "" + key,
              children,
              containerInfo,
              implementation
            };
          }
          var didWarnAboutNestedUpdates;
          var didWarnAboutFindNodeInStrictMode;
          {
            didWarnAboutNestedUpdates = false;
            didWarnAboutFindNodeInStrictMode = {};
          }
          function getContextForSubtree(parentComponent) {
            if (!parentComponent) {
              return emptyContextObject;
            }
            var fiber = get(parentComponent);
            var parentContext = findCurrentUnmaskedContext(fiber);
            if (fiber.tag === ClassComponent) {
              var Component20 = fiber.type;
              if (isContextProvider(Component20)) {
                return processChildContext(fiber, Component20, parentContext);
              }
            }
            return parentContext;
          }
          function findHostInstanceWithWarning(component, methodName) {
            {
              var fiber = get(component);
              if (fiber === void 0) {
                if (typeof component.render === "function") {
                  throw new Error("Unable to find node on an unmounted component.");
                } else {
                  var keys = Object.keys(component).join(",");
                  throw new Error("Argument appears to not be a ReactComponent. Keys: " + keys);
                }
              }
              var hostFiber = findCurrentHostFiber(fiber);
              if (hostFiber === null) {
                return null;
              }
              if (hostFiber.mode & StrictLegacyMode) {
                var componentName = getComponentNameFromFiber(fiber) || "Component";
                if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                  didWarnAboutFindNodeInStrictMode[componentName] = true;
                  var previousFiber = current;
                  try {
                    setCurrentFiber(hostFiber);
                    if (fiber.mode & StrictLegacyMode) {
                      error("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    } else {
                      error("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    }
                  } finally {
                    if (previousFiber) {
                      setCurrentFiber(previousFiber);
                    } else {
                      resetCurrentFiber();
                    }
                  }
                }
              }
              return hostFiber.stateNode;
            }
          }
          function createContainer(containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var hydrate2 = false;
            var initialChildren = null;
            return createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
          }
          function createHydrationContainer(initialChildren, callback, containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var hydrate2 = true;
            var root2 = createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            root2.context = getContextForSubtree(null);
            var current2 = root2.current;
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(current2);
            var update = createUpdate(eventTime, lane);
            update.callback = callback !== void 0 && callback !== null ? callback : null;
            enqueueUpdate(current2, update, lane);
            scheduleInitialHydrationOnRoot(root2, lane, eventTime);
            return root2;
          }
          function updateContainer(element, container, parentComponent, callback) {
            {
              onScheduleRoot(container, element);
            }
            var current$1 = container.current;
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(current$1);
            {
              markRenderScheduled(lane);
            }
            var context = getContextForSubtree(parentComponent);
            if (container.context === null) {
              container.context = context;
            } else {
              container.pendingContext = context;
            }
            {
              if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
                didWarnAboutNestedUpdates = true;
                error("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentNameFromFiber(current) || "Unknown");
              }
            }
            var update = createUpdate(eventTime, lane);
            update.payload = {
              element
            };
            callback = callback === void 0 ? null : callback;
            if (callback !== null) {
              {
                if (typeof callback !== "function") {
                  error("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
                }
              }
              update.callback = callback;
            }
            var root2 = enqueueUpdate(current$1, update, lane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, current$1, lane, eventTime);
              entangleTransitions(root2, current$1, lane);
            }
            return lane;
          }
          function getPublicRootInstance(container) {
            var containerFiber = container.current;
            if (!containerFiber.child) {
              return null;
            }
            switch (containerFiber.child.tag) {
              case HostComponent:
                return getPublicInstance(containerFiber.child.stateNode);
              default:
                return containerFiber.child.stateNode;
            }
          }
          function attemptSynchronousHydration$1(fiber) {
            switch (fiber.tag) {
              case HostRoot: {
                var root2 = fiber.stateNode;
                if (isRootDehydrated(root2)) {
                  var lanes = getHighestPriorityPendingLanes(root2);
                  flushRoot(root2, lanes);
                }
                break;
              }
              case SuspenseComponent: {
                flushSync(function() {
                  var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                  if (root3 !== null) {
                    var eventTime = requestEventTime();
                    scheduleUpdateOnFiber(root3, fiber, SyncLane, eventTime);
                  }
                });
                var retryLane = SyncLane;
                markRetryLaneIfNotHydrated(fiber, retryLane);
                break;
              }
            }
          }
          function markRetryLaneImpl(fiber, retryLane) {
            var suspenseState = fiber.memoizedState;
            if (suspenseState !== null && suspenseState.dehydrated !== null) {
              suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
            }
          }
          function markRetryLaneIfNotHydrated(fiber, retryLane) {
            markRetryLaneImpl(fiber, retryLane);
            var alternate = fiber.alternate;
            if (alternate) {
              markRetryLaneImpl(alternate, retryLane);
            }
          }
          function attemptContinuousHydration$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var lane = SelectiveHydrationLane;
            var root2 = enqueueConcurrentRenderForLane(fiber, lane);
            if (root2 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
            }
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function attemptHydrationAtCurrentPriority$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var lane = requestUpdateLane(fiber);
            var root2 = enqueueConcurrentRenderForLane(fiber, lane);
            if (root2 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
            }
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function findHostInstanceWithNoPortals(fiber) {
            var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
            if (hostFiber === null) {
              return null;
            }
            return hostFiber.stateNode;
          }
          var shouldErrorImpl = function(fiber) {
            return null;
          };
          function shouldError(fiber) {
            return shouldErrorImpl(fiber);
          }
          var shouldSuspendImpl = function(fiber) {
            return false;
          };
          function shouldSuspend(fiber) {
            return shouldSuspendImpl(fiber);
          }
          var overrideHookState = null;
          var overrideHookStateDeletePath = null;
          var overrideHookStateRenamePath = null;
          var overrideProps = null;
          var overridePropsDeletePath = null;
          var overridePropsRenamePath = null;
          var scheduleUpdate = null;
          var setErrorHandler = null;
          var setSuspenseHandler = null;
          {
            var copyWithDeleteImpl = function(obj, path, index2) {
              var key = path[index2];
              var updated = isArray(obj) ? obj.slice() : assign({}, obj);
              if (index2 + 1 === path.length) {
                if (isArray(updated)) {
                  updated.splice(key, 1);
                } else {
                  delete updated[key];
                }
                return updated;
              }
              updated[key] = copyWithDeleteImpl(obj[key], path, index2 + 1);
              return updated;
            };
            var copyWithDelete = function(obj, path) {
              return copyWithDeleteImpl(obj, path, 0);
            };
            var copyWithRenameImpl = function(obj, oldPath, newPath, index2) {
              var oldKey = oldPath[index2];
              var updated = isArray(obj) ? obj.slice() : assign({}, obj);
              if (index2 + 1 === oldPath.length) {
                var newKey = newPath[index2];
                updated[newKey] = updated[oldKey];
                if (isArray(updated)) {
                  updated.splice(oldKey, 1);
                } else {
                  delete updated[oldKey];
                }
              } else {
                updated[oldKey] = copyWithRenameImpl(
                  // $FlowFixMe number or string is fine here
                  obj[oldKey],
                  oldPath,
                  newPath,
                  index2 + 1
                );
              }
              return updated;
            };
            var copyWithRename = function(obj, oldPath, newPath) {
              if (oldPath.length !== newPath.length) {
                warn("copyWithRename() expects paths of the same length");
                return;
              } else {
                for (var i = 0; i < newPath.length - 1; i++) {
                  if (oldPath[i] !== newPath[i]) {
                    warn("copyWithRename() expects paths to be the same except for the deepest key");
                    return;
                  }
                }
              }
              return copyWithRenameImpl(obj, oldPath, newPath, 0);
            };
            var copyWithSetImpl = function(obj, path, index2, value) {
              if (index2 >= path.length) {
                return value;
              }
              var key = path[index2];
              var updated = isArray(obj) ? obj.slice() : assign({}, obj);
              updated[key] = copyWithSetImpl(obj[key], path, index2 + 1, value);
              return updated;
            };
            var copyWithSet = function(obj, path, value) {
              return copyWithSetImpl(obj, path, 0, value);
            };
            var findHook = function(fiber, id) {
              var currentHook2 = fiber.memoizedState;
              while (currentHook2 !== null && id > 0) {
                currentHook2 = currentHook2.next;
                id--;
              }
              return currentHook2;
            };
            overrideHookState = function(fiber, id, path, value) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithSet(hook.memoizedState, path, value);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign({}, fiber.memoizedProps);
                var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root2 !== null) {
                  scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideHookStateDeletePath = function(fiber, id, path) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithDelete(hook.memoizedState, path);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign({}, fiber.memoizedProps);
                var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root2 !== null) {
                  scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideHookStateRenamePath = function(fiber, id, oldPath, newPath) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign({}, fiber.memoizedProps);
                var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root2 !== null) {
                  scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideProps = function(fiber, path, value) {
              fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
              }
            };
            overridePropsDeletePath = function(fiber, path) {
              fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
              }
            };
            overridePropsRenamePath = function(fiber, oldPath, newPath) {
              fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
              }
            };
            scheduleUpdate = function(fiber) {
              var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
              }
            };
            setErrorHandler = function(newShouldErrorImpl) {
              shouldErrorImpl = newShouldErrorImpl;
            };
            setSuspenseHandler = function(newShouldSuspendImpl) {
              shouldSuspendImpl = newShouldSuspendImpl;
            };
          }
          function findHostInstanceByFiber(fiber) {
            var hostFiber = findCurrentHostFiber(fiber);
            if (hostFiber === null) {
              return null;
            }
            return hostFiber.stateNode;
          }
          function emptyFindFiberByHostInstance(instance) {
            return null;
          }
          function getCurrentFiberForDevTools() {
            return current;
          }
          function injectIntoDevTools(devToolsConfig) {
            var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
            var ReactCurrentDispatcher2 = ReactSharedInternals.ReactCurrentDispatcher;
            return injectInternals({
              bundleType: devToolsConfig.bundleType,
              version: devToolsConfig.version,
              rendererPackageName: devToolsConfig.rendererPackageName,
              rendererConfig: devToolsConfig.rendererConfig,
              overrideHookState,
              overrideHookStateDeletePath,
              overrideHookStateRenamePath,
              overrideProps,
              overridePropsDeletePath,
              overridePropsRenamePath,
              setErrorHandler,
              setSuspenseHandler,
              scheduleUpdate,
              currentDispatcherRef: ReactCurrentDispatcher2,
              findHostInstanceByFiber,
              findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
              // React Refresh
              findHostInstancesForRefresh,
              scheduleRefresh,
              scheduleRoot,
              setRefreshHandler,
              // Enables DevTools to append owner stacks to error messages in DEV mode.
              getCurrentFiber: getCurrentFiberForDevTools,
              // Enables DevTools to detect reconciler version rather than renderer version
              // which may not match for third party renderers.
              reconcilerVersion: ReactVersion
            });
          }
          var defaultOnRecoverableError = typeof reportError === "function" ? (
            // In modern browsers, reportError will dispatch an error event,
            // emulating an uncaught JavaScript error.
            reportError
          ) : function(error2) {
            console["error"](error2);
          };
          function ReactDOMRoot(internalRoot) {
            this._internalRoot = internalRoot;
          }
          ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render = function(children) {
            var root2 = this._internalRoot;
            if (root2 === null) {
              throw new Error("Cannot update an unmounted root.");
            }
            {
              if (typeof arguments[1] === "function") {
                error("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              } else if (isValidContainer(arguments[1])) {
                error("You passed a container to the second argument of root.render(...). You don't need to pass it again since you already passed it to create the root.");
              } else if (typeof arguments[1] !== "undefined") {
                error("You passed a second argument to root.render(...) but it only accepts one argument.");
              }
              var container = root2.containerInfo;
              if (container.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(root2.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container) {
                    error("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
                  }
                }
              }
            }
            updateContainer(children, root2, null, null);
          };
          ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount = function() {
            {
              if (typeof arguments[0] === "function") {
                error("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              }
            }
            var root2 = this._internalRoot;
            if (root2 !== null) {
              this._internalRoot = null;
              var container = root2.containerInfo;
              {
                if (isAlreadyRendering()) {
                  error("Attempted to synchronously unmount a root while React was already rendering. React cannot finish unmounting the root until the current render has completed, which may lead to a race condition.");
                }
              }
              flushSync(function() {
                updateContainer(null, root2, null, null);
              });
              unmarkContainerAsRoot(container);
            }
          };
          function createRoot2(container, options2) {
            if (!isValidContainer(container)) {
              throw new Error("createRoot(...): Target container is not a DOM element.");
            }
            warnIfReactDOMContainerInDEV(container);
            var isStrictMode = false;
            var concurrentUpdatesByDefaultOverride = false;
            var identifierPrefix = "";
            var onRecoverableError = defaultOnRecoverableError;
            var transitionCallbacks = null;
            if (options2 !== null && options2 !== void 0) {
              {
                if (options2.hydrate) {
                  warn("hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead.");
                } else {
                  if (typeof options2 === "object" && options2 !== null && options2.$$typeof === REACT_ELEMENT_TYPE) {
                    error("You passed a JSX element to createRoot. You probably meant to call root.render instead. Example usage:\n\n  let root = createRoot(domContainer);\n  root.render(<App />);");
                  }
                }
              }
              if (options2.unstable_strictMode === true) {
                isStrictMode = true;
              }
              if (options2.identifierPrefix !== void 0) {
                identifierPrefix = options2.identifierPrefix;
              }
              if (options2.onRecoverableError !== void 0) {
                onRecoverableError = options2.onRecoverableError;
              }
              if (options2.transitionCallbacks !== void 0) {
                transitionCallbacks = options2.transitionCallbacks;
              }
            }
            var root2 = createContainer(container, ConcurrentRoot, null, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            markContainerAsRoot(root2.current, container);
            var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
            listenToAllSupportedEvents(rootContainerElement);
            return new ReactDOMRoot(root2);
          }
          function ReactDOMHydrationRoot(internalRoot) {
            this._internalRoot = internalRoot;
          }
          function scheduleHydration(target) {
            if (target) {
              queueExplicitHydrationTarget(target);
            }
          }
          ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = scheduleHydration;
          function hydrateRoot(container, initialChildren, options2) {
            if (!isValidContainer(container)) {
              throw new Error("hydrateRoot(...): Target container is not a DOM element.");
            }
            warnIfReactDOMContainerInDEV(container);
            {
              if (initialChildren === void 0) {
                error("Must provide initial children as second argument to hydrateRoot. Example usage: hydrateRoot(domContainer, <App />)");
              }
            }
            var hydrationCallbacks = options2 != null ? options2 : null;
            var mutableSources = options2 != null && options2.hydratedSources || null;
            var isStrictMode = false;
            var concurrentUpdatesByDefaultOverride = false;
            var identifierPrefix = "";
            var onRecoverableError = defaultOnRecoverableError;
            if (options2 !== null && options2 !== void 0) {
              if (options2.unstable_strictMode === true) {
                isStrictMode = true;
              }
              if (options2.identifierPrefix !== void 0) {
                identifierPrefix = options2.identifierPrefix;
              }
              if (options2.onRecoverableError !== void 0) {
                onRecoverableError = options2.onRecoverableError;
              }
            }
            var root2 = createHydrationContainer(initialChildren, null, container, ConcurrentRoot, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            markContainerAsRoot(root2.current, container);
            listenToAllSupportedEvents(container);
            if (mutableSources) {
              for (var i = 0; i < mutableSources.length; i++) {
                var mutableSource = mutableSources[i];
                registerMutableSourceForHydration(root2, mutableSource);
              }
            }
            return new ReactDOMHydrationRoot(root2);
          }
          function isValidContainer(node) {
            return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || !disableCommentsAsDOMContainers));
          }
          function isValidContainerLegacy(node) {
            return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === " react-mount-point-unstable "));
          }
          function warnIfReactDOMContainerInDEV(container) {
            {
              if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
                error("createRoot(): Creating roots directly with document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try using a container element created for your app.");
              }
              if (isContainerMarkedAsRoot(container)) {
                if (container._reactRootContainer) {
                  error("You are calling ReactDOMClient.createRoot() on a container that was previously passed to ReactDOM.render(). This is not supported.");
                } else {
                  error("You are calling ReactDOMClient.createRoot() on a container that has already been passed to createRoot() before. Instead, call root.render() on the existing root instead if you want to update it.");
                }
              }
            }
          }
          var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
          var topLevelUpdateWarnings;
          {
            topLevelUpdateWarnings = function(container) {
              if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container) {
                    error("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
                  }
                }
              }
              var isRootRenderedBySomeReact = !!container._reactRootContainer;
              var rootEl = getReactRootElementInContainer(container);
              var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
              if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
                error("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
              }
              if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
                error("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
              }
            };
          }
          function getReactRootElementInContainer(container) {
            if (!container) {
              return null;
            }
            if (container.nodeType === DOCUMENT_NODE) {
              return container.documentElement;
            } else {
              return container.firstChild;
            }
          }
          function noopOnRecoverableError() {
          }
          function legacyCreateRootFromDOMContainer(container, initialChildren, parentComponent, callback, isHydrationContainer) {
            if (isHydrationContainer) {
              if (typeof callback === "function") {
                var originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(root2);
                  originalCallback.call(instance);
                };
              }
              var root2 = createHydrationContainer(
                initialChildren,
                callback,
                container,
                LegacyRoot,
                null,
                // hydrationCallbacks
                false,
                // isStrictMode
                false,
                // concurrentUpdatesByDefaultOverride,
                "",
                // identifierPrefix
                noopOnRecoverableError
              );
              container._reactRootContainer = root2;
              markContainerAsRoot(root2.current, container);
              var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
              listenToAllSupportedEvents(rootContainerElement);
              flushSync();
              return root2;
            } else {
              var rootSibling;
              while (rootSibling = container.lastChild) {
                container.removeChild(rootSibling);
              }
              if (typeof callback === "function") {
                var _originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(_root);
                  _originalCallback.call(instance);
                };
              }
              var _root = createContainer(
                container,
                LegacyRoot,
                null,
                // hydrationCallbacks
                false,
                // isStrictMode
                false,
                // concurrentUpdatesByDefaultOverride,
                "",
                // identifierPrefix
                noopOnRecoverableError
              );
              container._reactRootContainer = _root;
              markContainerAsRoot(_root.current, container);
              var _rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
              listenToAllSupportedEvents(_rootContainerElement);
              flushSync(function() {
                updateContainer(initialChildren, _root, parentComponent, callback);
              });
              return _root;
            }
          }
          function warnOnInvalidCallback$1(callback, callerName) {
            {
              if (callback !== null && typeof callback !== "function") {
                error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            }
          }
          function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
            {
              topLevelUpdateWarnings(container);
              warnOnInvalidCallback$1(callback === void 0 ? null : callback, "render");
            }
            var maybeRoot = container._reactRootContainer;
            var root2;
            if (!maybeRoot) {
              root2 = legacyCreateRootFromDOMContainer(container, children, parentComponent, callback, forceHydrate);
            } else {
              root2 = maybeRoot;
              if (typeof callback === "function") {
                var originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(root2);
                  originalCallback.call(instance);
                };
              }
              updateContainer(children, root2, parentComponent, callback);
            }
            return getPublicRootInstance(root2);
          }
          var didWarnAboutFindDOMNode = false;
          function findDOMNode3(componentOrElement) {
            {
              if (!didWarnAboutFindDOMNode) {
                didWarnAboutFindDOMNode = true;
                error("findDOMNode is deprecated and will be removed in the next major release. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node");
              }
              var owner = ReactCurrentOwner$3.current;
              if (owner !== null && owner.stateNode !== null) {
                var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
                if (!warnedAboutRefsInRender) {
                  error("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromType(owner.type) || "A component");
                }
                owner.stateNode._warnedAboutRefsInRender = true;
              }
            }
            if (componentOrElement == null) {
              return null;
            }
            if (componentOrElement.nodeType === ELEMENT_NODE) {
              return componentOrElement;
            }
            {
              return findHostInstanceWithWarning(componentOrElement, "findDOMNode");
            }
          }
          function hydrate(element, container, callback) {
            {
              error("ReactDOM.hydrate is no longer supported in React 18. Use hydrateRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(container)) {
              throw new Error("Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call hydrateRoot(container, element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
          }
          function render(element, container, callback) {
            {
              error("ReactDOM.render is no longer supported in React 18. Use createRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(container)) {
              throw new Error("Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.render() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.render(element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
          }
          function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
            {
              error("ReactDOM.unstable_renderSubtreeIntoContainer() is no longer supported in React 18. Consider using a portal instead. Until you switch to the createRoot API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(containerNode)) {
              throw new Error("Target container is not a DOM element.");
            }
            if (parentComponent == null || !has(parentComponent)) {
              throw new Error("parentComponent must be a valid React Component");
            }
            return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
          }
          var didWarnAboutUnmountComponentAtNode = false;
          function unmountComponentAtNode(container) {
            {
              if (!didWarnAboutUnmountComponentAtNode) {
                didWarnAboutUnmountComponentAtNode = true;
                error("unmountComponentAtNode is deprecated and will be removed in the next major release. Switch to the createRoot API. Learn more: https://reactjs.org/link/switch-to-createroot");
              }
            }
            if (!isValidContainerLegacy(container)) {
              throw new Error("unmountComponentAtNode(...): Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.unmount()?");
              }
            }
            if (container._reactRootContainer) {
              {
                var rootEl = getReactRootElementInContainer(container);
                var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
                if (renderedByDifferentReact) {
                  error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
                }
              }
              flushSync(function() {
                legacyRenderSubtreeIntoContainer(null, null, container, false, function() {
                  container._reactRootContainer = null;
                  unmarkContainerAsRoot(container);
                });
              });
              return true;
            } else {
              {
                var _rootEl = getReactRootElementInContainer(container);
                var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl));
                var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainerLegacy(container.parentNode) && !!container.parentNode._reactRootContainer;
                if (hasNonRootReactChild) {
                  error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
                }
              }
              return false;
            }
          }
          setAttemptSynchronousHydration(attemptSynchronousHydration$1);
          setAttemptContinuousHydration(attemptContinuousHydration$1);
          setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
          setGetCurrentUpdatePriority(getCurrentUpdatePriority);
          setAttemptHydrationAtPriority(runWithPriority);
          {
            if (typeof Map !== "function" || // $FlowIssue Flow incorrectly thinks Map has no prototype
            Map.prototype == null || typeof Map.prototype.forEach !== "function" || typeof Set !== "function" || // $FlowIssue Flow incorrectly thinks Set has no prototype
            Set.prototype == null || typeof Set.prototype.clear !== "function" || typeof Set.prototype.forEach !== "function") {
              error("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
            }
          }
          setRestoreImplementation(restoreControlledState$3);
          setBatchingImplementation(batchedUpdates$1, discreteUpdates, flushSync);
          function createPortal$1(children, container) {
            var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
            if (!isValidContainer(container)) {
              throw new Error("Target container is not a DOM element.");
            }
            return createPortal3(children, container, null, key);
          }
          function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
            return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
          }
          var Internals = {
            usingClientEntryPoint: false,
            // Keep in sync with ReactTestUtils.js.
            // This is an array for better minification.
            Events: [getInstanceFromNode, getNodeFromInstance, getFiberCurrentPropsFromNode, enqueueStateRestore, restoreStateIfNeeded, batchedUpdates$1]
          };
          function createRoot$1(container, options2) {
            {
              if (!Internals.usingClientEntryPoint && true) {
                error('You are importing createRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
              }
            }
            return createRoot2(container, options2);
          }
          function hydrateRoot$1(container, initialChildren, options2) {
            {
              if (!Internals.usingClientEntryPoint && true) {
                error('You are importing hydrateRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
              }
            }
            return hydrateRoot(container, initialChildren, options2);
          }
          function flushSync$1(fn) {
            {
              if (isAlreadyRendering()) {
                error("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.");
              }
            }
            return flushSync(fn);
          }
          var foundDevTools = injectIntoDevTools({
            findFiberByHostInstance: getClosestInstanceFromNode,
            bundleType: 1,
            version: ReactVersion,
            rendererPackageName: "react-dom"
          });
          {
            if (!foundDevTools && canUseDOM3 && window.top === window.self) {
              if (navigator.userAgent.indexOf("Chrome") > -1 && navigator.userAgent.indexOf("Edge") === -1 || navigator.userAgent.indexOf("Firefox") > -1) {
                var protocol = window.location.protocol;
                if (/^(https?|file):$/.test(protocol)) {
                  console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" + (protocol === "file:" ? "\nYou might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq" : ""), "font-weight:bold");
                }
              }
            }
          }
          exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
          exports.createPortal = createPortal$1;
          exports.createRoot = createRoot$1;
          exports.findDOMNode = findDOMNode3;
          exports.flushSync = flushSync$1;
          exports.hydrate = hydrate;
          exports.hydrateRoot = hydrateRoot$1;
          exports.render = render;
          exports.unmountComponentAtNode = unmountComponentAtNode;
          exports.unstable_batchedUpdates = batchedUpdates$1;
          exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
          exports.version = ReactVersion;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // node_modules/react-dom/index.js
  var require_react_dom = __commonJS({
    "node_modules/react-dom/index.js"(exports, module) {
      "use strict";
      if (false) {
        checkDCE();
        module.exports = null;
      } else {
        module.exports = require_react_dom_development();
      }
    }
  });

  // node_modules/react-dom/client.js
  var require_client = __commonJS({
    "node_modules/react-dom/client.js"(exports) {
      "use strict";
      var m = require_react_dom();
      if (false) {
        exports.createRoot = m.createRoot;
        exports.hydrateRoot = m.hydrateRoot;
      } else {
        i = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        exports.createRoot = function(c, o) {
          i.usingClientEntryPoint = true;
          try {
            return m.createRoot(c, o);
          } finally {
            i.usingClientEntryPoint = false;
          }
        };
        exports.hydrateRoot = function(c, h, o) {
          i.usingClientEntryPoint = true;
          try {
            return m.hydrateRoot(c, h, o);
          } finally {
            i.usingClientEntryPoint = false;
          }
        };
      }
      var i;
    }
  });

  // node_modules/cookie/dist/index.js
  var require_dist = __commonJS({
    "node_modules/cookie/dist/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.parse = parse2;
      exports.serialize = serialize2;
      var cookieNameRegExp = /^[\u0021-\u003A\u003C\u003E-\u007E]+$/;
      var cookieValueRegExp = /^[\u0021-\u003A\u003C-\u007E]*$/;
      var domainValueRegExp = /^([.]?[a-z0-9]([a-z0-9-]{0,61}[a-z0-9])?)([.][a-z0-9]([a-z0-9-]{0,61}[a-z0-9])?)*$/i;
      var pathValueRegExp = /^[\u0020-\u003A\u003D-\u007E]*$/;
      var __toString = Object.prototype.toString;
      var NullObject = /* @__PURE__ */ (() => {
        const C = function() {
        };
        C.prototype = /* @__PURE__ */ Object.create(null);
        return C;
      })();
      function parse2(str, options) {
        const obj = new NullObject();
        const len = str.length;
        if (len < 2)
          return obj;
        const dec = options?.decode || decode;
        let index = 0;
        do {
          const eqIdx = str.indexOf("=", index);
          if (eqIdx === -1)
            break;
          const colonIdx = str.indexOf(";", index);
          const endIdx = colonIdx === -1 ? len : colonIdx;
          if (eqIdx > endIdx) {
            index = str.lastIndexOf(";", eqIdx - 1) + 1;
            continue;
          }
          const keyStartIdx = startIndex(str, index, eqIdx);
          const keyEndIdx = endIndex(str, eqIdx, keyStartIdx);
          const key = str.slice(keyStartIdx, keyEndIdx);
          if (obj[key] === void 0) {
            let valStartIdx = startIndex(str, eqIdx + 1, endIdx);
            let valEndIdx = endIndex(str, endIdx, valStartIdx);
            const value = dec(str.slice(valStartIdx, valEndIdx));
            obj[key] = value;
          }
          index = endIdx + 1;
        } while (index < len);
        return obj;
      }
      function startIndex(str, index, max) {
        do {
          const code = str.charCodeAt(index);
          if (code !== 32 && code !== 9)
            return index;
        } while (++index < max);
        return max;
      }
      function endIndex(str, index, min) {
        while (index > min) {
          const code = str.charCodeAt(--index);
          if (code !== 32 && code !== 9)
            return index + 1;
        }
        return min;
      }
      function serialize2(name, val, options) {
        const enc = options?.encode || encodeURIComponent;
        if (!cookieNameRegExp.test(name)) {
          throw new TypeError(`argument name is invalid: ${name}`);
        }
        const value = enc(val);
        if (!cookieValueRegExp.test(value)) {
          throw new TypeError(`argument val is invalid: ${val}`);
        }
        let str = name + "=" + value;
        if (!options)
          return str;
        if (options.maxAge !== void 0) {
          if (!Number.isInteger(options.maxAge)) {
            throw new TypeError(`option maxAge is invalid: ${options.maxAge}`);
          }
          str += "; Max-Age=" + options.maxAge;
        }
        if (options.domain) {
          if (!domainValueRegExp.test(options.domain)) {
            throw new TypeError(`option domain is invalid: ${options.domain}`);
          }
          str += "; Domain=" + options.domain;
        }
        if (options.path) {
          if (!pathValueRegExp.test(options.path)) {
            throw new TypeError(`option path is invalid: ${options.path}`);
          }
          str += "; Path=" + options.path;
        }
        if (options.expires) {
          if (!isDate(options.expires) || !Number.isFinite(options.expires.valueOf())) {
            throw new TypeError(`option expires is invalid: ${options.expires}`);
          }
          str += "; Expires=" + options.expires.toUTCString();
        }
        if (options.httpOnly) {
          str += "; HttpOnly";
        }
        if (options.secure) {
          str += "; Secure";
        }
        if (options.partitioned) {
          str += "; Partitioned";
        }
        if (options.priority) {
          const priority = typeof options.priority === "string" ? options.priority.toLowerCase() : void 0;
          switch (priority) {
            case "low":
              str += "; Priority=Low";
              break;
            case "medium":
              str += "; Priority=Medium";
              break;
            case "high":
              str += "; Priority=High";
              break;
            default:
              throw new TypeError(`option priority is invalid: ${options.priority}`);
          }
        }
        if (options.sameSite) {
          const sameSite = typeof options.sameSite === "string" ? options.sameSite.toLowerCase() : options.sameSite;
          switch (sameSite) {
            case true:
            case "strict":
              str += "; SameSite=Strict";
              break;
            case "lax":
              str += "; SameSite=Lax";
              break;
            case "none":
              str += "; SameSite=None";
              break;
            default:
              throw new TypeError(`option sameSite is invalid: ${options.sameSite}`);
          }
        }
        return str;
      }
      function decode(str) {
        if (str.indexOf("%") === -1)
          return str;
        try {
          return decodeURIComponent(str);
        } catch (e) {
          return str;
        }
      }
      function isDate(val) {
        return __toString.call(val) === "[object Date]";
      }
    }
  });

  // node_modules/lodash/_listCacheClear.js
  var require_listCacheClear = __commonJS({
    "node_modules/lodash/_listCacheClear.js"(exports, module) {
      function listCacheClear() {
        this.__data__ = [];
        this.size = 0;
      }
      module.exports = listCacheClear;
    }
  });

  // node_modules/lodash/eq.js
  var require_eq = __commonJS({
    "node_modules/lodash/eq.js"(exports, module) {
      function eq(value, other) {
        return value === other || value !== value && other !== other;
      }
      module.exports = eq;
    }
  });

  // node_modules/lodash/_assocIndexOf.js
  var require_assocIndexOf = __commonJS({
    "node_modules/lodash/_assocIndexOf.js"(exports, module) {
      var eq = require_eq();
      function assocIndexOf(array, key) {
        var length = array.length;
        while (length--) {
          if (eq(array[length][0], key)) {
            return length;
          }
        }
        return -1;
      }
      module.exports = assocIndexOf;
    }
  });

  // node_modules/lodash/_listCacheDelete.js
  var require_listCacheDelete = __commonJS({
    "node_modules/lodash/_listCacheDelete.js"(exports, module) {
      var assocIndexOf = require_assocIndexOf();
      var arrayProto = Array.prototype;
      var splice = arrayProto.splice;
      function listCacheDelete(key) {
        var data2 = this.__data__, index = assocIndexOf(data2, key);
        if (index < 0) {
          return false;
        }
        var lastIndex = data2.length - 1;
        if (index == lastIndex) {
          data2.pop();
        } else {
          splice.call(data2, index, 1);
        }
        --this.size;
        return true;
      }
      module.exports = listCacheDelete;
    }
  });

  // node_modules/lodash/_listCacheGet.js
  var require_listCacheGet = __commonJS({
    "node_modules/lodash/_listCacheGet.js"(exports, module) {
      var assocIndexOf = require_assocIndexOf();
      function listCacheGet(key) {
        var data2 = this.__data__, index = assocIndexOf(data2, key);
        return index < 0 ? void 0 : data2[index][1];
      }
      module.exports = listCacheGet;
    }
  });

  // node_modules/lodash/_listCacheHas.js
  var require_listCacheHas = __commonJS({
    "node_modules/lodash/_listCacheHas.js"(exports, module) {
      var assocIndexOf = require_assocIndexOf();
      function listCacheHas(key) {
        return assocIndexOf(this.__data__, key) > -1;
      }
      module.exports = listCacheHas;
    }
  });

  // node_modules/lodash/_listCacheSet.js
  var require_listCacheSet = __commonJS({
    "node_modules/lodash/_listCacheSet.js"(exports, module) {
      var assocIndexOf = require_assocIndexOf();
      function listCacheSet(key, value) {
        var data2 = this.__data__, index = assocIndexOf(data2, key);
        if (index < 0) {
          ++this.size;
          data2.push([key, value]);
        } else {
          data2[index][1] = value;
        }
        return this;
      }
      module.exports = listCacheSet;
    }
  });

  // node_modules/lodash/_ListCache.js
  var require_ListCache = __commonJS({
    "node_modules/lodash/_ListCache.js"(exports, module) {
      var listCacheClear = require_listCacheClear();
      var listCacheDelete = require_listCacheDelete();
      var listCacheGet = require_listCacheGet();
      var listCacheHas = require_listCacheHas();
      var listCacheSet = require_listCacheSet();
      function ListCache(entries) {
        var index = -1, length = entries == null ? 0 : entries.length;
        this.clear();
        while (++index < length) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }
      ListCache.prototype.clear = listCacheClear;
      ListCache.prototype["delete"] = listCacheDelete;
      ListCache.prototype.get = listCacheGet;
      ListCache.prototype.has = listCacheHas;
      ListCache.prototype.set = listCacheSet;
      module.exports = ListCache;
    }
  });

  // node_modules/lodash/_stackClear.js
  var require_stackClear = __commonJS({
    "node_modules/lodash/_stackClear.js"(exports, module) {
      var ListCache = require_ListCache();
      function stackClear() {
        this.__data__ = new ListCache();
        this.size = 0;
      }
      module.exports = stackClear;
    }
  });

  // node_modules/lodash/_stackDelete.js
  var require_stackDelete = __commonJS({
    "node_modules/lodash/_stackDelete.js"(exports, module) {
      function stackDelete(key) {
        var data2 = this.__data__, result = data2["delete"](key);
        this.size = data2.size;
        return result;
      }
      module.exports = stackDelete;
    }
  });

  // node_modules/lodash/_stackGet.js
  var require_stackGet = __commonJS({
    "node_modules/lodash/_stackGet.js"(exports, module) {
      function stackGet(key) {
        return this.__data__.get(key);
      }
      module.exports = stackGet;
    }
  });

  // node_modules/lodash/_stackHas.js
  var require_stackHas = __commonJS({
    "node_modules/lodash/_stackHas.js"(exports, module) {
      function stackHas(key) {
        return this.__data__.has(key);
      }
      module.exports = stackHas;
    }
  });

  // node_modules/lodash/_freeGlobal.js
  var require_freeGlobal = __commonJS({
    "node_modules/lodash/_freeGlobal.js"(exports, module) {
      var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
      module.exports = freeGlobal;
    }
  });

  // node_modules/lodash/_root.js
  var require_root = __commonJS({
    "node_modules/lodash/_root.js"(exports, module) {
      var freeGlobal = require_freeGlobal();
      var freeSelf = typeof self == "object" && self && self.Object === Object && self;
      var root = freeGlobal || freeSelf || Function("return this")();
      module.exports = root;
    }
  });

  // node_modules/lodash/_Symbol.js
  var require_Symbol = __commonJS({
    "node_modules/lodash/_Symbol.js"(exports, module) {
      var root = require_root();
      var Symbol2 = root.Symbol;
      module.exports = Symbol2;
    }
  });

  // node_modules/lodash/_getRawTag.js
  var require_getRawTag = __commonJS({
    "node_modules/lodash/_getRawTag.js"(exports, module) {
      var Symbol2 = require_Symbol();
      var objectProto = Object.prototype;
      var hasOwnProperty = objectProto.hasOwnProperty;
      var nativeObjectToString = objectProto.toString;
      var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
      function getRawTag(value) {
        var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
        try {
          value[symToStringTag] = void 0;
          var unmasked = true;
        } catch (e) {
        }
        var result = nativeObjectToString.call(value);
        if (unmasked) {
          if (isOwn) {
            value[symToStringTag] = tag;
          } else {
            delete value[symToStringTag];
          }
        }
        return result;
      }
      module.exports = getRawTag;
    }
  });

  // node_modules/lodash/_objectToString.js
  var require_objectToString = __commonJS({
    "node_modules/lodash/_objectToString.js"(exports, module) {
      var objectProto = Object.prototype;
      var nativeObjectToString = objectProto.toString;
      function objectToString(value) {
        return nativeObjectToString.call(value);
      }
      module.exports = objectToString;
    }
  });

  // node_modules/lodash/_baseGetTag.js
  var require_baseGetTag = __commonJS({
    "node_modules/lodash/_baseGetTag.js"(exports, module) {
      var Symbol2 = require_Symbol();
      var getRawTag = require_getRawTag();
      var objectToString = require_objectToString();
      var nullTag = "[object Null]";
      var undefinedTag = "[object Undefined]";
      var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
      function baseGetTag(value) {
        if (value == null) {
          return value === void 0 ? undefinedTag : nullTag;
        }
        return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
      }
      module.exports = baseGetTag;
    }
  });

  // node_modules/lodash/isObject.js
  var require_isObject = __commonJS({
    "node_modules/lodash/isObject.js"(exports, module) {
      function isObject(value) {
        var type = typeof value;
        return value != null && (type == "object" || type == "function");
      }
      module.exports = isObject;
    }
  });

  // node_modules/lodash/isFunction.js
  var require_isFunction = __commonJS({
    "node_modules/lodash/isFunction.js"(exports, module) {
      var baseGetTag = require_baseGetTag();
      var isObject = require_isObject();
      var asyncTag = "[object AsyncFunction]";
      var funcTag = "[object Function]";
      var genTag = "[object GeneratorFunction]";
      var proxyTag = "[object Proxy]";
      function isFunction(value) {
        if (!isObject(value)) {
          return false;
        }
        var tag = baseGetTag(value);
        return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
      }
      module.exports = isFunction;
    }
  });

  // node_modules/lodash/_coreJsData.js
  var require_coreJsData = __commonJS({
    "node_modules/lodash/_coreJsData.js"(exports, module) {
      var root = require_root();
      var coreJsData = root["__core-js_shared__"];
      module.exports = coreJsData;
    }
  });

  // node_modules/lodash/_isMasked.js
  var require_isMasked = __commonJS({
    "node_modules/lodash/_isMasked.js"(exports, module) {
      var coreJsData = require_coreJsData();
      var maskSrcKey = function() {
        var uid3 = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
        return uid3 ? "Symbol(src)_1." + uid3 : "";
      }();
      function isMasked(func) {
        return !!maskSrcKey && maskSrcKey in func;
      }
      module.exports = isMasked;
    }
  });

  // node_modules/lodash/_toSource.js
  var require_toSource = __commonJS({
    "node_modules/lodash/_toSource.js"(exports, module) {
      var funcProto = Function.prototype;
      var funcToString = funcProto.toString;
      function toSource(func) {
        if (func != null) {
          try {
            return funcToString.call(func);
          } catch (e) {
          }
          try {
            return func + "";
          } catch (e) {
          }
        }
        return "";
      }
      module.exports = toSource;
    }
  });

  // node_modules/lodash/_baseIsNative.js
  var require_baseIsNative = __commonJS({
    "node_modules/lodash/_baseIsNative.js"(exports, module) {
      var isFunction = require_isFunction();
      var isMasked = require_isMasked();
      var isObject = require_isObject();
      var toSource = require_toSource();
      var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
      var reIsHostCtor = /^\[object .+?Constructor\]$/;
      var funcProto = Function.prototype;
      var objectProto = Object.prototype;
      var funcToString = funcProto.toString;
      var hasOwnProperty = objectProto.hasOwnProperty;
      var reIsNative = RegExp(
        "^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
      );
      function baseIsNative(value) {
        if (!isObject(value) || isMasked(value)) {
          return false;
        }
        var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
        return pattern.test(toSource(value));
      }
      module.exports = baseIsNative;
    }
  });

  // node_modules/lodash/_getValue.js
  var require_getValue = __commonJS({
    "node_modules/lodash/_getValue.js"(exports, module) {
      function getValue(object, key) {
        return object == null ? void 0 : object[key];
      }
      module.exports = getValue;
    }
  });

  // node_modules/lodash/_getNative.js
  var require_getNative = __commonJS({
    "node_modules/lodash/_getNative.js"(exports, module) {
      var baseIsNative = require_baseIsNative();
      var getValue = require_getValue();
      function getNative(object, key) {
        var value = getValue(object, key);
        return baseIsNative(value) ? value : void 0;
      }
      module.exports = getNative;
    }
  });

  // node_modules/lodash/_Map.js
  var require_Map = __commonJS({
    "node_modules/lodash/_Map.js"(exports, module) {
      var getNative = require_getNative();
      var root = require_root();
      var Map2 = getNative(root, "Map");
      module.exports = Map2;
    }
  });

  // node_modules/lodash/_nativeCreate.js
  var require_nativeCreate = __commonJS({
    "node_modules/lodash/_nativeCreate.js"(exports, module) {
      var getNative = require_getNative();
      var nativeCreate = getNative(Object, "create");
      module.exports = nativeCreate;
    }
  });

  // node_modules/lodash/_hashClear.js
  var require_hashClear = __commonJS({
    "node_modules/lodash/_hashClear.js"(exports, module) {
      var nativeCreate = require_nativeCreate();
      function hashClear() {
        this.__data__ = nativeCreate ? nativeCreate(null) : {};
        this.size = 0;
      }
      module.exports = hashClear;
    }
  });

  // node_modules/lodash/_hashDelete.js
  var require_hashDelete = __commonJS({
    "node_modules/lodash/_hashDelete.js"(exports, module) {
      function hashDelete(key) {
        var result = this.has(key) && delete this.__data__[key];
        this.size -= result ? 1 : 0;
        return result;
      }
      module.exports = hashDelete;
    }
  });

  // node_modules/lodash/_hashGet.js
  var require_hashGet = __commonJS({
    "node_modules/lodash/_hashGet.js"(exports, module) {
      var nativeCreate = require_nativeCreate();
      var HASH_UNDEFINED = "__lodash_hash_undefined__";
      var objectProto = Object.prototype;
      var hasOwnProperty = objectProto.hasOwnProperty;
      function hashGet(key) {
        var data2 = this.__data__;
        if (nativeCreate) {
          var result = data2[key];
          return result === HASH_UNDEFINED ? void 0 : result;
        }
        return hasOwnProperty.call(data2, key) ? data2[key] : void 0;
      }
      module.exports = hashGet;
    }
  });

  // node_modules/lodash/_hashHas.js
  var require_hashHas = __commonJS({
    "node_modules/lodash/_hashHas.js"(exports, module) {
      var nativeCreate = require_nativeCreate();
      var objectProto = Object.prototype;
      var hasOwnProperty = objectProto.hasOwnProperty;
      function hashHas(key) {
        var data2 = this.__data__;
        return nativeCreate ? data2[key] !== void 0 : hasOwnProperty.call(data2, key);
      }
      module.exports = hashHas;
    }
  });

  // node_modules/lodash/_hashSet.js
  var require_hashSet = __commonJS({
    "node_modules/lodash/_hashSet.js"(exports, module) {
      var nativeCreate = require_nativeCreate();
      var HASH_UNDEFINED = "__lodash_hash_undefined__";
      function hashSet(key, value) {
        var data2 = this.__data__;
        this.size += this.has(key) ? 0 : 1;
        data2[key] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
        return this;
      }
      module.exports = hashSet;
    }
  });

  // node_modules/lodash/_Hash.js
  var require_Hash = __commonJS({
    "node_modules/lodash/_Hash.js"(exports, module) {
      var hashClear = require_hashClear();
      var hashDelete = require_hashDelete();
      var hashGet = require_hashGet();
      var hashHas = require_hashHas();
      var hashSet = require_hashSet();
      function Hash(entries) {
        var index = -1, length = entries == null ? 0 : entries.length;
        this.clear();
        while (++index < length) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }
      Hash.prototype.clear = hashClear;
      Hash.prototype["delete"] = hashDelete;
      Hash.prototype.get = hashGet;
      Hash.prototype.has = hashHas;
      Hash.prototype.set = hashSet;
      module.exports = Hash;
    }
  });

  // node_modules/lodash/_mapCacheClear.js
  var require_mapCacheClear = __commonJS({
    "node_modules/lodash/_mapCacheClear.js"(exports, module) {
      var Hash = require_Hash();
      var ListCache = require_ListCache();
      var Map2 = require_Map();
      function mapCacheClear() {
        this.size = 0;
        this.__data__ = {
          "hash": new Hash(),
          "map": new (Map2 || ListCache)(),
          "string": new Hash()
        };
      }
      module.exports = mapCacheClear;
    }
  });

  // node_modules/lodash/_isKeyable.js
  var require_isKeyable = __commonJS({
    "node_modules/lodash/_isKeyable.js"(exports, module) {
      function isKeyable(value) {
        var type = typeof value;
        return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
      }
      module.exports = isKeyable;
    }
  });

  // node_modules/lodash/_getMapData.js
  var require_getMapData = __commonJS({
    "node_modules/lodash/_getMapData.js"(exports, module) {
      var isKeyable = require_isKeyable();
      function getMapData(map, key) {
        var data2 = map.__data__;
        return isKeyable(key) ? data2[typeof key == "string" ? "string" : "hash"] : data2.map;
      }
      module.exports = getMapData;
    }
  });

  // node_modules/lodash/_mapCacheDelete.js
  var require_mapCacheDelete = __commonJS({
    "node_modules/lodash/_mapCacheDelete.js"(exports, module) {
      var getMapData = require_getMapData();
      function mapCacheDelete(key) {
        var result = getMapData(this, key)["delete"](key);
        this.size -= result ? 1 : 0;
        return result;
      }
      module.exports = mapCacheDelete;
    }
  });

  // node_modules/lodash/_mapCacheGet.js
  var require_mapCacheGet = __commonJS({
    "node_modules/lodash/_mapCacheGet.js"(exports, module) {
      var getMapData = require_getMapData();
      function mapCacheGet(key) {
        return getMapData(this, key).get(key);
      }
      module.exports = mapCacheGet;
    }
  });

  // node_modules/lodash/_mapCacheHas.js
  var require_mapCacheHas = __commonJS({
    "node_modules/lodash/_mapCacheHas.js"(exports, module) {
      var getMapData = require_getMapData();
      function mapCacheHas(key) {
        return getMapData(this, key).has(key);
      }
      module.exports = mapCacheHas;
    }
  });

  // node_modules/lodash/_mapCacheSet.js
  var require_mapCacheSet = __commonJS({
    "node_modules/lodash/_mapCacheSet.js"(exports, module) {
      var getMapData = require_getMapData();
      function mapCacheSet(key, value) {
        var data2 = getMapData(this, key), size = data2.size;
        data2.set(key, value);
        this.size += data2.size == size ? 0 : 1;
        return this;
      }
      module.exports = mapCacheSet;
    }
  });

  // node_modules/lodash/_MapCache.js
  var require_MapCache = __commonJS({
    "node_modules/lodash/_MapCache.js"(exports, module) {
      var mapCacheClear = require_mapCacheClear();
      var mapCacheDelete = require_mapCacheDelete();
      var mapCacheGet = require_mapCacheGet();
      var mapCacheHas = require_mapCacheHas();
      var mapCacheSet = require_mapCacheSet();
      function MapCache(entries) {
        var index = -1, length = entries == null ? 0 : entries.length;
        this.clear();
        while (++index < length) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }
      MapCache.prototype.clear = mapCacheClear;
      MapCache.prototype["delete"] = mapCacheDelete;
      MapCache.prototype.get = mapCacheGet;
      MapCache.prototype.has = mapCacheHas;
      MapCache.prototype.set = mapCacheSet;
      module.exports = MapCache;
    }
  });

  // node_modules/lodash/_stackSet.js
  var require_stackSet = __commonJS({
    "node_modules/lodash/_stackSet.js"(exports, module) {
      var ListCache = require_ListCache();
      var Map2 = require_Map();
      var MapCache = require_MapCache();
      var LARGE_ARRAY_SIZE = 200;
      function stackSet(key, value) {
        var data2 = this.__data__;
        if (data2 instanceof ListCache) {
          var pairs = data2.__data__;
          if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
            pairs.push([key, value]);
            this.size = ++data2.size;
            return this;
          }
          data2 = this.__data__ = new MapCache(pairs);
        }
        data2.set(key, value);
        this.size = data2.size;
        return this;
      }
      module.exports = stackSet;
    }
  });

  // node_modules/lodash/_Stack.js
  var require_Stack = __commonJS({
    "node_modules/lodash/_Stack.js"(exports, module) {
      var ListCache = require_ListCache();
      var stackClear = require_stackClear();
      var stackDelete = require_stackDelete();
      var stackGet = require_stackGet();
      var stackHas = require_stackHas();
      var stackSet = require_stackSet();
      function Stack(entries) {
        var data2 = this.__data__ = new ListCache(entries);
        this.size = data2.size;
      }
      Stack.prototype.clear = stackClear;
      Stack.prototype["delete"] = stackDelete;
      Stack.prototype.get = stackGet;
      Stack.prototype.has = stackHas;
      Stack.prototype.set = stackSet;
      module.exports = Stack;
    }
  });

  // node_modules/lodash/_defineProperty.js
  var require_defineProperty = __commonJS({
    "node_modules/lodash/_defineProperty.js"(exports, module) {
      var getNative = require_getNative();
      var defineProperty = function() {
        try {
          var func = getNative(Object, "defineProperty");
          func({}, "", {});
          return func;
        } catch (e) {
        }
      }();
      module.exports = defineProperty;
    }
  });

  // node_modules/lodash/_baseAssignValue.js
  var require_baseAssignValue = __commonJS({
    "node_modules/lodash/_baseAssignValue.js"(exports, module) {
      var defineProperty = require_defineProperty();
      function baseAssignValue(object, key, value) {
        if (key == "__proto__" && defineProperty) {
          defineProperty(object, key, {
            "configurable": true,
            "enumerable": true,
            "value": value,
            "writable": true
          });
        } else {
          object[key] = value;
        }
      }
      module.exports = baseAssignValue;
    }
  });

  // node_modules/lodash/_assignMergeValue.js
  var require_assignMergeValue = __commonJS({
    "node_modules/lodash/_assignMergeValue.js"(exports, module) {
      var baseAssignValue = require_baseAssignValue();
      var eq = require_eq();
      function assignMergeValue(object, key, value) {
        if (value !== void 0 && !eq(object[key], value) || value === void 0 && !(key in object)) {
          baseAssignValue(object, key, value);
        }
      }
      module.exports = assignMergeValue;
    }
  });

  // node_modules/lodash/_createBaseFor.js
  var require_createBaseFor = __commonJS({
    "node_modules/lodash/_createBaseFor.js"(exports, module) {
      function createBaseFor(fromRight) {
        return function(object, iteratee, keysFunc) {
          var index = -1, iterable = Object(object), props = keysFunc(object), length = props.length;
          while (length--) {
            var key = props[fromRight ? length : ++index];
            if (iteratee(iterable[key], key, iterable) === false) {
              break;
            }
          }
          return object;
        };
      }
      module.exports = createBaseFor;
    }
  });

  // node_modules/lodash/_baseFor.js
  var require_baseFor = __commonJS({
    "node_modules/lodash/_baseFor.js"(exports, module) {
      var createBaseFor = require_createBaseFor();
      var baseFor = createBaseFor();
      module.exports = baseFor;
    }
  });

  // node_modules/lodash/_cloneBuffer.js
  var require_cloneBuffer = __commonJS({
    "node_modules/lodash/_cloneBuffer.js"(exports, module) {
      var root = require_root();
      var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
      var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
      var moduleExports = freeModule && freeModule.exports === freeExports;
      var Buffer2 = moduleExports ? root.Buffer : void 0;
      var allocUnsafe = Buffer2 ? Buffer2.allocUnsafe : void 0;
      function cloneBuffer(buffer, isDeep) {
        if (isDeep) {
          return buffer.slice();
        }
        var length = buffer.length, result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
        buffer.copy(result);
        return result;
      }
      module.exports = cloneBuffer;
    }
  });

  // node_modules/lodash/_Uint8Array.js
  var require_Uint8Array = __commonJS({
    "node_modules/lodash/_Uint8Array.js"(exports, module) {
      var root = require_root();
      var Uint8Array2 = root.Uint8Array;
      module.exports = Uint8Array2;
    }
  });

  // node_modules/lodash/_cloneArrayBuffer.js
  var require_cloneArrayBuffer = __commonJS({
    "node_modules/lodash/_cloneArrayBuffer.js"(exports, module) {
      var Uint8Array2 = require_Uint8Array();
      function cloneArrayBuffer(arrayBuffer) {
        var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
        new Uint8Array2(result).set(new Uint8Array2(arrayBuffer));
        return result;
      }
      module.exports = cloneArrayBuffer;
    }
  });

  // node_modules/lodash/_cloneTypedArray.js
  var require_cloneTypedArray = __commonJS({
    "node_modules/lodash/_cloneTypedArray.js"(exports, module) {
      var cloneArrayBuffer = require_cloneArrayBuffer();
      function cloneTypedArray(typedArray, isDeep) {
        var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
        return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
      }
      module.exports = cloneTypedArray;
    }
  });

  // node_modules/lodash/_copyArray.js
  var require_copyArray = __commonJS({
    "node_modules/lodash/_copyArray.js"(exports, module) {
      function copyArray(source, array) {
        var index = -1, length = source.length;
        array || (array = Array(length));
        while (++index < length) {
          array[index] = source[index];
        }
        return array;
      }
      module.exports = copyArray;
    }
  });

  // node_modules/lodash/_baseCreate.js
  var require_baseCreate = __commonJS({
    "node_modules/lodash/_baseCreate.js"(exports, module) {
      var isObject = require_isObject();
      var objectCreate = Object.create;
      var baseCreate = /* @__PURE__ */ function() {
        function object() {
        }
        return function(proto) {
          if (!isObject(proto)) {
            return {};
          }
          if (objectCreate) {
            return objectCreate(proto);
          }
          object.prototype = proto;
          var result = new object();
          object.prototype = void 0;
          return result;
        };
      }();
      module.exports = baseCreate;
    }
  });

  // node_modules/lodash/_overArg.js
  var require_overArg = __commonJS({
    "node_modules/lodash/_overArg.js"(exports, module) {
      function overArg(func, transform) {
        return function(arg) {
          return func(transform(arg));
        };
      }
      module.exports = overArg;
    }
  });

  // node_modules/lodash/_getPrototype.js
  var require_getPrototype = __commonJS({
    "node_modules/lodash/_getPrototype.js"(exports, module) {
      var overArg = require_overArg();
      var getPrototype = overArg(Object.getPrototypeOf, Object);
      module.exports = getPrototype;
    }
  });

  // node_modules/lodash/_isPrototype.js
  var require_isPrototype = __commonJS({
    "node_modules/lodash/_isPrototype.js"(exports, module) {
      var objectProto = Object.prototype;
      function isPrototype(value) {
        var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
        return value === proto;
      }
      module.exports = isPrototype;
    }
  });

  // node_modules/lodash/_initCloneObject.js
  var require_initCloneObject = __commonJS({
    "node_modules/lodash/_initCloneObject.js"(exports, module) {
      var baseCreate = require_baseCreate();
      var getPrototype = require_getPrototype();
      var isPrototype = require_isPrototype();
      function initCloneObject(object) {
        return typeof object.constructor == "function" && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
      }
      module.exports = initCloneObject;
    }
  });

  // node_modules/lodash/isObjectLike.js
  var require_isObjectLike = __commonJS({
    "node_modules/lodash/isObjectLike.js"(exports, module) {
      function isObjectLike(value) {
        return value != null && typeof value == "object";
      }
      module.exports = isObjectLike;
    }
  });

  // node_modules/lodash/_baseIsArguments.js
  var require_baseIsArguments = __commonJS({
    "node_modules/lodash/_baseIsArguments.js"(exports, module) {
      var baseGetTag = require_baseGetTag();
      var isObjectLike = require_isObjectLike();
      var argsTag = "[object Arguments]";
      function baseIsArguments(value) {
        return isObjectLike(value) && baseGetTag(value) == argsTag;
      }
      module.exports = baseIsArguments;
    }
  });

  // node_modules/lodash/isArguments.js
  var require_isArguments = __commonJS({
    "node_modules/lodash/isArguments.js"(exports, module) {
      var baseIsArguments = require_baseIsArguments();
      var isObjectLike = require_isObjectLike();
      var objectProto = Object.prototype;
      var hasOwnProperty = objectProto.hasOwnProperty;
      var propertyIsEnumerable = objectProto.propertyIsEnumerable;
      var isArguments = baseIsArguments(/* @__PURE__ */ function() {
        return arguments;
      }()) ? baseIsArguments : function(value) {
        return isObjectLike(value) && hasOwnProperty.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
      };
      module.exports = isArguments;
    }
  });

  // node_modules/lodash/isArray.js
  var require_isArray = __commonJS({
    "node_modules/lodash/isArray.js"(exports, module) {
      var isArray = Array.isArray;
      module.exports = isArray;
    }
  });

  // node_modules/lodash/isLength.js
  var require_isLength = __commonJS({
    "node_modules/lodash/isLength.js"(exports, module) {
      var MAX_SAFE_INTEGER = 9007199254740991;
      function isLength(value) {
        return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
      }
      module.exports = isLength;
    }
  });

  // node_modules/lodash/isArrayLike.js
  var require_isArrayLike = __commonJS({
    "node_modules/lodash/isArrayLike.js"(exports, module) {
      var isFunction = require_isFunction();
      var isLength = require_isLength();
      function isArrayLike(value) {
        return value != null && isLength(value.length) && !isFunction(value);
      }
      module.exports = isArrayLike;
    }
  });

  // node_modules/lodash/isArrayLikeObject.js
  var require_isArrayLikeObject = __commonJS({
    "node_modules/lodash/isArrayLikeObject.js"(exports, module) {
      var isArrayLike = require_isArrayLike();
      var isObjectLike = require_isObjectLike();
      function isArrayLikeObject(value) {
        return isObjectLike(value) && isArrayLike(value);
      }
      module.exports = isArrayLikeObject;
    }
  });

  // node_modules/lodash/stubFalse.js
  var require_stubFalse = __commonJS({
    "node_modules/lodash/stubFalse.js"(exports, module) {
      function stubFalse() {
        return false;
      }
      module.exports = stubFalse;
    }
  });

  // node_modules/lodash/isBuffer.js
  var require_isBuffer = __commonJS({
    "node_modules/lodash/isBuffer.js"(exports, module) {
      var root = require_root();
      var stubFalse = require_stubFalse();
      var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
      var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
      var moduleExports = freeModule && freeModule.exports === freeExports;
      var Buffer2 = moduleExports ? root.Buffer : void 0;
      var nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : void 0;
      var isBuffer = nativeIsBuffer || stubFalse;
      module.exports = isBuffer;
    }
  });

  // node_modules/lodash/isPlainObject.js
  var require_isPlainObject = __commonJS({
    "node_modules/lodash/isPlainObject.js"(exports, module) {
      var baseGetTag = require_baseGetTag();
      var getPrototype = require_getPrototype();
      var isObjectLike = require_isObjectLike();
      var objectTag = "[object Object]";
      var funcProto = Function.prototype;
      var objectProto = Object.prototype;
      var funcToString = funcProto.toString;
      var hasOwnProperty = objectProto.hasOwnProperty;
      var objectCtorString = funcToString.call(Object);
      function isPlainObject(value) {
        if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
          return false;
        }
        var proto = getPrototype(value);
        if (proto === null) {
          return true;
        }
        var Ctor = hasOwnProperty.call(proto, "constructor") && proto.constructor;
        return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
      }
      module.exports = isPlainObject;
    }
  });

  // node_modules/lodash/_baseIsTypedArray.js
  var require_baseIsTypedArray = __commonJS({
    "node_modules/lodash/_baseIsTypedArray.js"(exports, module) {
      var baseGetTag = require_baseGetTag();
      var isLength = require_isLength();
      var isObjectLike = require_isObjectLike();
      var argsTag = "[object Arguments]";
      var arrayTag = "[object Array]";
      var boolTag = "[object Boolean]";
      var dateTag = "[object Date]";
      var errorTag = "[object Error]";
      var funcTag = "[object Function]";
      var mapTag = "[object Map]";
      var numberTag = "[object Number]";
      var objectTag = "[object Object]";
      var regexpTag = "[object RegExp]";
      var setTag = "[object Set]";
      var stringTag = "[object String]";
      var weakMapTag = "[object WeakMap]";
      var arrayBufferTag = "[object ArrayBuffer]";
      var dataViewTag = "[object DataView]";
      var float32Tag = "[object Float32Array]";
      var float64Tag = "[object Float64Array]";
      var int8Tag = "[object Int8Array]";
      var int16Tag = "[object Int16Array]";
      var int32Tag = "[object Int32Array]";
      var uint8Tag = "[object Uint8Array]";
      var uint8ClampedTag = "[object Uint8ClampedArray]";
      var uint16Tag = "[object Uint16Array]";
      var uint32Tag = "[object Uint32Array]";
      var typedArrayTags = {};
      typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
      typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
      function baseIsTypedArray(value) {
        return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
      }
      module.exports = baseIsTypedArray;
    }
  });

  // node_modules/lodash/_baseUnary.js
  var require_baseUnary = __commonJS({
    "node_modules/lodash/_baseUnary.js"(exports, module) {
      function baseUnary(func) {
        return function(value) {
          return func(value);
        };
      }
      module.exports = baseUnary;
    }
  });

  // node_modules/lodash/_nodeUtil.js
  var require_nodeUtil = __commonJS({
    "node_modules/lodash/_nodeUtil.js"(exports, module) {
      var freeGlobal = require_freeGlobal();
      var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
      var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
      var moduleExports = freeModule && freeModule.exports === freeExports;
      var freeProcess = moduleExports && freeGlobal.process;
      var nodeUtil = function() {
        try {
          var types = freeModule && freeModule.require && freeModule.require("util").types;
          if (types) {
            return types;
          }
          return freeProcess && freeProcess.binding && freeProcess.binding("util");
        } catch (e) {
        }
      }();
      module.exports = nodeUtil;
    }
  });

  // node_modules/lodash/isTypedArray.js
  var require_isTypedArray = __commonJS({
    "node_modules/lodash/isTypedArray.js"(exports, module) {
      var baseIsTypedArray = require_baseIsTypedArray();
      var baseUnary = require_baseUnary();
      var nodeUtil = require_nodeUtil();
      var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
      var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
      module.exports = isTypedArray;
    }
  });

  // node_modules/lodash/_safeGet.js
  var require_safeGet = __commonJS({
    "node_modules/lodash/_safeGet.js"(exports, module) {
      function safeGet(object, key) {
        if (key === "constructor" && typeof object[key] === "function") {
          return;
        }
        if (key == "__proto__") {
          return;
        }
        return object[key];
      }
      module.exports = safeGet;
    }
  });

  // node_modules/lodash/_assignValue.js
  var require_assignValue = __commonJS({
    "node_modules/lodash/_assignValue.js"(exports, module) {
      var baseAssignValue = require_baseAssignValue();
      var eq = require_eq();
      var objectProto = Object.prototype;
      var hasOwnProperty = objectProto.hasOwnProperty;
      function assignValue(object, key, value) {
        var objValue = object[key];
        if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === void 0 && !(key in object)) {
          baseAssignValue(object, key, value);
        }
      }
      module.exports = assignValue;
    }
  });

  // node_modules/lodash/_copyObject.js
  var require_copyObject = __commonJS({
    "node_modules/lodash/_copyObject.js"(exports, module) {
      var assignValue = require_assignValue();
      var baseAssignValue = require_baseAssignValue();
      function copyObject(source, props, object, customizer) {
        var isNew = !object;
        object || (object = {});
        var index = -1, length = props.length;
        while (++index < length) {
          var key = props[index];
          var newValue = customizer ? customizer(object[key], source[key], key, object, source) : void 0;
          if (newValue === void 0) {
            newValue = source[key];
          }
          if (isNew) {
            baseAssignValue(object, key, newValue);
          } else {
            assignValue(object, key, newValue);
          }
        }
        return object;
      }
      module.exports = copyObject;
    }
  });

  // node_modules/lodash/_baseTimes.js
  var require_baseTimes = __commonJS({
    "node_modules/lodash/_baseTimes.js"(exports, module) {
      function baseTimes(n, iteratee) {
        var index = -1, result = Array(n);
        while (++index < n) {
          result[index] = iteratee(index);
        }
        return result;
      }
      module.exports = baseTimes;
    }
  });

  // node_modules/lodash/_isIndex.js
  var require_isIndex = __commonJS({
    "node_modules/lodash/_isIndex.js"(exports, module) {
      var MAX_SAFE_INTEGER = 9007199254740991;
      var reIsUint = /^(?:0|[1-9]\d*)$/;
      function isIndex(value, length) {
        var type = typeof value;
        length = length == null ? MAX_SAFE_INTEGER : length;
        return !!length && (type == "number" || type != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
      }
      module.exports = isIndex;
    }
  });

  // node_modules/lodash/_arrayLikeKeys.js
  var require_arrayLikeKeys = __commonJS({
    "node_modules/lodash/_arrayLikeKeys.js"(exports, module) {
      var baseTimes = require_baseTimes();
      var isArguments = require_isArguments();
      var isArray = require_isArray();
      var isBuffer = require_isBuffer();
      var isIndex = require_isIndex();
      var isTypedArray = require_isTypedArray();
      var objectProto = Object.prototype;
      var hasOwnProperty = objectProto.hasOwnProperty;
      function arrayLikeKeys(value, inherited) {
        var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value.length, String) : [], length = result.length;
        for (var key in value) {
          if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
          (key == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
          isBuff && (key == "offset" || key == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
          isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || // Skip index properties.
          isIndex(key, length)))) {
            result.push(key);
          }
        }
        return result;
      }
      module.exports = arrayLikeKeys;
    }
  });

  // node_modules/lodash/_nativeKeysIn.js
  var require_nativeKeysIn = __commonJS({
    "node_modules/lodash/_nativeKeysIn.js"(exports, module) {
      function nativeKeysIn(object) {
        var result = [];
        if (object != null) {
          for (var key in Object(object)) {
            result.push(key);
          }
        }
        return result;
      }
      module.exports = nativeKeysIn;
    }
  });

  // node_modules/lodash/_baseKeysIn.js
  var require_baseKeysIn = __commonJS({
    "node_modules/lodash/_baseKeysIn.js"(exports, module) {
      var isObject = require_isObject();
      var isPrototype = require_isPrototype();
      var nativeKeysIn = require_nativeKeysIn();
      var objectProto = Object.prototype;
      var hasOwnProperty = objectProto.hasOwnProperty;
      function baseKeysIn(object) {
        if (!isObject(object)) {
          return nativeKeysIn(object);
        }
        var isProto = isPrototype(object), result = [];
        for (var key in object) {
          if (!(key == "constructor" && (isProto || !hasOwnProperty.call(object, key)))) {
            result.push(key);
          }
        }
        return result;
      }
      module.exports = baseKeysIn;
    }
  });

  // node_modules/lodash/keysIn.js
  var require_keysIn = __commonJS({
    "node_modules/lodash/keysIn.js"(exports, module) {
      var arrayLikeKeys = require_arrayLikeKeys();
      var baseKeysIn = require_baseKeysIn();
      var isArrayLike = require_isArrayLike();
      function keysIn(object) {
        return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
      }
      module.exports = keysIn;
    }
  });

  // node_modules/lodash/toPlainObject.js
  var require_toPlainObject = __commonJS({
    "node_modules/lodash/toPlainObject.js"(exports, module) {
      var copyObject = require_copyObject();
      var keysIn = require_keysIn();
      function toPlainObject(value) {
        return copyObject(value, keysIn(value));
      }
      module.exports = toPlainObject;
    }
  });

  // node_modules/lodash/_baseMergeDeep.js
  var require_baseMergeDeep = __commonJS({
    "node_modules/lodash/_baseMergeDeep.js"(exports, module) {
      var assignMergeValue = require_assignMergeValue();
      var cloneBuffer = require_cloneBuffer();
      var cloneTypedArray = require_cloneTypedArray();
      var copyArray = require_copyArray();
      var initCloneObject = require_initCloneObject();
      var isArguments = require_isArguments();
      var isArray = require_isArray();
      var isArrayLikeObject = require_isArrayLikeObject();
      var isBuffer = require_isBuffer();
      var isFunction = require_isFunction();
      var isObject = require_isObject();
      var isPlainObject = require_isPlainObject();
      var isTypedArray = require_isTypedArray();
      var safeGet = require_safeGet();
      var toPlainObject = require_toPlainObject();
      function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
        var objValue = safeGet(object, key), srcValue = safeGet(source, key), stacked = stack.get(srcValue);
        if (stacked) {
          assignMergeValue(object, key, stacked);
          return;
        }
        var newValue = customizer ? customizer(objValue, srcValue, key + "", object, source, stack) : void 0;
        var isCommon = newValue === void 0;
        if (isCommon) {
          var isArr = isArray(srcValue), isBuff = !isArr && isBuffer(srcValue), isTyped = !isArr && !isBuff && isTypedArray(srcValue);
          newValue = srcValue;
          if (isArr || isBuff || isTyped) {
            if (isArray(objValue)) {
              newValue = objValue;
            } else if (isArrayLikeObject(objValue)) {
              newValue = copyArray(objValue);
            } else if (isBuff) {
              isCommon = false;
              newValue = cloneBuffer(srcValue, true);
            } else if (isTyped) {
              isCommon = false;
              newValue = cloneTypedArray(srcValue, true);
            } else {
              newValue = [];
            }
          } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
            newValue = objValue;
            if (isArguments(objValue)) {
              newValue = toPlainObject(objValue);
            } else if (!isObject(objValue) || isFunction(objValue)) {
              newValue = initCloneObject(srcValue);
            }
          } else {
            isCommon = false;
          }
        }
        if (isCommon) {
          stack.set(srcValue, newValue);
          mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
          stack["delete"](srcValue);
        }
        assignMergeValue(object, key, newValue);
      }
      module.exports = baseMergeDeep;
    }
  });

  // node_modules/lodash/_baseMerge.js
  var require_baseMerge = __commonJS({
    "node_modules/lodash/_baseMerge.js"(exports, module) {
      var Stack = require_Stack();
      var assignMergeValue = require_assignMergeValue();
      var baseFor = require_baseFor();
      var baseMergeDeep = require_baseMergeDeep();
      var isObject = require_isObject();
      var keysIn = require_keysIn();
      var safeGet = require_safeGet();
      function baseMerge(object, source, srcIndex, customizer, stack) {
        if (object === source) {
          return;
        }
        baseFor(source, function(srcValue, key) {
          stack || (stack = new Stack());
          if (isObject(srcValue)) {
            baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
          } else {
            var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + "", object, source, stack) : void 0;
            if (newValue === void 0) {
              newValue = srcValue;
            }
            assignMergeValue(object, key, newValue);
          }
        }, keysIn);
      }
      module.exports = baseMerge;
    }
  });

  // node_modules/lodash/identity.js
  var require_identity = __commonJS({
    "node_modules/lodash/identity.js"(exports, module) {
      function identity(value) {
        return value;
      }
      module.exports = identity;
    }
  });

  // node_modules/lodash/_apply.js
  var require_apply = __commonJS({
    "node_modules/lodash/_apply.js"(exports, module) {
      function apply(func, thisArg, args) {
        switch (args.length) {
          case 0:
            return func.call(thisArg);
          case 1:
            return func.call(thisArg, args[0]);
          case 2:
            return func.call(thisArg, args[0], args[1]);
          case 3:
            return func.call(thisArg, args[0], args[1], args[2]);
        }
        return func.apply(thisArg, args);
      }
      module.exports = apply;
    }
  });

  // node_modules/lodash/_overRest.js
  var require_overRest = __commonJS({
    "node_modules/lodash/_overRest.js"(exports, module) {
      var apply = require_apply();
      var nativeMax = Math.max;
      function overRest(func, start3, transform) {
        start3 = nativeMax(start3 === void 0 ? func.length - 1 : start3, 0);
        return function() {
          var args = arguments, index = -1, length = nativeMax(args.length - start3, 0), array = Array(length);
          while (++index < length) {
            array[index] = args[start3 + index];
          }
          index = -1;
          var otherArgs = Array(start3 + 1);
          while (++index < start3) {
            otherArgs[index] = args[index];
          }
          otherArgs[start3] = transform(array);
          return apply(func, this, otherArgs);
        };
      }
      module.exports = overRest;
    }
  });

  // node_modules/lodash/constant.js
  var require_constant = __commonJS({
    "node_modules/lodash/constant.js"(exports, module) {
      function constant(value) {
        return function() {
          return value;
        };
      }
      module.exports = constant;
    }
  });

  // node_modules/lodash/_baseSetToString.js
  var require_baseSetToString = __commonJS({
    "node_modules/lodash/_baseSetToString.js"(exports, module) {
      var constant = require_constant();
      var defineProperty = require_defineProperty();
      var identity = require_identity();
      var baseSetToString = !defineProperty ? identity : function(func, string) {
        return defineProperty(func, "toString", {
          "configurable": true,
          "enumerable": false,
          "value": constant(string),
          "writable": true
        });
      };
      module.exports = baseSetToString;
    }
  });

  // node_modules/lodash/_shortOut.js
  var require_shortOut = __commonJS({
    "node_modules/lodash/_shortOut.js"(exports, module) {
      var HOT_COUNT = 800;
      var HOT_SPAN = 16;
      var nativeNow = Date.now;
      function shortOut(func) {
        var count = 0, lastCalled = 0;
        return function() {
          var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
          lastCalled = stamp;
          if (remaining > 0) {
            if (++count >= HOT_COUNT) {
              return arguments[0];
            }
          } else {
            count = 0;
          }
          return func.apply(void 0, arguments);
        };
      }
      module.exports = shortOut;
    }
  });

  // node_modules/lodash/_setToString.js
  var require_setToString = __commonJS({
    "node_modules/lodash/_setToString.js"(exports, module) {
      var baseSetToString = require_baseSetToString();
      var shortOut = require_shortOut();
      var setToString = shortOut(baseSetToString);
      module.exports = setToString;
    }
  });

  // node_modules/lodash/_baseRest.js
  var require_baseRest = __commonJS({
    "node_modules/lodash/_baseRest.js"(exports, module) {
      var identity = require_identity();
      var overRest = require_overRest();
      var setToString = require_setToString();
      function baseRest(func, start3) {
        return setToString(overRest(func, start3, identity), func + "");
      }
      module.exports = baseRest;
    }
  });

  // node_modules/lodash/_isIterateeCall.js
  var require_isIterateeCall = __commonJS({
    "node_modules/lodash/_isIterateeCall.js"(exports, module) {
      var eq = require_eq();
      var isArrayLike = require_isArrayLike();
      var isIndex = require_isIndex();
      var isObject = require_isObject();
      function isIterateeCall(value, index, object) {
        if (!isObject(object)) {
          return false;
        }
        var type = typeof index;
        if (type == "number" ? isArrayLike(object) && isIndex(index, object.length) : type == "string" && index in object) {
          return eq(object[index], value);
        }
        return false;
      }
      module.exports = isIterateeCall;
    }
  });

  // node_modules/lodash/_createAssigner.js
  var require_createAssigner = __commonJS({
    "node_modules/lodash/_createAssigner.js"(exports, module) {
      var baseRest = require_baseRest();
      var isIterateeCall = require_isIterateeCall();
      function createAssigner(assigner) {
        return baseRest(function(object, sources) {
          var index = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : void 0, guard = length > 2 ? sources[2] : void 0;
          customizer = assigner.length > 3 && typeof customizer == "function" ? (length--, customizer) : void 0;
          if (guard && isIterateeCall(sources[0], sources[1], guard)) {
            customizer = length < 3 ? void 0 : customizer;
            length = 1;
          }
          object = Object(object);
          while (++index < length) {
            var source = sources[index];
            if (source) {
              assigner(object, source, index, customizer);
            }
          }
          return object;
        });
      }
      module.exports = createAssigner;
    }
  });

  // node_modules/lodash/mergeWith.js
  var require_mergeWith = __commonJS({
    "node_modules/lodash/mergeWith.js"(exports, module) {
      var baseMerge = require_baseMerge();
      var createAssigner = require_createAssigner();
      var mergeWith2 = createAssigner(function(object, source, srcIndex, customizer) {
        baseMerge(object, source, srcIndex, customizer);
      });
      module.exports = mergeWith2;
    }
  });

  // src/index.tsx
  var import_react14 = __toESM(require_react(), 1);
  var import_client = __toESM(require_client(), 1);

  // pkg/lib/cockpit-dark-theme.ts
  function debug(...args) {
    if (window.debugging == "all" || window.debugging?.includes("style")) {
      console.debug([`cockpit-dark-theme: ${document.documentElement.id}:`, ...args].join(" "));
    }
  }
  function changeDarkThemeClass(documentElement, dark_mode) {
    debug(`Setting cockpit theme to ${dark_mode ? "dark" : "light"}`);
    if (dark_mode) {
      documentElement.classList.add("pf-v5-theme-dark");
    } else {
      documentElement.classList.remove("pf-v5-theme-dark");
    }
  }
  function _setDarkMode(_style) {
    const style = _style || localStorage.getItem("shell:style") || "auto";
    let dark_mode;
    if (window.matchMedia?.("(prefers-color-scheme: dark)").matches && style === "auto" || style === "dark") {
      dark_mode = true;
    } else {
      dark_mode = false;
    }
    changeDarkThemeClass(document.documentElement, dark_mode);
  }
  window.addEventListener("storage", (event) => {
    if (event.key === "shell:style") {
      debug(`Storage element 'shell:style' changed from  ${event.oldValue} to ${event.newValue}`);
      _setDarkMode();
    }
  });
  window.addEventListener("cockpit-style", (event) => {
    if (event instanceof CustomEvent) {
      const style = event.detail.style;
      debug(`Event received from shell with 'cockpit-style'  ${style}`);
      _setDarkMode(style);
    }
  });
  window.matchMedia("(prefers-color-scheme: dark)").addEventListener("change", () => {
    debug(`Operating system theme preference changed to ${window.matchMedia?.("(prefers-color-scheme: dark)").matches ? "dark" : "light"}`);
    _setDarkMode();
  });
  _setDarkMode();

  // src/app.tsx
  var import_react13 = __toESM(require_react(), 1);

  // node_modules/react-router/dist/development/chunk-HA7DTUK3.mjs
  var React3 = __toESM(require_react(), 1);
  var React = __toESM(require_react(), 1);
  var React2 = __toESM(require_react(), 1);
  var React10 = __toESM(require_react(), 1);
  var React9 = __toESM(require_react(), 1);
  var React4 = __toESM(require_react(), 1);
  var React8 = __toESM(require_react(), 1);
  var React7 = __toESM(require_react(), 1);
  var React5 = __toESM(require_react(), 1);
  var React6 = __toESM(require_react(), 1);
  var React11 = __toESM(require_react(), 1);
  var React12 = __toESM(require_react(), 1);
  var React13 = __toESM(require_react(), 1);
  var import_cookie = __toESM(require_dist(), 1);
  var import_meta = {};
  var PopStateEventType = "popstate";
  function createBrowserHistory(options = {}) {
    function createBrowserLocation(window2, globalHistory) {
      let { pathname, search, hash: hash7 } = window2.location;
      return createLocation(
        "",
        { pathname, search, hash: hash7 },
        // state defaults to `null` because `window.history.state` does
        globalHistory.state && globalHistory.state.usr || null,
        globalHistory.state && globalHistory.state.key || "default"
      );
    }
    function createBrowserHref(window2, to) {
      return typeof to === "string" ? to : createPath(to);
    }
    return getUrlBasedHistory(
      createBrowserLocation,
      createBrowserHref,
      null,
      options
    );
  }
  function invariant(value, message) {
    if (value === false || value === null || typeof value === "undefined") {
      throw new Error(message);
    }
  }
  function warning(cond, message) {
    if (!cond) {
      if (typeof console !== "undefined") console.warn(message);
      try {
        throw new Error(message);
      } catch (e) {
      }
    }
  }
  function createKey() {
    return Math.random().toString(36).substring(2, 10);
  }
  function getHistoryState(location, index) {
    return {
      usr: location.state,
      key: location.key,
      idx: index
    };
  }
  function createLocation(current, to, state = null, key) {
    let location = {
      pathname: typeof current === "string" ? current : current.pathname,
      search: "",
      hash: "",
      ...typeof to === "string" ? parsePath(to) : to,
      state,
      // TODO: This could be cleaned up.  push/replace should probably just take
      // full Locations now and avoid the need to run through this flow at all
      // But that's a pretty big refactor to the current test suite so going to
      // keep as is for the time being and just let any incoming keys take precedence
      key: to && to.key || key || createKey()
    };
    return location;
  }
  function createPath({
    pathname = "/",
    search = "",
    hash: hash7 = ""
  }) {
    if (search && search !== "?")
      pathname += search.charAt(0) === "?" ? search : "?" + search;
    if (hash7 && hash7 !== "#")
      pathname += hash7.charAt(0) === "#" ? hash7 : "#" + hash7;
    return pathname;
  }
  function parsePath(path) {
    let parsedPath = {};
    if (path) {
      let hashIndex = path.indexOf("#");
      if (hashIndex >= 0) {
        parsedPath.hash = path.substring(hashIndex);
        path = path.substring(0, hashIndex);
      }
      let searchIndex = path.indexOf("?");
      if (searchIndex >= 0) {
        parsedPath.search = path.substring(searchIndex);
        path = path.substring(0, searchIndex);
      }
      if (path) {
        parsedPath.pathname = path;
      }
    }
    return parsedPath;
  }
  function getUrlBasedHistory(getLocation, createHref2, validateLocation, options = {}) {
    let { window: window2 = document.defaultView, v5Compat = false } = options;
    let globalHistory = window2.history;
    let action = "POP";
    let listener = null;
    let index = getIndex();
    if (index == null) {
      index = 0;
      globalHistory.replaceState({ ...globalHistory.state, idx: index }, "");
    }
    function getIndex() {
      let state = globalHistory.state || { idx: null };
      return state.idx;
    }
    function handlePop() {
      action = "POP";
      let nextIndex = getIndex();
      let delta = nextIndex == null ? null : nextIndex - index;
      index = nextIndex;
      if (listener) {
        listener({ action, location: history.location, delta });
      }
    }
    function push(to, state) {
      action = "PUSH";
      let location = createLocation(history.location, to, state);
      if (validateLocation) validateLocation(location, to);
      index = getIndex() + 1;
      let historyState = getHistoryState(location, index);
      let url = history.createHref(location);
      try {
        globalHistory.pushState(historyState, "", url);
      } catch (error) {
        if (error instanceof DOMException && error.name === "DataCloneError") {
          throw error;
        }
        window2.location.assign(url);
      }
      if (v5Compat && listener) {
        listener({ action, location: history.location, delta: 1 });
      }
    }
    function replace2(to, state) {
      action = "REPLACE";
      let location = createLocation(history.location, to, state);
      if (validateLocation) validateLocation(location, to);
      index = getIndex();
      let historyState = getHistoryState(location, index);
      let url = history.createHref(location);
      globalHistory.replaceState(historyState, "", url);
      if (v5Compat && listener) {
        listener({ action, location: history.location, delta: 0 });
      }
    }
    function createURL(to) {
      let base = window2.location.origin !== "null" ? window2.location.origin : window2.location.href;
      let href2 = typeof to === "string" ? to : createPath(to);
      href2 = href2.replace(/ $/, "%20");
      invariant(
        base,
        `No window.location.(origin|href) available to create URL for href: ${href2}`
      );
      return new URL(href2, base);
    }
    let history = {
      get action() {
        return action;
      },
      get location() {
        return getLocation(window2, globalHistory);
      },
      listen(fn) {
        if (listener) {
          throw new Error("A history only accepts one active listener");
        }
        window2.addEventListener(PopStateEventType, handlePop);
        listener = fn;
        return () => {
          window2.removeEventListener(PopStateEventType, handlePop);
          listener = null;
        };
      },
      createHref(to) {
        return createHref2(window2, to);
      },
      createURL,
      encodeLocation(to) {
        let url = createURL(to);
        return {
          pathname: url.pathname,
          search: url.search,
          hash: url.hash
        };
      },
      push,
      replace: replace2,
      go(n) {
        return globalHistory.go(n);
      }
    };
    return history;
  }
  function matchRoutes(routes, locationArg, basename = "/") {
    return matchRoutesImpl(routes, locationArg, basename, false);
  }
  function matchRoutesImpl(routes, locationArg, basename, allowPartial) {
    let location = typeof locationArg === "string" ? parsePath(locationArg) : locationArg;
    let pathname = stripBasename(location.pathname || "/", basename);
    if (pathname == null) {
      return null;
    }
    let branches = flattenRoutes(routes);
    rankRouteBranches(branches);
    let matches2 = null;
    for (let i = 0; matches2 == null && i < branches.length; ++i) {
      let decoded = decodePath(pathname);
      matches2 = matchRouteBranch(
        branches[i],
        decoded,
        allowPartial
      );
    }
    return matches2;
  }
  function convertRouteMatchToUiMatch(match, loaderData) {
    let { route, pathname, params } = match;
    return {
      id: route.id,
      pathname,
      params,
      data: loaderData[route.id],
      handle: route.handle
    };
  }
  function flattenRoutes(routes, branches = [], parentsMeta = [], parentPath = "") {
    let flattenRoute = (route, index, relativePath) => {
      let meta = {
        relativePath: relativePath === void 0 ? route.path || "" : relativePath,
        caseSensitive: route.caseSensitive === true,
        childrenIndex: index,
        route
      };
      if (meta.relativePath.startsWith("/")) {
        invariant(
          meta.relativePath.startsWith(parentPath),
          `Absolute route path "${meta.relativePath}" nested under path "${parentPath}" is not valid. An absolute child route path must start with the combined path of all its parent routes.`
        );
        meta.relativePath = meta.relativePath.slice(parentPath.length);
      }
      let path = joinPaths([parentPath, meta.relativePath]);
      let routesMeta = parentsMeta.concat(meta);
      if (route.children && route.children.length > 0) {
        invariant(
          // Our types know better, but runtime JS may not!
          // @ts-expect-error
          route.index !== true,
          `Index routes must not have child routes. Please remove all child routes from route path "${path}".`
        );
        flattenRoutes(route.children, branches, routesMeta, path);
      }
      if (route.path == null && !route.index) {
        return;
      }
      branches.push({
        path,
        score: computeScore(path, route.index),
        routesMeta
      });
    };
    routes.forEach((route, index) => {
      if (route.path === "" || !route.path?.includes("?")) {
        flattenRoute(route, index);
      } else {
        for (let exploded of explodeOptionalSegments(route.path)) {
          flattenRoute(route, index, exploded);
        }
      }
    });
    return branches;
  }
  function explodeOptionalSegments(path) {
    let segments = path.split("/");
    if (segments.length === 0) return [];
    let [first, ...rest] = segments;
    let isOptional = first.endsWith("?");
    let required = first.replace(/\?$/, "");
    if (rest.length === 0) {
      return isOptional ? [required, ""] : [required];
    }
    let restExploded = explodeOptionalSegments(rest.join("/"));
    let result = [];
    result.push(
      ...restExploded.map(
        (subpath) => subpath === "" ? required : [required, subpath].join("/")
      )
    );
    if (isOptional) {
      result.push(...restExploded);
    }
    return result.map(
      (exploded) => path.startsWith("/") && exploded === "" ? "/" : exploded
    );
  }
  function rankRouteBranches(branches) {
    branches.sort(
      (a, b) => a.score !== b.score ? b.score - a.score : compareIndexes(
        a.routesMeta.map((meta) => meta.childrenIndex),
        b.routesMeta.map((meta) => meta.childrenIndex)
      )
    );
  }
  var paramRe = /^:[\w-]+$/;
  var dynamicSegmentValue = 3;
  var indexRouteValue = 2;
  var emptySegmentValue = 1;
  var staticSegmentValue = 10;
  var splatPenalty = -2;
  var isSplat = (s) => s === "*";
  function computeScore(path, index) {
    let segments = path.split("/");
    let initialScore = segments.length;
    if (segments.some(isSplat)) {
      initialScore += splatPenalty;
    }
    if (index) {
      initialScore += indexRouteValue;
    }
    return segments.filter((s) => !isSplat(s)).reduce(
      (score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === "" ? emptySegmentValue : staticSegmentValue),
      initialScore
    );
  }
  function compareIndexes(a, b) {
    let siblings = a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);
    return siblings ? (
      // If two routes are siblings, we should try to match the earlier sibling
      // first. This allows people to have fine-grained control over the matching
      // behavior by simply putting routes with identical paths in the order they
      // want them tried.
      a[a.length - 1] - b[b.length - 1]
    ) : (
      // Otherwise, it doesn't really make sense to rank non-siblings by index,
      // so they sort equally.
      0
    );
  }
  function matchRouteBranch(branch, pathname, allowPartial = false) {
    let { routesMeta } = branch;
    let matchedParams = {};
    let matchedPathname = "/";
    let matches2 = [];
    for (let i = 0; i < routesMeta.length; ++i) {
      let meta = routesMeta[i];
      let end3 = i === routesMeta.length - 1;
      let remainingPathname = matchedPathname === "/" ? pathname : pathname.slice(matchedPathname.length) || "/";
      let match = matchPath(
        { path: meta.relativePath, caseSensitive: meta.caseSensitive, end: end3 },
        remainingPathname
      );
      let route = meta.route;
      if (!match && end3 && allowPartial && !routesMeta[routesMeta.length - 1].route.index) {
        match = matchPath(
          {
            path: meta.relativePath,
            caseSensitive: meta.caseSensitive,
            end: false
          },
          remainingPathname
        );
      }
      if (!match) {
        return null;
      }
      Object.assign(matchedParams, match.params);
      matches2.push({
        // TODO: Can this as be avoided?
        params: matchedParams,
        pathname: joinPaths([matchedPathname, match.pathname]),
        pathnameBase: normalizePathname(
          joinPaths([matchedPathname, match.pathnameBase])
        ),
        route
      });
      if (match.pathnameBase !== "/") {
        matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);
      }
    }
    return matches2;
  }
  function matchPath(pattern, pathname) {
    if (typeof pattern === "string") {
      pattern = { path: pattern, caseSensitive: false, end: true };
    }
    let [matcher, compiledParams] = compilePath(
      pattern.path,
      pattern.caseSensitive,
      pattern.end
    );
    let match = pathname.match(matcher);
    if (!match) return null;
    let matchedPathname = match[0];
    let pathnameBase = matchedPathname.replace(/(.)\/+$/, "$1");
    let captureGroups = match.slice(1);
    let params = compiledParams.reduce(
      (memo2, { paramName, isOptional }, index) => {
        if (paramName === "*") {
          let splatValue = captureGroups[index] || "";
          pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\/+$/, "$1");
        }
        const value = captureGroups[index];
        if (isOptional && !value) {
          memo2[paramName] = void 0;
        } else {
          memo2[paramName] = (value || "").replace(/%2F/g, "/");
        }
        return memo2;
      },
      {}
    );
    return {
      params,
      pathname: matchedPathname,
      pathnameBase,
      pattern
    };
  }
  function compilePath(path, caseSensitive = false, end3 = true) {
    warning(
      path === "*" || !path.endsWith("*") || path.endsWith("/*"),
      `Route path "${path}" will be treated as if it were "${path.replace(/\*$/, "/*")}" because the \`*\` character must always follow a \`/\` in the pattern. To get rid of this warning, please change the route path to "${path.replace(/\*$/, "/*")}".`
    );
    let params = [];
    let regexpSource = "^" + path.replace(/\/*\*?$/, "").replace(/^\/*/, "/").replace(/[\\.*+^${}|()[\]]/g, "\\$&").replace(
      /\/:([\w-]+)(\?)?/g,
      (_3, paramName, isOptional) => {
        params.push({ paramName, isOptional: isOptional != null });
        return isOptional ? "/?([^\\/]+)?" : "/([^\\/]+)";
      }
    );
    if (path.endsWith("*")) {
      params.push({ paramName: "*" });
      regexpSource += path === "*" || path === "/*" ? "(.*)$" : "(?:\\/(.+)|\\/*)$";
    } else if (end3) {
      regexpSource += "\\/*$";
    } else if (path !== "" && path !== "/") {
      regexpSource += "(?:(?=\\/|$))";
    } else {
    }
    let matcher = new RegExp(regexpSource, caseSensitive ? void 0 : "i");
    return [matcher, params];
  }
  function decodePath(value) {
    try {
      return value.split("/").map((v) => decodeURIComponent(v).replace(/\//g, "%2F")).join("/");
    } catch (error) {
      warning(
        false,
        `The URL path "${value}" could not be decoded because it is a malformed URL segment. This is probably due to a bad percent encoding (${error}).`
      );
      return value;
    }
  }
  function stripBasename(pathname, basename) {
    if (basename === "/") return pathname;
    if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {
      return null;
    }
    let startIndex = basename.endsWith("/") ? basename.length - 1 : basename.length;
    let nextChar = pathname.charAt(startIndex);
    if (nextChar && nextChar !== "/") {
      return null;
    }
    return pathname.slice(startIndex) || "/";
  }
  function resolvePath(to, fromPathname = "/") {
    let {
      pathname: toPathname,
      search = "",
      hash: hash7 = ""
    } = typeof to === "string" ? parsePath(to) : to;
    let pathname = toPathname ? toPathname.startsWith("/") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;
    return {
      pathname,
      search: normalizeSearch(search),
      hash: normalizeHash(hash7)
    };
  }
  function resolvePathname(relativePath, fromPathname) {
    let segments = fromPathname.replace(/\/+$/, "").split("/");
    let relativeSegments = relativePath.split("/");
    relativeSegments.forEach((segment) => {
      if (segment === "..") {
        if (segments.length > 1) segments.pop();
      } else if (segment !== ".") {
        segments.push(segment);
      }
    });
    return segments.length > 1 ? segments.join("/") : "/";
  }
  function getInvalidPathError(char, field, dest, path) {
    return `Cannot include a '${char}' character in a manually specified \`to.${field}\` field [${JSON.stringify(
      path
    )}].  Please separate it out to the \`to.${dest}\` field. Alternatively you may provide the full path as a string in <Link to="..."> and the router will parse it for you.`;
  }
  function getPathContributingMatches(matches2) {
    return matches2.filter(
      (match, index) => index === 0 || match.route.path && match.route.path.length > 0
    );
  }
  function getResolveToMatches(matches2) {
    let pathMatches = getPathContributingMatches(matches2);
    return pathMatches.map(
      (match, idx) => idx === pathMatches.length - 1 ? match.pathname : match.pathnameBase
    );
  }
  function resolveTo(toArg, routePathnames, locationPathname, isPathRelative = false) {
    let to;
    if (typeof toArg === "string") {
      to = parsePath(toArg);
    } else {
      to = { ...toArg };
      invariant(
        !to.pathname || !to.pathname.includes("?"),
        getInvalidPathError("?", "pathname", "search", to)
      );
      invariant(
        !to.pathname || !to.pathname.includes("#"),
        getInvalidPathError("#", "pathname", "hash", to)
      );
      invariant(
        !to.search || !to.search.includes("#"),
        getInvalidPathError("#", "search", "hash", to)
      );
    }
    let isEmptyPath = toArg === "" || to.pathname === "";
    let toPathname = isEmptyPath ? "/" : to.pathname;
    let from;
    if (toPathname == null) {
      from = locationPathname;
    } else {
      let routePathnameIndex = routePathnames.length - 1;
      if (!isPathRelative && toPathname.startsWith("..")) {
        let toSegments = toPathname.split("/");
        while (toSegments[0] === "..") {
          toSegments.shift();
          routePathnameIndex -= 1;
        }
        to.pathname = toSegments.join("/");
      }
      from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : "/";
    }
    let path = resolvePath(to, from);
    let hasExplicitTrailingSlash = toPathname && toPathname !== "/" && toPathname.endsWith("/");
    let hasCurrentTrailingSlash = (isEmptyPath || toPathname === ".") && locationPathname.endsWith("/");
    if (!path.pathname.endsWith("/") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {
      path.pathname += "/";
    }
    return path;
  }
  var joinPaths = (paths) => paths.join("/").replace(/\/\/+/g, "/");
  var normalizePathname = (pathname) => pathname.replace(/\/+$/, "").replace(/^\/*/, "/");
  var normalizeSearch = (search) => !search || search === "?" ? "" : search.startsWith("?") ? search : "?" + search;
  var normalizeHash = (hash7) => !hash7 || hash7 === "#" ? "" : hash7.startsWith("#") ? hash7 : "#" + hash7;
  function isRouteErrorResponse(error) {
    return error != null && typeof error.status === "number" && typeof error.statusText === "string" && typeof error.internal === "boolean" && "data" in error;
  }
  var validMutationMethodsArr = [
    "POST",
    "PUT",
    "PATCH",
    "DELETE"
  ];
  var validMutationMethods = new Set(
    validMutationMethodsArr
  );
  var validRequestMethodsArr = [
    "GET",
    ...validMutationMethodsArr
  ];
  var validRequestMethods = new Set(validRequestMethodsArr);
  var ResetLoaderDataSymbol = Symbol("ResetLoaderData");
  var DataRouterContext = React.createContext(null);
  DataRouterContext.displayName = "DataRouter";
  var DataRouterStateContext = React.createContext(null);
  DataRouterStateContext.displayName = "DataRouterState";
  var ViewTransitionContext = React.createContext({
    isTransitioning: false
  });
  ViewTransitionContext.displayName = "ViewTransition";
  var FetchersContext = React.createContext(
    /* @__PURE__ */ new Map()
  );
  FetchersContext.displayName = "Fetchers";
  var AwaitContext = React.createContext(null);
  AwaitContext.displayName = "Await";
  var NavigationContext = React.createContext(
    null
  );
  NavigationContext.displayName = "Navigation";
  var LocationContext = React.createContext(
    null
  );
  LocationContext.displayName = "Location";
  var RouteContext = React.createContext({
    outlet: null,
    matches: [],
    isDataRoute: false
  });
  RouteContext.displayName = "Route";
  var RouteErrorContext = React.createContext(null);
  RouteErrorContext.displayName = "RouteError";
  var ENABLE_DEV_WARNINGS = true;
  function useHref(to, { relative } = {}) {
    invariant(
      useInRouterContext(),
      // TODO: This error is probably because they somehow have 2 versions of the
      // router loaded. We can help them understand how to avoid that.
      `useHref() may be used only in the context of a <Router> component.`
    );
    let { basename, navigator: navigator2 } = React2.useContext(NavigationContext);
    let { hash: hash7, pathname, search } = useResolvedPath(to, { relative });
    let joinedPathname = pathname;
    if (basename !== "/") {
      joinedPathname = pathname === "/" ? basename : joinPaths([basename, pathname]);
    }
    return navigator2.createHref({ pathname: joinedPathname, search, hash: hash7 });
  }
  function useInRouterContext() {
    return React2.useContext(LocationContext) != null;
  }
  function useLocation() {
    invariant(
      useInRouterContext(),
      // TODO: This error is probably because they somehow have 2 versions of the
      // router loaded. We can help them understand how to avoid that.
      `useLocation() may be used only in the context of a <Router> component.`
    );
    return React2.useContext(LocationContext).location;
  }
  var navigateEffectWarning = `You should call navigate() in a React.useEffect(), not when your component is first rendered.`;
  function useIsomorphicLayoutEffect(cb) {
    let isStatic = React2.useContext(NavigationContext).static;
    if (!isStatic) {
      React2.useLayoutEffect(cb);
    }
  }
  function useNavigate() {
    let { isDataRoute } = React2.useContext(RouteContext);
    return isDataRoute ? useNavigateStable() : useNavigateUnstable();
  }
  function useNavigateUnstable() {
    invariant(
      useInRouterContext(),
      // TODO: This error is probably because they somehow have 2 versions of the
      // router loaded. We can help them understand how to avoid that.
      `useNavigate() may be used only in the context of a <Router> component.`
    );
    let dataRouterContext = React2.useContext(DataRouterContext);
    let { basename, navigator: navigator2 } = React2.useContext(NavigationContext);
    let { matches: matches2 } = React2.useContext(RouteContext);
    let { pathname: locationPathname } = useLocation();
    let routePathnamesJson = JSON.stringify(getResolveToMatches(matches2));
    let activeRef = React2.useRef(false);
    useIsomorphicLayoutEffect(() => {
      activeRef.current = true;
    });
    let navigate = React2.useCallback(
      (to, options = {}) => {
        warning(activeRef.current, navigateEffectWarning);
        if (!activeRef.current) return;
        if (typeof to === "number") {
          navigator2.go(to);
          return;
        }
        let path = resolveTo(
          to,
          JSON.parse(routePathnamesJson),
          locationPathname,
          options.relative === "path"
        );
        if (dataRouterContext == null && basename !== "/") {
          path.pathname = path.pathname === "/" ? basename : joinPaths([basename, path.pathname]);
        }
        (!!options.replace ? navigator2.replace : navigator2.push)(
          path,
          options.state,
          options
        );
      },
      [
        basename,
        navigator2,
        routePathnamesJson,
        locationPathname,
        dataRouterContext
      ]
    );
    return navigate;
  }
  var OutletContext = React2.createContext(null);
  function useResolvedPath(to, { relative } = {}) {
    let { matches: matches2 } = React2.useContext(RouteContext);
    let { pathname: locationPathname } = useLocation();
    let routePathnamesJson = JSON.stringify(getResolveToMatches(matches2));
    return React2.useMemo(
      () => resolveTo(
        to,
        JSON.parse(routePathnamesJson),
        locationPathname,
        relative === "path"
      ),
      [to, routePathnamesJson, locationPathname, relative]
    );
  }
  function useRoutes(routes, locationArg) {
    return useRoutesImpl(routes, locationArg);
  }
  function useRoutesImpl(routes, locationArg, dataRouterState, future) {
    invariant(
      useInRouterContext(),
      // TODO: This error is probably because they somehow have 2 versions of the
      // router loaded. We can help them understand how to avoid that.
      `useRoutes() may be used only in the context of a <Router> component.`
    );
    let { navigator: navigator2, static: isStatic } = React2.useContext(NavigationContext);
    let { matches: parentMatches } = React2.useContext(RouteContext);
    let routeMatch = parentMatches[parentMatches.length - 1];
    let parentParams = routeMatch ? routeMatch.params : {};
    let parentPathname = routeMatch ? routeMatch.pathname : "/";
    let parentPathnameBase = routeMatch ? routeMatch.pathnameBase : "/";
    let parentRoute = routeMatch && routeMatch.route;
    if (ENABLE_DEV_WARNINGS) {
      let parentPath = parentRoute && parentRoute.path || "";
      warningOnce(
        parentPathname,
        !parentRoute || parentPath.endsWith("*") || parentPath.endsWith("*?"),
        `You rendered descendant <Routes> (or called \`useRoutes()\`) at "${parentPathname}" (under <Route path="${parentPath}">) but the parent route path has no trailing "*". This means if you navigate deeper, the parent won't match anymore and therefore the child routes will never render.

Please change the parent <Route path="${parentPath}"> to <Route path="${parentPath === "/" ? "*" : `${parentPath}/*`}">.`
      );
    }
    let locationFromContext = useLocation();
    let location;
    if (locationArg) {
      let parsedLocationArg = typeof locationArg === "string" ? parsePath(locationArg) : locationArg;
      invariant(
        parentPathnameBase === "/" || parsedLocationArg.pathname?.startsWith(parentPathnameBase),
        `When overriding the location using \`<Routes location>\` or \`useRoutes(routes, location)\`, the location pathname must begin with the portion of the URL pathname that was matched by all parent routes. The current pathname base is "${parentPathnameBase}" but pathname "${parsedLocationArg.pathname}" was given in the \`location\` prop.`
      );
      location = parsedLocationArg;
    } else {
      location = locationFromContext;
    }
    let pathname = location.pathname || "/";
    let remainingPathname = pathname;
    if (parentPathnameBase !== "/") {
      let parentSegments = parentPathnameBase.replace(/^\//, "").split("/");
      let segments = pathname.replace(/^\//, "").split("/");
      remainingPathname = "/" + segments.slice(parentSegments.length).join("/");
    }
    let matches2 = !isStatic && dataRouterState && dataRouterState.matches && dataRouterState.matches.length > 0 ? dataRouterState.matches : matchRoutes(routes, { pathname: remainingPathname });
    if (ENABLE_DEV_WARNINGS) {
      warning(
        parentRoute || matches2 != null,
        `No routes matched location "${location.pathname}${location.search}${location.hash}" `
      );
      warning(
        matches2 == null || matches2[matches2.length - 1].route.element !== void 0 || matches2[matches2.length - 1].route.Component !== void 0 || matches2[matches2.length - 1].route.lazy !== void 0,
        `Matched leaf route at location "${location.pathname}${location.search}${location.hash}" does not have an element or Component. This means it will render an <Outlet /> with a null value by default resulting in an "empty" page.`
      );
    }
    let renderedMatches = _renderMatches(
      matches2 && matches2.map(
        (match) => Object.assign({}, match, {
          params: Object.assign({}, parentParams, match.params),
          pathname: joinPaths([
            parentPathnameBase,
            // Re-encode pathnames that were decoded inside matchRoutes
            navigator2.encodeLocation ? navigator2.encodeLocation(match.pathname).pathname : match.pathname
          ]),
          pathnameBase: match.pathnameBase === "/" ? parentPathnameBase : joinPaths([
            parentPathnameBase,
            // Re-encode pathnames that were decoded inside matchRoutes
            navigator2.encodeLocation ? navigator2.encodeLocation(match.pathnameBase).pathname : match.pathnameBase
          ])
        })
      ),
      parentMatches,
      dataRouterState,
      future
    );
    if (locationArg && renderedMatches) {
      return /* @__PURE__ */ React2.createElement(
        LocationContext.Provider,
        {
          value: {
            location: {
              pathname: "/",
              search: "",
              hash: "",
              state: null,
              key: "default",
              ...location
            },
            navigationType: "POP"
            /* Pop */
          }
        },
        renderedMatches
      );
    }
    return renderedMatches;
  }
  function DefaultErrorComponent() {
    let error = useRouteError();
    let message = isRouteErrorResponse(error) ? `${error.status} ${error.statusText}` : error instanceof Error ? error.message : JSON.stringify(error);
    let stack = error instanceof Error ? error.stack : null;
    let lightgrey = "rgba(200,200,200, 0.5)";
    let preStyles = { padding: "0.5rem", backgroundColor: lightgrey };
    let codeStyles = { padding: "2px 4px", backgroundColor: lightgrey };
    let devInfo = null;
    if (ENABLE_DEV_WARNINGS) {
      console.error(
        "Error handled by React Router default ErrorBoundary:",
        error
      );
      devInfo = /* @__PURE__ */ React2.createElement(React2.Fragment, null, /* @__PURE__ */ React2.createElement("p", null, "\u{1F4BF} Hey developer \u{1F44B}"), /* @__PURE__ */ React2.createElement("p", null, "You can provide a way better UX than this when your app throws errors by providing your own ", /* @__PURE__ */ React2.createElement("code", { style: codeStyles }, "ErrorBoundary"), " or", " ", /* @__PURE__ */ React2.createElement("code", { style: codeStyles }, "errorElement"), " prop on your route."));
    }
    return /* @__PURE__ */ React2.createElement(React2.Fragment, null, /* @__PURE__ */ React2.createElement("h2", null, "Unexpected Application Error!"), /* @__PURE__ */ React2.createElement("h3", { style: { fontStyle: "italic" } }, message), stack ? /* @__PURE__ */ React2.createElement("pre", { style: preStyles }, stack) : null, devInfo);
  }
  var defaultErrorElement = /* @__PURE__ */ React2.createElement(DefaultErrorComponent, null);
  var RenderErrorBoundary = class extends React2.Component {
    constructor(props) {
      super(props);
      this.state = {
        location: props.location,
        revalidation: props.revalidation,
        error: props.error
      };
    }
    static getDerivedStateFromError(error) {
      return { error };
    }
    static getDerivedStateFromProps(props, state) {
      if (state.location !== props.location || state.revalidation !== "idle" && props.revalidation === "idle") {
        return {
          error: props.error,
          location: props.location,
          revalidation: props.revalidation
        };
      }
      return {
        error: props.error !== void 0 ? props.error : state.error,
        location: state.location,
        revalidation: props.revalidation || state.revalidation
      };
    }
    componentDidCatch(error, errorInfo) {
      console.error(
        "React Router caught the following error during render",
        error,
        errorInfo
      );
    }
    render() {
      return this.state.error !== void 0 ? /* @__PURE__ */ React2.createElement(RouteContext.Provider, { value: this.props.routeContext }, /* @__PURE__ */ React2.createElement(
        RouteErrorContext.Provider,
        {
          value: this.state.error,
          children: this.props.component
        }
      )) : this.props.children;
    }
  };
  function RenderedRoute({ routeContext, match, children }) {
    let dataRouterContext = React2.useContext(DataRouterContext);
    if (dataRouterContext && dataRouterContext.static && dataRouterContext.staticContext && (match.route.errorElement || match.route.ErrorBoundary)) {
      dataRouterContext.staticContext._deepestRenderedBoundaryId = match.route.id;
    }
    return /* @__PURE__ */ React2.createElement(RouteContext.Provider, { value: routeContext }, children);
  }
  function _renderMatches(matches2, parentMatches = [], dataRouterState = null, future = null) {
    if (matches2 == null) {
      if (!dataRouterState) {
        return null;
      }
      if (dataRouterState.errors) {
        matches2 = dataRouterState.matches;
      } else if (parentMatches.length === 0 && !dataRouterState.initialized && dataRouterState.matches.length > 0) {
        matches2 = dataRouterState.matches;
      } else {
        return null;
      }
    }
    let renderedMatches = matches2;
    let errors = dataRouterState?.errors;
    if (errors != null) {
      let errorIndex = renderedMatches.findIndex(
        (m) => m.route.id && errors?.[m.route.id] !== void 0
      );
      invariant(
        errorIndex >= 0,
        `Could not find a matching route for errors on route IDs: ${Object.keys(
          errors
        ).join(",")}`
      );
      renderedMatches = renderedMatches.slice(
        0,
        Math.min(renderedMatches.length, errorIndex + 1)
      );
    }
    let renderFallback = false;
    let fallbackIndex = -1;
    if (dataRouterState) {
      for (let i = 0; i < renderedMatches.length; i++) {
        let match = renderedMatches[i];
        if (match.route.HydrateFallback || match.route.hydrateFallbackElement) {
          fallbackIndex = i;
        }
        if (match.route.id) {
          let { loaderData, errors: errors2 } = dataRouterState;
          let needsToRunLoader = match.route.loader && !loaderData.hasOwnProperty(match.route.id) && (!errors2 || errors2[match.route.id] === void 0);
          if (match.route.lazy || needsToRunLoader) {
            renderFallback = true;
            if (fallbackIndex >= 0) {
              renderedMatches = renderedMatches.slice(0, fallbackIndex + 1);
            } else {
              renderedMatches = [renderedMatches[0]];
            }
            break;
          }
        }
      }
    }
    return renderedMatches.reduceRight((outlet, match, index) => {
      let error;
      let shouldRenderHydrateFallback = false;
      let errorElement = null;
      let hydrateFallbackElement = null;
      if (dataRouterState) {
        error = errors && match.route.id ? errors[match.route.id] : void 0;
        errorElement = match.route.errorElement || defaultErrorElement;
        if (renderFallback) {
          if (fallbackIndex < 0 && index === 0) {
            warningOnce(
              "route-fallback",
              false,
              "No `HydrateFallback` element provided to render during initial hydration"
            );
            shouldRenderHydrateFallback = true;
            hydrateFallbackElement = null;
          } else if (fallbackIndex === index) {
            shouldRenderHydrateFallback = true;
            hydrateFallbackElement = match.route.hydrateFallbackElement || null;
          }
        }
      }
      let matches22 = parentMatches.concat(renderedMatches.slice(0, index + 1));
      let getChildren = () => {
        let children;
        if (error) {
          children = errorElement;
        } else if (shouldRenderHydrateFallback) {
          children = hydrateFallbackElement;
        } else if (match.route.Component) {
          children = /* @__PURE__ */ React2.createElement(match.route.Component, null);
        } else if (match.route.element) {
          children = match.route.element;
        } else {
          children = outlet;
        }
        return /* @__PURE__ */ React2.createElement(
          RenderedRoute,
          {
            match,
            routeContext: {
              outlet,
              matches: matches22,
              isDataRoute: dataRouterState != null
            },
            children
          }
        );
      };
      return dataRouterState && (match.route.ErrorBoundary || match.route.errorElement || index === 0) ? /* @__PURE__ */ React2.createElement(
        RenderErrorBoundary,
        {
          location: dataRouterState.location,
          revalidation: dataRouterState.revalidation,
          component: errorElement,
          error,
          children: getChildren(),
          routeContext: { outlet: null, matches: matches22, isDataRoute: true }
        }
      ) : getChildren();
    }, null);
  }
  function getDataRouterConsoleError(hookName) {
    return `${hookName} must be used within a data router.  See https://reactrouter.com/en/main/routers/picking-a-router.`;
  }
  function useDataRouterContext(hookName) {
    let ctx = React2.useContext(DataRouterContext);
    invariant(ctx, getDataRouterConsoleError(hookName));
    return ctx;
  }
  function useDataRouterState(hookName) {
    let state = React2.useContext(DataRouterStateContext);
    invariant(state, getDataRouterConsoleError(hookName));
    return state;
  }
  function useRouteContext(hookName) {
    let route = React2.useContext(RouteContext);
    invariant(route, getDataRouterConsoleError(hookName));
    return route;
  }
  function useCurrentRouteId(hookName) {
    let route = useRouteContext(hookName);
    let thisRoute = route.matches[route.matches.length - 1];
    invariant(
      thisRoute.route.id,
      `${hookName} can only be used on routes that contain a unique "id"`
    );
    return thisRoute.route.id;
  }
  function useRouteId() {
    return useCurrentRouteId(
      "useRouteId"
      /* UseRouteId */
    );
  }
  function useNavigation() {
    let state = useDataRouterState(
      "useNavigation"
      /* UseNavigation */
    );
    return state.navigation;
  }
  function useMatches() {
    let { matches: matches2, loaderData } = useDataRouterState(
      "useMatches"
      /* UseMatches */
    );
    return React2.useMemo(
      () => matches2.map((m) => convertRouteMatchToUiMatch(m, loaderData)),
      [matches2, loaderData]
    );
  }
  function useRouteError() {
    let error = React2.useContext(RouteErrorContext);
    let state = useDataRouterState(
      "useRouteError"
      /* UseRouteError */
    );
    let routeId = useCurrentRouteId(
      "useRouteError"
      /* UseRouteError */
    );
    if (error !== void 0) {
      return error;
    }
    return state.errors?.[routeId];
  }
  function useNavigateStable() {
    let { router } = useDataRouterContext(
      "useNavigate"
      /* UseNavigateStable */
    );
    let id = useCurrentRouteId(
      "useNavigate"
      /* UseNavigateStable */
    );
    let activeRef = React2.useRef(false);
    useIsomorphicLayoutEffect(() => {
      activeRef.current = true;
    });
    let navigate = React2.useCallback(
      async (to, options = {}) => {
        warning(activeRef.current, navigateEffectWarning);
        if (!activeRef.current) return;
        if (typeof to === "number") {
          router.navigate(to);
        } else {
          await router.navigate(to, { fromRouteId: id, ...options });
        }
      },
      [router, id]
    );
    return navigate;
  }
  var alreadyWarned = {};
  function warningOnce(key, cond, message) {
    if (!cond && !alreadyWarned[key]) {
      alreadyWarned[key] = true;
      warning(false, message);
    }
  }
  var MemoizedDataRoutes = React3.memo(DataRoutes);
  function DataRoutes({
    routes,
    future,
    state
  }) {
    return useRoutesImpl(routes, void 0, state, future);
  }
  function Route(_props) {
    invariant(
      false,
      `A <Route> is only ever to be used as the child of <Routes> element, never rendered directly. Please wrap your <Route> in a <Routes>.`
    );
  }
  function Router({
    basename: basenameProp = "/",
    children = null,
    location: locationProp,
    navigationType = "POP",
    navigator: navigator2,
    static: staticProp = false
  }) {
    invariant(
      !useInRouterContext(),
      `You cannot render a <Router> inside another <Router>. You should never have more than one in your app.`
    );
    let basename = basenameProp.replace(/^\/*/, "/");
    let navigationContext = React3.useMemo(
      () => ({
        basename,
        navigator: navigator2,
        static: staticProp,
        future: {}
      }),
      [basename, navigator2, staticProp]
    );
    if (typeof locationProp === "string") {
      locationProp = parsePath(locationProp);
    }
    let {
      pathname = "/",
      search = "",
      hash: hash7 = "",
      state = null,
      key = "default"
    } = locationProp;
    let locationContext = React3.useMemo(() => {
      let trailingPathname = stripBasename(pathname, basename);
      if (trailingPathname == null) {
        return null;
      }
      return {
        location: {
          pathname: trailingPathname,
          search,
          hash: hash7,
          state,
          key
        },
        navigationType
      };
    }, [basename, pathname, search, hash7, state, key, navigationType]);
    warning(
      locationContext != null,
      `<Router basename="${basename}"> is not able to match the URL "${pathname}${search}${hash7}" because it does not start with the basename, so the <Router> won't render anything.`
    );
    if (locationContext == null) {
      return null;
    }
    return /* @__PURE__ */ React3.createElement(NavigationContext.Provider, { value: navigationContext }, /* @__PURE__ */ React3.createElement(LocationContext.Provider, { children, value: locationContext }));
  }
  function Routes({
    children,
    location
  }) {
    return useRoutes(createRoutesFromChildren(children), location);
  }
  function createRoutesFromChildren(children, parentPath = []) {
    let routes = [];
    React3.Children.forEach(children, (element, index) => {
      if (!React3.isValidElement(element)) {
        return;
      }
      let treePath = [...parentPath, index];
      if (element.type === React3.Fragment) {
        routes.push.apply(
          routes,
          createRoutesFromChildren(element.props.children, treePath)
        );
        return;
      }
      invariant(
        element.type === Route,
        `[${typeof element.type === "string" ? element.type : element.type.name}] is not a <Route> component. All component children of <Routes> must be a <Route> or <React.Fragment>`
      );
      invariant(
        !element.props.index || !element.props.children,
        "An index route cannot have child routes."
      );
      let route = {
        id: element.props.id || treePath.join("-"),
        caseSensitive: element.props.caseSensitive,
        element: element.props.element,
        Component: element.props.Component,
        index: element.props.index,
        path: element.props.path,
        loader: element.props.loader,
        action: element.props.action,
        hydrateFallbackElement: element.props.hydrateFallbackElement,
        HydrateFallback: element.props.HydrateFallback,
        errorElement: element.props.errorElement,
        ErrorBoundary: element.props.ErrorBoundary,
        hasErrorBoundary: element.props.hasErrorBoundary === true || element.props.ErrorBoundary != null || element.props.errorElement != null,
        shouldRevalidate: element.props.shouldRevalidate,
        handle: element.props.handle,
        lazy: element.props.lazy
      };
      if (element.props.children) {
        route.children = createRoutesFromChildren(
          element.props.children,
          treePath
        );
      }
      routes.push(route);
    });
    return routes;
  }
  var defaultMethod = "get";
  var defaultEncType = "application/x-www-form-urlencoded";
  function isHtmlElement(object) {
    return object != null && typeof object.tagName === "string";
  }
  function isButtonElement(object) {
    return isHtmlElement(object) && object.tagName.toLowerCase() === "button";
  }
  function isFormElement(object) {
    return isHtmlElement(object) && object.tagName.toLowerCase() === "form";
  }
  function isInputElement(object) {
    return isHtmlElement(object) && object.tagName.toLowerCase() === "input";
  }
  function isModifiedEvent(event) {
    return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
  }
  function shouldProcessLinkClick(event, target) {
    return event.button === 0 && // Ignore everything but left clicks
    (!target || target === "_self") && // Let browser handle "target=_blank" etc.
    !isModifiedEvent(event);
  }
  var _formDataSupportsSubmitter = null;
  function isFormDataSubmitterSupported() {
    if (_formDataSupportsSubmitter === null) {
      try {
        new FormData(
          document.createElement("form"),
          // @ts-expect-error if FormData supports the submitter parameter, this will throw
          0
        );
        _formDataSupportsSubmitter = false;
      } catch (e) {
        _formDataSupportsSubmitter = true;
      }
    }
    return _formDataSupportsSubmitter;
  }
  var supportedFormEncTypes = /* @__PURE__ */ new Set([
    "application/x-www-form-urlencoded",
    "multipart/form-data",
    "text/plain"
  ]);
  function getFormEncType(encType) {
    if (encType != null && !supportedFormEncTypes.has(encType)) {
      warning(
        false,
        `"${encType}" is not a valid \`encType\` for \`<Form>\`/\`<fetcher.Form>\` and will default to "${defaultEncType}"`
      );
      return null;
    }
    return encType;
  }
  function getFormSubmissionInfo(target, basename) {
    let method;
    let action;
    let encType;
    let formData;
    let body;
    if (isFormElement(target)) {
      let attr = target.getAttribute("action");
      action = attr ? stripBasename(attr, basename) : null;
      method = target.getAttribute("method") || defaultMethod;
      encType = getFormEncType(target.getAttribute("enctype")) || defaultEncType;
      formData = new FormData(target);
    } else if (isButtonElement(target) || isInputElement(target) && (target.type === "submit" || target.type === "image")) {
      let form = target.form;
      if (form == null) {
        throw new Error(
          `Cannot submit a <button> or <input type="submit"> without a <form>`
        );
      }
      let attr = target.getAttribute("formaction") || form.getAttribute("action");
      action = attr ? stripBasename(attr, basename) : null;
      method = target.getAttribute("formmethod") || form.getAttribute("method") || defaultMethod;
      encType = getFormEncType(target.getAttribute("formenctype")) || getFormEncType(form.getAttribute("enctype")) || defaultEncType;
      formData = new FormData(form, target);
      if (!isFormDataSubmitterSupported()) {
        let { name, type, value } = target;
        if (type === "image") {
          let prefix = name ? `${name}.` : "";
          formData.append(`${prefix}x`, "0");
          formData.append(`${prefix}y`, "0");
        } else if (name) {
          formData.append(name, value);
        }
      }
    } else if (isHtmlElement(target)) {
      throw new Error(
        `Cannot submit element that is not <form>, <button>, or <input type="submit|image">`
      );
    } else {
      method = defaultMethod;
      action = null;
      encType = defaultEncType;
      body = target;
    }
    if (formData && encType === "text/plain") {
      body = formData;
      formData = void 0;
    }
    return { action, method: method.toLowerCase(), encType, formData, body };
  }
  function invariant2(value, message) {
    if (value === false || value === null || typeof value === "undefined") {
      throw new Error(message);
    }
  }
  async function loadRouteModule(route, routeModulesCache) {
    if (route.id in routeModulesCache) {
      return routeModulesCache[route.id];
    }
    try {
      let routeModule = await import(
        /* @vite-ignore */
        /* webpackIgnore: true */
        route.module
      );
      routeModulesCache[route.id] = routeModule;
      return routeModule;
    } catch (error) {
      console.error(
        `Error loading route module \`${route.module}\`, reloading page...`
      );
      console.error(error);
      if (window.__reactRouterContext && window.__reactRouterContext.isSpaMode && // @ts-expect-error
      import_meta.hot) {
        throw error;
      }
      window.location.reload();
      return new Promise(() => {
      });
    }
  }
  function isPageLinkDescriptor(object) {
    return object != null && typeof object.page === "string";
  }
  function isHtmlLinkDescriptor(object) {
    if (object == null) {
      return false;
    }
    if (object.href == null) {
      return object.rel === "preload" && typeof object.imageSrcSet === "string" && typeof object.imageSizes === "string";
    }
    return typeof object.rel === "string" && typeof object.href === "string";
  }
  async function getKeyedPrefetchLinks(matches2, manifest, routeModules) {
    let links = await Promise.all(
      matches2.map(async (match) => {
        let route = manifest.routes[match.route.id];
        if (route) {
          let mod = await loadRouteModule(route, routeModules);
          return mod.links ? mod.links() : [];
        }
        return [];
      })
    );
    return dedupeLinkDescriptors(
      links.flat(1).filter(isHtmlLinkDescriptor).filter((link) => link.rel === "stylesheet" || link.rel === "preload").map(
        (link) => link.rel === "stylesheet" ? { ...link, rel: "prefetch", as: "style" } : { ...link, rel: "prefetch" }
      )
    );
  }
  function getNewMatchesForLinks(page, nextMatches, currentMatches, manifest, location, mode) {
    let isNew = (match, index) => {
      if (!currentMatches[index]) return true;
      return match.route.id !== currentMatches[index].route.id;
    };
    let matchPathChanged = (match, index) => {
      return (
        // param change, /users/123 -> /users/456
        currentMatches[index].pathname !== match.pathname || // splat param changed, which is not present in match.path
        // e.g. /files/images/avatar.jpg -> files/finances.xls
        currentMatches[index].route.path?.endsWith("*") && currentMatches[index].params["*"] !== match.params["*"]
      );
    };
    if (mode === "assets") {
      return nextMatches.filter(
        (match, index) => isNew(match, index) || matchPathChanged(match, index)
      );
    }
    if (mode === "data") {
      return nextMatches.filter((match, index) => {
        let manifestRoute = manifest.routes[match.route.id];
        if (!manifestRoute || !manifestRoute.hasLoader) {
          return false;
        }
        if (isNew(match, index) || matchPathChanged(match, index)) {
          return true;
        }
        if (match.route.shouldRevalidate) {
          let routeChoice = match.route.shouldRevalidate({
            currentUrl: new URL(
              location.pathname + location.search + location.hash,
              window.origin
            ),
            currentParams: currentMatches[0]?.params || {},
            nextUrl: new URL(page, window.origin),
            nextParams: match.params,
            defaultShouldRevalidate: true
          });
          if (typeof routeChoice === "boolean") {
            return routeChoice;
          }
        }
        return true;
      });
    }
    return [];
  }
  function getModuleLinkHrefs(matches2, manifest, { includeHydrateFallback } = {}) {
    return dedupeHrefs(
      matches2.map((match) => {
        let route = manifest.routes[match.route.id];
        if (!route) return [];
        let hrefs = [route.module];
        if (route.clientActionModule) {
          hrefs = hrefs.concat(route.clientActionModule);
        }
        if (route.clientLoaderModule) {
          hrefs = hrefs.concat(route.clientLoaderModule);
        }
        if (includeHydrateFallback && route.hydrateFallbackModule) {
          hrefs = hrefs.concat(route.hydrateFallbackModule);
        }
        if (route.imports) {
          hrefs = hrefs.concat(route.imports);
        }
        return hrefs;
      }).flat(1)
    );
  }
  function dedupeHrefs(hrefs) {
    return [...new Set(hrefs)];
  }
  function sortKeys(obj) {
    let sorted = {};
    let keys = Object.keys(obj).sort();
    for (let key of keys) {
      sorted[key] = obj[key];
    }
    return sorted;
  }
  function dedupeLinkDescriptors(descriptors, preloads) {
    let set = /* @__PURE__ */ new Set();
    let preloadsSet = new Set(preloads);
    return descriptors.reduce((deduped, descriptor) => {
      let alreadyModulePreload = preloads && !isPageLinkDescriptor(descriptor) && descriptor.as === "script" && descriptor.href && preloadsSet.has(descriptor.href);
      if (alreadyModulePreload) {
        return deduped;
      }
      let key = JSON.stringify(sortKeys(descriptor));
      if (!set.has(key)) {
        set.add(key);
        deduped.push({ key, link: descriptor });
      }
      return deduped;
    }, []);
  }
  var SingleFetchRedirectSymbol = Symbol("SingleFetchRedirect");
  function singleFetchUrl(reqUrl) {
    let url = typeof reqUrl === "string" ? new URL(
      reqUrl,
      // This can be called during the SSR flow via PrefetchPageLinksImpl so
      // don't assume window is available
      typeof window === "undefined" ? "server://singlefetch/" : window.location.origin
    ) : reqUrl;
    if (url.pathname === "/") {
      url.pathname = "_root.data";
    } else {
      url.pathname = `${url.pathname.replace(/\/$/, "")}.data`;
    }
    return url;
  }
  function useDataRouterContext2() {
    let context = React9.useContext(DataRouterContext);
    invariant2(
      context,
      "You must render this element inside a <DataRouterContext.Provider> element"
    );
    return context;
  }
  function useDataRouterStateContext() {
    let context = React9.useContext(DataRouterStateContext);
    invariant2(
      context,
      "You must render this element inside a <DataRouterStateContext.Provider> element"
    );
    return context;
  }
  var FrameworkContext = React9.createContext(void 0);
  FrameworkContext.displayName = "FrameworkContext";
  function useFrameworkContext() {
    let context = React9.useContext(FrameworkContext);
    invariant2(
      context,
      "You must render this element inside a <HydratedRouter> element"
    );
    return context;
  }
  function usePrefetchBehavior(prefetch, theirElementProps) {
    let frameworkContext = React9.useContext(FrameworkContext);
    let [maybePrefetch, setMaybePrefetch] = React9.useState(false);
    let [shouldPrefetch, setShouldPrefetch] = React9.useState(false);
    let { onFocus, onBlur, onMouseEnter, onMouseLeave, onTouchStart } = theirElementProps;
    let ref = React9.useRef(null);
    React9.useEffect(() => {
      if (prefetch === "render") {
        setShouldPrefetch(true);
      }
      if (prefetch === "viewport") {
        let callback = (entries) => {
          entries.forEach((entry) => {
            setShouldPrefetch(entry.isIntersecting);
          });
        };
        let observer = new IntersectionObserver(callback, { threshold: 0.5 });
        if (ref.current) observer.observe(ref.current);
        return () => {
          observer.disconnect();
        };
      }
    }, [prefetch]);
    React9.useEffect(() => {
      if (maybePrefetch) {
        let id = setTimeout(() => {
          setShouldPrefetch(true);
        }, 100);
        return () => {
          clearTimeout(id);
        };
      }
    }, [maybePrefetch]);
    let setIntent = () => {
      setMaybePrefetch(true);
    };
    let cancelIntent = () => {
      setMaybePrefetch(false);
      setShouldPrefetch(false);
    };
    if (!frameworkContext) {
      return [false, ref, {}];
    }
    if (prefetch !== "intent") {
      return [shouldPrefetch, ref, {}];
    }
    return [
      shouldPrefetch,
      ref,
      {
        onFocus: composeEventHandlers(onFocus, setIntent),
        onBlur: composeEventHandlers(onBlur, cancelIntent),
        onMouseEnter: composeEventHandlers(onMouseEnter, setIntent),
        onMouseLeave: composeEventHandlers(onMouseLeave, cancelIntent),
        onTouchStart: composeEventHandlers(onTouchStart, setIntent)
      }
    ];
  }
  function composeEventHandlers(theirHandler, ourHandler) {
    return (event) => {
      theirHandler && theirHandler(event);
      if (!event.defaultPrevented) {
        ourHandler(event);
      }
    };
  }
  function PrefetchPageLinks({
    page,
    ...dataLinkProps
  }) {
    let { router } = useDataRouterContext2();
    let matches2 = React9.useMemo(
      () => matchRoutes(router.routes, page, router.basename),
      [router.routes, page, router.basename]
    );
    if (!matches2) {
      return null;
    }
    return /* @__PURE__ */ React9.createElement(PrefetchPageLinksImpl, { page, matches: matches2, ...dataLinkProps });
  }
  function useKeyedPrefetchLinks(matches2) {
    let { manifest, routeModules } = useFrameworkContext();
    let [keyedPrefetchLinks, setKeyedPrefetchLinks] = React9.useState([]);
    React9.useEffect(() => {
      let interrupted = false;
      void getKeyedPrefetchLinks(matches2, manifest, routeModules).then(
        (links) => {
          if (!interrupted) {
            setKeyedPrefetchLinks(links);
          }
        }
      );
      return () => {
        interrupted = true;
      };
    }, [matches2, manifest, routeModules]);
    return keyedPrefetchLinks;
  }
  function PrefetchPageLinksImpl({
    page,
    matches: nextMatches,
    ...linkProps
  }) {
    let location = useLocation();
    let { manifest, routeModules } = useFrameworkContext();
    let { loaderData, matches: matches2 } = useDataRouterStateContext();
    let newMatchesForData = React9.useMemo(
      () => getNewMatchesForLinks(
        page,
        nextMatches,
        matches2,
        manifest,
        location,
        "data"
      ),
      [page, nextMatches, matches2, manifest, location]
    );
    let newMatchesForAssets = React9.useMemo(
      () => getNewMatchesForLinks(
        page,
        nextMatches,
        matches2,
        manifest,
        location,
        "assets"
      ),
      [page, nextMatches, matches2, manifest, location]
    );
    let dataHrefs = React9.useMemo(() => {
      if (page === location.pathname + location.search + location.hash) {
        return [];
      }
      let routesParams = /* @__PURE__ */ new Set();
      let foundOptOutRoute = false;
      nextMatches.forEach((m) => {
        let manifestRoute = manifest.routes[m.route.id];
        if (!manifestRoute || !manifestRoute.hasLoader) {
          return;
        }
        if (!newMatchesForData.some((m2) => m2.route.id === m.route.id) && m.route.id in loaderData && routeModules[m.route.id]?.shouldRevalidate) {
          foundOptOutRoute = true;
        } else if (manifestRoute.hasClientLoader) {
          foundOptOutRoute = true;
        } else {
          routesParams.add(m.route.id);
        }
      });
      if (routesParams.size === 0) {
        return [];
      }
      let url = singleFetchUrl(page);
      if (foundOptOutRoute && routesParams.size > 0) {
        url.searchParams.set(
          "_routes",
          nextMatches.filter((m) => routesParams.has(m.route.id)).map((m) => m.route.id).join(",")
        );
      }
      return [url.pathname + url.search];
    }, [
      loaderData,
      location,
      manifest,
      newMatchesForData,
      nextMatches,
      page,
      routeModules
    ]);
    let moduleHrefs = React9.useMemo(
      () => getModuleLinkHrefs(newMatchesForAssets, manifest),
      [newMatchesForAssets, manifest]
    );
    let keyedPrefetchLinks = useKeyedPrefetchLinks(newMatchesForAssets);
    return /* @__PURE__ */ React9.createElement(React9.Fragment, null, dataHrefs.map((href2) => /* @__PURE__ */ React9.createElement("link", { key: href2, rel: "prefetch", as: "fetch", href: href2, ...linkProps })), moduleHrefs.map((href2) => /* @__PURE__ */ React9.createElement("link", { key: href2, rel: "modulepreload", href: href2, ...linkProps })), keyedPrefetchLinks.map(({ key, link }) => (
      // these don't spread `linkProps` because they are full link descriptors
      // already with their own props
      /* @__PURE__ */ React9.createElement("link", { key, ...link })
    )));
  }
  function mergeRefs(...refs) {
    return (value) => {
      refs.forEach((ref) => {
        if (typeof ref === "function") {
          ref(value);
        } else if (ref != null) {
          ref.current = value;
        }
      });
    };
  }
  var isBrowser = typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined";
  try {
    if (isBrowser) {
      window.__reactRouterVersion = "7.2.0";
    }
  } catch (e) {
  }
  function BrowserRouter({
    basename,
    children,
    window: window2
  }) {
    let historyRef = React10.useRef();
    if (historyRef.current == null) {
      historyRef.current = createBrowserHistory({ window: window2, v5Compat: true });
    }
    let history = historyRef.current;
    let [state, setStateImpl] = React10.useState({
      action: history.action,
      location: history.location
    });
    let setState = React10.useCallback(
      (newState) => {
        React10.startTransition(() => setStateImpl(newState));
      },
      [setStateImpl]
    );
    React10.useLayoutEffect(() => history.listen(setState), [history, setState]);
    return /* @__PURE__ */ React10.createElement(
      Router,
      {
        basename,
        children,
        location: state.location,
        navigationType: state.action,
        navigator: history
      }
    );
  }
  function HistoryRouter({
    basename,
    children,
    history
  }) {
    let [state, setStateImpl] = React10.useState({
      action: history.action,
      location: history.location
    });
    let setState = React10.useCallback(
      (newState) => {
        React10.startTransition(() => setStateImpl(newState));
      },
      [setStateImpl]
    );
    React10.useLayoutEffect(() => history.listen(setState), [history, setState]);
    return /* @__PURE__ */ React10.createElement(
      Router,
      {
        basename,
        children,
        location: state.location,
        navigationType: state.action,
        navigator: history
      }
    );
  }
  HistoryRouter.displayName = "unstable_HistoryRouter";
  var ABSOLUTE_URL_REGEX2 = /^(?:[a-z][a-z0-9+.-]*:|\/\/)/i;
  var Link = React10.forwardRef(
    function LinkWithRef({
      onClick,
      discover = "render",
      prefetch = "none",
      relative,
      reloadDocument,
      replace: replace2,
      state,
      target,
      to,
      preventScrollReset,
      viewTransition,
      ...rest
    }, forwardedRef) {
      let { basename } = React10.useContext(NavigationContext);
      let isAbsolute = typeof to === "string" && ABSOLUTE_URL_REGEX2.test(to);
      let absoluteHref;
      let isExternal = false;
      if (typeof to === "string" && isAbsolute) {
        absoluteHref = to;
        if (isBrowser) {
          try {
            let currentUrl = new URL(window.location.href);
            let targetUrl = to.startsWith("//") ? new URL(currentUrl.protocol + to) : new URL(to);
            let path = stripBasename(targetUrl.pathname, basename);
            if (targetUrl.origin === currentUrl.origin && path != null) {
              to = path + targetUrl.search + targetUrl.hash;
            } else {
              isExternal = true;
            }
          } catch (e) {
            warning(
              false,
              `<Link to="${to}"> contains an invalid URL which will probably break when clicked - please update to a valid URL path.`
            );
          }
        }
      }
      let href2 = useHref(to, { relative });
      let [shouldPrefetch, prefetchRef, prefetchHandlers] = usePrefetchBehavior(
        prefetch,
        rest
      );
      let internalOnClick = useLinkClickHandler(to, {
        replace: replace2,
        state,
        target,
        preventScrollReset,
        relative,
        viewTransition
      });
      function handleClick(event) {
        if (onClick) onClick(event);
        if (!event.defaultPrevented) {
          internalOnClick(event);
        }
      }
      let link = (
        // eslint-disable-next-line jsx-a11y/anchor-has-content
        /* @__PURE__ */ React10.createElement(
          "a",
          {
            ...rest,
            ...prefetchHandlers,
            href: absoluteHref || href2,
            onClick: isExternal || reloadDocument ? onClick : handleClick,
            ref: mergeRefs(forwardedRef, prefetchRef),
            target,
            "data-discover": !isAbsolute && discover === "render" ? "true" : void 0
          }
        )
      );
      return shouldPrefetch && !isAbsolute ? /* @__PURE__ */ React10.createElement(React10.Fragment, null, link, /* @__PURE__ */ React10.createElement(PrefetchPageLinks, { page: href2 })) : link;
    }
  );
  Link.displayName = "Link";
  var NavLink = React10.forwardRef(
    function NavLinkWithRef({
      "aria-current": ariaCurrentProp = "page",
      caseSensitive = false,
      className: classNameProp = "",
      end: end3 = false,
      style: styleProp,
      to,
      viewTransition,
      children,
      ...rest
    }, ref) {
      let path = useResolvedPath(to, { relative: rest.relative });
      let location = useLocation();
      let routerState = React10.useContext(DataRouterStateContext);
      let { navigator: navigator2, basename } = React10.useContext(NavigationContext);
      let isTransitioning = routerState != null && // Conditional usage is OK here because the usage of a data router is static
      // eslint-disable-next-line react-hooks/rules-of-hooks
      useViewTransitionState(path) && viewTransition === true;
      let toPathname = navigator2.encodeLocation ? navigator2.encodeLocation(path).pathname : path.pathname;
      let locationPathname = location.pathname;
      let nextLocationPathname = routerState && routerState.navigation && routerState.navigation.location ? routerState.navigation.location.pathname : null;
      if (!caseSensitive) {
        locationPathname = locationPathname.toLowerCase();
        nextLocationPathname = nextLocationPathname ? nextLocationPathname.toLowerCase() : null;
        toPathname = toPathname.toLowerCase();
      }
      if (nextLocationPathname && basename) {
        nextLocationPathname = stripBasename(nextLocationPathname, basename) || nextLocationPathname;
      }
      const endSlashPosition = toPathname !== "/" && toPathname.endsWith("/") ? toPathname.length - 1 : toPathname.length;
      let isActive = locationPathname === toPathname || !end3 && locationPathname.startsWith(toPathname) && locationPathname.charAt(endSlashPosition) === "/";
      let isPending = nextLocationPathname != null && (nextLocationPathname === toPathname || !end3 && nextLocationPathname.startsWith(toPathname) && nextLocationPathname.charAt(toPathname.length) === "/");
      let renderProps = {
        isActive,
        isPending,
        isTransitioning
      };
      let ariaCurrent = isActive ? ariaCurrentProp : void 0;
      let className;
      if (typeof classNameProp === "function") {
        className = classNameProp(renderProps);
      } else {
        className = [
          classNameProp,
          isActive ? "active" : null,
          isPending ? "pending" : null,
          isTransitioning ? "transitioning" : null
        ].filter(Boolean).join(" ");
      }
      let style = typeof styleProp === "function" ? styleProp(renderProps) : styleProp;
      return /* @__PURE__ */ React10.createElement(
        Link,
        {
          ...rest,
          "aria-current": ariaCurrent,
          className,
          ref,
          style,
          to,
          viewTransition
        },
        typeof children === "function" ? children(renderProps) : children
      );
    }
  );
  NavLink.displayName = "NavLink";
  var Form = React10.forwardRef(
    ({
      discover = "render",
      fetcherKey,
      navigate,
      reloadDocument,
      replace: replace2,
      state,
      method = defaultMethod,
      action,
      onSubmit,
      relative,
      preventScrollReset,
      viewTransition,
      ...props
    }, forwardedRef) => {
      let submit = useSubmit();
      let formAction = useFormAction(action, { relative });
      let formMethod = method.toLowerCase() === "get" ? "get" : "post";
      let isAbsolute = typeof action === "string" && ABSOLUTE_URL_REGEX2.test(action);
      let submitHandler = (event) => {
        onSubmit && onSubmit(event);
        if (event.defaultPrevented) return;
        event.preventDefault();
        let submitter = event.nativeEvent.submitter;
        let submitMethod = submitter?.getAttribute("formmethod") || method;
        submit(submitter || event.currentTarget, {
          fetcherKey,
          method: submitMethod,
          navigate,
          replace: replace2,
          state,
          relative,
          preventScrollReset,
          viewTransition
        });
      };
      return /* @__PURE__ */ React10.createElement(
        "form",
        {
          ref: forwardedRef,
          method: formMethod,
          action: formAction,
          onSubmit: reloadDocument ? onSubmit : submitHandler,
          ...props,
          "data-discover": !isAbsolute && discover === "render" ? "true" : void 0
        }
      );
    }
  );
  Form.displayName = "Form";
  function ScrollRestoration({
    getKey,
    storageKey,
    ...props
  }) {
    let remixContext = React10.useContext(FrameworkContext);
    let { basename } = React10.useContext(NavigationContext);
    let location = useLocation();
    let matches2 = useMatches();
    useScrollRestoration({ getKey, storageKey });
    let ssrKey = React10.useMemo(
      () => {
        if (!remixContext || !getKey) return null;
        let userKey = getScrollRestorationKey(
          location,
          matches2,
          basename,
          getKey
        );
        return userKey !== location.key ? userKey : null;
      },
      // Nah, we only need this the first time for the SSR render
      // eslint-disable-next-line react-hooks/exhaustive-deps
      []
    );
    if (!remixContext || remixContext.isSpaMode) {
      return null;
    }
    let restoreScroll = ((storageKey2, restoreKey) => {
      if (!window.history.state || !window.history.state.key) {
        let key = Math.random().toString(32).slice(2);
        window.history.replaceState({ key }, "");
      }
      try {
        let positions = JSON.parse(sessionStorage.getItem(storageKey2) || "{}");
        let storedY = positions[restoreKey || window.history.state.key];
        if (typeof storedY === "number") {
          window.scrollTo(0, storedY);
        }
      } catch (error) {
        console.error(error);
        sessionStorage.removeItem(storageKey2);
      }
    }).toString();
    return /* @__PURE__ */ React10.createElement(
      "script",
      {
        ...props,
        suppressHydrationWarning: true,
        dangerouslySetInnerHTML: {
          __html: `(${restoreScroll})(${JSON.stringify(
            storageKey || SCROLL_RESTORATION_STORAGE_KEY
          )}, ${JSON.stringify(ssrKey)})`
        }
      }
    );
  }
  ScrollRestoration.displayName = "ScrollRestoration";
  function getDataRouterConsoleError2(hookName) {
    return `${hookName} must be used within a data router.  See https://reactrouter.com/en/main/routers/picking-a-router.`;
  }
  function useDataRouterContext3(hookName) {
    let ctx = React10.useContext(DataRouterContext);
    invariant(ctx, getDataRouterConsoleError2(hookName));
    return ctx;
  }
  function useDataRouterState2(hookName) {
    let state = React10.useContext(DataRouterStateContext);
    invariant(state, getDataRouterConsoleError2(hookName));
    return state;
  }
  function useLinkClickHandler(to, {
    target,
    replace: replaceProp,
    state,
    preventScrollReset,
    relative,
    viewTransition
  } = {}) {
    let navigate = useNavigate();
    let location = useLocation();
    let path = useResolvedPath(to, { relative });
    return React10.useCallback(
      (event) => {
        if (shouldProcessLinkClick(event, target)) {
          event.preventDefault();
          let replace2 = replaceProp !== void 0 ? replaceProp : createPath(location) === createPath(path);
          navigate(to, {
            replace: replace2,
            state,
            preventScrollReset,
            relative,
            viewTransition
          });
        }
      },
      [
        location,
        navigate,
        path,
        replaceProp,
        state,
        target,
        to,
        preventScrollReset,
        relative,
        viewTransition
      ]
    );
  }
  var fetcherId = 0;
  var getUniqueFetcherId = () => `__${String(++fetcherId)}__`;
  function useSubmit() {
    let { router } = useDataRouterContext3(
      "useSubmit"
      /* UseSubmit */
    );
    let { basename } = React10.useContext(NavigationContext);
    let currentRouteId = useRouteId();
    return React10.useCallback(
      async (target, options = {}) => {
        let { action, method, encType, formData, body } = getFormSubmissionInfo(
          target,
          basename
        );
        if (options.navigate === false) {
          let key = options.fetcherKey || getUniqueFetcherId();
          await router.fetch(key, currentRouteId, options.action || action, {
            preventScrollReset: options.preventScrollReset,
            formData,
            body,
            formMethod: options.method || method,
            formEncType: options.encType || encType,
            flushSync: options.flushSync
          });
        } else {
          await router.navigate(options.action || action, {
            preventScrollReset: options.preventScrollReset,
            formData,
            body,
            formMethod: options.method || method,
            formEncType: options.encType || encType,
            replace: options.replace,
            state: options.state,
            fromRouteId: currentRouteId,
            flushSync: options.flushSync,
            viewTransition: options.viewTransition
          });
        }
      },
      [router, basename, currentRouteId]
    );
  }
  function useFormAction(action, { relative } = {}) {
    let { basename } = React10.useContext(NavigationContext);
    let routeContext = React10.useContext(RouteContext);
    invariant(routeContext, "useFormAction must be used inside a RouteContext");
    let [match] = routeContext.matches.slice(-1);
    let path = { ...useResolvedPath(action ? action : ".", { relative }) };
    let location = useLocation();
    if (action == null) {
      path.search = location.search;
      let params = new URLSearchParams(path.search);
      let indexValues = params.getAll("index");
      let hasNakedIndexParam = indexValues.some((v) => v === "");
      if (hasNakedIndexParam) {
        params.delete("index");
        indexValues.filter((v) => v).forEach((v) => params.append("index", v));
        let qs = params.toString();
        path.search = qs ? `?${qs}` : "";
      }
    }
    if ((!action || action === ".") && match.route.index) {
      path.search = path.search ? path.search.replace(/^\?/, "?index&") : "?index";
    }
    if (basename !== "/") {
      path.pathname = path.pathname === "/" ? basename : joinPaths([basename, path.pathname]);
    }
    return createPath(path);
  }
  var SCROLL_RESTORATION_STORAGE_KEY = "react-router-scroll-positions";
  var savedScrollPositions = {};
  function getScrollRestorationKey(location, matches2, basename, getKey) {
    let key = null;
    if (getKey) {
      if (basename !== "/") {
        key = getKey(
          {
            ...location,
            pathname: stripBasename(location.pathname, basename) || location.pathname
          },
          matches2
        );
      } else {
        key = getKey(location, matches2);
      }
    }
    if (key == null) {
      key = location.key;
    }
    return key;
  }
  function useScrollRestoration({
    getKey,
    storageKey
  } = {}) {
    let { router } = useDataRouterContext3(
      "useScrollRestoration"
      /* UseScrollRestoration */
    );
    let { restoreScrollPosition, preventScrollReset } = useDataRouterState2(
      "useScrollRestoration"
      /* UseScrollRestoration */
    );
    let { basename } = React10.useContext(NavigationContext);
    let location = useLocation();
    let matches2 = useMatches();
    let navigation = useNavigation();
    React10.useEffect(() => {
      window.history.scrollRestoration = "manual";
      return () => {
        window.history.scrollRestoration = "auto";
      };
    }, []);
    usePageHide(
      React10.useCallback(() => {
        if (navigation.state === "idle") {
          let key = getScrollRestorationKey(location, matches2, basename, getKey);
          savedScrollPositions[key] = window.scrollY;
        }
        try {
          sessionStorage.setItem(
            storageKey || SCROLL_RESTORATION_STORAGE_KEY,
            JSON.stringify(savedScrollPositions)
          );
        } catch (error) {
          warning(
            false,
            `Failed to save scroll positions in sessionStorage, <ScrollRestoration /> will not work properly (${error}).`
          );
        }
        window.history.scrollRestoration = "auto";
      }, [navigation.state, getKey, basename, location, matches2, storageKey])
    );
    if (typeof document !== "undefined") {
      React10.useLayoutEffect(() => {
        try {
          let sessionPositions = sessionStorage.getItem(
            storageKey || SCROLL_RESTORATION_STORAGE_KEY
          );
          if (sessionPositions) {
            savedScrollPositions = JSON.parse(sessionPositions);
          }
        } catch (e) {
        }
      }, [storageKey]);
      React10.useLayoutEffect(() => {
        let disableScrollRestoration = router?.enableScrollRestoration(
          savedScrollPositions,
          () => window.scrollY,
          getKey ? (location2, matches22) => getScrollRestorationKey(location2, matches22, basename, getKey) : void 0
        );
        return () => disableScrollRestoration && disableScrollRestoration();
      }, [router, basename, getKey]);
      React10.useLayoutEffect(() => {
        if (restoreScrollPosition === false) {
          return;
        }
        if (typeof restoreScrollPosition === "number") {
          window.scrollTo(0, restoreScrollPosition);
          return;
        }
        if (location.hash) {
          let el = document.getElementById(
            decodeURIComponent(location.hash.slice(1))
          );
          if (el) {
            el.scrollIntoView();
            return;
          }
        }
        if (preventScrollReset === true) {
          return;
        }
        window.scrollTo(0, 0);
      }, [location, restoreScrollPosition, preventScrollReset]);
    }
  }
  function usePageHide(callback, options) {
    let { capture } = options || {};
    React10.useEffect(() => {
      let opts = capture != null ? { capture } : void 0;
      window.addEventListener("pagehide", callback, opts);
      return () => {
        window.removeEventListener("pagehide", callback, opts);
      };
    }, [callback, capture]);
  }
  function useViewTransitionState(to, opts = {}) {
    let vtContext = React10.useContext(ViewTransitionContext);
    invariant(
      vtContext != null,
      "`useViewTransitionState` must be used within `react-router-dom`'s `RouterProvider`.  Did you accidentally import `RouterProvider` from `react-router`?"
    );
    let { basename } = useDataRouterContext3(
      "useViewTransitionState"
      /* useViewTransitionState */
    );
    let path = useResolvedPath(to, { relative: opts.relative });
    if (!vtContext.isTransitioning) {
      return false;
    }
    let currentPath = stripBasename(vtContext.currentLocation.pathname, basename) || vtContext.currentLocation.pathname;
    let nextPath = stripBasename(vtContext.nextLocation.pathname, basename) || vtContext.nextLocation.pathname;
    return matchPath(path.pathname, nextPath) != null || matchPath(path.pathname, currentPath) != null;
  }
  var encoder = new TextEncoder();

  // src/srw.tsx
  var import_react11 = __toESM(require_react(), 1);

  // node_modules/tslib/tslib.es6.mjs
  function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
          t[p[i]] = s[p[i]];
      }
    return t;
  }

  // node_modules/@patternfly/react-styles/dist/esm/index.js
  function css(...args) {
    const classes = [];
    const hasOwn = {}.hasOwnProperty;
    args.filter(Boolean).forEach((arg) => {
      const argType = typeof arg;
      if (argType === "string" || argType === "number") {
        classes.push(arg);
      } else if (Array.isArray(arg) && arg.length) {
        const inner = css(...arg);
        if (inner) {
          classes.push(inner);
        }
      } else if (argType === "object") {
        for (const key in arg) {
          if (hasOwn.call(arg, key) && arg[key]) {
            classes.push(key);
          }
        }
      }
    });
    return classes.join(" ");
  }

  // node_modules/@patternfly/react-core/dist/esm/components/Title/Title.js
  var React19 = __toESM(require_react());

  // node_modules/@patternfly/react-styles/css/components/Title/title.mjs
  var title_default = {
    "modifiers": {
      "4xl": "pf-m-4xl",
      "3xl": "pf-m-3xl",
      "2xl": "pf-m-2xl",
      "xl": "pf-m-xl",
      "lg": "pf-m-lg",
      "md": "pf-m-md"
    },
    "title": "pf-v5-c-title"
  };

  // node_modules/@patternfly/react-tokens/dist/esm/global_breakpoint_sm.js
  var global_breakpoint_sm = {
    "name": "--pf-v5-global--breakpoint--sm",
    "value": "576px",
    "var": "var(--pf-v5-global--breakpoint--sm)"
  };
  var global_breakpoint_sm_default = global_breakpoint_sm;

  // node_modules/@patternfly/react-tokens/dist/esm/global_breakpoint_md.js
  var global_breakpoint_md = {
    "name": "--pf-v5-global--breakpoint--md",
    "value": "768px",
    "var": "var(--pf-v5-global--breakpoint--md)"
  };
  var global_breakpoint_md_default = global_breakpoint_md;

  // node_modules/@patternfly/react-tokens/dist/esm/global_breakpoint_lg.js
  var global_breakpoint_lg = {
    "name": "--pf-v5-global--breakpoint--lg",
    "value": "992px",
    "var": "var(--pf-v5-global--breakpoint--lg)"
  };
  var global_breakpoint_lg_default = global_breakpoint_lg;

  // node_modules/@patternfly/react-tokens/dist/esm/global_breakpoint_xl.js
  var global_breakpoint_xl = {
    "name": "--pf-v5-global--breakpoint--xl",
    "value": "1200px",
    "var": "var(--pf-v5-global--breakpoint--xl)"
  };
  var global_breakpoint_xl_default = global_breakpoint_xl;

  // node_modules/@patternfly/react-tokens/dist/esm/global_breakpoint_2xl.js
  var global_breakpoint_2xl = {
    "name": "--pf-v5-global--breakpoint--2xl",
    "value": "1450px",
    "var": "var(--pf-v5-global--breakpoint--2xl)"
  };
  var global_breakpoint_2xl_default = global_breakpoint_2xl;

  // node_modules/@patternfly/react-tokens/dist/esm/global_height_breakpoint_sm.js
  var global_height_breakpoint_sm = {
    "name": "--pf-v5-global--height-breakpoint--sm",
    "value": "0",
    "var": "var(--pf-v5-global--height-breakpoint--sm)"
  };
  var global_height_breakpoint_sm_default = global_height_breakpoint_sm;

  // node_modules/@patternfly/react-tokens/dist/esm/global_height_breakpoint_md.js
  var global_height_breakpoint_md = {
    "name": "--pf-v5-global--height-breakpoint--md",
    "value": "40rem",
    "var": "var(--pf-v5-global--height-breakpoint--md)"
  };
  var global_height_breakpoint_md_default = global_height_breakpoint_md;

  // node_modules/@patternfly/react-tokens/dist/esm/global_height_breakpoint_lg.js
  var global_height_breakpoint_lg = {
    "name": "--pf-v5-global--height-breakpoint--lg",
    "value": "48rem",
    "var": "var(--pf-v5-global--height-breakpoint--lg)"
  };
  var global_height_breakpoint_lg_default = global_height_breakpoint_lg;

  // node_modules/@patternfly/react-tokens/dist/esm/global_height_breakpoint_xl.js
  var global_height_breakpoint_xl = {
    "name": "--pf-v5-global--height-breakpoint--xl",
    "value": "60rem",
    "var": "var(--pf-v5-global--height-breakpoint--xl)"
  };
  var global_height_breakpoint_xl_default = global_height_breakpoint_xl;

  // node_modules/@patternfly/react-tokens/dist/esm/global_height_breakpoint_2xl.js
  var global_height_breakpoint_2xl = {
    "name": "--pf-v5-global--height-breakpoint--2xl",
    "value": "80rem",
    "var": "var(--pf-v5-global--height-breakpoint--2xl)"
  };
  var global_height_breakpoint_2xl_default = global_height_breakpoint_2xl;

  // node_modules/@patternfly/react-core/dist/esm/helpers/constants.js
  var ValidatedOptions;
  (function(ValidatedOptions3) {
    ValidatedOptions3["success"] = "success";
    ValidatedOptions3["error"] = "error";
    ValidatedOptions3["warning"] = "warning";
    ValidatedOptions3["default"] = "default";
  })(ValidatedOptions || (ValidatedOptions = {}));
  var KeyTypes = {
    Tab: "Tab",
    Space: " ",
    Escape: "Escape",
    Enter: "Enter",
    ArrowUp: "ArrowUp",
    ArrowDown: "ArrowDown",
    ArrowLeft: "ArrowLeft",
    ArrowRight: "ArrowRight"
  };
  var globalWidthBreakpoints = {
    sm: parseInt(global_breakpoint_sm_default.value),
    md: parseInt(global_breakpoint_md_default.value),
    lg: parseInt(global_breakpoint_lg_default.value),
    xl: parseInt(global_breakpoint_xl_default.value),
    "2xl": parseInt(global_breakpoint_2xl_default.value)
  };
  var globalHeightBreakpoints = {
    sm: parseInt(global_height_breakpoint_sm_default.value),
    md: parseInt(global_height_breakpoint_md_default.value),
    lg: parseInt(global_height_breakpoint_lg_default.value),
    xl: parseInt(global_height_breakpoint_xl_default.value),
    "2xl": parseInt(global_height_breakpoint_2xl_default.value)
  };

  // node_modules/tabbable/dist/index.esm.js
  var candidateSelectors = ["input:not([inert])", "select:not([inert])", "textarea:not([inert])", "a[href]:not([inert])", "button:not([inert])", "[tabindex]:not(slot):not([inert])", "audio[controls]:not([inert])", "video[controls]:not([inert])", '[contenteditable]:not([contenteditable="false"]):not([inert])', "details>summary:first-of-type:not([inert])", "details:not([inert])"];
  var candidateSelector = /* @__PURE__ */ candidateSelectors.join(",");
  var NoElement = typeof Element === "undefined";
  var matches = NoElement ? function() {
  } : Element.prototype.matches || Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;
  var getRootNode = !NoElement && Element.prototype.getRootNode ? function(element) {
    var _element$getRootNode;
    return element === null || element === void 0 ? void 0 : (_element$getRootNode = element.getRootNode) === null || _element$getRootNode === void 0 ? void 0 : _element$getRootNode.call(element);
  } : function(element) {
    return element === null || element === void 0 ? void 0 : element.ownerDocument;
  };
  var isInert = function isInert2(node, lookUp) {
    var _node$getAttribute;
    if (lookUp === void 0) {
      lookUp = true;
    }
    var inertAtt = node === null || node === void 0 ? void 0 : (_node$getAttribute = node.getAttribute) === null || _node$getAttribute === void 0 ? void 0 : _node$getAttribute.call(node, "inert");
    var inert = inertAtt === "" || inertAtt === "true";
    var result = inert || lookUp && node && isInert2(node.parentNode);
    return result;
  };
  var isContentEditable = function isContentEditable2(node) {
    var _node$getAttribute2;
    var attValue = node === null || node === void 0 ? void 0 : (_node$getAttribute2 = node.getAttribute) === null || _node$getAttribute2 === void 0 ? void 0 : _node$getAttribute2.call(node, "contenteditable");
    return attValue === "" || attValue === "true";
  };
  var getCandidates = function getCandidates2(el, includeContainer, filter) {
    if (isInert(el)) {
      return [];
    }
    var candidates = Array.prototype.slice.apply(el.querySelectorAll(candidateSelector));
    if (includeContainer && matches.call(el, candidateSelector)) {
      candidates.unshift(el);
    }
    candidates = candidates.filter(filter);
    return candidates;
  };
  var getCandidatesIteratively = function getCandidatesIteratively2(elements, includeContainer, options) {
    var candidates = [];
    var elementsToCheck = Array.from(elements);
    while (elementsToCheck.length) {
      var element = elementsToCheck.shift();
      if (isInert(element, false)) {
        continue;
      }
      if (element.tagName === "SLOT") {
        var assigned = element.assignedElements();
        var content = assigned.length ? assigned : element.children;
        var nestedCandidates = getCandidatesIteratively2(content, true, options);
        if (options.flatten) {
          candidates.push.apply(candidates, nestedCandidates);
        } else {
          candidates.push({
            scopeParent: element,
            candidates: nestedCandidates
          });
        }
      } else {
        var validCandidate = matches.call(element, candidateSelector);
        if (validCandidate && options.filter(element) && (includeContainer || !elements.includes(element))) {
          candidates.push(element);
        }
        var shadowRoot = element.shadowRoot || // check for an undisclosed shadow
        typeof options.getShadowRoot === "function" && options.getShadowRoot(element);
        var validShadowRoot = !isInert(shadowRoot, false) && (!options.shadowRootFilter || options.shadowRootFilter(element));
        if (shadowRoot && validShadowRoot) {
          var _nestedCandidates = getCandidatesIteratively2(shadowRoot === true ? element.children : shadowRoot.children, true, options);
          if (options.flatten) {
            candidates.push.apply(candidates, _nestedCandidates);
          } else {
            candidates.push({
              scopeParent: element,
              candidates: _nestedCandidates
            });
          }
        } else {
          elementsToCheck.unshift.apply(elementsToCheck, element.children);
        }
      }
    }
    return candidates;
  };
  var hasTabIndex = function hasTabIndex2(node) {
    return !isNaN(parseInt(node.getAttribute("tabindex"), 10));
  };
  var getTabIndex = function getTabIndex2(node) {
    if (!node) {
      throw new Error("No node provided");
    }
    if (node.tabIndex < 0) {
      if ((/^(AUDIO|VIDEO|DETAILS)$/.test(node.tagName) || isContentEditable(node)) && !hasTabIndex(node)) {
        return 0;
      }
    }
    return node.tabIndex;
  };
  var getSortOrderTabIndex = function getSortOrderTabIndex2(node, isScope) {
    var tabIndex = getTabIndex(node);
    if (tabIndex < 0 && isScope && !hasTabIndex(node)) {
      return 0;
    }
    return tabIndex;
  };
  var sortOrderedTabbables = function sortOrderedTabbables2(a, b) {
    return a.tabIndex === b.tabIndex ? a.documentOrder - b.documentOrder : a.tabIndex - b.tabIndex;
  };
  var isInput = function isInput2(node) {
    return node.tagName === "INPUT";
  };
  var isHiddenInput = function isHiddenInput2(node) {
    return isInput(node) && node.type === "hidden";
  };
  var isDetailsWithSummary = function isDetailsWithSummary2(node) {
    var r = node.tagName === "DETAILS" && Array.prototype.slice.apply(node.children).some(function(child) {
      return child.tagName === "SUMMARY";
    });
    return r;
  };
  var getCheckedRadio = function getCheckedRadio2(nodes, form) {
    for (var i = 0; i < nodes.length; i++) {
      if (nodes[i].checked && nodes[i].form === form) {
        return nodes[i];
      }
    }
  };
  var isTabbableRadio = function isTabbableRadio2(node) {
    if (!node.name) {
      return true;
    }
    var radioScope = node.form || getRootNode(node);
    var queryRadios = function queryRadios2(name) {
      return radioScope.querySelectorAll('input[type="radio"][name="' + name + '"]');
    };
    var radioSet;
    if (typeof window !== "undefined" && typeof window.CSS !== "undefined" && typeof window.CSS.escape === "function") {
      radioSet = queryRadios(window.CSS.escape(node.name));
    } else {
      try {
        radioSet = queryRadios(node.name);
      } catch (err) {
        console.error("Looks like you have a radio button with a name attribute containing invalid CSS selector characters and need the CSS.escape polyfill: %s", err.message);
        return false;
      }
    }
    var checked = getCheckedRadio(radioSet, node.form);
    return !checked || checked === node;
  };
  var isRadio = function isRadio2(node) {
    return isInput(node) && node.type === "radio";
  };
  var isNonTabbableRadio = function isNonTabbableRadio2(node) {
    return isRadio(node) && !isTabbableRadio(node);
  };
  var isNodeAttached = function isNodeAttached2(node) {
    var _nodeRoot;
    var nodeRoot = node && getRootNode(node);
    var nodeRootHost = (_nodeRoot = nodeRoot) === null || _nodeRoot === void 0 ? void 0 : _nodeRoot.host;
    var attached = false;
    if (nodeRoot && nodeRoot !== node) {
      var _nodeRootHost, _nodeRootHost$ownerDo, _node$ownerDocument;
      attached = !!((_nodeRootHost = nodeRootHost) !== null && _nodeRootHost !== void 0 && (_nodeRootHost$ownerDo = _nodeRootHost.ownerDocument) !== null && _nodeRootHost$ownerDo !== void 0 && _nodeRootHost$ownerDo.contains(nodeRootHost) || node !== null && node !== void 0 && (_node$ownerDocument = node.ownerDocument) !== null && _node$ownerDocument !== void 0 && _node$ownerDocument.contains(node));
      while (!attached && nodeRootHost) {
        var _nodeRoot2, _nodeRootHost2, _nodeRootHost2$ownerD;
        nodeRoot = getRootNode(nodeRootHost);
        nodeRootHost = (_nodeRoot2 = nodeRoot) === null || _nodeRoot2 === void 0 ? void 0 : _nodeRoot2.host;
        attached = !!((_nodeRootHost2 = nodeRootHost) !== null && _nodeRootHost2 !== void 0 && (_nodeRootHost2$ownerD = _nodeRootHost2.ownerDocument) !== null && _nodeRootHost2$ownerD !== void 0 && _nodeRootHost2$ownerD.contains(nodeRootHost));
      }
    }
    return attached;
  };
  var isZeroArea = function isZeroArea2(node) {
    var _node$getBoundingClie = node.getBoundingClientRect(), width = _node$getBoundingClie.width, height = _node$getBoundingClie.height;
    return width === 0 && height === 0;
  };
  var isHidden = function isHidden2(node, _ref) {
    var displayCheck = _ref.displayCheck, getShadowRoot = _ref.getShadowRoot;
    if (getComputedStyle(node).visibility === "hidden") {
      return true;
    }
    var isDirectSummary = matches.call(node, "details>summary:first-of-type");
    var nodeUnderDetails = isDirectSummary ? node.parentElement : node;
    if (matches.call(nodeUnderDetails, "details:not([open]) *")) {
      return true;
    }
    if (!displayCheck || displayCheck === "full" || displayCheck === "legacy-full") {
      if (typeof getShadowRoot === "function") {
        var originalNode = node;
        while (node) {
          var parentElement = node.parentElement;
          var rootNode = getRootNode(node);
          if (parentElement && !parentElement.shadowRoot && getShadowRoot(parentElement) === true) {
            return isZeroArea(node);
          } else if (node.assignedSlot) {
            node = node.assignedSlot;
          } else if (!parentElement && rootNode !== node.ownerDocument) {
            node = rootNode.host;
          } else {
            node = parentElement;
          }
        }
        node = originalNode;
      }
      if (isNodeAttached(node)) {
        return !node.getClientRects().length;
      }
      if (displayCheck !== "legacy-full") {
        return true;
      }
    } else if (displayCheck === "non-zero-area") {
      return isZeroArea(node);
    }
    return false;
  };
  var isDisabledFromFieldset = function isDisabledFromFieldset2(node) {
    if (/^(INPUT|BUTTON|SELECT|TEXTAREA)$/.test(node.tagName)) {
      var parentNode = node.parentElement;
      while (parentNode) {
        if (parentNode.tagName === "FIELDSET" && parentNode.disabled) {
          for (var i = 0; i < parentNode.children.length; i++) {
            var child = parentNode.children.item(i);
            if (child.tagName === "LEGEND") {
              return matches.call(parentNode, "fieldset[disabled] *") ? true : !child.contains(node);
            }
          }
          return true;
        }
        parentNode = parentNode.parentElement;
      }
    }
    return false;
  };
  var isNodeMatchingSelectorFocusable = function isNodeMatchingSelectorFocusable2(options, node) {
    if (node.disabled || // we must do an inert look up to filter out any elements inside an inert ancestor
    //  because we're limited in the type of selectors we can use in JSDom (see related
    //  note related to `candidateSelectors`)
    isInert(node) || isHiddenInput(node) || isHidden(node, options) || // For a details element with a summary, the summary element gets the focus
    isDetailsWithSummary(node) || isDisabledFromFieldset(node)) {
      return false;
    }
    return true;
  };
  var isNodeMatchingSelectorTabbable = function isNodeMatchingSelectorTabbable2(options, node) {
    if (isNonTabbableRadio(node) || getTabIndex(node) < 0 || !isNodeMatchingSelectorFocusable(options, node)) {
      return false;
    }
    return true;
  };
  var isValidShadowRootTabbable = function isValidShadowRootTabbable2(shadowHostNode) {
    var tabIndex = parseInt(shadowHostNode.getAttribute("tabindex"), 10);
    if (isNaN(tabIndex) || tabIndex >= 0) {
      return true;
    }
    return false;
  };
  var sortByOrder = function sortByOrder2(candidates) {
    var regularTabbables = [];
    var orderedTabbables = [];
    candidates.forEach(function(item, i) {
      var isScope = !!item.scopeParent;
      var element = isScope ? item.scopeParent : item;
      var candidateTabindex = getSortOrderTabIndex(element, isScope);
      var elements = isScope ? sortByOrder2(item.candidates) : element;
      if (candidateTabindex === 0) {
        isScope ? regularTabbables.push.apply(regularTabbables, elements) : regularTabbables.push(element);
      } else {
        orderedTabbables.push({
          documentOrder: i,
          tabIndex: candidateTabindex,
          item,
          isScope,
          content: elements
        });
      }
    });
    return orderedTabbables.sort(sortOrderedTabbables).reduce(function(acc, sortable2) {
      sortable2.isScope ? acc.push.apply(acc, sortable2.content) : acc.push(sortable2.content);
      return acc;
    }, []).concat(regularTabbables);
  };
  var tabbable = function tabbable2(container, options) {
    options = options || {};
    var candidates;
    if (options.getShadowRoot) {
      candidates = getCandidatesIteratively([container], options.includeContainer, {
        filter: isNodeMatchingSelectorTabbable.bind(null, options),
        flatten: false,
        getShadowRoot: options.getShadowRoot,
        shadowRootFilter: isValidShadowRootTabbable
      });
    } else {
      candidates = getCandidates(container, options.includeContainer, isNodeMatchingSelectorTabbable.bind(null, options));
    }
    return sortByOrder(candidates);
  };
  var focusable = function focusable2(container, options) {
    options = options || {};
    var candidates;
    if (options.getShadowRoot) {
      candidates = getCandidatesIteratively([container], options.includeContainer, {
        filter: isNodeMatchingSelectorFocusable.bind(null, options),
        flatten: true,
        getShadowRoot: options.getShadowRoot
      });
    } else {
      candidates = getCandidates(container, options.includeContainer, isNodeMatchingSelectorFocusable.bind(null, options));
    }
    return candidates;
  };
  var isTabbable = function isTabbable2(node, options) {
    options = options || {};
    if (!node) {
      throw new Error("No node provided");
    }
    if (matches.call(node, candidateSelector) === false) {
      return false;
    }
    return isNodeMatchingSelectorTabbable(options, node);
  };
  var focusableCandidateSelector = /* @__PURE__ */ candidateSelectors.concat("iframe").join(",");
  var isFocusable = function isFocusable2(node, options) {
    options = options || {};
    if (!node) {
      throw new Error("No node provided");
    }
    if (matches.call(node, focusableCandidateSelector) === false) {
      return false;
    }
    return isNodeMatchingSelectorFocusable(options, node);
  };

  // node_modules/focus-trap/dist/focus-trap.esm.js
  function _arrayLikeToArray(r, a) {
    (null == a || a > r.length) && (a = r.length);
    for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];
    return n;
  }
  function _arrayWithoutHoles(r) {
    if (Array.isArray(r)) return _arrayLikeToArray(r);
  }
  function _defineProperty(e, r, t) {
    return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {
      value: t,
      enumerable: true,
      configurable: true,
      writable: true
    }) : e[r] = t, e;
  }
  function _iterableToArray(r) {
    if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r);
  }
  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function ownKeys(e, r) {
    var t = Object.keys(e);
    if (Object.getOwnPropertySymbols) {
      var o = Object.getOwnPropertySymbols(e);
      r && (o = o.filter(function(r2) {
        return Object.getOwnPropertyDescriptor(e, r2).enumerable;
      })), t.push.apply(t, o);
    }
    return t;
  }
  function _objectSpread2(e) {
    for (var r = 1; r < arguments.length; r++) {
      var t = null != arguments[r] ? arguments[r] : {};
      r % 2 ? ownKeys(Object(t), true).forEach(function(r2) {
        _defineProperty(e, r2, t[r2]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r2) {
        Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
      });
    }
    return e;
  }
  function _toConsumableArray(r) {
    return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread();
  }
  function _toPrimitive(t, r) {
    if ("object" != typeof t || !t) return t;
    var e = t[Symbol.toPrimitive];
    if (void 0 !== e) {
      var i = e.call(t, r || "default");
      if ("object" != typeof i) return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r ? String : Number)(t);
  }
  function _toPropertyKey(t) {
    var i = _toPrimitive(t, "string");
    return "symbol" == typeof i ? i : i + "";
  }
  function _unsupportedIterableToArray(r, a) {
    if (r) {
      if ("string" == typeof r) return _arrayLikeToArray(r, a);
      var t = {}.toString.call(r).slice(8, -1);
      return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
    }
  }
  var activeFocusTraps = {
    activateTrap: function activateTrap(trapStack, trap) {
      if (trapStack.length > 0) {
        var activeTrap = trapStack[trapStack.length - 1];
        if (activeTrap !== trap) {
          activeTrap.pause();
        }
      }
      var trapIndex = trapStack.indexOf(trap);
      if (trapIndex === -1) {
        trapStack.push(trap);
      } else {
        trapStack.splice(trapIndex, 1);
        trapStack.push(trap);
      }
    },
    deactivateTrap: function deactivateTrap(trapStack, trap) {
      var trapIndex = trapStack.indexOf(trap);
      if (trapIndex !== -1) {
        trapStack.splice(trapIndex, 1);
      }
      if (trapStack.length > 0) {
        trapStack[trapStack.length - 1].unpause();
      }
    }
  };
  var isSelectableInput = function isSelectableInput2(node) {
    return node.tagName && node.tagName.toLowerCase() === "input" && typeof node.select === "function";
  };
  var isEscapeEvent = function isEscapeEvent2(e) {
    return (e === null || e === void 0 ? void 0 : e.key) === "Escape" || (e === null || e === void 0 ? void 0 : e.key) === "Esc" || (e === null || e === void 0 ? void 0 : e.keyCode) === 27;
  };
  var isTabEvent = function isTabEvent2(e) {
    return (e === null || e === void 0 ? void 0 : e.key) === "Tab" || (e === null || e === void 0 ? void 0 : e.keyCode) === 9;
  };
  var isKeyForward = function isKeyForward2(e) {
    return isTabEvent(e) && !e.shiftKey;
  };
  var isKeyBackward = function isKeyBackward2(e) {
    return isTabEvent(e) && e.shiftKey;
  };
  var delay = function delay2(fn) {
    return setTimeout(fn, 0);
  };
  var valueOrHandler = function valueOrHandler2(value) {
    for (var _len = arguments.length, params = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      params[_key - 1] = arguments[_key];
    }
    return typeof value === "function" ? value.apply(void 0, params) : value;
  };
  var getActualTarget = function getActualTarget2(event) {
    return event.target.shadowRoot && typeof event.composedPath === "function" ? event.composedPath()[0] : event.target;
  };
  var internalTrapStack = [];
  var createFocusTrap = function createFocusTrap2(elements, userOptions) {
    var doc = (userOptions === null || userOptions === void 0 ? void 0 : userOptions.document) || document;
    var trapStack = (userOptions === null || userOptions === void 0 ? void 0 : userOptions.trapStack) || internalTrapStack;
    var config = _objectSpread2({
      returnFocusOnDeactivate: true,
      escapeDeactivates: true,
      delayInitialFocus: true,
      isKeyForward,
      isKeyBackward
    }, userOptions);
    var state = {
      // containers given to createFocusTrap()
      // @type {Array<HTMLElement>}
      containers: [],
      // list of objects identifying tabbable nodes in `containers` in the trap
      // NOTE: it's possible that a group has no tabbable nodes if nodes get removed while the trap
      //  is active, but the trap should never get to a state where there isn't at least one group
      //  with at least one tabbable node in it (that would lead to an error condition that would
      //  result in an error being thrown)
      // @type {Array<{
      //   container: HTMLElement,
      //   tabbableNodes: Array<HTMLElement>, // empty if none
      //   focusableNodes: Array<HTMLElement>, // empty if none
      //   posTabIndexesFound: boolean,
      //   firstTabbableNode: HTMLElement|undefined,
      //   lastTabbableNode: HTMLElement|undefined,
      //   firstDomTabbableNode: HTMLElement|undefined,
      //   lastDomTabbableNode: HTMLElement|undefined,
      //   nextTabbableNode: (node: HTMLElement, forward: boolean) => HTMLElement|undefined
      // }>}
      containerGroups: [],
      // same order/length as `containers` list
      // references to objects in `containerGroups`, but only those that actually have
      //  tabbable nodes in them
      // NOTE: same order as `containers` and `containerGroups`, but __not necessarily__
      //  the same length
      tabbableGroups: [],
      nodeFocusedBeforeActivation: null,
      mostRecentlyFocusedNode: null,
      active: false,
      paused: false,
      // timer ID for when delayInitialFocus is true and initial focus in this trap
      //  has been delayed during activation
      delayInitialFocusTimer: void 0,
      // the most recent KeyboardEvent for the configured nav key (typically [SHIFT+]TAB), if any
      recentNavEvent: void 0
    };
    var trap;
    var getOption = function getOption2(configOverrideOptions, optionName, configOptionName) {
      return configOverrideOptions && configOverrideOptions[optionName] !== void 0 ? configOverrideOptions[optionName] : config[configOptionName || optionName];
    };
    var findContainerIndex = function findContainerIndex2(element, event) {
      var composedPath = typeof (event === null || event === void 0 ? void 0 : event.composedPath) === "function" ? event.composedPath() : void 0;
      return state.containerGroups.findIndex(function(_ref) {
        var container = _ref.container, tabbableNodes = _ref.tabbableNodes;
        return container.contains(element) || // fall back to explicit tabbable search which will take into consideration any
        //  web components if the `tabbableOptions.getShadowRoot` option was used for
        //  the trap, enabling shadow DOM support in tabbable (`Node.contains()` doesn't
        //  look inside web components even if open)
        (composedPath === null || composedPath === void 0 ? void 0 : composedPath.includes(container)) || tabbableNodes.find(function(node) {
          return node === element;
        });
      });
    };
    var getNodeForOption = function getNodeForOption2(optionName) {
      var _ref2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, _ref2$hasFallback = _ref2.hasFallback, hasFallback = _ref2$hasFallback === void 0 ? false : _ref2$hasFallback, _ref2$params = _ref2.params, params = _ref2$params === void 0 ? [] : _ref2$params;
      var optionValue = config[optionName];
      if (typeof optionValue === "function") {
        optionValue = optionValue.apply(void 0, _toConsumableArray(params));
      }
      if (optionValue === true) {
        optionValue = void 0;
      }
      if (!optionValue) {
        if (optionValue === void 0 || optionValue === false) {
          return optionValue;
        }
        throw new Error("`".concat(optionName, "` was specified but was not a node, or did not return a node"));
      }
      var node = optionValue;
      if (typeof optionValue === "string") {
        try {
          node = doc.querySelector(optionValue);
        } catch (err) {
          throw new Error("`".concat(optionName, '` appears to be an invalid selector; error="').concat(err.message, '"'));
        }
        if (!node) {
          if (!hasFallback) {
            throw new Error("`".concat(optionName, "` as selector refers to no known node"));
          }
        }
      }
      return node;
    };
    var getInitialFocusNode = function getInitialFocusNode2() {
      var node = getNodeForOption("initialFocus", {
        hasFallback: true
      });
      if (node === false) {
        return false;
      }
      if (node === void 0 || node && !isFocusable(node, config.tabbableOptions)) {
        if (findContainerIndex(doc.activeElement) >= 0) {
          node = doc.activeElement;
        } else {
          var firstTabbableGroup = state.tabbableGroups[0];
          var firstTabbableNode = firstTabbableGroup && firstTabbableGroup.firstTabbableNode;
          node = firstTabbableNode || getNodeForOption("fallbackFocus");
        }
      } else if (node === null) {
        node = getNodeForOption("fallbackFocus");
      }
      if (!node) {
        throw new Error("Your focus-trap needs to have at least one focusable element");
      }
      return node;
    };
    var updateTabbableNodes = function updateTabbableNodes2() {
      state.containerGroups = state.containers.map(function(container) {
        var tabbableNodes = tabbable(container, config.tabbableOptions);
        var focusableNodes = focusable(container, config.tabbableOptions);
        var firstTabbableNode = tabbableNodes.length > 0 ? tabbableNodes[0] : void 0;
        var lastTabbableNode = tabbableNodes.length > 0 ? tabbableNodes[tabbableNodes.length - 1] : void 0;
        var firstDomTabbableNode = focusableNodes.find(function(node) {
          return isTabbable(node);
        });
        var lastDomTabbableNode = focusableNodes.slice().reverse().find(function(node) {
          return isTabbable(node);
        });
        var posTabIndexesFound = !!tabbableNodes.find(function(node) {
          return getTabIndex(node) > 0;
        });
        return {
          container,
          tabbableNodes,
          focusableNodes,
          /** True if at least one node with positive `tabindex` was found in this container. */
          posTabIndexesFound,
          /** First tabbable node in container, __tabindex__ order; `undefined` if none. */
          firstTabbableNode,
          /** Last tabbable node in container, __tabindex__ order; `undefined` if none. */
          lastTabbableNode,
          // NOTE: DOM order is NOT NECESSARILY "document position" order, but figuring that out
          //  would require more than just https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition
          //  because that API doesn't work with Shadow DOM as well as it should (@see
          //  https://github.com/whatwg/dom/issues/320) and since this first/last is only needed, so far,
          //  to address an edge case related to positive tabindex support, this seems like a much easier,
          //  "close enough most of the time" alternative for positive tabindexes which should generally
          //  be avoided anyway...
          /** First tabbable node in container, __DOM__ order; `undefined` if none. */
          firstDomTabbableNode,
          /** Last tabbable node in container, __DOM__ order; `undefined` if none. */
          lastDomTabbableNode,
          /**
           * Finds the __tabbable__ node that follows the given node in the specified direction,
           *  in this container, if any.
           * @param {HTMLElement} node
           * @param {boolean} [forward] True if going in forward tab order; false if going
           *  in reverse.
           * @returns {HTMLElement|undefined} The next tabbable node, if any.
           */
          nextTabbableNode: function nextTabbableNode(node) {
            var forward = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
            var nodeIdx = tabbableNodes.indexOf(node);
            if (nodeIdx < 0) {
              if (forward) {
                return focusableNodes.slice(focusableNodes.indexOf(node) + 1).find(function(el) {
                  return isTabbable(el);
                });
              }
              return focusableNodes.slice(0, focusableNodes.indexOf(node)).reverse().find(function(el) {
                return isTabbable(el);
              });
            }
            return tabbableNodes[nodeIdx + (forward ? 1 : -1)];
          }
        };
      });
      state.tabbableGroups = state.containerGroups.filter(function(group) {
        return group.tabbableNodes.length > 0;
      });
      if (state.tabbableGroups.length <= 0 && !getNodeForOption("fallbackFocus")) {
        throw new Error("Your focus-trap must have at least one container with at least one tabbable node in it at all times");
      }
      if (state.containerGroups.find(function(g) {
        return g.posTabIndexesFound;
      }) && state.containerGroups.length > 1) {
        throw new Error("At least one node with a positive tabindex was found in one of your focus-trap's multiple containers. Positive tabindexes are only supported in single-container focus-traps.");
      }
    };
    var _getActiveElement = function getActiveElement(el) {
      var activeElement = el.activeElement;
      if (!activeElement) {
        return;
      }
      if (activeElement.shadowRoot && activeElement.shadowRoot.activeElement !== null) {
        return _getActiveElement(activeElement.shadowRoot);
      }
      return activeElement;
    };
    var _tryFocus = function tryFocus(node) {
      if (node === false) {
        return;
      }
      if (node === _getActiveElement(document)) {
        return;
      }
      if (!node || !node.focus) {
        _tryFocus(getInitialFocusNode());
        return;
      }
      node.focus({
        preventScroll: !!config.preventScroll
      });
      state.mostRecentlyFocusedNode = node;
      if (isSelectableInput(node)) {
        node.select();
      }
    };
    var getReturnFocusNode = function getReturnFocusNode2(previousActiveElement) {
      var node = getNodeForOption("setReturnFocus", {
        params: [previousActiveElement]
      });
      return node ? node : node === false ? false : previousActiveElement;
    };
    var findNextNavNode = function findNextNavNode2(_ref3) {
      var target = _ref3.target, event = _ref3.event, _ref3$isBackward = _ref3.isBackward, isBackward = _ref3$isBackward === void 0 ? false : _ref3$isBackward;
      target = target || getActualTarget(event);
      updateTabbableNodes();
      var destinationNode = null;
      if (state.tabbableGroups.length > 0) {
        var containerIndex = findContainerIndex(target, event);
        var containerGroup = containerIndex >= 0 ? state.containerGroups[containerIndex] : void 0;
        if (containerIndex < 0) {
          if (isBackward) {
            destinationNode = state.tabbableGroups[state.tabbableGroups.length - 1].lastTabbableNode;
          } else {
            destinationNode = state.tabbableGroups[0].firstTabbableNode;
          }
        } else if (isBackward) {
          var startOfGroupIndex = state.tabbableGroups.findIndex(function(_ref4) {
            var firstTabbableNode = _ref4.firstTabbableNode;
            return target === firstTabbableNode;
          });
          if (startOfGroupIndex < 0 && (containerGroup.container === target || isFocusable(target, config.tabbableOptions) && !isTabbable(target, config.tabbableOptions) && !containerGroup.nextTabbableNode(target, false))) {
            startOfGroupIndex = containerIndex;
          }
          if (startOfGroupIndex >= 0) {
            var destinationGroupIndex = startOfGroupIndex === 0 ? state.tabbableGroups.length - 1 : startOfGroupIndex - 1;
            var destinationGroup = state.tabbableGroups[destinationGroupIndex];
            destinationNode = getTabIndex(target) >= 0 ? destinationGroup.lastTabbableNode : destinationGroup.lastDomTabbableNode;
          } else if (!isTabEvent(event)) {
            destinationNode = containerGroup.nextTabbableNode(target, false);
          }
        } else {
          var lastOfGroupIndex = state.tabbableGroups.findIndex(function(_ref5) {
            var lastTabbableNode = _ref5.lastTabbableNode;
            return target === lastTabbableNode;
          });
          if (lastOfGroupIndex < 0 && (containerGroup.container === target || isFocusable(target, config.tabbableOptions) && !isTabbable(target, config.tabbableOptions) && !containerGroup.nextTabbableNode(target))) {
            lastOfGroupIndex = containerIndex;
          }
          if (lastOfGroupIndex >= 0) {
            var _destinationGroupIndex = lastOfGroupIndex === state.tabbableGroups.length - 1 ? 0 : lastOfGroupIndex + 1;
            var _destinationGroup = state.tabbableGroups[_destinationGroupIndex];
            destinationNode = getTabIndex(target) >= 0 ? _destinationGroup.firstTabbableNode : _destinationGroup.firstDomTabbableNode;
          } else if (!isTabEvent(event)) {
            destinationNode = containerGroup.nextTabbableNode(target);
          }
        }
      } else {
        destinationNode = getNodeForOption("fallbackFocus");
      }
      return destinationNode;
    };
    var checkPointerDown = function checkPointerDown2(e) {
      var target = getActualTarget(e);
      if (findContainerIndex(target, e) >= 0) {
        return;
      }
      if (valueOrHandler(config.clickOutsideDeactivates, e)) {
        trap.deactivate({
          // NOTE: by setting `returnFocus: false`, deactivate() will do nothing,
          //  which will result in the outside click setting focus to the node
          //  that was clicked (and if not focusable, to "nothing"); by setting
          //  `returnFocus: true`, we'll attempt to re-focus the node originally-focused
          //  on activation (or the configured `setReturnFocus` node), whether the
          //  outside click was on a focusable node or not
          returnFocus: config.returnFocusOnDeactivate
        });
        return;
      }
      if (valueOrHandler(config.allowOutsideClick, e)) {
        return;
      }
      e.preventDefault();
    };
    var checkFocusIn = function checkFocusIn2(event) {
      var target = getActualTarget(event);
      var targetContained = findContainerIndex(target, event) >= 0;
      if (targetContained || target instanceof Document) {
        if (targetContained) {
          state.mostRecentlyFocusedNode = target;
        }
      } else {
        event.stopImmediatePropagation();
        var nextNode;
        var navAcrossContainers = true;
        if (state.mostRecentlyFocusedNode) {
          if (getTabIndex(state.mostRecentlyFocusedNode) > 0) {
            var mruContainerIdx = findContainerIndex(state.mostRecentlyFocusedNode);
            var tabbableNodes = state.containerGroups[mruContainerIdx].tabbableNodes;
            if (tabbableNodes.length > 0) {
              var mruTabIdx = tabbableNodes.findIndex(function(node) {
                return node === state.mostRecentlyFocusedNode;
              });
              if (mruTabIdx >= 0) {
                if (config.isKeyForward(state.recentNavEvent)) {
                  if (mruTabIdx + 1 < tabbableNodes.length) {
                    nextNode = tabbableNodes[mruTabIdx + 1];
                    navAcrossContainers = false;
                  }
                } else {
                  if (mruTabIdx - 1 >= 0) {
                    nextNode = tabbableNodes[mruTabIdx - 1];
                    navAcrossContainers = false;
                  }
                }
              }
            }
          } else {
            if (!state.containerGroups.some(function(g) {
              return g.tabbableNodes.some(function(n) {
                return getTabIndex(n) > 0;
              });
            })) {
              navAcrossContainers = false;
            }
          }
        } else {
          navAcrossContainers = false;
        }
        if (navAcrossContainers) {
          nextNode = findNextNavNode({
            // move FROM the MRU node, not event-related node (which will be the node that is
            //  outside the trap causing the focus escape we're trying to fix)
            target: state.mostRecentlyFocusedNode,
            isBackward: config.isKeyBackward(state.recentNavEvent)
          });
        }
        if (nextNode) {
          _tryFocus(nextNode);
        } else {
          _tryFocus(state.mostRecentlyFocusedNode || getInitialFocusNode());
        }
      }
      state.recentNavEvent = void 0;
    };
    var checkKeyNav = function checkKeyNav2(event) {
      var isBackward = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
      state.recentNavEvent = event;
      var destinationNode = findNextNavNode({
        event,
        isBackward
      });
      if (destinationNode) {
        if (isTabEvent(event)) {
          event.preventDefault();
        }
        _tryFocus(destinationNode);
      }
    };
    var checkTabKey = function checkTabKey2(event) {
      if (config.isKeyForward(event) || config.isKeyBackward(event)) {
        checkKeyNav(event, config.isKeyBackward(event));
      }
    };
    var checkEscapeKey = function checkEscapeKey2(event) {
      if (isEscapeEvent(event) && valueOrHandler(config.escapeDeactivates, event) !== false) {
        event.preventDefault();
        trap.deactivate();
      }
    };
    var checkClick = function checkClick2(e) {
      var target = getActualTarget(e);
      if (findContainerIndex(target, e) >= 0) {
        return;
      }
      if (valueOrHandler(config.clickOutsideDeactivates, e)) {
        return;
      }
      if (valueOrHandler(config.allowOutsideClick, e)) {
        return;
      }
      e.preventDefault();
      e.stopImmediatePropagation();
    };
    var addListeners = function addListeners2() {
      if (!state.active) {
        return;
      }
      activeFocusTraps.activateTrap(trapStack, trap);
      state.delayInitialFocusTimer = config.delayInitialFocus ? delay(function() {
        _tryFocus(getInitialFocusNode());
      }) : _tryFocus(getInitialFocusNode());
      doc.addEventListener("focusin", checkFocusIn, true);
      doc.addEventListener("mousedown", checkPointerDown, {
        capture: true,
        passive: false
      });
      doc.addEventListener("touchstart", checkPointerDown, {
        capture: true,
        passive: false
      });
      doc.addEventListener("click", checkClick, {
        capture: true,
        passive: false
      });
      doc.addEventListener("keydown", checkTabKey, {
        capture: true,
        passive: false
      });
      doc.addEventListener("keydown", checkEscapeKey);
      return trap;
    };
    var removeListeners = function removeListeners2() {
      if (!state.active) {
        return;
      }
      doc.removeEventListener("focusin", checkFocusIn, true);
      doc.removeEventListener("mousedown", checkPointerDown, true);
      doc.removeEventListener("touchstart", checkPointerDown, true);
      doc.removeEventListener("click", checkClick, true);
      doc.removeEventListener("keydown", checkTabKey, true);
      doc.removeEventListener("keydown", checkEscapeKey);
      return trap;
    };
    var checkDomRemoval = function checkDomRemoval2(mutations) {
      var isFocusedNodeRemoved = mutations.some(function(mutation) {
        var removedNodes = Array.from(mutation.removedNodes);
        return removedNodes.some(function(node) {
          return node === state.mostRecentlyFocusedNode;
        });
      });
      if (isFocusedNodeRemoved) {
        _tryFocus(getInitialFocusNode());
      }
    };
    var mutationObserver = typeof window !== "undefined" && "MutationObserver" in window ? new MutationObserver(checkDomRemoval) : void 0;
    var updateObservedNodes = function updateObservedNodes2() {
      if (!mutationObserver) {
        return;
      }
      mutationObserver.disconnect();
      if (state.active && !state.paused) {
        state.containers.map(function(container) {
          mutationObserver.observe(container, {
            subtree: true,
            childList: true
          });
        });
      }
    };
    trap = {
      get active() {
        return state.active;
      },
      get paused() {
        return state.paused;
      },
      activate: function activate(activateOptions) {
        if (state.active) {
          return this;
        }
        var onActivate = getOption(activateOptions, "onActivate");
        var onPostActivate = getOption(activateOptions, "onPostActivate");
        var checkCanFocusTrap = getOption(activateOptions, "checkCanFocusTrap");
        if (!checkCanFocusTrap) {
          updateTabbableNodes();
        }
        state.active = true;
        state.paused = false;
        state.nodeFocusedBeforeActivation = doc.activeElement;
        onActivate === null || onActivate === void 0 || onActivate();
        var finishActivation = function finishActivation2() {
          if (checkCanFocusTrap) {
            updateTabbableNodes();
          }
          addListeners();
          updateObservedNodes();
          onPostActivate === null || onPostActivate === void 0 || onPostActivate();
        };
        if (checkCanFocusTrap) {
          checkCanFocusTrap(state.containers.concat()).then(finishActivation, finishActivation);
          return this;
        }
        finishActivation();
        return this;
      },
      deactivate: function deactivate(deactivateOptions) {
        if (!state.active) {
          return this;
        }
        var options = _objectSpread2({
          onDeactivate: config.onDeactivate,
          onPostDeactivate: config.onPostDeactivate,
          checkCanReturnFocus: config.checkCanReturnFocus
        }, deactivateOptions);
        clearTimeout(state.delayInitialFocusTimer);
        state.delayInitialFocusTimer = void 0;
        removeListeners();
        state.active = false;
        state.paused = false;
        updateObservedNodes();
        activeFocusTraps.deactivateTrap(trapStack, trap);
        var onDeactivate = getOption(options, "onDeactivate");
        var onPostDeactivate = getOption(options, "onPostDeactivate");
        var checkCanReturnFocus = getOption(options, "checkCanReturnFocus");
        var returnFocus = getOption(options, "returnFocus", "returnFocusOnDeactivate");
        onDeactivate === null || onDeactivate === void 0 || onDeactivate();
        var finishDeactivation = function finishDeactivation2() {
          delay(function() {
            if (returnFocus) {
              _tryFocus(getReturnFocusNode(state.nodeFocusedBeforeActivation));
            }
            onPostDeactivate === null || onPostDeactivate === void 0 || onPostDeactivate();
          });
        };
        if (returnFocus && checkCanReturnFocus) {
          checkCanReturnFocus(getReturnFocusNode(state.nodeFocusedBeforeActivation)).then(finishDeactivation, finishDeactivation);
          return this;
        }
        finishDeactivation();
        return this;
      },
      pause: function pause(pauseOptions) {
        if (state.paused || !state.active) {
          return this;
        }
        var onPause = getOption(pauseOptions, "onPause");
        var onPostPause = getOption(pauseOptions, "onPostPause");
        state.paused = true;
        onPause === null || onPause === void 0 || onPause();
        removeListeners();
        updateObservedNodes();
        onPostPause === null || onPostPause === void 0 || onPostPause();
        return this;
      },
      unpause: function unpause(unpauseOptions) {
        if (!state.paused || !state.active) {
          return this;
        }
        var onUnpause = getOption(unpauseOptions, "onUnpause");
        var onPostUnpause = getOption(unpauseOptions, "onPostUnpause");
        state.paused = false;
        onUnpause === null || onUnpause === void 0 || onUnpause();
        updateTabbableNodes();
        addListeners();
        updateObservedNodes();
        onPostUnpause === null || onPostUnpause === void 0 || onPostUnpause();
        return this;
      },
      updateContainerElements: function updateContainerElements(containerElements) {
        var elementsAsArray = [].concat(containerElements).filter(Boolean);
        state.containers = elementsAsArray.map(function(element) {
          return typeof element === "string" ? doc.querySelector(element) : element;
        });
        if (state.active) {
          updateTabbableNodes();
        }
        updateObservedNodes();
        return this;
      }
    };
    trap.updateContainerElements(elements);
    return trap;
  };

  // node_modules/@patternfly/react-core/dist/esm/helpers/GenerateId/GenerateId.js
  var React14 = __toESM(require_react());

  // node_modules/@patternfly/react-core/dist/esm/helpers/util.js
  var ReactDOM = __toESM(require_react_dom());
  function capitalize(input) {
    return input[0].toUpperCase() + input.substring(1);
  }
  function getUniqueId(prefix = "pf") {
    const uid3 = (/* @__PURE__ */ new Date()).getTime() + Math.random().toString(36).slice(2);
    return `${prefix}-${uid3}`;
  }
  function isElementInView(container, element, partial, strict = false) {
    if (!container || !element) {
      return false;
    }
    const containerBounds = container.getBoundingClientRect();
    const elementBounds = element.getBoundingClientRect();
    const containerBoundsLeft = Math.ceil(containerBounds.left);
    const containerBoundsRight = Math.floor(containerBounds.right);
    const elementBoundsLeft = Math.ceil(elementBounds.left);
    const elementBoundsRight = Math.floor(elementBounds.right);
    const isTotallyInView = elementBoundsLeft >= containerBoundsLeft && elementBoundsRight <= containerBoundsRight;
    const isPartiallyInView = (partial || !strict && containerBounds.width < elementBounds.width) && (elementBoundsLeft < containerBoundsLeft && elementBoundsRight > containerBoundsLeft || elementBoundsRight > containerBoundsRight && elementBoundsLeft < containerBoundsRight);
    return isTotallyInView || isPartiallyInView;
  }
  var formatBreakpointMods = (mods, styles, stylePrefix = "", breakpoint, vertical) => {
    if (!mods) {
      return "";
    }
    if (breakpoint && !vertical) {
      if (breakpoint in mods) {
        return styles.modifiers[toCamel(`${stylePrefix}${mods[breakpoint]}`)];
      }
      const breakpointsOrder = ["2xl", "xl", "lg", "md", "sm", "default"];
      const breakpointsIndex = breakpointsOrder.indexOf(breakpoint);
      for (let i = breakpointsIndex; i < breakpointsOrder.length; i++) {
        if (breakpointsOrder[i] in mods) {
          return styles.modifiers[toCamel(`${stylePrefix}${mods[breakpointsOrder[i]]}`)];
        }
      }
      return "";
    }
    return Object.entries(mods || {}).map(([breakpoint2, mod]) => `${stylePrefix}${mod}${breakpoint2 !== "default" ? `-on-${breakpoint2}` : ""}${vertical && breakpoint2 !== "default" ? "-height" : ""}`).map(toCamel).map((mod) => mod.replace(/-?(\dxl)/gi, (_res, group) => `_${group}`)).map((modifierKey) => styles.modifiers[modifierKey]).filter(Boolean).join(" ");
  };
  var getVerticalBreakpoint = (height) => {
    if (height === null) {
      return null;
    }
    if (height >= globalHeightBreakpoints["2xl"]) {
      return "2xl";
    }
    if (height >= globalHeightBreakpoints.xl) {
      return "xl";
    }
    if (height >= globalHeightBreakpoints.lg) {
      return "lg";
    }
    if (height >= globalHeightBreakpoints.md) {
      return "md";
    }
    if (height >= globalHeightBreakpoints.sm) {
      return "sm";
    }
    return "default";
  };
  var getBreakpoint = (width) => {
    if (width === null) {
      return null;
    }
    if (width >= globalWidthBreakpoints["2xl"]) {
      return "2xl";
    }
    if (width >= globalWidthBreakpoints.xl) {
      return "xl";
    }
    if (width >= globalWidthBreakpoints.lg) {
      return "lg";
    }
    if (width >= globalWidthBreakpoints.md) {
      return "md";
    }
    if (width >= globalWidthBreakpoints.sm) {
      return "sm";
    }
    return "default";
  };
  var camelize = (s) => s.toUpperCase().replace("-", "").replace("_", "");
  var toCamel = (s) => s.replace(/([-_][a-z])/gi, camelize);
  var canUseDOM = !!(typeof window !== "undefined" && window.document && window.document.createElement);
  var getTextWidth = (text, node) => {
    const computedStyle = getComputedStyle(node);
    const getFontFromComputedStyle = () => {
      let computedFont = "";
      const fontStretchLookupTable = {
        "50%": "ultra-condensed",
        "62.5%": "extra-condensed",
        "75%": "condensed",
        "87.5%": "semi-condensed",
        "100%": "normal",
        "112.5%": "semi-expanded",
        "125%": "expanded",
        "150%": "extra-expanded",
        "200%": "ultra-expanded"
      };
      let fontStretch;
      if (computedStyle.fontStretch in fontStretchLookupTable) {
        fontStretch = fontStretchLookupTable[computedStyle.fontStretch];
      } else {
        fontStretch = "normal";
      }
      computedFont = computedStyle.fontStyle + " " + computedStyle.fontVariant + " " + computedStyle.fontWeight + " " + fontStretch + " " + computedStyle.fontSize + "/" + computedStyle.lineHeight + " " + computedStyle.fontFamily;
      return computedFont;
    };
    const canvas = document.createElement("canvas");
    const context = canvas.getContext("2d");
    context.font = computedStyle.font || getFontFromComputedStyle();
    return context.measureText(text).width;
  };
  var innerDimensions = (node) => {
    const computedStyle = getComputedStyle(node);
    let width = node.clientWidth;
    let height = node.clientHeight;
    height -= parseFloat(computedStyle.paddingTop) + parseFloat(computedStyle.paddingBottom);
    width -= parseFloat(computedStyle.paddingLeft) + parseFloat(computedStyle.paddingRight);
    return { height, width };
  };
  var trimLeft = (node, value) => {
    const availableWidth = innerDimensions(node).width;
    let newValue = value;
    if (getTextWidth(value, node) > availableWidth) {
      while (getTextWidth(`...${newValue}`, node) > availableWidth) {
        newValue = newValue.substring(1);
      }
      if (node.value) {
        node.value = `...${newValue}`;
      } else {
        node.innerText = `...${newValue}`;
      }
    } else {
      if (node.value) {
        node.value = value;
      } else {
        node.innerText = value;
      }
    }
  };
  var clearTimeouts = (timeoutRefs) => {
    timeoutRefs.forEach((ref) => {
      if (ref.current) {
        clearTimeout(ref.current);
      }
    });
  };
  var getLanguageDirection = (targetElement, defaultDirection = "ltr") => {
    if (!targetElement) {
      return defaultDirection;
    }
    const computedDirection = getComputedStyle(targetElement).getPropertyValue("direction");
    if (["ltr", "rtl"].includes(computedDirection)) {
      return computedDirection;
    }
    return defaultDirection;
  };

  // node_modules/@patternfly/react-core/dist/esm/helpers/GenerateId/GenerateId.js
  var currentId = 0;
  function getRandomId() {
    if (typeof crypto !== "undefined" && crypto.randomUUID) {
      return crypto.randomUUID();
    } else {
      return getUniqueId();
    }
  }
  var GenerateId = class extends React14.Component {
    constructor() {
      super(...arguments);
      this.uniqueElement = this.props.isRandom ? getRandomId() : currentId++;
      this.id = `${this.props.prefix}${this.uniqueElement}`;
    }
    render() {
      return this.props.children(this.id);
    }
  };
  GenerateId.displayName = "GenerateId";
  GenerateId.defaultProps = {
    prefix: "pf-random-id-",
    isRandom: false
  };

  // node_modules/@patternfly/react-core/dist/esm/helpers/htmlConstants.js
  var ASTERISK = "*";

  // node_modules/@patternfly/react-core/dist/esm/helpers/OUIA/ouia.js
  var import_react = __toESM(require_react());
  var uid = 0;
  var ouiaPrefix = "OUIA-Generated-";
  var ouiaIdByRoute = {};
  function getOUIAProps(componentType, id, ouiaSafe = true) {
    return {
      "data-ouia-component-type": `PF5/${componentType}`,
      "data-ouia-safe": ouiaSafe,
      "data-ouia-component-id": id
    };
  }
  var useOUIAProps = (componentType, id, ouiaSafe = true, variant) => ({
    "data-ouia-component-type": `PF5/${componentType}`,
    "data-ouia-safe": ouiaSafe,
    "data-ouia-component-id": useOUIAId(componentType, id, variant)
  });
  var useOUIAId = (componentType, id, variant) => {
    const defaultOUIAId = (0, import_react.useMemo)(() => getDefaultOUIAId(componentType, variant), [componentType, variant]);
    return id !== null && id !== void 0 ? id : defaultOUIAId;
  };
  function getDefaultOUIAId(componentType, variant) {
    try {
      let key;
      if (typeof window !== "undefined") {
        key = `${window.location.href}-${componentType}-${variant || ""}`;
      } else {
        key = `${componentType}-${variant || ""}`;
      }
      if (!ouiaIdByRoute[key]) {
        ouiaIdByRoute[key] = 0;
      }
      return `${ouiaPrefix}${componentType}-${variant ? `${variant}-` : ""}${++ouiaIdByRoute[key]}`;
    } catch (exception) {
      return `${ouiaPrefix}${componentType}-${variant ? `${variant}-` : ""}${++uid}`;
    }
  }

  // node_modules/@patternfly/react-core/dist/esm/helpers/Popper/Popper.js
  var React17 = __toESM(require_react());
  var ReactDOM2 = __toESM(require_react_dom());

  // node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/react-popper/usePopper.js
  var React16 = __toESM(require_react());

  // node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/dom-utils/getBoundingClientRect.js
  function getBoundingClientRect(element) {
    const rect = element.getBoundingClientRect();
    return {
      width: rect.width,
      height: rect.height,
      top: rect.top,
      right: rect.right,
      bottom: rect.bottom,
      left: rect.left,
      x: rect.left,
      y: rect.top
    };
  }

  // node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/dom-utils/getWindow.js
  function getWindow(node) {
    if (node.toString() !== "[object Window]") {
      const ownerDocument = node.ownerDocument;
      return ownerDocument ? ownerDocument.defaultView : window;
    }
    return node;
  }

  // node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/dom-utils/getWindowScroll.js
  function getWindowScroll(node) {
    const win = getWindow(node);
    const scrollLeft = win.pageXOffset;
    const scrollTop = win.pageYOffset;
    return {
      scrollLeft,
      scrollTop
    };
  }

  // node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/dom-utils/instanceOf.js
  function isElement(node) {
    const OwnElement = getWindow(node).Element;
    return node instanceof OwnElement || node instanceof Element;
  }
  function isHTMLElement(node) {
    const OwnElement = getWindow(node).HTMLElement;
    return node instanceof OwnElement || node instanceof HTMLElement;
  }

  // node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/dom-utils/getHTMLElementScroll.js
  function getHTMLElementScroll(element) {
    return {
      scrollLeft: element.scrollLeft,
      scrollTop: element.scrollTop
    };
  }

  // node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/dom-utils/getNodeScroll.js
  function getNodeScroll(node) {
    if (node === getWindow(node) || !isHTMLElement(node)) {
      return getWindowScroll(node);
    } else {
      return getHTMLElementScroll(node);
    }
  }

  // node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/dom-utils/getNodeName.js
  function getNodeName(element) {
    return element ? (element.nodeName || "").toLowerCase() : null;
  }

  // node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/dom-utils/getDocumentElement.js
  function getDocumentElement(element) {
    return (isElement(element) ? element.ownerDocument : element.document).documentElement;
  }

  // node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/dom-utils/getWindowScrollBarX.js
  function getWindowScrollBarX(element) {
    return getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll(element).scrollLeft;
  }

  // node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/dom-utils/getComputedStyle.js
  function getComputedStyle2(element) {
    return getWindow(element).getComputedStyle(element);
  }

  // node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/dom-utils/isScrollParent.js
  function isScrollParent(element) {
    const { overflow, overflowX, overflowY } = getComputedStyle2(element);
    return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
  }

  // node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/dom-utils/getCompositeRect.js
  function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed = false) {
    const documentElement = getDocumentElement(offsetParent);
    const rect = getBoundingClientRect(elementOrVirtualElement);
    const isOffsetParentAnElement = isHTMLElement(offsetParent);
    let scroll = { scrollLeft: 0, scrollTop: 0 };
    let offsets = { x: 0, y: 0 };
    if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
      if (getNodeName(offsetParent) !== "body" || // https://github.com/popperjs/popper-core/issues/1078
      isScrollParent(documentElement)) {
        scroll = getNodeScroll(offsetParent);
      }
      if (isHTMLElement(offsetParent)) {
        offsets = getBoundingClientRect(offsetParent);
        offsets.x += offsetParent.clientLeft;
        offsets.y += offsetParent.clientTop;
      } else if (documentElement) {
        offsets.x = getWindowScrollBarX(documentElement);
      }
    }
    return {
      x: rect.left + scroll.scrollLeft - offsets.x,
      y: rect.top + scroll.scrollTop - offsets.y,
      width: rect.width,
      height: rect.height
    };
  }

  // node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/dom-utils/getLayoutRect.js
  function getLayoutRect(element) {
    return {
      x: element.offsetLeft,
      y: element.offsetTop,
      width: element.offsetWidth,
      height: element.offsetHeight
    };
  }

  // node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/dom-utils/getParentNode.js
  function getParentNode(element) {
    if (getNodeName(element) === "html") {
      return element;
    }
    return (
      // $FlowFixMe: this is a quicker (but less type safe) way to save quite some bytes from the bundle
      element.assignedSlot || // step into the shadow DOM of the parent of a slotted node
      element.parentNode || // DOM Element detected
      // $FlowFixMe: need a better way to handle this...
      element.host || // ShadowRoot detected
      // $FlowFixMe: HTMLElement is a Node
      getDocumentElement(element)
    );
  }

  // node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/dom-utils/getScrollParent.js
  function getScrollParent(node) {
    if (["html", "body", "#document"].indexOf(getNodeName(node)) >= 0) {
      return node.ownerDocument.body;
    }
    if (isHTMLElement(node) && isScrollParent(node)) {
      return node;
    }
    return getScrollParent(getParentNode(node));
  }

  // node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/dom-utils/listScrollParents.js
  function listScrollParents(element, list = []) {
    const scrollParent = getScrollParent(element);
    const isBody = getNodeName(scrollParent) === "body";
    const win = getWindow(scrollParent);
    const target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
    const updatedList = list.concat(target);
    return isBody ? updatedList : updatedList.concat(listScrollParents(getParentNode(target)));
  }

  // node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/dom-utils/isTableElement.js
  function isTableElement(element) {
    return ["table", "td", "th"].indexOf(getNodeName(element)) >= 0;
  }

  // node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/dom-utils/getOffsetParent.js
  function getTrueOffsetParent(element) {
    if (!isHTMLElement(element) || // https://github.com/popperjs/popper-core/issues/837
    getComputedStyle2(element).position === "fixed") {
      return null;
    }
    const offsetParent = element.offsetParent;
    if (offsetParent) {
      const html = getDocumentElement(offsetParent);
      if (getNodeName(offsetParent) === "body" && getComputedStyle2(offsetParent).position === "static" && getComputedStyle2(html).position !== "static") {
        return html;
      }
    }
    return offsetParent;
  }
  function getContainingBlock(element) {
    let currentNode = getParentNode(element);
    while (isHTMLElement(currentNode) && ["html", "body"].indexOf(getNodeName(currentNode)) < 0) {
      const css3 = getComputedStyle2(currentNode);
      if (css3.transform !== "none" || css3.perspective !== "none" || css3.willChange && css3.willChange !== "auto") {
        return currentNode;
      } else {
        currentNode = currentNode.parentNode;
      }
    }
    return null;
  }
  function getOffsetParent(element) {
    const window2 = getWindow(element);
    let offsetParent = getTrueOffsetParent(element);
    while (offsetParent && isTableElement(offsetParent) && getComputedStyle2(offsetParent).position === "static") {
      offsetParent = getTrueOffsetParent(offsetParent);
    }
    if (offsetParent && getNodeName(offsetParent) === "body" && getComputedStyle2(offsetParent).position === "static") {
      return window2;
    }
    return offsetParent || getContainingBlock(element) || window2;
  }

  // node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/enums.js
  var top = "top";
  var bottom = "bottom";
  var right = "right";
  var left = "left";
  var auto = "auto";
  var basePlacements = [top, bottom, right, left];
  var start = "start";
  var end = "end";
  var clippingParents = "clippingParents";
  var viewport = "viewport";
  var popper = "popper";
  var reference = "reference";
  var variationPlacements = basePlacements.reduce((acc, placement) => acc.concat([`${placement}-${start}`, `${placement}-${end}`]), []);
  var placements = [...basePlacements, auto].reduce((acc, placement) => acc.concat([placement, `${placement}-${start}`, `${placement}-${end}`]), []);
  var beforeRead = "beforeRead";
  var read = "read";
  var afterRead = "afterRead";
  var beforeMain = "beforeMain";
  var main = "main";
  var afterMain = "afterMain";
  var beforeWrite = "beforeWrite";
  var write = "write";
  var afterWrite = "afterWrite";
  var modifierPhases = [
    beforeRead,
    read,
    afterRead,
    beforeMain,
    main,
    afterMain,
    beforeWrite,
    write,
    afterWrite
  ];

  // node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/utils/orderModifiers.js
  function order(modifiers) {
    const map = /* @__PURE__ */ new Map();
    const visited = /* @__PURE__ */ new Set();
    const result = [];
    modifiers.forEach((modifier) => {
      map.set(modifier.name, modifier);
    });
    function sort(modifier) {
      visited.add(modifier.name);
      const requires = [...modifier.requires || [], ...modifier.requiresIfExists || []];
      requires.forEach((dep) => {
        if (!visited.has(dep)) {
          const depModifier = map.get(dep);
          if (depModifier) {
            sort(depModifier);
          }
        }
      });
      result.push(modifier);
    }
    modifiers.forEach((modifier) => {
      if (!visited.has(modifier.name)) {
        sort(modifier);
      }
    });
    return result;
  }
  function orderModifiers(modifiers) {
    const orderedModifiers = order(modifiers);
    return modifierPhases.reduce((acc, phase) => acc.concat(orderedModifiers.filter((modifier) => modifier.phase === phase)), []);
  }

  // node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/utils/debounce.js
  function debounce(fn) {
    let pending;
    return () => {
      if (!pending) {
        pending = new Promise((resolve) => {
          Promise.resolve().then(() => {
            pending = void 0;
            resolve(fn());
          });
        });
      }
      return pending;
    };
  }

  // node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/utils/getBasePlacement.js
  function getBasePlacement(placement) {
    return placement.split("-")[0];
  }

  // node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/utils/mergeByName.js
  function mergeByName(modifiers) {
    const merged = modifiers.reduce((merged2, current) => {
      const existing = merged2[current.name];
      merged2[current.name] = existing ? Object.assign(Object.assign(Object.assign({}, existing), current), { options: Object.assign(Object.assign({}, existing.options), current.options), data: Object.assign(Object.assign({}, existing.data), current.data) }) : current;
      return merged2;
    }, {});
    return Object.keys(merged).map((key) => merged[key]);
  }

  // node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/dom-utils/getViewportRect.js
  function getViewportRect(element) {
    const win = getWindow(element);
    const html = getDocumentElement(element);
    const visualViewport = win.visualViewport;
    let width = html.clientWidth;
    let height = html.clientHeight;
    let x = 0;
    let y = 0;
    if (visualViewport) {
      width = visualViewport.width;
      height = visualViewport.height;
      if (!/^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {
        x = visualViewport.offsetLeft;
        y = visualViewport.offsetTop;
      }
    }
    return {
      width,
      height,
      x: x + getWindowScrollBarX(element),
      y
    };
  }

  // node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/dom-utils/getDocumentRect.js
  function getDocumentRect(element) {
    const html = getDocumentElement(element);
    const winScroll = getWindowScroll(element);
    const body = element.ownerDocument.body;
    const width = Math.max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
    const height = Math.max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
    let x = -winScroll.scrollLeft + getWindowScrollBarX(element);
    const y = -winScroll.scrollTop;
    if (getComputedStyle2(body || html).direction === "rtl") {
      x += Math.max(html.clientWidth, body ? body.clientWidth : 0) - width;
    }
    return { width, height, x, y };
  }

  // node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/dom-utils/contains.js
  function contains(parent2, child) {
    const isShadow = Boolean(child.getRootNode && child.getRootNode().host);
    if (parent2.contains(child)) {
      return true;
    } else if (isShadow) {
      let next = child;
      do {
        if (next && parent2.isSameNode(next)) {
          return true;
        }
        next = next.parentNode || next.host;
      } while (next);
    }
    return false;
  }

  // node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/utils/rectToClientRect.js
  function rectToClientRect(rect) {
    return Object.assign(Object.assign({}, rect), { left: rect.x, top: rect.y, right: rect.x + rect.width, bottom: rect.y + rect.height });
  }

  // node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/dom-utils/getClippingRect.js
  function getInnerBoundingClientRect(element) {
    const rect = getBoundingClientRect(element);
    rect.top = rect.top + element.clientTop;
    rect.left = rect.left + element.clientLeft;
    rect.bottom = rect.top + element.clientHeight;
    rect.right = rect.left + element.clientWidth;
    rect.width = element.clientWidth;
    rect.height = element.clientHeight;
    rect.x = rect.left;
    rect.y = rect.top;
    return rect;
  }
  function getClientRectFromMixedType(element, clippingParent) {
    return clippingParent === viewport ? rectToClientRect(getViewportRect(element)) : isHTMLElement(clippingParent) ? getInnerBoundingClientRect(clippingParent) : rectToClientRect(getDocumentRect(getDocumentElement(element)));
  }
  function getClippingParents(element) {
    const clippingParents3 = listScrollParents(getParentNode(element));
    const canEscapeClipping = ["absolute", "fixed"].indexOf(getComputedStyle2(element).position) >= 0;
    const clipperElement = canEscapeClipping && isHTMLElement(element) ? getOffsetParent(element) : element;
    if (!isElement(clipperElement)) {
      return [];
    }
    return clippingParents3.filter((clippingParent) => isElement(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== "body");
  }
  function getClippingRect(element, boundary, rootBoundary) {
    const mainClippingParents = boundary === "clippingParents" ? getClippingParents(element) : [].concat(boundary);
    const clippingParents3 = [...mainClippingParents, rootBoundary];
    const firstClippingParent = clippingParents3[0];
    const clippingRect = clippingParents3.reduce((accRect, clippingParent) => {
      const rect = getClientRectFromMixedType(element, clippingParent);
      accRect.top = Math.max(rect.top, accRect.top);
      accRect.right = Math.min(rect.right, accRect.right);
      accRect.bottom = Math.min(rect.bottom, accRect.bottom);
      accRect.left = Math.max(rect.left, accRect.left);
      return accRect;
    }, getClientRectFromMixedType(element, firstClippingParent));
    clippingRect.width = clippingRect.right - clippingRect.left;
    clippingRect.height = clippingRect.bottom - clippingRect.top;
    clippingRect.x = clippingRect.left;
    clippingRect.y = clippingRect.top;
    return clippingRect;
  }

  // node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/utils/getVariation.js
  function getVariation(placement) {
    return placement.split("-")[1];
  }

  // node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/utils/getMainAxisFromPlacement.js
  function getMainAxisFromPlacement(placement) {
    return ["top", "bottom"].indexOf(placement) >= 0 ? "x" : "y";
  }

  // node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/utils/computeOffsets.js
  function computeOffsets({ reference: reference3, element, placement }) {
    const basePlacement = placement ? getBasePlacement(placement) : null;
    const variation = placement ? getVariation(placement) : null;
    const commonX = reference3.x + reference3.width / 2 - element.width / 2;
    const commonY = reference3.y + reference3.height / 2 - element.height / 2;
    let offsets;
    switch (basePlacement) {
      case top:
        offsets = {
          x: commonX,
          y: reference3.y - element.height
        };
        break;
      case bottom:
        offsets = {
          x: commonX,
          y: reference3.y + reference3.height
        };
        break;
      case right:
        offsets = {
          x: reference3.x + reference3.width,
          y: commonY
        };
        break;
      case left:
        offsets = {
          x: reference3.x - element.width,
          y: commonY
        };
        break;
      default:
        offsets = {
          x: reference3.x,
          y: reference3.y
        };
    }
    const mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;
    if (mainAxis != null) {
      const len = mainAxis === "y" ? "height" : "width";
      switch (variation) {
        case start:
          offsets[mainAxis] = Math.floor(offsets[mainAxis]) - Math.floor(reference3[len] / 2 - element[len] / 2);
          break;
        case end:
          offsets[mainAxis] = Math.floor(offsets[mainAxis]) + Math.ceil(reference3[len] / 2 - element[len] / 2);
          break;
        default:
      }
    }
    return offsets;
  }

  // node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/utils/getFreshSideObject.js
  function getFreshSideObject() {
    return {
      top: 0,
      right: 0,
      bottom: 0,
      left: 0
    };
  }

  // node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/utils/mergePaddingObject.js
  function mergePaddingObject(paddingObject) {
    return Object.assign(Object.assign({}, getFreshSideObject()), paddingObject);
  }

  // node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/utils/expandToHashMap.js
  function expandToHashMap(value, keys) {
    return keys.reduce((hashMap, key) => {
      hashMap[key] = value;
      return hashMap;
    }, {});
  }

  // node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/utils/detectOverflow.js
  function detectOverflow(state, options = {}) {
    const { placement = state.placement, boundary = clippingParents, rootBoundary = viewport, elementContext = popper, altBoundary = false, padding = 0 } = options;
    const paddingObject = mergePaddingObject(typeof padding !== "number" ? padding : expandToHashMap(padding, basePlacements));
    const altContext = elementContext === popper ? reference : popper;
    const referenceElement = state.elements.reference;
    const popperRect = state.rects.popper;
    const element = state.elements[altBoundary ? altContext : elementContext];
    const clippingClientRect = getClippingRect(isElement(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary);
    const referenceClientRect = getBoundingClientRect(referenceElement);
    const popperOffsets3 = computeOffsets({
      reference: referenceClientRect,
      element: popperRect,
      strategy: "absolute",
      placement
    });
    const popperClientRect = rectToClientRect(Object.assign(Object.assign({}, popperRect), popperOffsets3));
    const elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect;
    const overflowOffsets = {
      top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
      bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
      left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
      right: elementClientRect.right - clippingClientRect.right + paddingObject.right
    };
    const offsetData = state.modifiersData.offset;
    if (elementContext === popper && offsetData) {
      const offset3 = offsetData[placement];
      Object.keys(overflowOffsets).forEach((key) => {
        const multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;
        const axis = [top, bottom].indexOf(key) >= 0 ? "y" : "x";
        overflowOffsets[key] += offset3[axis] * multiply;
      });
    }
    return overflowOffsets;
  }

  // node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/index.js
  var DEFAULT_OPTIONS = {
    placement: "bottom",
    modifiers: [],
    strategy: "absolute"
  };
  function areValidElements(...args) {
    return !args.some((element) => !(element && typeof element.getBoundingClientRect === "function"));
  }
  function popperGenerator(generatorOptions = {}) {
    const { defaultModifiers: defaultModifiers3 = [], defaultOptions = DEFAULT_OPTIONS } = generatorOptions;
    return function createPopper5(reference3, popper3, options = defaultOptions) {
      let state = {
        placement: "bottom",
        orderedModifiers: [],
        options: Object.assign(Object.assign({}, DEFAULT_OPTIONS), defaultOptions),
        modifiersData: {},
        elements: {
          reference: reference3,
          popper: popper3
        },
        attributes: {},
        styles: {}
      };
      let effectCleanupFns = [];
      let isDestroyed = false;
      const instance = {
        state,
        setOptions(options2) {
          cleanupModifierEffects();
          state.options = Object.assign(Object.assign(Object.assign({}, defaultOptions), state.options), options2);
          state.scrollParents = {
            reference: isElement(reference3) ? listScrollParents(reference3) : reference3.contextElement ? listScrollParents(reference3.contextElement) : [],
            popper: listScrollParents(popper3)
          };
          const orderedModifiers = orderModifiers(mergeByName([...defaultModifiers3, ...state.options.modifiers]));
          state.orderedModifiers = orderedModifiers.filter((m) => m.enabled);
          if (false) {
            const modifiers = uniqueBy([...orderedModifiers, ...state.options.modifiers], ({ name }) => name);
            validateModifiers(modifiers);
            if (getBasePlacement(state.options.placement) === auto) {
              const flipModifier = state.orderedModifiers.find(({ name }) => name === "flip");
              if (!flipModifier) {
                console.error(['Popper: "auto" placements require the "flip" modifier be', "present and enabled to work."].join(" "));
              }
            }
            const { marginTop, marginRight, marginBottom, marginLeft } = getComputedStyle2(popper3);
            if ([marginTop, marginRight, marginBottom, marginLeft].some((margin) => parseFloat(margin))) {
              console.warn([
                'Popper: CSS "margin" styles cannot be used to apply padding',
                "between the popper and its reference element or boundary.",
                "To replicate margin, use the `offset` modifier, as well as",
                "the `padding` option in the `preventOverflow` and `flip`",
                "modifiers."
              ].join(" "));
            }
          }
          runModifierEffects();
          return instance.update();
        },
        // Sync update – it will always be executed, even if not necessary. This
        // is useful for low frequency updates where sync behavior simplifies the
        // logic.
        // For high frequency updates (e.g. `resize` and `scroll` events), always
        // prefer the async Popper#update method
        forceUpdate() {
          if (isDestroyed) {
            return;
          }
          const { reference: reference4, popper: popper4 } = state.elements;
          if (!areValidElements(reference4, popper4)) {
            if (false) {
              console.error(INVALID_ELEMENT_ERROR);
            }
            return;
          }
          state.rects = {
            reference: getCompositeRect(reference4, getOffsetParent(popper4), state.options.strategy === "fixed"),
            popper: getLayoutRect(popper4)
          };
          state.reset = false;
          state.placement = state.options.placement;
          state.orderedModifiers.forEach((modifier) => state.modifiersData[modifier.name] = Object.assign({}, modifier.data));
          let __debug_loops__ = 0;
          for (let index = 0; index < state.orderedModifiers.length; index++) {
            if (false) {
              __debug_loops__ += 1;
              if (__debug_loops__ > 100) {
                console.error(INFINITE_LOOP_ERROR);
                break;
              }
            }
            if (state.reset === true) {
              state.reset = false;
              index = -1;
              continue;
            }
            const { fn, options: options2 = {}, name } = state.orderedModifiers[index];
            if (typeof fn === "function") {
              state = fn({ state, options: options2, name, instance }) || state;
            }
          }
        },
        // Async and optimistically optimized update – it will not be executed if
        // not necessary (debounced to run at most once-per-tick)
        update: debounce(() => new Promise((resolve) => {
          instance.forceUpdate();
          resolve(state);
        })),
        destroy() {
          cleanupModifierEffects();
          isDestroyed = true;
        }
      };
      if (!areValidElements(reference3, popper3)) {
        if (false) {
          console.error(INVALID_ELEMENT_ERROR);
        }
        return instance;
      }
      instance.setOptions(options).then((state2) => {
        if (!isDestroyed && options.onFirstUpdate) {
          options.onFirstUpdate(state2);
        }
      });
      function runModifierEffects() {
        state.orderedModifiers.forEach(({ name, options: options2 = {}, effect: effect7 }) => {
          if (typeof effect7 === "function") {
            const cleanupFn = effect7({ state, name, instance, options: options2 });
            const noopFn = () => {
            };
            effectCleanupFns.push(cleanupFn || noopFn);
          }
        });
      }
      function cleanupModifierEffects() {
        effectCleanupFns.forEach((fn) => fn());
        effectCleanupFns = [];
      }
      return instance;
    };
  }
  var createPopper = popperGenerator();

  // node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/modifiers/eventListeners.js
  var passive = { passive: true };
  function effect({ state, instance, options }) {
    const { scroll = true, resize = true } = options;
    const window2 = getWindow(state.elements.popper);
    const scrollParents = [...state.scrollParents.reference, ...state.scrollParents.popper];
    if (scroll) {
      scrollParents.forEach((scrollParent) => {
        scrollParent.addEventListener("scroll", instance.update, passive);
      });
    }
    if (resize) {
      window2.addEventListener("resize", instance.update, passive);
    }
    return () => {
      if (scroll) {
        scrollParents.forEach((scrollParent) => {
          scrollParent.removeEventListener("scroll", instance.update, passive);
        });
      }
      if (resize) {
        window2.removeEventListener("resize", instance.update, passive);
      }
    };
  }
  var eventListeners_default = {
    name: "eventListeners",
    enabled: true,
    phase: "write",
    fn: () => {
    },
    effect,
    data: {}
  };

  // node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/modifiers/popperOffsets.js
  function popperOffsets({ state, name }) {
    state.modifiersData[name] = computeOffsets({
      reference: state.rects.reference,
      element: state.rects.popper,
      strategy: "absolute",
      placement: state.placement
    });
  }
  var popperOffsets_default = {
    name: "popperOffsets",
    enabled: true,
    phase: "read",
    fn: popperOffsets,
    data: {}
  };

  // node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/modifiers/computeStyles.js
  var unsetSides = {
    top: "auto",
    right: "auto",
    bottom: "auto",
    left: "auto"
  };
  function roundOffsets({ x, y }) {
    const win = window;
    const dpr = win.devicePixelRatio || 1;
    return {
      x: Math.round(x * dpr) / dpr || 0,
      y: Math.round(y * dpr) / dpr || 0
    };
  }
  function mapToStyles({ popper: popper3, popperRect, placement, offsets, position, gpuAcceleration, adaptive }) {
    let { x, y } = roundOffsets(offsets);
    const hasX = offsets.hasOwnProperty("x");
    const hasY = offsets.hasOwnProperty("y");
    let sideX = left;
    let sideY = top;
    const win = window;
    if (adaptive) {
      let offsetParent = getOffsetParent(popper3);
      if (offsetParent === getWindow(popper3)) {
        offsetParent = getDocumentElement(popper3);
      }
      if (placement === top) {
        sideY = bottom;
        y -= offsetParent.clientHeight - popperRect.height;
        y *= gpuAcceleration ? 1 : -1;
      }
      if (placement === left) {
        sideX = right;
        x -= offsetParent.clientWidth - popperRect.width;
        x *= gpuAcceleration ? 1 : -1;
      }
    }
    const commonStyles = Object.assign({ position }, adaptive && unsetSides);
    if (gpuAcceleration) {
      return Object.assign(Object.assign({}, commonStyles), {
        [sideY]: hasY ? "0" : "",
        [sideX]: hasX ? "0" : "",
        // Layer acceleration can disable subpixel rendering which causes slightly
        // blurry text on low PPI displays, so we want to use 2D transforms
        // instead
        transform: (win.devicePixelRatio || 1) < 2 ? `translate(${x}px, ${y}px)` : `translate3d(${x}px, ${y}px, 0)`
      });
    }
    return Object.assign(Object.assign({}, commonStyles), { [sideY]: hasY ? `${y}px` : "", [sideX]: hasX ? `${x}px` : "", transform: "" });
  }
  function computeStyles({ state, options }) {
    const { gpuAcceleration = true, adaptive = true } = options;
    if (false) {
      const transitionProperty = getComputedStyle2(state.elements.popper).transitionProperty || "";
      if (adaptive && ["transform", "top", "right", "bottom", "left"].some((property) => transitionProperty.indexOf(property) >= 0)) {
        console.warn([
          "Popper: Detected CSS transitions on at least one of the following",
          'CSS properties: "transform", "top", "right", "bottom", "left".',
          "\n\n",
          'Disable the "computeStyles" modifier\'s `adaptive` option to allow',
          "for smooth transitions, or remove these properties from the CSS",
          "transition declaration on the popper element if only transitioning",
          "opacity or background-color for example.",
          "\n\n",
          "We recommend using the popper element as a wrapper around an inner",
          "element that can have any CSS property transitioned for animations."
        ].join(" "));
      }
    }
    const commonStyles = {
      placement: getBasePlacement(state.placement),
      popper: state.elements.popper,
      popperRect: state.rects.popper,
      gpuAcceleration
    };
    if (state.modifiersData.popperOffsets != null) {
      state.styles.popper = Object.assign(Object.assign({}, state.styles.popper), mapToStyles(Object.assign(Object.assign({}, commonStyles), { offsets: state.modifiersData.popperOffsets, position: state.options.strategy, adaptive })));
    }
    if (state.modifiersData.arrow != null) {
      state.styles.arrow = Object.assign(Object.assign({}, state.styles.arrow), mapToStyles(Object.assign(Object.assign({}, commonStyles), { offsets: state.modifiersData.arrow, position: "absolute", adaptive: false })));
    }
    state.attributes.popper = Object.assign(Object.assign({}, state.attributes.popper), { "data-popper-placement": state.placement });
  }
  var computeStyles_default = {
    name: "computeStyles",
    enabled: true,
    phase: "beforeWrite",
    fn: computeStyles,
    data: {}
  };

  // node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/modifiers/applyStyles.js
  function applyStyles({ state }) {
    Object.keys(state.elements).forEach((name) => {
      const style = state.styles[name] || {};
      const attributes = state.attributes[name] || {};
      const element = state.elements[name];
      if (!isHTMLElement(element) || !getNodeName(element)) {
        return;
      }
      Object.assign(element.style, style);
      Object.keys(attributes).forEach((name2) => {
        const value = attributes[name2];
        if (value === false) {
          element.removeAttribute(name2);
        } else {
          element.setAttribute(name2, value === true ? "" : value);
        }
      });
    });
  }
  function effect2({ state }) {
    const initialStyles = {
      popper: {
        position: state.options.strategy,
        left: "0",
        top: "0",
        margin: "0"
      },
      arrow: {
        position: "absolute"
      },
      reference: {}
    };
    Object.assign(state.elements.popper.style, initialStyles.popper);
    if (state.elements.arrow) {
      Object.assign(state.elements.arrow.style, initialStyles.arrow);
    }
    return () => {
      Object.keys(state.elements).forEach((name) => {
        const element = state.elements[name];
        const attributes = state.attributes[name] || {};
        const styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]);
        const style = styleProperties.reduce((style2, property) => {
          style2[property] = "";
          return style2;
        }, {});
        if (!isHTMLElement(element) || !getNodeName(element)) {
          return;
        }
        Object.assign(element.style, style);
        Object.keys(attributes).forEach((attribute) => {
          element.removeAttribute(attribute);
        });
      });
    };
  }
  var applyStyles_default = {
    name: "applyStyles",
    enabled: true,
    phase: "write",
    fn: applyStyles,
    effect: effect2,
    requires: ["computeStyles"]
  };

  // node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/modifiers/offset.js
  function distanceAndSkiddingToXY(placement, rects, offset3) {
    const basePlacement = getBasePlacement(placement);
    const invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;
    let [skidding, distance] = typeof offset3 === "function" ? offset3(Object.assign(Object.assign({}, rects), { placement })) : offset3;
    skidding = skidding || 0;
    distance = (distance || 0) * invertDistance;
    return [left, right].indexOf(basePlacement) >= 0 ? { x: distance, y: skidding } : { x: skidding, y: distance };
  }
  function offset({ state, options, name }) {
    const { offset: offset3 = [0, 0] } = options;
    const data2 = placements.reduce((acc, placement) => {
      acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset3);
      return acc;
    }, {});
    const { x, y } = data2[state.placement];
    if (state.modifiersData.popperOffsets != null) {
      state.modifiersData.popperOffsets.x += x;
      state.modifiersData.popperOffsets.y += y;
    }
    state.modifiersData[name] = data2;
  }
  var offset_default = {
    name: "offset",
    enabled: true,
    phase: "main",
    requires: ["popperOffsets"],
    fn: offset
  };

  // node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/utils/getOppositePlacement.js
  var hash = { left: "right", right: "left", bottom: "top", top: "bottom" };
  function getOppositePlacement(placement) {
    return placement.replace(/left|right|bottom|top/g, (matched) => hash[matched]);
  }

  // node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/utils/getOppositeVariationPlacement.js
  var hash2 = { start: "end", end: "start" };
  function getOppositeVariationPlacement(placement) {
    return placement.replace(/start|end/g, (matched) => hash2[matched]);
  }

  // node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/utils/computeAutoPlacement.js
  function computeAutoPlacement(state, options = {}) {
    const { placement, boundary, rootBoundary, padding, flipVariations, allowedAutoPlacements = placements } = options;
    const variation = getVariation(placement);
    const placements3 = variation ? flipVariations ? variationPlacements : variationPlacements.filter((placement2) => getVariation(placement2) === variation) : basePlacements;
    let allowedPlacements = placements3.filter((placement2) => allowedAutoPlacements.indexOf(placement2) >= 0);
    if (allowedPlacements.length === 0) {
      allowedPlacements = placements3;
      if (false) {
        console.error([
          "Popper: The `allowedAutoPlacements` option did not allow any",
          "placements. Ensure the `placement` option matches the variation",
          "of the allowed placements.",
          'For example, "auto" cannot be used to allow "bottom-start".',
          'Use "auto-start" instead.'
        ].join(" "));
      }
    }
    const overflows = allowedPlacements.reduce((acc, placement2) => {
      acc[placement2] = detectOverflow(state, {
        placement: placement2,
        boundary,
        rootBoundary,
        padding
      })[getBasePlacement(placement2)];
      return acc;
    }, {});
    return Object.keys(overflows).sort((a, b) => overflows[a] - overflows[b]);
  }

  // node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/modifiers/flip.js
  function getExpandedFallbackPlacements(placement) {
    if (getBasePlacement(placement) === auto) {
      return [];
    }
    const oppositePlacement = getOppositePlacement(placement);
    return [
      getOppositeVariationPlacement(placement),
      oppositePlacement,
      getOppositeVariationPlacement(oppositePlacement)
    ];
  }
  function flip({ state, options, name }) {
    if (state.modifiersData[name]._skip) {
      return;
    }
    const { mainAxis: checkMainAxis = true, altAxis: checkAltAxis = true, fallbackPlacements: specifiedFallbackPlacements, padding, boundary, rootBoundary, altBoundary, flipVariations = true, allowedAutoPlacements } = options;
    const preferredPlacement = state.options.placement;
    const basePlacement = getBasePlacement(preferredPlacement);
    const isBasePlacement = basePlacement === preferredPlacement;
    const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
    const placements3 = [preferredPlacement, ...fallbackPlacements].reduce((acc, placement) => acc.concat(getBasePlacement(placement) === auto ? computeAutoPlacement(state, {
      placement,
      boundary,
      rootBoundary,
      padding,
      flipVariations,
      allowedAutoPlacements
    }) : placement), []);
    const referenceRect = state.rects.reference;
    const popperRect = state.rects.popper;
    const checksMap = /* @__PURE__ */ new Map();
    let makeFallbackChecks = true;
    let firstFittingPlacement = placements3[0];
    for (let i = 0; i < placements3.length; i++) {
      const placement = placements3[i];
      const basePlacement2 = getBasePlacement(placement);
      const isStartVariation = getVariation(placement) === start;
      const isVertical = [top, bottom].indexOf(basePlacement2) >= 0;
      const len = isVertical ? "width" : "height";
      const overflow = detectOverflow(state, {
        placement,
        boundary,
        rootBoundary,
        altBoundary,
        padding
      });
      let mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;
      if (referenceRect[len] > popperRect[len]) {
        mainVariationSide = getOppositePlacement(mainVariationSide);
      }
      const altVariationSide = getOppositePlacement(mainVariationSide);
      const checks = [];
      if (checkMainAxis) {
        checks.push(overflow[basePlacement2] <= 0);
      }
      if (checkAltAxis) {
        checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
      }
      if (checks.every((check) => check)) {
        firstFittingPlacement = placement;
        makeFallbackChecks = false;
        break;
      }
      checksMap.set(placement, checks);
    }
    if (makeFallbackChecks) {
      const numberOfChecks = flipVariations ? 3 : 1;
      for (let i = numberOfChecks; i > 0; i--) {
        const fittingPlacement = placements3.find((placement) => {
          const checks = checksMap.get(placement);
          if (checks) {
            return checks.slice(0, i).every((check) => check);
          }
        });
        if (fittingPlacement) {
          firstFittingPlacement = fittingPlacement;
          break;
        }
      }
    }
    if (state.placement !== firstFittingPlacement) {
      state.modifiersData[name]._skip = true;
      state.placement = firstFittingPlacement;
      state.reset = true;
    }
  }
  var flip_default = {
    name: "flip",
    enabled: true,
    phase: "main",
    fn: flip,
    requiresIfExists: ["offset"],
    data: { _skip: false }
  };

  // node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/utils/getAltAxis.js
  function getAltAxis(axis) {
    return axis === "x" ? "y" : "x";
  }

  // node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/utils/within.js
  function within(min, value, max) {
    return Math.max(min, Math.min(value, max));
  }

  // node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/modifiers/preventOverflow.js
  function preventOverflow({ state, options, name }) {
    const { mainAxis: checkMainAxis = true, altAxis: checkAltAxis = false, boundary, rootBoundary, altBoundary, padding, tether = true, tetherOffset = 0 } = options;
    const overflow = detectOverflow(state, {
      boundary,
      rootBoundary,
      padding,
      altBoundary
    });
    const basePlacement = getBasePlacement(state.placement);
    const variation = getVariation(state.placement);
    const isBasePlacement = !variation;
    const mainAxis = getMainAxisFromPlacement(basePlacement);
    const altAxis = getAltAxis(mainAxis);
    const popperOffsets3 = state.modifiersData.popperOffsets;
    const referenceRect = state.rects.reference;
    const popperRect = state.rects.popper;
    const tetherOffsetValue = typeof tetherOffset === "function" ? tetherOffset(Object.assign(Object.assign({}, state.rects), { placement: state.placement })) : tetherOffset;
    const data2 = { x: 0, y: 0 };
    if (!popperOffsets3) {
      return;
    }
    if (checkMainAxis) {
      const mainSide = mainAxis === "y" ? top : left;
      const altSide = mainAxis === "y" ? bottom : right;
      const len = mainAxis === "y" ? "height" : "width";
      const offset3 = popperOffsets3[mainAxis];
      const min = popperOffsets3[mainAxis] + overflow[mainSide];
      const max = popperOffsets3[mainAxis] - overflow[altSide];
      const additive = tether ? -popperRect[len] / 2 : 0;
      const minLen = variation === start ? referenceRect[len] : popperRect[len];
      const maxLen = variation === start ? -popperRect[len] : -referenceRect[len];
      const arrowElement = state.elements.arrow;
      const arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : { width: 0, height: 0 };
      const arrowPaddingObject = state.modifiersData["arrow#persistent"] ? state.modifiersData["arrow#persistent"].padding : getFreshSideObject();
      const arrowPaddingMin = arrowPaddingObject[mainSide];
      const arrowPaddingMax = arrowPaddingObject[altSide];
      const arrowLen = within(0, referenceRect[len], arrowRect[len]);
      const minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - tetherOffsetValue : minLen - arrowLen - arrowPaddingMin - tetherOffsetValue;
      const maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + tetherOffsetValue : maxLen + arrowLen + arrowPaddingMax + tetherOffsetValue;
      const arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);
      const clientOffset = arrowOffsetParent ? mainAxis === "y" ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
      const offsetModifierValue = state.modifiersData.offset ? state.modifiersData.offset[state.placement][mainAxis] : 0;
      const tetherMin = popperOffsets3[mainAxis] + minOffset - offsetModifierValue - clientOffset;
      const tetherMax = popperOffsets3[mainAxis] + maxOffset - offsetModifierValue;
      const preventedOffset = within(tether ? Math.min(min, tetherMin) : min, offset3, tether ? Math.max(max, tetherMax) : max);
      popperOffsets3[mainAxis] = preventedOffset;
      data2[mainAxis] = preventedOffset - offset3;
    }
    if (checkAltAxis) {
      const mainSide = mainAxis === "x" ? top : left;
      const altSide = mainAxis === "x" ? bottom : right;
      const offset3 = popperOffsets3[altAxis];
      const min = offset3 + overflow[mainSide];
      const max = offset3 - overflow[altSide];
      const preventedOffset = within(min, offset3, max);
      popperOffsets3[altAxis] = preventedOffset;
      data2[altAxis] = preventedOffset - offset3;
    }
    state.modifiersData[name] = data2;
  }
  var preventOverflow_default = {
    name: "preventOverflow",
    enabled: true,
    phase: "main",
    fn: preventOverflow,
    requiresIfExists: ["offset"]
  };

  // node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/modifiers/arrow.js
  function arrow({ state, name }) {
    const arrowElement = state.elements.arrow;
    const popperOffsets3 = state.modifiersData.popperOffsets;
    const basePlacement = getBasePlacement(state.placement);
    const axis = getMainAxisFromPlacement(basePlacement);
    const isVertical = [left, right].indexOf(basePlacement) >= 0;
    const len = isVertical ? "height" : "width";
    if (!arrowElement || !popperOffsets3) {
      return;
    }
    const paddingObject = state.modifiersData[`${name}#persistent`].padding;
    const arrowRect = getLayoutRect(arrowElement);
    const minProp = axis === "y" ? top : left;
    const maxProp = axis === "y" ? bottom : right;
    const endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets3[axis] - state.rects.popper[len];
    const startDiff = popperOffsets3[axis] - state.rects.reference[axis];
    const arrowOffsetParent = getOffsetParent(arrowElement);
    const clientSize = arrowOffsetParent ? axis === "y" ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
    const centerToReference = endDiff / 2 - startDiff / 2;
    const min = paddingObject[minProp];
    const max = clientSize - arrowRect[len] - paddingObject[maxProp];
    const center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
    const offset3 = within(min, center, max);
    const axisProp = axis;
    state.modifiersData[name] = {
      [axisProp]: offset3,
      centerOffset: offset3 - center
    };
  }
  function effect3({ state, options, name }) {
    let { element: arrowElement = "[data-popper-arrow]", padding = 0 } = options;
    if (arrowElement == null) {
      return;
    }
    if (typeof arrowElement === "string") {
      arrowElement = state.elements.popper.querySelector(arrowElement);
      if (!arrowElement) {
        return;
      }
    }
    if (false) {
      if (!isHTMLElement(arrowElement)) {
        console.error([
          'Popper: "arrow" element must be an HTMLElement (not an SVGElement).',
          "To use an SVG arrow, wrap it in an HTMLElement that will be used as",
          "the arrow."
        ].join(" "));
      }
    }
    if (!contains(state.elements.popper, arrowElement)) {
      if (false) {
        console.error(['Popper: "arrow" modifier\'s `element` must be a child of the popper', "element."].join(" "));
      }
      return;
    }
    state.elements.arrow = arrowElement;
    state.modifiersData[`${name}#persistent`] = {
      padding: mergePaddingObject(typeof padding !== "number" ? padding : expandToHashMap(padding, basePlacements))
    };
  }
  var arrow_default = {
    name: "arrow",
    enabled: true,
    phase: "main",
    fn: arrow,
    effect: effect3,
    requires: ["popperOffsets"],
    requiresIfExists: ["preventOverflow"]
  };

  // node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/modifiers/hide.js
  function getSideOffsets(overflow, rect, preventedOffsets = { x: 0, y: 0 }) {
    return {
      top: overflow.top - rect.height - preventedOffsets.y,
      right: overflow.right - rect.width + preventedOffsets.x,
      bottom: overflow.bottom - rect.height + preventedOffsets.y,
      left: overflow.left - rect.width - preventedOffsets.x
    };
  }
  function isAnySideFullyClipped(overflow) {
    return [top, right, bottom, left].some((side) => overflow[side] >= 0);
  }
  function hide({ state, name }) {
    const referenceRect = state.rects.reference;
    const popperRect = state.rects.popper;
    const preventedOffsets = state.modifiersData.preventOverflow;
    const referenceOverflow = detectOverflow(state, {
      elementContext: "reference"
    });
    const popperAltOverflow = detectOverflow(state, {
      altBoundary: true
    });
    const referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
    const popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
    const isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
    const hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
    state.modifiersData[name] = {
      referenceClippingOffsets,
      popperEscapeOffsets,
      isReferenceHidden,
      hasPopperEscaped
    };
    state.attributes.popper = Object.assign(Object.assign({}, state.attributes.popper), { "data-popper-reference-hidden": isReferenceHidden, "data-popper-escaped": hasPopperEscaped });
  }
  var hide_default = {
    name: "hide",
    enabled: true,
    phase: "main",
    requiresIfExists: ["preventOverflow"],
    fn: hide
  };

  // node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/popper.js
  var defaultModifiers = [
    eventListeners_default,
    popperOffsets_default,
    computeStyles_default,
    applyStyles_default,
    offset_default,
    flip_default,
    preventOverflow_default,
    arrow_default,
    hide_default
  ];
  var createPopper2 = popperGenerator({ defaultModifiers });

  // node_modules/@patternfly/react-core/dist/esm/helpers/useIsomorphicLayout.js
  var React15 = __toESM(require_react());
  var useIsomorphicLayoutEffect2 = canUseDOM ? React15.useLayoutEffect : React15.useEffect;

  // node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/react-popper/usePopper.js
  var isEqual = (a, b) => JSON.stringify(a) === JSON.stringify(b);
  var fromEntries = (entries) => entries.reduce((acc, [key, value]) => {
    acc[key] = value;
    return acc;
  }, {});
  var EMPTY_MODIFIERS = [];
  var usePopper = (referenceElement, popperElement, options = {}) => {
    const prevOptions = React16.useRef(null);
    const optionsWithDefaults = {
      onFirstUpdate: options.onFirstUpdate,
      placement: options.placement || "bottom",
      strategy: options.strategy || "absolute",
      modifiers: options.modifiers || EMPTY_MODIFIERS
    };
    const [state, setState] = React16.useState({
      styles: {
        popper: {
          position: optionsWithDefaults.strategy,
          left: "0",
          top: "0"
        }
      },
      attributes: {}
    });
    const updateStateModifier = React16.useMemo(() => ({
      name: "updateState",
      enabled: true,
      phase: "write",
      // eslint-disable-next-line no-shadow
      fn: ({ state: state2 }) => {
        const elements = Object.keys(state2.elements);
        setState({
          styles: fromEntries(elements.map((element) => [element, state2.styles[element] || {}])),
          attributes: fromEntries(elements.map((element) => [element, state2.attributes[element]]))
        });
      },
      requires: ["computeStyles"]
    }), []);
    const popperOptions = React16.useMemo(() => {
      const newOptions = {
        onFirstUpdate: optionsWithDefaults.onFirstUpdate,
        placement: optionsWithDefaults.placement,
        strategy: optionsWithDefaults.strategy,
        modifiers: [...optionsWithDefaults.modifiers, updateStateModifier, { name: "applyStyles", enabled: false }]
      };
      if (isEqual(prevOptions.current, newOptions)) {
        return prevOptions.current || newOptions;
      } else {
        prevOptions.current = newOptions;
        return newOptions;
      }
    }, [
      optionsWithDefaults.onFirstUpdate,
      optionsWithDefaults.placement,
      optionsWithDefaults.strategy,
      optionsWithDefaults.modifiers,
      updateStateModifier
    ]);
    const popperInstanceRef = React16.useRef();
    useIsomorphicLayoutEffect2(() => {
      if (popperInstanceRef && popperInstanceRef.current) {
        popperInstanceRef.current.setOptions(popperOptions);
      }
    }, [popperOptions]);
    useIsomorphicLayoutEffect2(() => {
      if (referenceElement == null || popperElement == null) {
        return;
      }
      const createPopper5 = options.createPopper || createPopper2;
      const popperInstance = createPopper5(referenceElement, popperElement, popperOptions);
      popperInstanceRef.current = popperInstance;
      return () => {
        popperInstance.destroy();
        popperInstanceRef.current = null;
      };
    }, [referenceElement, popperElement, options.createPopper]);
    return {
      state: popperInstanceRef.current ? popperInstanceRef.current.state : null,
      styles: state.styles,
      attributes: state.attributes,
      update: popperInstanceRef.current ? popperInstanceRef.current.update : null,
      forceUpdate: popperInstanceRef.current ? popperInstanceRef.current.forceUpdate : null
    };
  };

  // node_modules/@patternfly/react-core/dist/esm/helpers/Popper/Popper.js
  var hash3 = {
    left: "right",
    right: "left",
    bottom: "top",
    top: "bottom",
    "top-start": "bottom-end",
    "top-end": "bottom-start",
    "bottom-start": "top-end",
    "bottom-end": "top-start",
    "left-start": "right-end",
    "left-end": "right-start",
    "right-start": "left-end",
    "right-end": "left-start"
  };
  var getOppositePlacement2 = (placement) => placement.replace(/left|right|bottom|top|top-start|top-end|bottom-start|bottom-end|right-start|right-end|left-start|left-end/g, (matched) => hash3[matched]);
  var getOpacityTransition = (animationDuration) => `opacity ${animationDuration}ms cubic-bezier(.54, 1.5, .38, 1.11)`;
  var Popper = ({ trigger, popper: popper3, direction = "down", position = "start", placement, width, minWidth = "trigger", maxWidth, appendTo = "inline", zIndex = 9999, isVisible = true, positionModifiers, distance = 0, onMouseEnter, onMouseLeave, onFocus, onBlur, onDocumentClick, onTriggerClick, onTriggerEnter, onPopperClick, onPopperMouseEnter, onPopperMouseLeave, onDocumentKeyDown, enableFlip = true, flipBehavior = "flip", triggerRef, popperRef, animationDuration = 0, entryDelay = 0, exitDelay = 0, onHidden = () => {
  }, onHide = () => {
  }, onMount = () => {
  }, onShow = () => {
  }, onShown = () => {
  }, preventOverflow: preventOverflow3 = false }) => {
    var _a;
    const [triggerElement, setTriggerElement] = React17.useState(null);
    const [refElement, setRefElement] = React17.useState(null);
    const [popperElement, setPopperElement] = React17.useState(null);
    const [popperContent, setPopperContent] = React17.useState(null);
    const [ready, setReady] = React17.useState(false);
    const [opacity, setOpacity] = React17.useState(0);
    const [internalIsVisible, setInternalIsVisible] = React17.useState(isVisible);
    const transitionTimerRef = React17.useRef(null);
    const showTimerRef = React17.useRef(null);
    const hideTimerRef = React17.useRef(null);
    const prevExitDelayRef = React17.useRef();
    const refOrTrigger = refElement || triggerElement;
    const showPopper = isVisible || internalIsVisible;
    const triggerParent = (_a = (triggerRef === null || triggerRef === void 0 ? void 0 : triggerRef.current) || triggerElement) === null || _a === void 0 ? void 0 : _a.parentElement;
    const languageDirection = getLanguageDirection(triggerParent);
    const internalPosition = React17.useMemo(() => {
      const fixedPositions = { left: "left", right: "right", center: "center" };
      const positionMap = {
        ltr: Object.assign({ start: "left", end: "right" }, fixedPositions),
        rtl: Object.assign({ start: "right", end: "left" }, fixedPositions)
      };
      return positionMap[languageDirection][position];
    }, [position, languageDirection]);
    const onDocumentClickCallback = React17.useCallback((event) => onDocumentClick(event, refOrTrigger, popperElement), [showPopper, triggerElement, refElement, popperElement, onDocumentClick]);
    React17.useEffect(() => {
      setReady(true);
      onMount();
    }, []);
    React17.useEffect(() => () => {
      clearTimeouts([transitionTimerRef, hideTimerRef, showTimerRef]);
    }, []);
    React17.useEffect(() => {
      if (triggerRef) {
        if (triggerRef.current) {
          setRefElement(triggerRef.current);
        } else if (typeof triggerRef === "function") {
          setRefElement(triggerRef());
        }
      }
    }, [triggerRef, trigger]);
    React17.useEffect(() => {
      if (popperRef) {
        if (popperRef.current) {
          setPopperElement(popperRef.current);
        } else if (typeof popperRef === "function") {
          setPopperElement(popperRef());
        }
      }
    }, [showPopper, popperRef]);
    React17.useEffect(() => {
      const observer = new MutationObserver(() => {
        update && update();
      });
      popperElement && observer.observe(popperElement, { attributes: true, childList: true, subtree: true });
      return () => {
        observer.disconnect();
      };
    }, [popperElement]);
    const addEventListener = (listener, element, event, capture = false) => {
      if (listener && element) {
        element.addEventListener(event, listener, { capture });
      }
    };
    const removeEventListener = (listener, element, event, capture = false) => {
      if (listener && element) {
        element.removeEventListener(event, listener, { capture });
      }
    };
    React17.useEffect(() => {
      addEventListener(onMouseEnter, refOrTrigger, "mouseenter");
      addEventListener(onMouseLeave, refOrTrigger, "mouseleave");
      addEventListener(onFocus, refOrTrigger, "focus");
      addEventListener(onBlur, refOrTrigger, "blur");
      addEventListener(onTriggerClick, refOrTrigger, "click");
      addEventListener(onTriggerEnter, refOrTrigger, "keydown");
      addEventListener(onPopperClick, popperElement, "click");
      addEventListener(onPopperMouseEnter, popperElement, "mouseenter");
      addEventListener(onPopperMouseLeave, popperElement, "mouseleave");
      onDocumentClick && addEventListener(onDocumentClickCallback, document, "click", true);
      addEventListener(onDocumentKeyDown, document, "keydown", true);
      return () => {
        removeEventListener(onMouseEnter, refOrTrigger, "mouseenter");
        removeEventListener(onMouseLeave, refOrTrigger, "mouseleave");
        removeEventListener(onFocus, refOrTrigger, "focus");
        removeEventListener(onBlur, refOrTrigger, "blur");
        removeEventListener(onTriggerClick, refOrTrigger, "click");
        removeEventListener(onTriggerEnter, refOrTrigger, "keydown");
        removeEventListener(onPopperClick, popperElement, "click");
        removeEventListener(onPopperMouseEnter, popperElement, "mouseenter");
        removeEventListener(onPopperMouseLeave, popperElement, "mouseleave");
        onDocumentClick && removeEventListener(onDocumentClickCallback, document, "click", true);
        removeEventListener(onDocumentKeyDown, document, "keydown", true);
      };
    }, [
      triggerElement,
      popperElement,
      onMouseEnter,
      onMouseLeave,
      onFocus,
      onBlur,
      onTriggerClick,
      onTriggerEnter,
      onPopperClick,
      onPopperMouseEnter,
      onPopperMouseLeave,
      onDocumentClick,
      onDocumentKeyDown,
      refElement
    ]);
    const getPlacement = () => {
      if (placement) {
        return placement;
      }
      let convertedPlacement = direction === "up" ? "top" : "bottom";
      if (internalPosition !== "center") {
        convertedPlacement = `${convertedPlacement}-${internalPosition === "right" ? "end" : "start"}`;
      }
      return convertedPlacement;
    };
    const getPlacementMemo = React17.useMemo(getPlacement, [direction, internalPosition, placement]);
    const getOppositePlacementMemo = React17.useMemo(() => getOppositePlacement2(getPlacement()), [direction, internalPosition, placement]);
    const widthMods = React17.useMemo(() => ({
      name: "widthMods",
      enabled: width !== void 0 || minWidth !== void 0 || maxWidth !== void 0,
      phase: "beforeWrite",
      requires: ["computeStyles"],
      fn: ({ state }) => {
        const triggerWidth = state.rects.reference.width;
        if (width) {
          state.styles.popper.width = width === "trigger" ? `${triggerWidth}px` : width;
        }
        if (minWidth) {
          state.styles.popper.minWidth = minWidth === "trigger" ? `${triggerWidth}px` : minWidth;
        }
        if (maxWidth) {
          state.styles.popper.maxWidth = maxWidth === "trigger" ? `${triggerWidth}px` : maxWidth;
        }
      },
      effect: ({ state }) => {
        const triggerWidth = state.elements.reference.offsetWidth;
        if (width) {
          state.elements.popper.style.width = width === "trigger" ? `${triggerWidth}px` : width;
        }
        if (minWidth) {
          state.elements.popper.style.minWidth = minWidth === "trigger" ? `${triggerWidth}px` : minWidth;
        }
        if (maxWidth) {
          state.elements.popper.style.maxWidth = maxWidth === "trigger" ? `${triggerWidth}px` : maxWidth;
        }
        return () => {
        };
      }
    }), [width, minWidth, maxWidth]);
    const { styles: popperStyles, attributes, update, forceUpdate } = usePopper(refOrTrigger, popperElement, {
      placement: getPlacementMemo,
      modifiers: [
        {
          name: "offset",
          options: {
            offset: [0, distance]
          }
        },
        {
          name: "preventOverflow",
          enabled: preventOverflow3
        },
        {
          // adds attribute [data-popper-reference-hidden] to the popper element which can be used to hide it using CSS
          name: "hide",
          enabled: true
        },
        {
          name: "flip",
          enabled: getPlacementMemo.startsWith("auto") || enableFlip,
          options: {
            fallbackPlacements: flipBehavior === "flip" ? [getOppositePlacementMemo] : flipBehavior
          }
        },
        widthMods
      ]
    });
    React17.useEffect(() => {
      var _a2, _b, _c, _d, _e, _f, _g;
      const currentPopperContent = ((_d = (_c = (_b = (_a2 = popper3 === null || popper3 === void 0 ? void 0 : popper3.props) === null || _a2 === void 0 ? void 0 : _a2.children) === null || _b === void 0 ? void 0 : _b[1]) === null || _c === void 0 ? void 0 : _c.props) === null || _d === void 0 ? void 0 : _d.children) || ((_g = (_f = (_e = popper3 === null || popper3 === void 0 ? void 0 : popper3.props) === null || _e === void 0 ? void 0 : _e.children) === null || _f === void 0 ? void 0 : _f.props) === null || _g === void 0 ? void 0 : _g.children);
      setPopperContent(currentPopperContent);
      if (currentPopperContent && popperContent && currentPopperContent !== popperContent) {
        forceUpdate && forceUpdate();
      }
    }, [popper3]);
    React17.useEffect(() => {
      if (prevExitDelayRef.current < exitDelay) {
        clearTimeouts([transitionTimerRef, hideTimerRef]);
        hideTimerRef.current = setTimeout(() => {
          transitionTimerRef.current = setTimeout(() => {
            setInternalIsVisible(false);
          }, animationDuration);
        }, exitDelay);
      }
      prevExitDelayRef.current = exitDelay;
    }, [exitDelay]);
    const show = () => {
      onShow();
      clearTimeouts([transitionTimerRef, hideTimerRef]);
      showTimerRef.current = setTimeout(() => {
        setInternalIsVisible(true);
        setOpacity(1);
        onShown();
      }, entryDelay);
    };
    const hide3 = () => {
      onHide();
      clearTimeouts([showTimerRef]);
      hideTimerRef.current = setTimeout(() => {
        setOpacity(0);
        transitionTimerRef.current = setTimeout(() => {
          setInternalIsVisible(false);
          onHidden();
        }, animationDuration);
      }, exitDelay);
    };
    React17.useEffect(() => {
      if (isVisible) {
        show();
      } else {
        hide3();
      }
    }, [isVisible]);
    const modifierFromPopperPosition = () => {
      if (attributes && attributes.popper && attributes.popper["data-popper-placement"]) {
        const popperPlacement = attributes.popper["data-popper-placement"];
        return positionModifiers[popperPlacement];
      }
      return positionModifiers.top;
    };
    const options = Object.assign({ className: css(popper3.props && popper3.props.className, positionModifiers && modifierFromPopperPosition()), style: Object.assign(Object.assign(Object.assign({}, popper3.props && popper3.props.style || {}), popperStyles.popper), {
      zIndex,
      opacity,
      transition: getOpacityTransition(animationDuration)
    }) }, attributes.popper);
    const getMenuWithPopper = () => {
      const localPopper = React17.cloneElement(popper3, options);
      return popperRef ? localPopper : React17.createElement("div", { style: { display: "contents" }, ref: (node) => setPopperElement(node === null || node === void 0 ? void 0 : node.firstElementChild) }, localPopper);
    };
    const getPopper = () => {
      if (appendTo === "inline") {
        return getMenuWithPopper();
      } else {
        const target = typeof appendTo === "function" ? appendTo() : appendTo;
        return ReactDOM2.createPortal(getMenuWithPopper(), target);
      }
    };
    return React17.createElement(
      React17.Fragment,
      null,
      !triggerRef && trigger && React17.isValidElement(trigger) && React17.createElement("div", { style: { display: "contents" }, ref: (node) => setTriggerElement(node === null || node === void 0 ? void 0 : node.firstElementChild) }, trigger),
      triggerRef && trigger && React17.isValidElement(trigger) && trigger,
      ready && showPopper && getPopper()
    );
  };
  Popper.displayName = "Popper";

  // node_modules/@patternfly/react-core/dist/esm/helpers/KeyboardHandler.js
  var React18 = __toESM(require_react());
  var handleArrows = (event, navigableElements, isActiveElement = (element) => document.activeElement.contains(element), getFocusableElement = (element) => element, validSiblingTags = ["A", "BUTTON", "INPUT"], noVerticalArrowHandling = false, noHorizontalArrowHandling = false, updateTabIndex = true, onlyTraverseSiblings = true) => {
    const activeElement = document.activeElement;
    const key = event.key;
    let moveTarget = null;
    if (!noVerticalArrowHandling) {
      if (["ArrowUp", "ArrowDown"].includes(key)) {
        event.preventDefault();
        event.stopImmediatePropagation();
        let currentIndex = -1;
        navigableElements.forEach((element, index) => {
          if (isActiveElement(element)) {
            let increment = 0;
            while (!moveTarget && increment < navigableElements.length && increment * -1 < navigableElements.length) {
              key === "ArrowUp" ? increment-- : increment++;
              currentIndex = index + increment;
              if (currentIndex >= navigableElements.length) {
                currentIndex = 0;
              }
              if (currentIndex < 0) {
                currentIndex = navigableElements.length - 1;
              }
              moveTarget = getFocusableElement(navigableElements[currentIndex]);
            }
          }
        });
      }
    }
    if (!noHorizontalArrowHandling) {
      if (["ArrowLeft", "ArrowRight"].includes(key)) {
        event.preventDefault();
        event.stopImmediatePropagation();
        let currentIndex = -1;
        navigableElements.forEach((element, index) => {
          if (isActiveElement(element)) {
            const activeRow = navigableElements[index].querySelectorAll(validSiblingTags.join(","));
            if (!activeRow.length || onlyTraverseSiblings) {
              let nextSibling = activeElement;
              while (nextSibling) {
                nextSibling = key === "ArrowLeft" ? nextSibling.previousElementSibling : nextSibling.nextElementSibling;
                if (nextSibling) {
                  if (validSiblingTags.includes(nextSibling.tagName)) {
                    moveTarget = nextSibling;
                    break;
                  }
                }
              }
            } else {
              activeRow.forEach((focusableElement, index2) => {
                if (event.target === focusableElement) {
                  const increment = key === "ArrowLeft" ? -1 : 1;
                  currentIndex = index2 + increment;
                  if (currentIndex >= activeRow.length) {
                    currentIndex = 0;
                  }
                  if (currentIndex < 0) {
                    currentIndex = activeRow.length - 1;
                  }
                  moveTarget = activeRow[currentIndex];
                }
              });
            }
          }
        });
      }
    }
    if (moveTarget) {
      if (updateTabIndex) {
        activeElement.tabIndex = -1;
        moveTarget.tabIndex = 0;
      }
      moveTarget.focus();
    }
  };
  var onToggleArrowKeydownDefault = (event, menuRef) => {
    var _a;
    if (event.key !== "ArrowDown" && event.key !== "ArrowUp") {
      return;
    }
    event.preventDefault();
    const listItems = Array.from((_a = menuRef.current) === null || _a === void 0 ? void 0 : _a.querySelectorAll("li"));
    const focusableElements = listItems.map((li) => li.querySelector('button:not(:disabled),input:not(:disabled),a:not([aria-disabled="true"])')).filter((el) => el !== null);
    let focusableElement;
    if (event.key === "ArrowDown") {
      focusableElement = focusableElements[0];
    } else {
      focusableElement = focusableElements[focusableElements.length - 1];
    }
    focusableElement && focusableElement.focus();
  };
  var KeyboardHandler = class extends React18.Component {
    constructor() {
      super(...arguments);
      this.keyHandler = (event) => {
        const { isEventFromContainer } = this.props;
        if (isEventFromContainer ? !isEventFromContainer(event) : !this._isEventFromContainer(event)) {
          return;
        }
        const { isActiveElement, getFocusableElement, noVerticalArrowHandling, noHorizontalArrowHandling, noEnterHandling, noSpaceHandling, updateTabIndex, validSiblingTags, additionalKeyHandler, createNavigableElements, onlyTraverseSiblings } = this.props;
        additionalKeyHandler && additionalKeyHandler(event);
        const navigableElements = createNavigableElements();
        if (!navigableElements) {
          console.warn("No navigable elements have been passed to the KeyboardHandler. Keyboard navigation provided by this component will be ignored.");
          return;
        }
        const key = event.key;
        if (!noEnterHandling) {
          if (key === "Enter") {
            event.preventDefault();
            event.stopImmediatePropagation();
            document.activeElement.click();
          }
        }
        if (!noSpaceHandling) {
          if (key === " ") {
            event.preventDefault();
            event.stopImmediatePropagation();
            document.activeElement.click();
          }
        }
        handleArrows(event, navigableElements, isActiveElement, getFocusableElement, validSiblingTags, noVerticalArrowHandling, noHorizontalArrowHandling, updateTabIndex, onlyTraverseSiblings);
      };
      this._isEventFromContainer = (event) => {
        const { containerRef } = this.props;
        return containerRef.current && containerRef.current.contains(event.target);
      };
    }
    componentDidMount() {
      if (canUseDOM) {
        window.addEventListener("keydown", this.keyHandler);
      }
    }
    componentWillUnmount() {
      if (canUseDOM) {
        window.removeEventListener("keydown", this.keyHandler);
      }
    }
    render() {
      return null;
    }
  };
  KeyboardHandler.displayName = "KeyboardHandler";
  KeyboardHandler.defaultProps = {
    containerRef: null,
    createNavigableElements: () => null,
    isActiveElement: (navigableElement) => document.activeElement === navigableElement,
    getFocusableElement: (navigableElement) => navigableElement,
    validSiblingTags: ["BUTTON", "A"],
    onlyTraverseSiblings: true,
    updateTabIndex: true,
    noHorizontalArrowHandling: false,
    noVerticalArrowHandling: false,
    noEnterHandling: false,
    noSpaceHandling: false
  };

  // node_modules/@patternfly/react-core/dist/esm/helpers/resizeObserver.js
  var getResizeObserver = (containerRefElement, handleResize, useRequestAnimationFrame) => {
    let unobserve;
    if (canUseDOM) {
      const { ResizeObserver } = window;
      if (containerRefElement && ResizeObserver) {
        const resizeObserver = new ResizeObserver((entries) => {
          if (useRequestAnimationFrame) {
            window.requestAnimationFrame(() => {
              if (Array.isArray(entries) && entries.length > 0) {
                handleResize();
              }
            });
          } else {
            if (Array.isArray(entries) && entries.length > 0) {
              handleResize();
            }
          }
        });
        resizeObserver.observe(containerRefElement);
        unobserve = () => resizeObserver.unobserve(containerRefElement);
      } else {
        window.addEventListener("resize", handleResize);
        unobserve = () => window.removeEventListener("resize", handleResize);
      }
    }
    return () => {
      if (unobserve) {
        unobserve();
      }
    };
  };

  // node_modules/@patternfly/react-core/dist/esm/components/Title/Title.js
  var TitleSizes;
  (function(TitleSizes2) {
    TitleSizes2["md"] = "md";
    TitleSizes2["lg"] = "lg";
    TitleSizes2["xl"] = "xl";
    TitleSizes2["2xl"] = "2xl";
    TitleSizes2["3xl"] = "3xl";
    TitleSizes2["4xl"] = "4xl";
  })(TitleSizes || (TitleSizes = {}));
  var headingLevelSizeMap;
  (function(headingLevelSizeMap2) {
    headingLevelSizeMap2["h1"] = "2xl";
    headingLevelSizeMap2["h2"] = "xl";
    headingLevelSizeMap2["h3"] = "lg";
    headingLevelSizeMap2["h4"] = "md";
    headingLevelSizeMap2["h5"] = "md";
    headingLevelSizeMap2["h6"] = "md";
  })(headingLevelSizeMap || (headingLevelSizeMap = {}));
  var Title = (_a) => {
    var { className = "", children = "", headingLevel: HeadingLevel, size = headingLevelSizeMap[HeadingLevel], ouiaId, ouiaSafe = true } = _a, props = __rest(_a, ["className", "children", "headingLevel", "size", "ouiaId", "ouiaSafe"]);
    const ouiaProps = useOUIAProps(Title.displayName, ouiaId, ouiaSafe);
    return React19.createElement(HeadingLevel, Object.assign({}, ouiaProps, props, { className: css(title_default.title, size && title_default.modifiers[size], className) }), children);
  };
  Title.displayName = "Title";

  // node_modules/@patternfly/react-core/dist/esm/components/Button/Button.js
  var React22 = __toESM(require_react());

  // node_modules/@patternfly/react-styles/css/components/Button/button.mjs
  var button_default = {
    "badge": "pf-v5-c-badge",
    "button": "pf-v5-c-button",
    "buttonCount": "pf-v5-c-button__count",
    "buttonIcon": "pf-v5-c-button__icon",
    "buttonProgress": "pf-v5-c-button__progress",
    "modifiers": {
      "active": "pf-m-active",
      "block": "pf-m-block",
      "small": "pf-m-small",
      "primary": "pf-m-primary",
      "displayLg": "pf-m-display-lg",
      "secondary": "pf-m-secondary",
      "tertiary": "pf-m-tertiary",
      "link": "pf-m-link",
      "unread": "pf-m-unread",
      "inline": "pf-m-inline",
      "danger": "pf-m-danger",
      "warning": "pf-m-warning",
      "control": "pf-m-control",
      "expanded": "pf-m-expanded",
      "plain": "pf-m-plain",
      "noPadding": "pf-m-no-padding",
      "disabled": "pf-m-disabled",
      "ariaDisabled": "pf-m-aria-disabled",
      "progress": "pf-m-progress",
      "inProgress": "pf-m-in-progress",
      "start": "pf-m-start",
      "end": "pf-m-end"
    },
    "spinner": "pf-v5-c-spinner",
    "themeDark": "pf-v5-theme-dark"
  };

  // node_modules/@patternfly/react-core/dist/esm/components/Spinner/Spinner.js
  var React20 = __toESM(require_react());

  // node_modules/@patternfly/react-styles/css/components/Spinner/spinner.mjs
  var spinner_default = {
    "modifiers": {
      "inline": "pf-m-inline",
      "sm": "pf-m-sm",
      "md": "pf-m-md",
      "lg": "pf-m-lg",
      "xl": "pf-m-xl"
    },
    "spinner": "pf-v5-c-spinner",
    "spinnerPath": "pf-v5-c-spinner__path"
  };

  // node_modules/@patternfly/react-tokens/dist/esm/c_spinner_diameter.js
  var c_spinner_diameter = {
    "name": "--pf-v5-c-spinner--diameter",
    "value": "3.375rem",
    "var": "var(--pf-v5-c-spinner--diameter)"
  };
  var c_spinner_diameter_default = c_spinner_diameter;

  // node_modules/@patternfly/react-core/dist/esm/components/Spinner/Spinner.js
  var spinnerSize;
  (function(spinnerSize3) {
    spinnerSize3["sm"] = "sm";
    spinnerSize3["md"] = "md";
    spinnerSize3["lg"] = "lg";
    spinnerSize3["xl"] = "xl";
  })(spinnerSize || (spinnerSize = {}));
  var Spinner = (_a) => {
    var { className = "", size = "xl", "aria-valuetext": ariaValueText = "Loading...", diameter, isInline = false, "aria-label": ariaLabel, "aria-labelledBy": ariaLabelledBy } = _a, props = __rest(_a, ["className", "size", "aria-valuetext", "diameter", "isInline", "aria-label", "aria-labelledBy"]);
    return React20.createElement(
      "svg",
      Object.assign({ className: css(spinner_default.spinner, isInline ? spinner_default.modifiers.inline : spinner_default.modifiers[size], className), role: "progressbar", "aria-valuetext": ariaValueText, viewBox: "0 0 100 100" }, diameter && { style: { [c_spinner_diameter_default.name]: diameter } }, ariaLabel && { "aria-label": ariaLabel }, ariaLabelledBy && { "aria-labelledBy": ariaLabelledBy }, !ariaLabel && !ariaLabelledBy && { "aria-label": "Contents" }, props),
      React20.createElement("circle", { className: spinner_default.spinnerPath, cx: "50", cy: "50", r: "45", fill: "none" })
    );
  };
  Spinner.displayName = "Spinner";

  // node_modules/@patternfly/react-core/dist/esm/components/Badge/Badge.js
  var React21 = __toESM(require_react());

  // node_modules/@patternfly/react-styles/css/components/Badge/badge.mjs
  var badge_default = {
    "badge": "pf-v5-c-badge",
    "modifiers": {
      "read": "pf-m-read",
      "unread": "pf-m-unread"
    },
    "themeDark": "pf-v5-theme-dark"
  };

  // node_modules/@patternfly/react-core/dist/esm/components/Badge/Badge.js
  var Badge = (_a) => {
    var { isRead = false, className = "", children = "", screenReaderText } = _a, props = __rest(_a, ["isRead", "className", "children", "screenReaderText"]);
    return React21.createElement(
      "span",
      Object.assign({}, props, { className: css(badge_default.badge, isRead ? badge_default.modifiers.read : badge_default.modifiers.unread, className) }),
      children,
      screenReaderText && React21.createElement("span", { className: "pf-v5-screen-reader" }, screenReaderText)
    );
  };
  Badge.displayName = "Badge";

  // node_modules/@patternfly/react-core/dist/esm/components/Button/Button.js
  var ButtonVariant;
  (function(ButtonVariant3) {
    ButtonVariant3["primary"] = "primary";
    ButtonVariant3["secondary"] = "secondary";
    ButtonVariant3["tertiary"] = "tertiary";
    ButtonVariant3["danger"] = "danger";
    ButtonVariant3["warning"] = "warning";
    ButtonVariant3["link"] = "link";
    ButtonVariant3["plain"] = "plain";
    ButtonVariant3["control"] = "control";
  })(ButtonVariant || (ButtonVariant = {}));
  var ButtonType;
  (function(ButtonType3) {
    ButtonType3["button"] = "button";
    ButtonType3["submit"] = "submit";
    ButtonType3["reset"] = "reset";
  })(ButtonType || (ButtonType = {}));
  var ButtonSize;
  (function(ButtonSize3) {
    ButtonSize3["default"] = "default";
    ButtonSize3["sm"] = "sm";
    ButtonSize3["lg"] = "lg";
  })(ButtonSize || (ButtonSize = {}));
  var ButtonBase = (_a) => {
    var { children = null, className = "", component = "button", isActive = false, isBlock = false, isDisabled = false, isAriaDisabled = false, isLoading = null, isDanger = false, spinnerAriaValueText, spinnerAriaLabelledBy, spinnerAriaLabel, size = ButtonSize.default, inoperableEvents = ["onClick", "onKeyPress"], isInline = false, type = ButtonType.button, variant = ButtonVariant.primary, iconPosition = "start", "aria-label": ariaLabel = null, icon = null, ouiaId, ouiaSafe = true, tabIndex = null, innerRef, countOptions } = _a, props = __rest(_a, ["children", "className", "component", "isActive", "isBlock", "isDisabled", "isAriaDisabled", "isLoading", "isDanger", "spinnerAriaValueText", "spinnerAriaLabelledBy", "spinnerAriaLabel", "size", "inoperableEvents", "isInline", "type", "variant", "iconPosition", "aria-label", "icon", "ouiaId", "ouiaSafe", "tabIndex", "innerRef", "countOptions"]);
    const ouiaProps = useOUIAProps(Button.displayName, ouiaId, ouiaSafe, variant);
    const Component20 = component;
    const isButtonElement2 = Component20 === "button";
    const isInlineSpan = isInline && Component20 === "span";
    const preventedEvents = inoperableEvents.reduce((handlers, eventToPrevent) => Object.assign(Object.assign({}, handlers), { [eventToPrevent]: (event) => {
      event.preventDefault();
    } }), {});
    const getDefaultTabIdx = () => {
      if (isDisabled) {
        return isButtonElement2 ? null : -1;
      } else if (isAriaDisabled) {
        return null;
      } else if (isInlineSpan) {
        return 0;
      }
    };
    return React22.createElement(
      Component20,
      Object.assign({}, props, isAriaDisabled ? preventedEvents : null, { "aria-disabled": isDisabled || isAriaDisabled, "aria-label": ariaLabel, className: css(button_default.button, button_default.modifiers[variant], isBlock && button_default.modifiers.block, isDisabled && button_default.modifiers.disabled, isAriaDisabled && button_default.modifiers.ariaDisabled, isActive && button_default.modifiers.active, isInline && variant === ButtonVariant.link && button_default.modifiers.inline, isDanger && (variant === ButtonVariant.secondary || variant === ButtonVariant.link) && button_default.modifiers.danger, isLoading !== null && variant !== ButtonVariant.plain && button_default.modifiers.progress, isLoading && button_default.modifiers.inProgress, size === ButtonSize.sm && button_default.modifiers.small, size === ButtonSize.lg && button_default.modifiers.displayLg, className), disabled: isButtonElement2 ? isDisabled : null, tabIndex: tabIndex !== null ? tabIndex : getDefaultTabIdx(), type: isButtonElement2 || isInlineSpan ? type : null, role: isInlineSpan ? "button" : null, ref: innerRef }, ouiaProps),
      isLoading && React22.createElement(
        "span",
        { className: css(button_default.buttonProgress) },
        React22.createElement(Spinner, { size: spinnerSize.md, isInline, "aria-valuetext": spinnerAriaValueText, "aria-label": spinnerAriaLabel, "aria-labelledby": spinnerAriaLabelledBy })
      ),
      variant === ButtonVariant.plain && children === null && icon ? icon : null,
      variant !== ButtonVariant.plain && icon && (iconPosition === "start" || iconPosition === "left") && React22.createElement("span", { className: css(button_default.buttonIcon, button_default.modifiers.start) }, icon),
      children,
      variant !== ButtonVariant.plain && icon && (iconPosition === "end" || iconPosition === "right") && React22.createElement("span", { className: css(button_default.buttonIcon, button_default.modifiers.end) }, icon),
      countOptions && React22.createElement(
        "span",
        { className: css(button_default.buttonCount, countOptions.className) },
        React22.createElement(Badge, { isRead: countOptions.isRead }, countOptions.count)
      )
    );
  };
  var Button = React22.forwardRef((props, ref) => React22.createElement(ButtonBase, Object.assign({ innerRef: ref }, props)));
  Button.displayName = "Button";

  // node_modules/@patternfly/react-icons/dist/esm/createIcon.js
  var React23 = __toESM(require_react());
  var currentId2 = 0;
  function createIcon({ name, xOffset = 0, yOffset = 0, width, height, svgPath }) {
    var _a;
    return _a = class SVGIcon extends React23.Component {
      constructor() {
        super(...arguments);
        this.id = `icon-title-${currentId2++}`;
      }
      render() {
        const _b = this.props, { title, className } = _b, props = __rest(_b, ["title", "className"]);
        const classes = className ? `pf-v5-svg ${className}` : "pf-v5-svg";
        const hasTitle = Boolean(title);
        const viewBox = [xOffset, yOffset, width, height].join(" ");
        return React23.createElement(
          "svg",
          Object.assign({ className: classes, viewBox, fill: "currentColor", "aria-labelledby": hasTitle ? this.id : null, "aria-hidden": hasTitle ? null : true, role: "img", width: "1em", height: "1em" }, props),
          hasTitle && React23.createElement("title", { id: this.id }, title),
          React23.createElement("path", { d: svgPath })
        );
      }
    }, _a.displayName = name, _a;
  }

  // node_modules/@patternfly/react-core/dist/esm/components/Tooltip/Tooltip.js
  var React26 = __toESM(require_react());

  // node_modules/@patternfly/react-styles/css/components/Tooltip/tooltip.mjs
  var tooltip_default = {
    "modifiers": {
      "top": "pf-m-top",
      "topLeft": "pf-m-top-left",
      "topRight": "pf-m-top-right",
      "bottom": "pf-m-bottom",
      "bottomLeft": "pf-m-bottom-left",
      "bottomRight": "pf-m-bottom-right",
      "left": "pf-m-left",
      "leftTop": "pf-m-left-top",
      "leftBottom": "pf-m-left-bottom",
      "right": "pf-m-right",
      "rightTop": "pf-m-right-top",
      "rightBottom": "pf-m-right-bottom",
      "textAlignLeft": "pf-m-text-align-left"
    },
    "themeDark": "pf-v5-theme-dark",
    "tooltip": "pf-v5-c-tooltip",
    "tooltipArrow": "pf-v5-c-tooltip__arrow",
    "tooltipContent": "pf-v5-c-tooltip__content"
  };

  // node_modules/@patternfly/react-core/dist/esm/components/Tooltip/TooltipContent.js
  var React24 = __toESM(require_react());
  var TooltipContent = (_a) => {
    var { className, children, isLeftAligned } = _a, props = __rest(_a, ["className", "children", "isLeftAligned"]);
    return React24.createElement("div", Object.assign({ className: css(tooltip_default.tooltipContent, isLeftAligned && tooltip_default.modifiers.textAlignLeft, className) }, props), children);
  };
  TooltipContent.displayName = "TooltipContent";

  // node_modules/@patternfly/react-core/dist/esm/components/Tooltip/TooltipArrow.js
  var React25 = __toESM(require_react());
  var TooltipArrow = (_a) => {
    var { className } = _a, props = __rest(_a, ["className"]);
    return React25.createElement("div", Object.assign({ className: css(tooltip_default.tooltipArrow, className) }, props));
  };
  TooltipArrow.displayName = "TooltipArrow";

  // node_modules/@patternfly/react-tokens/dist/esm/c_tooltip_MaxWidth.js
  var c_tooltip_MaxWidth = {
    "name": "--pf-v5-c-tooltip--MaxWidth",
    "value": "18.75rem",
    "var": "var(--pf-v5-c-tooltip--MaxWidth)"
  };
  var c_tooltip_MaxWidth_default = c_tooltip_MaxWidth;

  // node_modules/@patternfly/react-core/dist/esm/components/Tooltip/Tooltip.js
  var TooltipPosition;
  (function(TooltipPosition3) {
    TooltipPosition3["auto"] = "auto";
    TooltipPosition3["top"] = "top";
    TooltipPosition3["bottom"] = "bottom";
    TooltipPosition3["left"] = "left";
    TooltipPosition3["right"] = "right";
    TooltipPosition3["topStart"] = "top-start";
    TooltipPosition3["topEnd"] = "top-end";
    TooltipPosition3["bottomStart"] = "bottom-start";
    TooltipPosition3["bottomEnd"] = "bottom-end";
    TooltipPosition3["leftStart"] = "left-start";
    TooltipPosition3["leftEnd"] = "left-end";
    TooltipPosition3["rightStart"] = "right-start";
    TooltipPosition3["rightEnd"] = "right-end";
  })(TooltipPosition || (TooltipPosition = {}));
  var pfTooltipIdCounter = 1;
  var Tooltip = (_a) => {
    var {
      content: bodyContent,
      position = "top",
      trigger = "mouseenter focus",
      isVisible = false,
      isContentLeftAligned = false,
      enableFlip = true,
      className = "",
      entryDelay = 300,
      exitDelay = 300,
      appendTo = () => document.body,
      zIndex = 9999,
      minWidth,
      maxWidth = c_tooltip_MaxWidth_default.value,
      distance = 15,
      aria = "describedby",
      // For every initial starting position, there are 3 escape positions
      flipBehavior = ["top", "right", "bottom", "left", "top", "right", "bottom"],
      id = `pf-tooltip-${pfTooltipIdCounter++}`,
      children,
      animationDuration = 300,
      triggerRef,
      "aria-live": ariaLive = triggerRef ? "polite" : "off",
      onTooltipHidden = () => {
      }
    } = _a, rest = __rest(_a, ["content", "position", "trigger", "isVisible", "isContentLeftAligned", "enableFlip", "className", "entryDelay", "exitDelay", "appendTo", "zIndex", "minWidth", "maxWidth", "distance", "aria", "flipBehavior", "id", "children", "animationDuration", "triggerRef", "aria-live", "onTooltipHidden"]);
    const hideOnClick = true;
    const triggerOnMouseenter = trigger.includes("mouseenter");
    const triggerOnFocus = trigger.includes("focus");
    const triggerOnClick = trigger.includes("click");
    const triggerManually = trigger === "manual";
    const [visible, setVisible] = React26.useState(false);
    const popperRef = React26.createRef();
    const onDocumentKeyDown = (event) => {
      if (!triggerManually) {
        if (event.key === KeyTypes.Escape && visible) {
          hide3();
        }
      }
    };
    const onTriggerEnter = (event) => {
      if (event.key === KeyTypes.Enter) {
        if (!visible) {
          show();
        } else {
          hide3();
        }
      }
    };
    React26.useEffect(() => {
      if (isVisible) {
        show();
      } else {
        hide3();
      }
    }, [isVisible]);
    const show = () => {
      setVisible(true);
    };
    const hide3 = () => {
      setVisible(false);
    };
    const positionModifiers = {
      top: tooltip_default.modifiers.top,
      bottom: tooltip_default.modifiers.bottom,
      left: tooltip_default.modifiers.left,
      right: tooltip_default.modifiers.right,
      "top-start": tooltip_default.modifiers.topLeft,
      "top-end": tooltip_default.modifiers.topRight,
      "bottom-start": tooltip_default.modifiers.bottomLeft,
      "bottom-end": tooltip_default.modifiers.bottomRight,
      "left-start": tooltip_default.modifiers.leftTop,
      "left-end": tooltip_default.modifiers.leftBottom,
      "right-start": tooltip_default.modifiers.rightTop,
      "right-end": tooltip_default.modifiers.rightBottom
    };
    const hasCustomMaxWidth = maxWidth !== c_tooltip_MaxWidth_default.value;
    const content = React26.createElement(
      "div",
      Object.assign({ "aria-live": ariaLive, className: css(tooltip_default.tooltip, className), role: "tooltip", id, style: {
        maxWidth: hasCustomMaxWidth ? maxWidth : null
      }, ref: popperRef }, rest),
      React26.createElement(TooltipArrow, null),
      React26.createElement(TooltipContent, { isLeftAligned: isContentLeftAligned }, bodyContent)
    );
    const onDocumentClick = (event, triggerElement) => {
      if (hideOnClick === true) {
        if (visible) {
          hide3();
        } else if (event.target === triggerElement) {
          show();
        }
      } else if (hideOnClick === "toggle" && event.target === triggerElement) {
        if (visible) {
          hide3();
        } else {
          show();
        }
      } else if (hideOnClick === false && !visible && event.target === triggerElement) {
        show();
      }
    };
    const addAriaToTrigger = () => {
      if (aria === "describedby" && children && children.props && !children.props["aria-describedby"]) {
        return React26.cloneElement(children, { "aria-describedby": id });
      } else if (aria === "labelledby" && children.props && !children.props["aria-labelledby"]) {
        return React26.cloneElement(children, { "aria-labelledby": id });
      }
      return children;
    };
    return React26.createElement(Popper, { trigger: aria !== "none" && visible ? addAriaToTrigger() : children, triggerRef, popper: content, popperRef, minWidth: minWidth !== void 0 ? minWidth : "revert", appendTo, isVisible: visible, positionModifiers, distance, placement: position, onMouseEnter: triggerOnMouseenter && show, onMouseLeave: triggerOnMouseenter && hide3, onPopperMouseEnter: triggerOnMouseenter && show, onPopperMouseLeave: triggerOnMouseenter && hide3, onFocus: triggerOnFocus && show, onBlur: triggerOnFocus && hide3, onDocumentClick: triggerOnClick && onDocumentClick, onDocumentKeyDown: triggerManually ? null : onDocumentKeyDown, onTriggerEnter: triggerManually ? null : onTriggerEnter, enableFlip, zIndex, flipBehavior, animationDuration, entryDelay, exitDelay, onHidden: onTooltipHidden });
  };
  Tooltip.displayName = "Tooltip";

  // node_modules/@patternfly/react-icons/dist/esm/icons/check-circle-icon.js
  var CheckCircleIconConfig = {
    name: "CheckCircleIcon",
    height: 512,
    width: 512,
    svgPath: "M504 256c0 136.967-111.033 248-248 248S8 392.967 8 256 119.033 8 256 8s248 111.033 248 248zM227.314 387.314l184-184c6.248-6.248 6.248-16.379 0-22.627l-22.627-22.627c-6.248-6.249-16.379-6.249-22.628 0L216 308.118l-70.059-70.059c-6.248-6.248-16.379-6.248-22.628 0l-22.627 22.627c-6.248 6.248-6.248 16.379 0 22.627l104 104c6.249 6.249 16.379 6.249 22.628.001z",
    yOffset: 0,
    xOffset: 0
  };
  var CheckCircleIcon = createIcon(CheckCircleIconConfig);
  var check_circle_icon_default = CheckCircleIcon;

  // node_modules/@patternfly/react-icons/dist/esm/icons/exclamation-circle-icon.js
  var ExclamationCircleIconConfig = {
    name: "ExclamationCircleIcon",
    height: 512,
    width: 512,
    svgPath: "M504 256c0 136.997-111.043 248-248 248S8 392.997 8 256C8 119.083 119.043 8 256 8s248 111.083 248 248zm-248 50c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z",
    yOffset: 0,
    xOffset: 0
  };
  var ExclamationCircleIcon = createIcon(ExclamationCircleIconConfig);
  var exclamation_circle_icon_default = ExclamationCircleIcon;

  // node_modules/@patternfly/react-icons/dist/esm/icons/exclamation-triangle-icon.js
  var ExclamationTriangleIconConfig = {
    name: "ExclamationTriangleIcon",
    height: 512,
    width: 576,
    svgPath: "M569.517 440.013C587.975 472.007 564.806 512 527.94 512H48.054c-36.937 0-59.999-40.055-41.577-71.987L246.423 23.985c18.467-32.009 64.72-31.951 83.154 0l239.94 416.028zM288 354c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z",
    yOffset: 0,
    xOffset: 0
  };
  var ExclamationTriangleIcon = createIcon(ExclamationTriangleIconConfig);
  var exclamation_triangle_icon_default = ExclamationTriangleIcon;

  // node_modules/@patternfly/react-icons/dist/esm/icons/info-circle-icon.js
  var InfoCircleIconConfig = {
    name: "InfoCircleIcon",
    height: 512,
    width: 512,
    svgPath: "M256 8C119.043 8 8 119.083 8 256c0 136.997 111.043 248 248 248s248-111.003 248-248C504 119.083 392.957 8 256 8zm0 110c23.196 0 42 18.804 42 42s-18.804 42-42 42-42-18.804-42-42 18.804-42 42-42zm56 254c0 6.627-5.373 12-12 12h-88c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h12v-64h-12c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h64c6.627 0 12 5.373 12 12v100h12c6.627 0 12 5.373 12 12v24z",
    yOffset: 0,
    xOffset: 0
  };
  var InfoCircleIcon = createIcon(InfoCircleIconConfig);
  var info_circle_icon_default = InfoCircleIcon;

  // node_modules/@patternfly/react-icons/dist/esm/icons/bell-icon.js
  var BellIconConfig = {
    name: "BellIcon",
    height: 1024,
    width: 896,
    svgPath: "M448,0 C465.333333,0 480.333333,6.33333333 493,19 C505.666667,31.6666667 512,46.6666667 512,64 L512,106 L514.23,106.45 C587.89,121.39 648.48,157.24 696,214 C744,271.333333 768,338.666667 768,416 C768,500 780,568.666667 804,622 C818.666667,652.666667 841.333333,684 872,716 C873.773676,718.829136 875.780658,721.505113 878,724 C890,737.333333 896,752.333333 896,769 C896,785.666667 890,800.333333 878,813 C866,825.666667 850.666667,832 832,832 L63.3,832 C44.9533333,831.84 29.8533333,825.506667 18,813 C6,800.333333 0,785.666667 0,769 C0,752.333333 6,737.333333 18,724 L24,716 L25.06,714.9 C55.1933333,683.28 77.5066667,652.313333 92,622 C116,568.666667 128,500 128,416 C128,338.666667 152,271.333333 200,214 C248,156.666667 309.333333,120.666667 384,106 L384,63.31 C384.166667,46.27 390.5,31.5 403,19 C415.666667,6.33333333 430.666667,0 448,0 Z M576,896 L576,897.08 C575.74,932.6 563.073333,962.573333 538,987 C512.666667,1011.66667 482.666667,1024 448,1024 C413.333333,1024 383.333333,1011.66667 358,987 C332.666667,962.333333 320,932 320,896 L576,896 Z",
    yOffset: 0,
    xOffset: 0
  };
  var BellIcon = createIcon(BellIconConfig);
  var bell_icon_default = BellIcon;

  // node_modules/@patternfly/react-icons/dist/esm/icons/angle-right-icon.js
  var AngleRightIconConfig = {
    name: "AngleRightIcon",
    height: 512,
    width: 256,
    svgPath: "M224.3 273l-136 136c-9.4 9.4-24.6 9.4-33.9 0l-22.6-22.6c-9.4-9.4-9.4-24.6 0-33.9l96.4-96.4-96.4-96.4c-9.4-9.4-9.4-24.6 0-33.9L54.3 103c9.4-9.4 24.6-9.4 33.9 0l136 136c9.5 9.4 9.5 24.6.1 34z",
    yOffset: 0,
    xOffset: 0
  };
  var AngleRightIcon = createIcon(AngleRightIconConfig);
  var angle_right_icon_default = AngleRightIcon;

  // node_modules/@patternfly/react-core/dist/esm/components/Alert/Alert.js
  var React30 = __toESM(require_react());
  var import_react2 = __toESM(require_react());

  // node_modules/@patternfly/react-styles/css/components/Alert/alert.mjs
  var alert_default = {
    "alert": "pf-v5-c-alert",
    "alertAction": "pf-v5-c-alert__action",
    "alertActionGroup": "pf-v5-c-alert__action-group",
    "alertDescription": "pf-v5-c-alert__description",
    "alertIcon": "pf-v5-c-alert__icon",
    "alertTitle": "pf-v5-c-alert__title",
    "alertToggle": "pf-v5-c-alert__toggle",
    "alertToggleIcon": "pf-v5-c-alert__toggle-icon",
    "button": "pf-v5-c-button",
    "dirRtl": "pf-v5-m-dir-rtl",
    "modifiers": {
      "custom": "pf-m-custom",
      "success": "pf-m-success",
      "danger": "pf-m-danger",
      "warning": "pf-m-warning",
      "info": "pf-m-info",
      "inline": "pf-m-inline",
      "plain": "pf-m-plain",
      "expandable": "pf-m-expandable",
      "expanded": "pf-m-expanded",
      "truncate": "pf-m-truncate"
    },
    "themeDark": "pf-v5-theme-dark"
  };

  // node_modules/@patternfly/react-core/dist/esm/components/Alert/AlertIcon.js
  var React27 = __toESM(require_react());
  var variantIcons = {
    success: check_circle_icon_default,
    danger: exclamation_circle_icon_default,
    warning: exclamation_triangle_icon_default,
    info: info_circle_icon_default,
    custom: bell_icon_default
  };
  var AlertIcon = (_a) => {
    var { variant, customIcon, className = "" } = _a, props = __rest(_a, ["variant", "customIcon", "className"]);
    const Icon = variantIcons[variant];
    return Icon ? React27.createElement("div", Object.assign({}, props, { className: css(alert_default.alertIcon, className) }), customIcon || React27.createElement(Icon, null)) : null;
  };

  // node_modules/@patternfly/react-core/dist/esm/components/Alert/AlertContext.js
  var React28 = __toESM(require_react());
  var AlertContext = React28.createContext(null);

  // node_modules/@patternfly/react-tokens/dist/esm/c_alert__title_max_lines.js
  var c_alert__title_max_lines = {
    "name": "--pf-v5-c-alert__title--max-lines",
    "value": "1",
    "var": "var(--pf-v5-c-alert__title--max-lines)"
  };
  var c_alert_title_max_lines_default = c_alert__title_max_lines;

  // node_modules/@patternfly/react-core/dist/esm/components/Alert/AlertToggleExpandButton.js
  var React29 = __toESM(require_react());
  var AlertToggleExpandButton = (_a) => {
    var { "aria-label": ariaLabel = "", variantLabel, onToggleExpand, isExpanded = false } = _a, props = __rest(_a, ["aria-label", "variantLabel", "onToggleExpand", "isExpanded"]);
    const { title, variantLabel: alertVariantLabel } = React29.useContext(AlertContext);
    return React29.createElement(
      Button,
      Object.assign({ variant: ButtonVariant.plain, onClick: onToggleExpand, "aria-expanded": isExpanded, "aria-label": ariaLabel === "" ? `Toggle ${variantLabel || alertVariantLabel} alert: ${title}` : ariaLabel }, props),
      React29.createElement(
        "span",
        { className: css(alert_default.alertToggleIcon) },
        React29.createElement(angle_right_icon_default, { "aria-hidden": "true" })
      )
    );
  };
  AlertToggleExpandButton.displayName = "AlertToggleExpandButton";

  // node_modules/@patternfly/react-core/dist/esm/components/Alert/Alert.js
  var AlertVariant;
  (function(AlertVariant2) {
    AlertVariant2["success"] = "success";
    AlertVariant2["danger"] = "danger";
    AlertVariant2["warning"] = "warning";
    AlertVariant2["info"] = "info";
    AlertVariant2["custom"] = "custom";
  })(AlertVariant || (AlertVariant = {}));
  var Alert = (_a) => {
    var { variant = AlertVariant.custom, isInline = false, isPlain = false, isLiveRegion = false, variantLabel = `${capitalize(variant)} alert:`, actionClose, actionLinks, title, component = "h4", children = "", className = "", ouiaId, ouiaSafe = true, timeout = false, timeoutAnimation = 3e3, onTimeout = () => {
    }, truncateTitle = 0, tooltipPosition, customIcon, isExpandable = false, toggleAriaLabel = `${capitalize(variant)} alert details`, onMouseEnter = () => {
    }, onMouseLeave = () => {
    }, id } = _a, props = __rest(_a, ["variant", "isInline", "isPlain", "isLiveRegion", "variantLabel", "actionClose", "actionLinks", "title", "component", "children", "className", "ouiaId", "ouiaSafe", "timeout", "timeoutAnimation", "onTimeout", "truncateTitle", "tooltipPosition", "customIcon", "isExpandable", "toggleAriaLabel", "onMouseEnter", "onMouseLeave", "id"]);
    const ouiaProps = useOUIAProps(Alert.displayName, ouiaId, ouiaSafe, variant);
    const getHeadingContent = React30.createElement(
      React30.Fragment,
      null,
      React30.createElement("span", { className: "pf-v5-screen-reader" }, variantLabel),
      title
    );
    const titleRef = React30.useRef(null);
    const TitleComponent = component;
    const divRef = React30.useRef();
    const [isTooltipVisible, setIsTooltipVisible] = (0, import_react2.useState)(false);
    React30.useEffect(() => {
      if (!titleRef.current || !truncateTitle) {
        return;
      }
      titleRef.current.style.setProperty(c_alert_title_max_lines_default.name, truncateTitle.toString());
      const showTooltip = titleRef.current && titleRef.current.offsetHeight < titleRef.current.scrollHeight;
      if (isTooltipVisible !== showTooltip) {
        setIsTooltipVisible(showTooltip);
      }
    }, [titleRef, truncateTitle, isTooltipVisible]);
    const [timedOut, setTimedOut] = (0, import_react2.useState)(false);
    const [timedOutAnimation, setTimedOutAnimation] = (0, import_react2.useState)(true);
    const [isMouseOver, setIsMouseOver] = (0, import_react2.useState)();
    const [containsFocus, setContainsFocus] = (0, import_react2.useState)();
    const dismissed = timedOut && timedOutAnimation && !isMouseOver && !containsFocus;
    React30.useEffect(() => {
      const calculatedTimeout = timeout === true ? 8e3 : Number(timeout);
      if (calculatedTimeout > 0) {
        const timer = setTimeout(() => setTimedOut(true), calculatedTimeout);
        return () => clearTimeout(timer);
      }
    }, [timeout]);
    React30.useEffect(() => {
      const onDocumentFocus = () => {
        if (divRef.current) {
          if (divRef.current.contains(document.activeElement)) {
            setContainsFocus(true);
            setTimedOutAnimation(false);
          } else if (containsFocus) {
            setContainsFocus(false);
          }
        }
      };
      document.addEventListener("focus", onDocumentFocus, true);
      return () => document.removeEventListener("focus", onDocumentFocus, true);
    }, [containsFocus]);
    React30.useEffect(() => {
      if (containsFocus === false || isMouseOver === false) {
        const timer = setTimeout(() => setTimedOutAnimation(true), timeoutAnimation);
        return () => clearTimeout(timer);
      }
    }, [containsFocus, isMouseOver, timeoutAnimation]);
    React30.useEffect(() => {
      dismissed && onTimeout();
    }, [dismissed, onTimeout]);
    const [isExpanded, setIsExpanded] = (0, import_react2.useState)(false);
    const onToggleExpand = () => {
      setIsExpanded(!isExpanded);
    };
    const myOnMouseEnter = (ev) => {
      setIsMouseOver(true);
      setTimedOutAnimation(false);
      onMouseEnter(ev);
    };
    const myOnMouseLeave = (ev) => {
      setIsMouseOver(false);
      onMouseLeave(ev);
    };
    if (dismissed) {
      return null;
    }
    const Title2 = React30.createElement(TitleComponent, Object.assign({}, isTooltipVisible && { tabIndex: 0 }, { ref: titleRef, className: css(alert_default.alertTitle, truncateTitle && alert_default.modifiers.truncate) }), getHeadingContent);
    return React30.createElement(
      "div",
      Object.assign({ ref: divRef, className: css(alert_default.alert, isInline && alert_default.modifiers.inline, isPlain && alert_default.modifiers.plain, isExpandable && alert_default.modifiers.expandable, isExpanded && alert_default.modifiers.expanded, alert_default.modifiers[variant], className) }, ouiaProps, isLiveRegion && {
        "aria-live": "polite",
        "aria-atomic": "false"
      }, { onMouseEnter: myOnMouseEnter, onMouseLeave: myOnMouseLeave, id }, props),
      isExpandable && React30.createElement(
        AlertContext.Provider,
        { value: { title, variantLabel } },
        React30.createElement(
          "div",
          { className: css(alert_default.alertToggle) },
          React30.createElement(AlertToggleExpandButton, { isExpanded, onToggleExpand, "aria-label": toggleAriaLabel })
        )
      ),
      React30.createElement(AlertIcon, { variant, customIcon }),
      isTooltipVisible ? React30.createElement(Tooltip, { content: getHeadingContent, position: tooltipPosition }, Title2) : Title2,
      actionClose && React30.createElement(
        AlertContext.Provider,
        { value: { title, variantLabel } },
        React30.createElement("div", { className: css(alert_default.alertAction) }, actionClose)
      ),
      children && (!isExpandable || isExpandable && isExpanded) && React30.createElement("div", { className: css(alert_default.alertDescription) }, children),
      actionLinks && React30.createElement("div", { className: css(alert_default.alertActionGroup) }, actionLinks)
    );
  };
  Alert.displayName = "Alert";

  // node_modules/@patternfly/react-styles/css/components/Breadcrumb/breadcrumb.mjs
  var breadcrumb_default = {
    "breadcrumb": "pf-v5-c-breadcrumb",
    "breadcrumbDropdown": "pf-v5-c-breadcrumb__dropdown",
    "breadcrumbHeading": "pf-v5-c-breadcrumb__heading",
    "breadcrumbItem": "pf-v5-c-breadcrumb__item",
    "breadcrumbItemDivider": "pf-v5-c-breadcrumb__item-divider",
    "breadcrumbLink": "pf-v5-c-breadcrumb__link",
    "breadcrumbList": "pf-v5-c-breadcrumb__list",
    "dirRtl": "pf-v5-m-dir-rtl",
    "dropdownToggle": "pf-v5-c-dropdown__toggle",
    "modifiers": {
      "current": "pf-m-current"
    }
  };

  // node_modules/@patternfly/react-core/dist/esm/components/TextInput/TextInput.js
  var React32 = __toESM(require_react());

  // node_modules/@patternfly/react-styles/css/components/FormControl/form-control.mjs
  var form_control_default = {
    "formControl": "pf-v5-c-form-control",
    "formControlIcon": "pf-v5-c-form-control__icon",
    "formControlToggleIcon": "pf-v5-c-form-control__toggle-icon",
    "formControlUtilities": "pf-v5-c-form-control__utilities",
    "modifiers": {
      "readonly": "pf-m-readonly",
      "success": "pf-m-success",
      "warning": "pf-m-warning",
      "error": "pf-m-error",
      "plain": "pf-m-plain",
      "expanded": "pf-m-expanded",
      "disabled": "pf-m-disabled",
      "icon": "pf-m-icon",
      "placeholder": "pf-m-placeholder",
      "resizeVertical": "pf-m-resize-vertical",
      "resizeHorizontal": "pf-m-resize-horizontal",
      "resizeBoth": "pf-m-resize-both",
      "status": "pf-m-status"
    },
    "themeDark": "pf-v5-theme-dark"
  };

  // node_modules/@patternfly/react-core/dist/esm/components/FormControl/FormControlIcon.js
  var React31 = __toESM(require_react());
  var statusIcons = {
    success: check_circle_icon_default,
    error: exclamation_circle_icon_default,
    warning: exclamation_triangle_icon_default
  };
  var FormControlIcon = (_a) => {
    var { status, customIcon, className } = _a, props = __rest(_a, ["status", "customIcon", "className"]);
    const StatusIcon = status && statusIcons[status];
    return React31.createElement("span", Object.assign({ className: css(form_control_default.formControlIcon, status && form_control_default.modifiers.status, className) }, props), customIcon || React31.createElement(StatusIcon, null));
  };

  // node_modules/@patternfly/react-core/dist/esm/components/TextInput/TextInput.js
  var TextInputTypes;
  (function(TextInputTypes2) {
    TextInputTypes2["text"] = "text";
    TextInputTypes2["date"] = "date";
    TextInputTypes2["datetimeLocal"] = "datetime-local";
    TextInputTypes2["email"] = "email";
    TextInputTypes2["month"] = "month";
    TextInputTypes2["number"] = "number";
    TextInputTypes2["password"] = "password";
    TextInputTypes2["search"] = "search";
    TextInputTypes2["tel"] = "tel";
    TextInputTypes2["time"] = "time";
    TextInputTypes2["url"] = "url";
  })(TextInputTypes || (TextInputTypes = {}));
  var TextInputReadOnlyVariant;
  (function(TextInputReadOnlyVariant2) {
    TextInputReadOnlyVariant2["default"] = "default";
    TextInputReadOnlyVariant2["plain"] = "plain";
  })(TextInputReadOnlyVariant || (TextInputReadOnlyVariant = {}));
  var TextInputBase = class _TextInputBase extends React32.Component {
    constructor(props) {
      super(props);
      this.inputRef = React32.createRef();
      this.observer = () => {
      };
      this.handleChange = (event) => {
        if (this.props.onChange) {
          this.props.onChange(event, event.currentTarget.value);
        }
      };
      this.handleResize = () => {
        const inputRef = this.props.innerRef || this.inputRef;
        if (inputRef && inputRef.current) {
          trimLeft(inputRef.current, String(this.props.value));
        }
      };
      this.restoreText = () => {
        const inputRef = this.props.innerRef || this.inputRef;
        inputRef.current.value = String(this.props.value);
        inputRef.current.scrollLeft = inputRef.current.scrollWidth;
      };
      this.onFocus = (event) => {
        const { isLeftTruncated, isStartTruncated, onFocus } = this.props;
        if (isLeftTruncated || isStartTruncated) {
          this.restoreText();
        }
        onFocus && onFocus(event);
      };
      this.onBlur = (event) => {
        const { isLeftTruncated, isStartTruncated, onBlur } = this.props;
        if (isLeftTruncated || isStartTruncated) {
          this.handleResize();
        }
        onBlur && onBlur(event);
      };
      this.sanitizeInputValue = (value) => typeof value === "string" ? value.replace(/\n/g, " ") : value;
      if (!props.id && !props["aria-label"] && !props["aria-labelledby"]) {
        console.error("Text input:", "Text input requires either an id or aria-label to be specified");
      }
      this.state = {
        ouiaStateId: getDefaultOUIAId(_TextInputBase.displayName)
      };
    }
    componentDidMount() {
      if (this.props.isLeftTruncated || this.props.isStartTruncated) {
        const inputRef = this.props.innerRef || this.inputRef;
        this.observer = getResizeObserver(inputRef.current, this.handleResize, true);
        this.handleResize();
      }
    }
    componentWillUnmount() {
      if (this.props.isLeftTruncated || this.props.isStartTruncated) {
        this.observer();
      }
    }
    render() {
      const _a = this.props, {
        innerRef,
        className,
        type,
        value,
        placeholder,
        validated,
        /* eslint-disable @typescript-eslint/no-unused-vars */
        onChange,
        onFocus,
        onBlur,
        isLeftTruncated,
        isStartTruncated,
        isExpanded,
        expandedProps,
        readOnly,
        readOnlyVariant,
        isRequired,
        isDisabled,
        customIcon,
        ouiaId,
        ouiaSafe
      } = _a, props = __rest(_a, ["innerRef", "className", "type", "value", "placeholder", "validated", "onChange", "onFocus", "onBlur", "isLeftTruncated", "isStartTruncated", "isExpanded", "expandedProps", "readOnly", "readOnlyVariant", "isRequired", "isDisabled", "customIcon", "ouiaId", "ouiaSafe"]);
      const hasStatusIcon = ["success", "error", "warning"].includes(validated);
      const ariaExpandedProps = expandedProps ? { "aria-expanded": expandedProps === null || expandedProps === void 0 ? void 0 : expandedProps.isExpanded, "aria-controls": expandedProps === null || expandedProps === void 0 ? void 0 : expandedProps.ariaControls, role: "combobox" } : {};
      return React32.createElement(
        "span",
        { className: css(form_control_default.formControl, readOnlyVariant && form_control_default.modifiers.readonly, readOnlyVariant === "plain" && form_control_default.modifiers.plain, isDisabled && form_control_default.modifiers.disabled, (isExpanded || (expandedProps === null || expandedProps === void 0 ? void 0 : expandedProps.isExpanded)) && form_control_default.modifiers.expanded, customIcon && form_control_default.modifiers.icon, hasStatusIcon && form_control_default.modifiers[validated], className) },
        React32.createElement("input", Object.assign({}, props, { onFocus: this.onFocus, onBlur: this.onBlur, onChange: this.handleChange, type, value: this.sanitizeInputValue(value), "aria-invalid": props["aria-invalid"] ? props["aria-invalid"] : validated === ValidatedOptions.error }, ariaExpandedProps, { required: isRequired, disabled: isDisabled, readOnly: !!readOnlyVariant || readOnly, ref: innerRef || this.inputRef, placeholder }, getOUIAProps(TextInput.displayName, ouiaId !== void 0 ? ouiaId : this.state.ouiaStateId, ouiaSafe))),
        (customIcon || hasStatusIcon) && React32.createElement(
          "span",
          { className: css(form_control_default.formControlUtilities) },
          customIcon && React32.createElement(FormControlIcon, { customIcon }),
          hasStatusIcon && React32.createElement(FormControlIcon, { status: validated })
        )
      );
    }
  };
  TextInputBase.displayName = "TextInputBase";
  TextInputBase.defaultProps = {
    "aria-label": null,
    isRequired: false,
    validated: "default",
    isDisabled: false,
    isExpanded: false,
    type: TextInputTypes.text,
    isLeftTruncated: false,
    isStartTruncated: false,
    onChange: () => void 0,
    ouiaSafe: true
  };
  var TextInput = React32.forwardRef((props, ref) => React32.createElement(TextInputBase, Object.assign({}, props, { innerRef: ref })));
  TextInput.displayName = "TextInput";

  // node_modules/@patternfly/react-core/dist/esm/components/Select/Select.js
  var import_react3 = __toESM(require_react());

  // node_modules/@patternfly/react-core/dist/esm/components/Menu/Menu.js
  var React34 = __toESM(require_react());

  // node_modules/@patternfly/react-styles/css/components/Menu/menu.mjs
  var menu_default = {
    "breadcrumb": "pf-v5-c-breadcrumb",
    "check": "pf-v5-c-check",
    "dirRtl": "pf-v5-m-dir-rtl",
    "divider": "pf-v5-c-divider",
    "menu": "pf-v5-c-menu",
    "menuBreadcrumb": "pf-v5-c-menu__breadcrumb",
    "menuContent": "pf-v5-c-menu__content",
    "menuFooter": "pf-v5-c-menu__footer",
    "menuGroup": "pf-v5-c-menu__group",
    "menuGroupTitle": "pf-v5-c-menu__group-title",
    "menuHeader": "pf-v5-c-menu__header",
    "menuItem": "pf-v5-c-menu__item",
    "menuItemAction": "pf-v5-c-menu__item-action",
    "menuItemActionIcon": "pf-v5-c-menu__item-action-icon",
    "menuItemCheck": "pf-v5-c-menu__item-check",
    "menuItemDescription": "pf-v5-c-menu__item-description",
    "menuItemExternalIcon": "pf-v5-c-menu__item-external-icon",
    "menuItemIcon": "pf-v5-c-menu__item-icon",
    "menuItemMain": "pf-v5-c-menu__item-main",
    "menuItemSelectIcon": "pf-v5-c-menu__item-select-icon",
    "menuItemText": "pf-v5-c-menu__item-text",
    "menuItemToggleIcon": "pf-v5-c-menu__item-toggle-icon",
    "menuList": "pf-v5-c-menu__list",
    "menuListItem": "pf-v5-c-menu__list-item",
    "menuSearch": "pf-v5-c-menu__search",
    "modifiers": {
      "hidden": "pf-m-hidden",
      "hiddenOnSm": "pf-m-hidden-on-sm",
      "visibleOnSm": "pf-m-visible-on-sm",
      "hiddenOnMd": "pf-m-hidden-on-md",
      "visibleOnMd": "pf-m-visible-on-md",
      "hiddenOnLg": "pf-m-hidden-on-lg",
      "visibleOnLg": "pf-m-visible-on-lg",
      "hiddenOnXl": "pf-m-hidden-on-xl",
      "visibleOnXl": "pf-m-visible-on-xl",
      "hiddenOn_2xl": "pf-m-hidden-on-2xl",
      "visibleOn_2xl": "pf-m-visible-on-2xl",
      "flyout": "pf-m-flyout",
      "top": "pf-m-top",
      "left": "pf-m-left",
      "drilldown": "pf-m-drilldown",
      "drilledIn": "pf-m-drilled-in",
      "currentPath": "pf-m-current-path",
      "static": "pf-m-static",
      "plain": "pf-m-plain",
      "scrollable": "pf-m-scrollable",
      "nav": "pf-m-nav",
      "focus": "pf-m-focus",
      "disabled": "pf-m-disabled",
      "ariaDisabled": "pf-m-aria-disabled",
      "load": "pf-m-load",
      "loading": "pf-m-loading",
      "danger": "pf-m-danger",
      "selected": "pf-m-selected",
      "favorite": "pf-m-favorite",
      "favorited": "pf-m-favorited"
    },
    "themeDark": "pf-v5-theme-dark"
  };

  // node_modules/@patternfly/react-styles/css/components/Dropdown/dropdown.mjs
  var dropdown_default = {
    "badge": "pf-v5-c-badge",
    "check": "pf-v5-c-check",
    "divider": "pf-v5-c-divider",
    "dropdown": "pf-v5-c-dropdown",
    "dropdownGroup": "pf-v5-c-dropdown__group",
    "dropdownGroupTitle": "pf-v5-c-dropdown__group-title",
    "dropdownMenu": "pf-v5-c-dropdown__menu",
    "dropdownMenuItem": "pf-v5-c-dropdown__menu-item",
    "dropdownMenuItemDescription": "pf-v5-c-dropdown__menu-item-description",
    "dropdownMenuItemIcon": "pf-v5-c-dropdown__menu-item-icon",
    "dropdownMenuItemMain": "pf-v5-c-dropdown__menu-item-main",
    "dropdownToggle": "pf-v5-c-dropdown__toggle",
    "dropdownToggleButton": "pf-v5-c-dropdown__toggle-button",
    "dropdownToggleCheck": "pf-v5-c-dropdown__toggle-check",
    "dropdownToggleIcon": "pf-v5-c-dropdown__toggle-icon",
    "dropdownToggleImage": "pf-v5-c-dropdown__toggle-image",
    "dropdownToggleProgress": "pf-v5-c-dropdown__toggle-progress",
    "dropdownToggleText": "pf-v5-c-dropdown__toggle-text",
    "menu": "pf-v5-c-menu",
    "modifiers": {
      "fullHeight": "pf-m-full-height",
      "expanded": "pf-m-expanded",
      "action": "pf-m-action",
      "disabled": "pf-m-disabled",
      "plain": "pf-m-plain",
      "text": "pf-m-text",
      "splitButton": "pf-m-split-button",
      "primary": "pf-m-primary",
      "inProgress": "pf-m-in-progress",
      "active": "pf-m-active",
      "secondary": "pf-m-secondary",
      "top": "pf-m-top",
      "static": "pf-m-static",
      "alignRight": "pf-m-align-right",
      "alignLeft": "pf-m-align-left",
      "alignRightOnSm": "pf-m-align-right-on-sm",
      "alignLeftOnSm": "pf-m-align-left-on-sm",
      "alignRightOnMd": "pf-m-align-right-on-md",
      "alignLeftOnMd": "pf-m-align-left-on-md",
      "alignRightOnLg": "pf-m-align-right-on-lg",
      "alignLeftOnLg": "pf-m-align-left-on-lg",
      "alignRightOnXl": "pf-m-align-right-on-xl",
      "alignLeftOnXl": "pf-m-align-left-on-xl",
      "alignRightOn_2xl": "pf-m-align-right-on-2xl",
      "alignLeftOn_2xl": "pf-m-align-left-on-2xl",
      "ariaDisabled": "pf-m-aria-disabled",
      "icon": "pf-m-icon",
      "description": "pf-m-description"
    },
    "spinner": "pf-v5-c-spinner",
    "themeDark": "pf-v5-theme-dark"
  };

  // node_modules/@patternfly/react-core/dist/esm/components/Menu/MenuContext.js
  var React33 = __toESM(require_react());
  var MenuContext = React33.createContext({
    menuId: null,
    parentMenu: null,
    onActionClick: () => null,
    onSelect: () => null,
    activeItemId: null,
    selected: null,
    drilledInMenus: [],
    drilldownItemPath: [],
    onDrillIn: null,
    onDrillOut: null,
    onGetMenuHeight: () => null,
    flyoutRef: null,
    setFlyoutRef: () => null,
    disableHover: false,
    role: "menu"
  });
  var MenuItemContext = React33.createContext({
    itemId: null,
    isDisabled: false
  });

  // node_modules/@patternfly/react-core/dist/esm/components/Menu/Menu.js
  var MenuBase = class extends React34.Component {
    constructor(props) {
      super(props);
      this.menuRef = React34.createRef();
      this.activeMenu = null;
      this.state = {
        ouiaStateId: getDefaultOUIAId(Menu.displayName),
        transitionMoveTarget: null,
        flyoutRef: null,
        disableHover: false,
        currentDrilldownMenuId: this.props.id
      };
      this.handleDrilldownTransition = (event) => {
        const current = this.menuRef.current;
        if (!current || current !== event.target.closest(`.${menu_default.menu}`) && !Array.from(current.getElementsByClassName(menu_default.menu)).includes(event.target.closest(`.${menu_default.menu}`))) {
          return;
        }
        if (this.state.transitionMoveTarget) {
          this.state.transitionMoveTarget.focus();
          this.setState({ transitionMoveTarget: null });
        } else {
          const nextMenu = current.querySelector("#" + this.props.activeMenu) || current || null;
          const nextMenuLists = nextMenu.getElementsByTagName("UL");
          if (nextMenuLists.length === 0) {
            return;
          }
          const nextMenuChildren = Array.from(nextMenuLists[0].children);
          if (!this.state.currentDrilldownMenuId || nextMenu.id !== this.state.currentDrilldownMenuId) {
            this.setState({ currentDrilldownMenuId: nextMenu.id });
          } else {
            return;
          }
          const nextTarget = nextMenuChildren.filter((el) => !(el.classList.contains("pf-m-disabled") || el.classList.contains(menu_default.divider)))[0].firstChild;
          nextTarget.focus();
          nextTarget.tabIndex = 0;
        }
      };
      this.handleExtraKeys = (event) => {
        const isDrilldown = this.props.containsDrilldown;
        const activeElement = document.activeElement;
        if (event.target.closest(`.${menu_default.menu}`) !== this.activeMenu && !event.target.classList.contains(breadcrumb_default.breadcrumbLink)) {
          this.activeMenu = event.target.closest(`.${menu_default.menu}`);
          this.setState({ disableHover: true });
        }
        if (event.target.tagName === "INPUT") {
          return;
        }
        const parentMenu = this.activeMenu;
        const key = event.key;
        const isFromBreadcrumb = activeElement.classList.contains(breadcrumb_default.breadcrumbLink) || activeElement.classList.contains(dropdown_default.dropdownToggle);
        if (key === " " || key === "Enter") {
          event.preventDefault();
          if (isDrilldown && !isFromBreadcrumb) {
            const isDrillingOut = activeElement.closest("li").classList.contains("pf-m-current-path");
            if (isDrillingOut && parentMenu.parentElement.tagName === "LI") {
              activeElement.tabIndex = -1;
              parentMenu.parentElement.firstChild.tabIndex = 0;
              this.setState({ transitionMoveTarget: parentMenu.parentElement.firstChild });
            } else {
              if (activeElement.nextElementSibling && activeElement.nextElementSibling.classList.contains(menu_default.menu)) {
                const childItems = Array.from(activeElement.nextElementSibling.getElementsByTagName("UL")[0].children).filter((el) => !(el.classList.contains("pf-m-disabled") || el.classList.contains(menu_default.divider)));
                activeElement.tabIndex = -1;
                childItems[0].firstChild.tabIndex = 0;
                this.setState({ transitionMoveTarget: childItems[0].firstChild });
              }
            }
          }
          document.activeElement.click();
        }
      };
      this.createNavigableElements = () => {
        const isDrilldown = this.props.containsDrilldown;
        if (isDrilldown) {
          return this.activeMenu ? Array.from(this.activeMenu.getElementsByTagName("UL")[0].children).filter((el) => !(el.classList.contains("pf-m-disabled") || el.classList.contains(menu_default.divider))) : [];
        } else {
          return this.menuRef.current ? Array.from(this.menuRef.current.getElementsByTagName("LI")).filter((el) => !(el.classList.contains("pf-m-disabled") || el.classList.contains(menu_default.divider))) : [];
        }
      };
      if (props.innerRef) {
        this.menuRef = props.innerRef;
      }
    }
    allowTabFirstItem() {
      const current = this.menuRef.current;
      if (current) {
        const first = current.querySelector("ul button:not(:disabled), ul a:not(:disabled)");
        if (first) {
          first.tabIndex = 0;
        }
      }
    }
    componentDidMount() {
      if (this.context) {
        this.setState({ disableHover: this.context.disableHover });
      }
      if (canUseDOM) {
        window.addEventListener("transitionend", this.props.isRootMenu ? this.handleDrilldownTransition : null);
      }
      this.allowTabFirstItem();
    }
    componentWillUnmount() {
      if (canUseDOM) {
        window.removeEventListener("transitionend", this.handleDrilldownTransition);
      }
    }
    componentDidUpdate(prevProps) {
      if (prevProps.children !== this.props.children) {
        this.allowTabFirstItem();
      }
    }
    render() {
      const _a = this.props, {
        id,
        children,
        className,
        onSelect,
        selected = null,
        onActionClick,
        ouiaId,
        ouiaSafe,
        containsFlyout,
        isNavFlyout,
        containsDrilldown,
        isMenuDrilledIn,
        isPlain,
        isScrollable,
        drilldownItemPath,
        drilledInMenus,
        onDrillIn,
        onDrillOut,
        onGetMenuHeight,
        parentMenu = null,
        activeItemId = null,
        /* eslint-disable @typescript-eslint/no-unused-vars */
        innerRef,
        isRootMenu,
        activeMenu,
        role
      } = _a, props = __rest(_a, ["id", "children", "className", "onSelect", "selected", "onActionClick", "ouiaId", "ouiaSafe", "containsFlyout", "isNavFlyout", "containsDrilldown", "isMenuDrilledIn", "isPlain", "isScrollable", "drilldownItemPath", "drilledInMenus", "onDrillIn", "onDrillOut", "onGetMenuHeight", "parentMenu", "activeItemId", "innerRef", "isRootMenu", "activeMenu", "role"]);
      const _isMenuDrilledIn = isMenuDrilledIn || drilledInMenus && drilledInMenus.includes(id) || false;
      return React34.createElement(
        MenuContext.Provider,
        { value: {
          menuId: id,
          parentMenu: parentMenu || id,
          onSelect,
          onActionClick,
          activeItemId,
          selected,
          drilledInMenus,
          drilldownItemPath,
          onDrillIn,
          onDrillOut,
          onGetMenuHeight,
          flyoutRef: this.state.flyoutRef,
          setFlyoutRef: (flyoutRef) => this.setState({ flyoutRef }),
          disableHover: this.state.disableHover,
          role
        } },
        isRootMenu && React34.createElement(KeyboardHandler, { containerRef: this.menuRef || null, additionalKeyHandler: this.handleExtraKeys, createNavigableElements: this.createNavigableElements, isActiveElement: (element) => document.activeElement.closest("li") === element || // if element is a basic MenuItem
        document.activeElement.parentElement === element || document.activeElement.closest(`.${menu_default.menuSearch}`) === element || // if element is a MenuSearch
        document.activeElement.closest("ol") && document.activeElement.closest("ol").firstChild === element, getFocusableElement: (navigableElement) => {
          var _a2, _b;
          return (navigableElement === null || navigableElement === void 0 ? void 0 : navigableElement.tagName) === "DIV" && navigableElement.querySelector("input") || // for MenuSearchInput
          ((_a2 = navigableElement.firstChild) === null || _a2 === void 0 ? void 0 : _a2.tagName) === "LABEL" && navigableElement.querySelector("input") || // for MenuItem checkboxes
          ((_b = navigableElement.firstChild) === null || _b === void 0 ? void 0 : _b.tagName) === "DIV" && navigableElement.querySelector("a, button, input") || // For aria-disabled element that is rendered inside a div with "display: contents" styling
          navigableElement.firstChild;
        }, noHorizontalArrowHandling: document.activeElement && (document.activeElement.classList.contains(breadcrumb_default.breadcrumbLink) || document.activeElement.classList.contains(dropdown_default.dropdownToggle) || document.activeElement.tagName === "INPUT"), noEnterHandling: true, noSpaceHandling: true }),
        React34.createElement("div", Object.assign({ id, className: css(menu_default.menu, isPlain && menu_default.modifiers.plain, isScrollable && menu_default.modifiers.scrollable, containsFlyout && menu_default.modifiers.flyout, isNavFlyout && menu_default.modifiers.nav, containsDrilldown && menu_default.modifiers.drilldown, _isMenuDrilledIn && menu_default.modifiers.drilledIn, className), ref: this.menuRef }, getOUIAProps(Menu.displayName, ouiaId !== void 0 ? ouiaId : this.state.ouiaStateId, ouiaSafe), props), children)
      );
    }
  };
  MenuBase.displayName = "Menu";
  MenuBase.contextType = MenuContext;
  MenuBase.defaultProps = {
    ouiaSafe: true,
    isRootMenu: true,
    isPlain: false,
    isScrollable: false,
    role: "menu"
  };
  var Menu = React34.forwardRef((props, ref) => React34.createElement(MenuBase, Object.assign({}, props, { innerRef: ref })));
  Menu.displayName = "Menu";

  // node_modules/@patternfly/react-core/dist/esm/components/Menu/MenuContent.js
  var React35 = __toESM(require_react());

  // node_modules/@patternfly/react-tokens/dist/esm/c_menu__content_Height.js
  var c_menu__content_Height = {
    "name": "--pf-v5-c-menu__content--Height",
    "value": "auto",
    "var": "var(--pf-v5-c-menu__content--Height)"
  };
  var c_menu_content_Height_default = c_menu__content_Height;

  // node_modules/@patternfly/react-tokens/dist/esm/c_menu__content_MaxHeight.js
  var c_menu__content_MaxHeight = {
    "name": "--pf-v5-c-menu__content--MaxHeight",
    "value": "18.75rem",
    "var": "var(--pf-v5-c-menu__content--MaxHeight)"
  };
  var c_menu_content_MaxHeight_default = c_menu__content_MaxHeight;

  // node_modules/@patternfly/react-core/dist/esm/components/Menu/MenuContent.js
  var MenuContent = React35.forwardRef((props, ref) => {
    const { getHeight, children, menuHeight, maxMenuHeight } = props, rest = __rest(props, ["getHeight", "children", "menuHeight", "maxMenuHeight"]);
    const menuContentRef = React35.createRef();
    const refCallback = (el, menuId, onGetMenuHeight) => {
      if (el) {
        let clientHeight = el.clientHeight;
        let rootMenuList = null;
        let parentEl = el.closest(`.${menu_default.menuList}`);
        while (parentEl !== null && parentEl.nodeType === 1) {
          if (parentEl.classList.contains(menu_default.menuList)) {
            rootMenuList = parentEl;
          }
          parentEl = parentEl.parentElement;
        }
        if (rootMenuList) {
          const rootMenuListStyles = getComputedStyle(rootMenuList);
          const rootMenuListPaddingOffset = parseFloat(rootMenuListStyles.getPropertyValue("padding-top").replace(/px/g, "")) + parseFloat(rootMenuListStyles.getPropertyValue("padding-bottom").replace(/px/g, "")) + parseFloat(getComputedStyle(rootMenuList.parentElement).getPropertyValue("border-bottom-width").replace(/px/g, ""));
          clientHeight = clientHeight + rootMenuListPaddingOffset;
        }
        onGetMenuHeight && onGetMenuHeight(menuId, clientHeight);
        getHeight && getHeight(clientHeight.toString());
      }
      return ref || menuContentRef;
    };
    return React35.createElement(MenuContext.Consumer, null, ({ menuId, onGetMenuHeight }) => React35.createElement("div", Object.assign({}, rest, { className: css(menu_default.menuContent, props.className), ref: (el) => refCallback(el, menuId, onGetMenuHeight), style: Object.assign(Object.assign({}, menuHeight && { [c_menu_content_Height_default.name]: menuHeight }), maxMenuHeight && { [c_menu_content_MaxHeight_default.name]: maxMenuHeight }) }), children));
  });
  MenuContent.displayName = "MenuContent";

  // node_modules/@patternfly/react-core/dist/esm/components/Menu/MenuItem.js
  var React38 = __toESM(require_react());

  // node_modules/@patternfly/react-tokens/dist/esm/c_menu_m_flyout__menu_top_offset.js
  var c_menu_m_flyout__menu_top_offset = {
    "name": "--pf-v5-c-menu--m-flyout__menu--top-offset",
    "value": "0px",
    "var": "var(--pf-v5-c-menu--m-flyout__menu--top-offset)"
  };
  var c_menu_m_flyout_menu_top_offset_default = c_menu_m_flyout__menu_top_offset;

  // node_modules/@patternfly/react-tokens/dist/esm/c_menu_m_flyout__menu_m_left_right_offset.js
  var c_menu_m_flyout__menu_m_left_right_offset = {
    "name": "--pf-v5-c-menu--m-flyout__menu--m-left--right-offset",
    "value": "0px",
    "var": "var(--pf-v5-c-menu--m-flyout__menu--m-left--right-offset)"
  };
  var c_menu_m_flyout_menu_m_left_right_offset_default = c_menu_m_flyout__menu_m_left_right_offset;

  // node_modules/@patternfly/react-tokens/dist/esm/c_menu_m_flyout__menu_left_offset.js
  var c_menu_m_flyout__menu_left_offset = {
    "name": "--pf-v5-c-menu--m-flyout__menu--left-offset",
    "value": "0px",
    "var": "var(--pf-v5-c-menu--m-flyout__menu--left-offset)"
  };
  var c_menu_m_flyout_menu_left_offset_default = c_menu_m_flyout__menu_left_offset;

  // node_modules/@patternfly/react-icons/dist/esm/icons/external-link-alt-icon.js
  var ExternalLinkAltIconConfig = {
    name: "ExternalLinkAltIcon",
    height: 512,
    width: 512,
    svgPath: "M432,320H400a16,16,0,0,0-16,16V448H64V128H208a16,16,0,0,0,16-16V80a16,16,0,0,0-16-16H48A48,48,0,0,0,0,112V464a48,48,0,0,0,48,48H400a48,48,0,0,0,48-48V336A16,16,0,0,0,432,320ZM488,0h-128c-21.37,0-32.05,25.91-17,41l35.73,35.73L135,320.37a24,24,0,0,0,0,34L157.67,377a24,24,0,0,0,34,0L435.28,133.32,471,169c15,15,41,4.5,41-17V24A24,24,0,0,0,488,0Z",
    yOffset: 0,
    xOffset: 0
  };
  var ExternalLinkAltIcon = createIcon(ExternalLinkAltIconConfig);
  var external_link_alt_icon_default = ExternalLinkAltIcon;

  // node_modules/@patternfly/react-icons/dist/esm/icons/angle-left-icon.js
  var AngleLeftIconConfig = {
    name: "AngleLeftIcon",
    height: 512,
    width: 256,
    svgPath: "M31.7 239l136-136c9.4-9.4 24.6-9.4 33.9 0l22.6 22.6c9.4 9.4 9.4 24.6 0 33.9L127.9 256l96.4 96.4c9.4 9.4 9.4 24.6 0 33.9L201.7 409c-9.4 9.4-24.6 9.4-33.9 0l-136-136c-9.5-9.4-9.5-24.6-.1-34z",
    yOffset: 0,
    xOffset: 0
  };
  var AngleLeftIcon = createIcon(AngleLeftIconConfig);
  var angle_left_icon_default = AngleLeftIcon;

  // node_modules/@patternfly/react-icons/dist/esm/icons/check-icon.js
  var CheckIconConfig = {
    name: "CheckIcon",
    height: 512,
    width: 512,
    svgPath: "M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z",
    yOffset: 0,
    xOffset: 0
  };
  var CheckIcon = createIcon(CheckIconConfig);
  var check_icon_default = CheckIcon;

  // node_modules/@patternfly/react-core/dist/esm/components/Checkbox/Checkbox.js
  var React36 = __toESM(require_react());

  // node_modules/@patternfly/react-styles/css/components/Check/check.mjs
  var check_default = {
    "check": "pf-v5-c-check",
    "checkBody": "pf-v5-c-check__body",
    "checkDescription": "pf-v5-c-check__description",
    "checkInput": "pf-v5-c-check__input",
    "checkLabel": "pf-v5-c-check__label",
    "checkLabelRequired": "pf-v5-c-check__label-required",
    "modifiers": {
      "standalone": "pf-m-standalone",
      "disabled": "pf-m-disabled"
    }
  };

  // node_modules/@patternfly/react-core/dist/esm/components/Checkbox/Checkbox.js
  var defaultOnChange = () => {
  };
  var Checkbox = class _Checkbox extends React36.Component {
    constructor(props) {
      super(props);
      this.handleChange = (event) => {
        this.props.onChange(event, event.currentTarget.checked);
      };
      this.state = {
        ouiaStateId: getDefaultOUIAId(_Checkbox.displayName)
      };
    }
    render() {
      const _a = this.props, { "aria-label": ariaLabel, className, inputClassName, onChange, isLabelWrapped, isLabelBeforeButton, isValid, isDisabled, isRequired, isChecked, label, checked, defaultChecked, description, body, ouiaId, ouiaSafe, component } = _a, props = __rest(_a, ["aria-label", "className", "inputClassName", "onChange", "isLabelWrapped", "isLabelBeforeButton", "isValid", "isDisabled", "isRequired", "isChecked", "label", "checked", "defaultChecked", "description", "body", "ouiaId", "ouiaSafe", "component"]);
      if (!props.id) {
        console.error("Checkbox:", "id is required to make input accessible");
      }
      const checkedProps = {};
      if ([true, false].includes(checked) || isChecked === true) {
        checkedProps.checked = checked || isChecked;
      }
      if (onChange !== defaultOnChange) {
        checkedProps.checked = isChecked;
      }
      if ([false, true].includes(defaultChecked)) {
        checkedProps.defaultChecked = defaultChecked;
      }
      const inputRendered = React36.createElement("input", Object.assign({}, props, { className: css(check_default.checkInput, inputClassName), type: "checkbox", onChange: this.handleChange, "aria-invalid": !isValid, "aria-label": ariaLabel, disabled: isDisabled, required: isRequired, ref: (elem) => elem && (elem.indeterminate = isChecked === null) }, checkedProps, getOUIAProps(_Checkbox.displayName, ouiaId !== void 0 ? ouiaId : this.state.ouiaStateId, ouiaSafe)));
      const wrapWithLabel = isLabelWrapped && !component || component === "label";
      const Label = wrapWithLabel ? "span" : "label";
      const labelRendered = label ? React36.createElement(
        Label,
        { className: css(check_default.checkLabel, isDisabled && check_default.modifiers.disabled), htmlFor: !wrapWithLabel ? props.id : void 0 },
        label,
        isRequired && React36.createElement("span", { className: css(check_default.checkLabelRequired), "aria-hidden": "true" }, ASTERISK)
      ) : null;
      const Component20 = component !== null && component !== void 0 ? component : wrapWithLabel ? "label" : "div";
      checkedProps.checked = checkedProps.checked === null ? false : checkedProps.checked;
      return React36.createElement(
        Component20,
        { className: css(check_default.check, !label && check_default.modifiers.standalone, className), htmlFor: wrapWithLabel ? props.id : void 0 },
        isLabelBeforeButton ? React36.createElement(
          React36.Fragment,
          null,
          labelRendered,
          inputRendered
        ) : React36.createElement(
          React36.Fragment,
          null,
          inputRendered,
          labelRendered
        ),
        description && React36.createElement("span", { className: css(check_default.checkDescription) }, description),
        body && React36.createElement("span", { className: css(check_default.checkBody) }, body)
      );
    }
  };
  Checkbox.displayName = "Checkbox";
  Checkbox.defaultProps = {
    className: "",
    isLabelWrapped: false,
    isValid: true,
    isDisabled: false,
    isRequired: false,
    isChecked: false,
    onChange: defaultOnChange,
    ouiaSafe: true
  };

  // node_modules/@patternfly/react-core/dist/esm/components/Menu/MenuItemAction.js
  var React37 = __toESM(require_react());

  // node_modules/@patternfly/react-icons/dist/esm/icons/star-icon.js
  var StarIconConfig = {
    name: "StarIcon",
    height: 512,
    width: 576,
    svgPath: "M259.3 17.8L194 150.2 47.9 171.5c-26.2 3.8-36.7 36.1-17.7 54.6l105.7 103-25 145.5c-4.5 26.3 23.2 46 46.4 33.7L288 439.6l130.7 68.7c23.2 12.2 50.9-7.4 46.4-33.7l-25-145.5 105.7-103c19-18.5 8.5-50.8-17.7-54.6L382 150.2 316.7 17.8c-11.7-23.6-45.6-23.9-57.4 0z",
    yOffset: 0,
    xOffset: 0
  };
  var StarIcon = createIcon(StarIconConfig);
  var star_icon_default = StarIcon;

  // node_modules/@patternfly/react-core/dist/esm/components/Menu/MenuItemAction.js
  var MenuItemActionBase = (_a) => {
    var { className = "", icon, onClick, "aria-label": ariaLabel, isFavorited = null, isDisabled, actionId, innerRef } = _a, props = __rest(_a, ["className", "icon", "onClick", "aria-label", "isFavorited", "isDisabled", "actionId", "innerRef"]);
    return React37.createElement(MenuContext.Consumer, null, ({ onActionClick }) => React37.createElement(MenuItemContext.Consumer, null, ({ itemId, isDisabled: isDisabledContext }) => {
      const onClickButton = (event) => {
        onClick && onClick(event);
        onActionClick && onActionClick(event, itemId, actionId);
      };
      return React37.createElement(
        "button",
        Object.assign({ className: css(menu_default.menuItemAction, isFavorited !== null && menu_default.modifiers.favorite, isFavorited && menu_default.modifiers.favorited, className), "aria-label": ariaLabel, onClick: onClickButton }, (isDisabled === true || isDisabledContext === true) && { disabled: true }, { ref: innerRef, tabIndex: -1 }, props),
        React37.createElement("span", { className: css(menu_default.menuItemActionIcon) }, icon === "favorites" || isFavorited !== null ? React37.createElement(star_icon_default, { "aria-hidden": true }) : icon)
      );
    }));
  };
  var MenuItemAction = React37.forwardRef((props, ref) => React37.createElement(MenuItemActionBase, Object.assign({}, props, { innerRef: ref })));
  MenuItemAction.displayName = "MenuItemAction";

  // node_modules/@patternfly/react-core/dist/esm/components/Menu/MenuItem.js
  var FlyoutContext = React38.createContext({
    direction: "right"
  });
  var MenuItemBase = (_a) => {
    var { children, className, itemId = null, to, hasCheckbox = false, isActive = null, isFavorited = null, isLoadButton = false, isLoading = false, flyoutMenu, direction, description = null, onClick = () => {
    }, component = "button", isDisabled = false, isAriaDisabled = false, isExternalLink = false, isSelected = null, isFocused, isDanger = false, icon, actions, onShowFlyout, drilldownMenu, isOnPath, innerRef, id, "aria-label": ariaLabel, tooltipProps, rel, target, download } = _a, props = __rest(_a, ["children", "className", "itemId", "to", "hasCheckbox", "isActive", "isFavorited", "isLoadButton", "isLoading", "flyoutMenu", "direction", "description", "onClick", "component", "isDisabled", "isAriaDisabled", "isExternalLink", "isSelected", "isFocused", "isDanger", "icon", "actions", "onShowFlyout", "drilldownMenu", "isOnPath", "innerRef", "id", "aria-label", "tooltipProps", "rel", "target", "download"]);
    const { menuId, parentMenu, onSelect, onActionClick, activeItemId, selected, drilldownItemPath, onDrillIn, onDrillOut, flyoutRef, setFlyoutRef, disableHover, role: menuRole } = React38.useContext(MenuContext);
    let Component20 = to ? "a" : component;
    if (hasCheckbox && !to) {
      Component20 = "label";
    }
    const [flyoutTarget, setFlyoutTarget] = React38.useState(null);
    const flyoutContext = React38.useContext(FlyoutContext);
    const [flyoutXDirection, setFlyoutXDirection] = React38.useState(flyoutContext.direction);
    const ref = React38.useRef();
    const flyoutVisible = ref === flyoutRef;
    const hasFlyout = flyoutMenu !== void 0;
    const showFlyout = (show) => {
      if (!flyoutVisible && show) {
        setFlyoutRef(ref);
      } else if (flyoutVisible && !show) {
        setFlyoutRef(null);
      }
      onShowFlyout && show && onShowFlyout();
    };
    useIsomorphicLayoutEffect2(() => {
      if (hasFlyout && ref.current && canUseDOM) {
        const flyoutMenu2 = ref.current.lastElementChild;
        if (flyoutMenu2 && flyoutMenu2.classList.contains(menu_default.menu)) {
          const origin = ref.current.getClientRects()[0];
          const rect = flyoutMenu2.getClientRects()[0];
          if (origin && rect) {
            const spaceLeftLeft = origin.x - rect.width;
            const spaceLeftRight = window.innerWidth - origin.x - origin.width - rect.width;
            let xDir = flyoutXDirection;
            if (spaceLeftRight < 0 && xDir !== "left") {
              setFlyoutXDirection("left");
              xDir = "left";
            } else if (spaceLeftLeft < 0 && xDir !== "right") {
              setFlyoutXDirection("right");
              xDir = "right";
            }
            let xOffset = 0;
            if (spaceLeftLeft < 0 && spaceLeftRight < 0) {
              xOffset = xDir === "right" ? -spaceLeftRight : -spaceLeftLeft;
            }
            if (xDir === "left") {
              flyoutMenu2.classList.add(menu_default.modifiers.left);
              flyoutMenu2.style.setProperty(c_menu_m_flyout_menu_m_left_right_offset_default.name, `-${xOffset}px`);
            } else {
              flyoutMenu2.style.setProperty(c_menu_m_flyout_menu_left_offset_default.name, `-${xOffset}px`);
            }
            const spaceLeftBot = window.innerHeight - origin.y - rect.height;
            const spaceLeftTop = window.innerHeight - rect.height;
            if (spaceLeftTop < 0 && spaceLeftBot < 0) {
            } else if (spaceLeftBot < 0) {
              flyoutMenu2.style.setProperty(c_menu_m_flyout_menu_top_offset_default.name, `${spaceLeftBot}px`);
            }
          }
        }
      }
    }, [flyoutVisible, flyoutMenu]);
    React38.useEffect(() => {
      setFlyoutXDirection(flyoutContext.direction);
    }, [flyoutContext]);
    React38.useEffect(() => {
      if (flyoutTarget) {
        if (flyoutVisible) {
          const flyoutMenu2 = flyoutTarget.nextElementSibling;
          const flyoutItems = Array.from(flyoutMenu2.getElementsByTagName("UL")[0].children).filter((el) => !(el.classList.contains("pf-m-disabled") || el.classList.contains(menu_default.divider)));
          flyoutItems[0].firstChild.focus();
        } else {
          flyoutTarget.focus();
        }
      }
    }, [flyoutVisible, flyoutTarget]);
    const handleFlyout = (event) => {
      const key = event.key;
      const target2 = event.target;
      const type = event.type;
      if (key === " " || key === "Enter" || key === "ArrowRight" || type === "click") {
        event.stopPropagation();
        event.preventDefault();
        if (!flyoutVisible) {
          showFlyout(true);
          setFlyoutTarget(target2);
        }
      }
      if (key === "Escape" || key === "ArrowLeft") {
        if (flyoutVisible) {
          event.stopPropagation();
          showFlyout(false);
        }
      }
    };
    const onItemSelect = (event, onSelect2) => {
      if (!isAriaDisabled) {
        onSelect2 && onSelect2(event, itemId);
        onClick && onClick(event);
      }
    };
    const _isOnPath = isOnPath && isOnPath || drilldownItemPath && drilldownItemPath.includes(itemId) || false;
    let drill;
    if (direction) {
      if (direction === "down") {
        drill = (event) => onDrillIn && onDrillIn(event, menuId, typeof drilldownMenu === "function" ? drilldownMenu().props.id : drilldownMenu.props.id, itemId);
      } else {
        drill = (event) => onDrillOut && onDrillOut(event, parentMenu, itemId);
      }
    }
    let additionalProps = {};
    if (Component20 === "a") {
      additionalProps = {
        href: to,
        "aria-disabled": isDisabled || isAriaDisabled ? true : null,
        // prevent invalid 'disabled' attribute on <a> tags
        disabled: null,
        target: isExternalLink ? "_blank" : target,
        rel,
        download
      };
    } else if (Component20 === "button") {
      additionalProps = {
        type: "button",
        "aria-disabled": isAriaDisabled ? true : null
      };
    }
    if (isOnPath) {
      additionalProps["aria-expanded"] = true;
    } else if (hasFlyout) {
      additionalProps["aria-haspopup"] = "menu";
      additionalProps["aria-expanded"] = flyoutVisible;
    }
    const getAriaCurrent = () => {
      if (isActive !== null) {
        if (isActive) {
          return "page";
        } else {
          return null;
        }
      } else if (itemId !== null && activeItemId !== null) {
        return itemId === activeItemId;
      }
      return null;
    };
    const getIsSelected = () => {
      if (isSelected !== null) {
        return isSelected;
      } else if (selected !== null && itemId !== null) {
        return Array.isArray(selected) && selected.includes(itemId) || itemId === selected;
      }
      return false;
    };
    const onMouseOver = () => {
      if (disableHover) {
        return;
      }
      if (hasFlyout) {
        showFlyout(true);
      } else {
        setFlyoutRef(null);
      }
    };
    React38.useEffect(() => {
      if (isFocused && ref.current) {
        const itemEl = ref.current;
        const parentListEl = itemEl.parentElement;
        if (parentListEl) {
          const isAboveTop = itemEl.offsetTop - parentListEl.offsetTop < parentListEl.scrollTop;
          const isBelowBottom = itemEl.offsetTop - parentListEl.offsetTop + itemEl.clientHeight;
          if (isAboveTop || isBelowBottom) {
            itemEl.scrollIntoView({ behavior: "auto", block: "nearest" });
          }
        }
      }
    }, [isFocused]);
    const isSelectMenu = menuRole === "listbox";
    const renderItem = React38.createElement(
      React38.Fragment,
      null,
      React38.createElement(GenerateId, null, (randomId) => React38.createElement(
        Component20,
        Object.assign({ id, tabIndex: -1, className: css(menu_default.menuItem, getIsSelected() && !hasCheckbox && menu_default.modifiers.selected, className), "aria-current": getAriaCurrent() }, !hasCheckbox && { disabled: isDisabled, "aria-label": ariaLabel }, !hasCheckbox && !flyoutMenu && { role: isSelectMenu ? "option" : "menuitem" }, !hasCheckbox && !flyoutMenu && isSelectMenu && { "aria-selected": getIsSelected() }, { ref: innerRef }, !hasCheckbox && {
          onClick: (event) => {
            if (!isAriaDisabled) {
              onItemSelect(event, onSelect);
              drill && drill(event);
              flyoutMenu && handleFlyout(event);
            } else {
              event.preventDefault();
            }
          }
        }, hasCheckbox && { htmlFor: randomId }, additionalProps),
        React38.createElement(
          "span",
          { className: css(menu_default.menuItemMain) },
          direction === "up" && React38.createElement(
            "span",
            { className: css(menu_default.menuItemToggleIcon) },
            React38.createElement(angle_left_icon_default, { "aria-hidden": true })
          ),
          icon && React38.createElement("span", { className: css(menu_default.menuItemIcon) }, icon),
          hasCheckbox && React38.createElement(
            "span",
            { className: css(menu_default.menuItemCheck) },
            React38.createElement(Checkbox, { id: randomId, component: "span", isChecked: isSelected || false, onChange: (event) => onItemSelect(event, onSelect), isDisabled, "aria-disabled": isAriaDisabled })
          ),
          React38.createElement("span", { className: css(menu_default.menuItemText) }, children),
          isExternalLink && React38.createElement(
            "span",
            { className: css(menu_default.menuItemExternalIcon) },
            React38.createElement(external_link_alt_icon_default, { "aria-hidden": true })
          ),
          (flyoutMenu || direction === "down") && React38.createElement(
            "span",
            { className: css(menu_default.menuItemToggleIcon) },
            React38.createElement(angle_right_icon_default, { "aria-hidden": true })
          ),
          getIsSelected() && React38.createElement(
            "span",
            { className: css(menu_default.menuItemSelectIcon) },
            React38.createElement(check_icon_default, { "aria-hidden": true })
          )
        ),
        description && direction !== "up" && React38.createElement(
          "span",
          { className: css(menu_default.menuItemDescription) },
          React38.createElement("span", null, description)
        )
      )),
      flyoutVisible && React38.createElement(
        MenuContext.Provider,
        { value: { disableHover } },
        React38.createElement(FlyoutContext.Provider, { value: { direction: flyoutXDirection } }, flyoutMenu)
      ),
      typeof drilldownMenu === "function" ? drilldownMenu() : drilldownMenu,
      React38.createElement(
        MenuItemContext.Provider,
        { value: { itemId, isDisabled } },
        actions,
        isFavorited !== null && React38.createElement(MenuItemAction, { icon: "favorites", isFavorited, "aria-label": isFavorited ? "starred" : "not starred", onClick: (event) => onActionClick(event, itemId), tabIndex: -1, actionId: "fav" })
      )
    );
    return React38.createElement("li", Object.assign({ className: css(menu_default.menuListItem, isDisabled && menu_default.modifiers.disabled, isAriaDisabled && menu_default.modifiers.ariaDisabled, _isOnPath && menu_default.modifiers.currentPath, isLoadButton && menu_default.modifiers.load, isLoading && menu_default.modifiers.loading, isFocused && menu_default.modifiers.focus, isDanger && menu_default.modifiers.danger, className), onMouseOver: () => {
      if (!isAriaDisabled) {
        onMouseOver();
      }
    } }, flyoutMenu && !isAriaDisabled && { onKeyDown: handleFlyout }, { ref, role: !hasCheckbox ? "none" : "menuitem" }, hasCheckbox && { "aria-label": ariaLabel }, props), tooltipProps ? React38.createElement(Tooltip, Object.assign({}, tooltipProps), renderItem) : renderItem);
  };
  var MenuItem = React38.forwardRef((props, ref) => React38.createElement(MenuItemBase, Object.assign({}, props, { innerRef: ref })));
  MenuItem.displayName = "MenuItem";

  // node_modules/@patternfly/react-core/dist/esm/components/Select/Select.js
  var SelectBase = (_a) => {
    var { children, className, onSelect, isOpen, selected, toggle, shouldFocusToggleOnSelect = false, shouldFocusFirstItemOnOpen = false, onOpenChange, onOpenChangeKeys = ["Escape", "Tab"], onToggleKeydown, variant, isPlain, innerRef, zIndex = 9999, role = "listbox", popperProps, menuHeight, maxMenuHeight, isScrollable, shouldPreventScrollOnItemFocus = true, focusTimeoutDelay = 0 } = _a, props = __rest(_a, ["children", "className", "onSelect", "isOpen", "selected", "toggle", "shouldFocusToggleOnSelect", "shouldFocusFirstItemOnOpen", "onOpenChange", "onOpenChangeKeys", "onToggleKeydown", "variant", "isPlain", "innerRef", "zIndex", "role", "popperProps", "menuHeight", "maxMenuHeight", "isScrollable", "shouldPreventScrollOnItemFocus", "focusTimeoutDelay"]);
    const localMenuRef = import_react3.default.useRef();
    const localToggleRef = import_react3.default.useRef();
    const menuRef = innerRef || localMenuRef;
    const toggleRef = typeof toggle === "function" || typeof toggle !== "function" && !toggle.toggleRef ? localToggleRef : toggle === null || toggle === void 0 ? void 0 : toggle.toggleRef;
    import_react3.default.useEffect(() => {
      const handleMenuKeys = (event) => {
        var _a2, _b, _c, _d;
        if (isOpen && onOpenChange && (((_a2 = menuRef.current) === null || _a2 === void 0 ? void 0 : _a2.contains(event.target)) || ((_b = toggleRef.current) === null || _b === void 0 ? void 0 : _b.contains(event.target)))) {
          if (onOpenChangeKeys.includes(event.key)) {
            event.preventDefault();
            onOpenChange(false);
            (_c = toggleRef.current) === null || _c === void 0 ? void 0 : _c.focus();
          }
        }
        if ((_d = toggleRef.current) === null || _d === void 0 ? void 0 : _d.contains(event.target)) {
          if (onToggleKeydown) {
            onToggleKeydown(event);
          } else if (isOpen && variant !== "typeahead") {
            onToggleArrowKeydownDefault(event, menuRef);
          }
        }
      };
      const handleClick = (event) => {
        var _a2, _b, _c;
        if (isOpen && shouldFocusFirstItemOnOpen && ((_a2 = toggleRef.current) === null || _a2 === void 0 ? void 0 : _a2.contains(event.target))) {
          setTimeout(() => {
            var _a3;
            const firstElement = (_a3 = menuRef === null || menuRef === void 0 ? void 0 : menuRef.current) === null || _a3 === void 0 ? void 0 : _a3.querySelector("li button:not(:disabled),li input:not(:disabled)");
            firstElement && firstElement.focus({ preventScroll: shouldPreventScrollOnItemFocus });
          }, focusTimeoutDelay);
        }
        if (isOpen && onOpenChange && !((_b = toggleRef === null || toggleRef === void 0 ? void 0 : toggleRef.current) === null || _b === void 0 ? void 0 : _b.contains(event.target))) {
          if (isOpen && !((_c = menuRef.current) === null || _c === void 0 ? void 0 : _c.contains(event.target))) {
            onOpenChange(false);
          }
        }
      };
      window.addEventListener("keydown", handleMenuKeys);
      window.addEventListener("click", handleClick);
      return () => {
        window.removeEventListener("keydown", handleMenuKeys);
        window.removeEventListener("click", handleClick);
      };
    }, [
      isOpen,
      menuRef,
      toggleRef,
      onOpenChange,
      onOpenChangeKeys,
      onToggleKeydown,
      shouldPreventScrollOnItemFocus,
      shouldFocusFirstItemOnOpen,
      focusTimeoutDelay
    ]);
    const menu = import_react3.default.createElement(
      Menu,
      Object.assign({ role, className: css(className), ref: menuRef, onSelect: (event, value) => {
        onSelect && onSelect(event, value);
        shouldFocusToggleOnSelect && toggleRef.current.focus();
      }, isPlain, selected, isScrollable: isScrollable !== null && isScrollable !== void 0 ? isScrollable : menuHeight !== void 0 || maxMenuHeight !== void 0 }, getOUIAProps(Select.displayName, props.ouiaId !== void 0 ? props.ouiaId : getDefaultOUIAId(Select.displayName), props.ouiaSafe !== void 0 ? props.ouiaSafe : true), props),
      import_react3.default.createElement(MenuContent, { menuHeight, maxMenuHeight }, children)
    );
    return import_react3.default.createElement(Popper, Object.assign({ trigger: typeof toggle === "function" ? toggle(toggleRef) : toggle.toggleNode, triggerRef: toggleRef, popper: menu, popperRef: menuRef, isVisible: isOpen, zIndex }, popperProps));
  };
  var Select = import_react3.default.forwardRef((props, ref) => import_react3.default.createElement(SelectBase, Object.assign({ innerRef: ref }, props)));
  Select.displayName = "Select";

  // node_modules/@patternfly/react-core/dist/esm/components/Select/SelectOption.js
  var import_react4 = __toESM(require_react());
  var SelectOptionBase = (_a) => {
    var { children, className, innerRef, value } = _a, props = __rest(_a, ["children", "className", "innerRef", "value"]);
    return import_react4.default.createElement(MenuItem, Object.assign({ itemId: value, ref: innerRef, className: css(className) }, props), children);
  };
  var SelectOption = import_react4.default.forwardRef((props, ref) => import_react4.default.createElement(SelectOptionBase, Object.assign({}, props, { innerRef: ref })));
  SelectOption.displayName = "SelectOption";

  // node_modules/@patternfly/react-core/dist/esm/components/MenuToggle/MenuToggle.js
  var React41 = __toESM(require_react());

  // node_modules/@patternfly/react-styles/css/components/MenuToggle/menu-toggle.mjs
  var menu_toggle_default = {
    "check": "pf-v5-c-check",
    "checkInput": "pf-v5-c-check__input",
    "menuToggle": "pf-v5-c-menu-toggle",
    "menuToggleButton": "pf-v5-c-menu-toggle__button",
    "menuToggleControls": "pf-v5-c-menu-toggle__controls",
    "menuToggleCount": "pf-v5-c-menu-toggle__count",
    "menuToggleIcon": "pf-v5-c-menu-toggle__icon",
    "menuToggleStatusIcon": "pf-v5-c-menu-toggle__status-icon",
    "menuToggleText": "pf-v5-c-menu-toggle__text",
    "menuToggleToggleIcon": "pf-v5-c-menu-toggle__toggle-icon",
    "modifiers": {
      "primary": "pf-m-primary",
      "secondary": "pf-m-secondary",
      "expanded": "pf-m-expanded",
      "plain": "pf-m-plain",
      "text": "pf-m-text",
      "fullHeight": "pf-m-full-height",
      "disabled": "pf-m-disabled",
      "typeahead": "pf-m-typeahead",
      "splitButton": "pf-m-split-button",
      "action": "pf-m-action",
      "active": "pf-m-active",
      "fullWidth": "pf-m-full-width",
      "success": "pf-m-success",
      "warning": "pf-m-warning",
      "danger": "pf-m-danger"
    },
    "textInputGroup": "pf-v5-c-text-input-group",
    "themeDark": "pf-v5-theme-dark"
  };

  // node_modules/@patternfly/react-icons/dist/esm/icons/caret-down-icon.js
  var CaretDownIconConfig = {
    name: "CaretDownIcon",
    height: 512,
    width: 320,
    svgPath: "M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z",
    yOffset: 0,
    xOffset: 0
  };
  var CaretDownIcon = createIcon(CaretDownIconConfig);
  var caret_down_icon_default = CaretDownIcon;

  // node_modules/@patternfly/react-core/dist/esm/components/MenuToggle/MenuToggle.js
  var MenuToggleStatus;
  (function(MenuToggleStatus3) {
    MenuToggleStatus3["success"] = "success";
    MenuToggleStatus3["danger"] = "danger";
    MenuToggleStatus3["warning"] = "warning";
  })(MenuToggleStatus || (MenuToggleStatus = {}));
  var MenuToggleBase = class extends React41.Component {
    constructor() {
      super(...arguments);
      this.displayName = "MenuToggleBase";
      this.state = {
        ouiaStateId: getDefaultOUIAId(MenuToggle.displayName, this.props.variant)
      };
    }
    render() {
      const _a = this.props, { children, className, icon, badge, isExpanded, isDisabled, isFullHeight, isFullWidth, splitButtonOptions, variant, status, statusIcon, innerRef, onClick, "aria-label": ariaLabel, ouiaId, ouiaSafe } = _a, otherProps = __rest(_a, ["children", "className", "icon", "badge", "isExpanded", "isDisabled", "isFullHeight", "isFullWidth", "splitButtonOptions", "variant", "status", "statusIcon", "innerRef", "onClick", "aria-label", "ouiaId", "ouiaSafe"]);
      const isPlain = variant === "plain";
      const isPlainText = variant === "plainText";
      const isTypeahead = variant === "typeahead";
      const ouiaProps = getOUIAProps(MenuToggle.displayName, ouiaId !== null && ouiaId !== void 0 ? ouiaId : this.state.ouiaStateId, ouiaSafe);
      let _statusIcon = statusIcon;
      if (!statusIcon) {
        switch (status) {
          case MenuToggleStatus.success:
            _statusIcon = React41.createElement(check_circle_icon_default, { "aria-hidden": "true" });
            break;
          case MenuToggleStatus.warning:
            _statusIcon = React41.createElement(exclamation_triangle_icon_default, { "aria-hidden": "true" });
            break;
          case MenuToggleStatus.danger:
            _statusIcon = React41.createElement(exclamation_circle_icon_default, { "aria-hidden": "true" });
            break;
        }
      }
      const toggleControls = React41.createElement(
        "span",
        { className: css(menu_toggle_default.menuToggleControls) },
        status !== void 0 && React41.createElement("span", { className: css(menu_toggle_default.menuToggleStatusIcon) }, _statusIcon),
        React41.createElement(
          "span",
          { className: css(menu_toggle_default.menuToggleToggleIcon) },
          React41.createElement(caret_down_icon_default, { "aria-hidden": true })
        )
      );
      const content = React41.createElement(
        React41.Fragment,
        null,
        icon && React41.createElement("span", { className: css(menu_toggle_default.menuToggleIcon) }, icon),
        isTypeahead ? children : React41.createElement("span", { className: css(menu_toggle_default.menuToggleText) }, children),
        React41.isValidElement(badge) && React41.createElement("span", { className: css(menu_toggle_default.menuToggleCount) }, badge),
        isTypeahead ? React41.createElement("button", Object.assign({ type: "button", className: css(menu_toggle_default.menuToggleButton), "aria-expanded": isExpanded, onClick, "aria-label": ariaLabel || "Menu toggle", tabIndex: -1 }, ouiaProps), toggleControls) : toggleControls
      );
      const commonStyles = css(menu_toggle_default.menuToggle, isExpanded && menu_toggle_default.modifiers.expanded, variant === "primary" && menu_toggle_default.modifiers.primary, variant === "secondary" && menu_toggle_default.modifiers.secondary, status && menu_toggle_default.modifiers[status], (isPlain || isPlainText) && menu_toggle_default.modifiers.plain, isPlainText && menu_toggle_default.modifiers.text, isFullHeight && menu_toggle_default.modifiers.fullHeight, isFullWidth && menu_toggle_default.modifiers.fullWidth, isDisabled && menu_toggle_default.modifiers.disabled, className);
      const componentProps = Object.assign(Object.assign({ children: isPlain ? children : content }, isDisabled && { disabled: true }), otherProps);
      if (isTypeahead) {
        return React41.createElement("div", Object.assign({ ref: innerRef, className: css(commonStyles, menu_toggle_default.modifiers.typeahead) }, componentProps));
      }
      if (splitButtonOptions) {
        return React41.createElement(
          "div",
          { ref: innerRef, className: css(commonStyles, menu_toggle_default.modifiers.splitButton, (splitButtonOptions === null || splitButtonOptions === void 0 ? void 0 : splitButtonOptions.variant) === "action" && menu_toggle_default.modifiers.action) },
          splitButtonOptions === null || splitButtonOptions === void 0 ? void 0 : splitButtonOptions.items,
          React41.createElement(
            "button",
            Object.assign({ className: css(menu_toggle_default.menuToggleButton, children && menu_toggle_default.modifiers.text), type: "button", "aria-expanded": isExpanded, "aria-label": ariaLabel, disabled: isDisabled, onClick }, otherProps, ouiaProps),
            children && React41.createElement("span", { className: css(menu_toggle_default.menuToggleText) }, children),
            toggleControls
          )
        );
      }
      return React41.createElement("button", Object.assign({ className: css(commonStyles), type: "button", "aria-label": ariaLabel, "aria-expanded": isExpanded, ref: innerRef, disabled: isDisabled, onClick }, componentProps, ouiaProps));
    }
  };
  MenuToggleBase.defaultProps = {
    className: "",
    isExpanded: false,
    isDisabled: false,
    isFullWidth: false,
    isFullHeight: false,
    ouiaSafe: true
  };
  var MenuToggle = React41.forwardRef((props, ref) => React41.createElement(MenuToggleBase, Object.assign({ innerRef: ref }, props)));
  MenuToggle.displayName = "MenuToggle";

  // node_modules/@patternfly/react-core/dist/esm/components/InputGroup/InputGroup.js
  var React42 = __toESM(require_react());

  // node_modules/@patternfly/react-styles/css/components/InputGroup/input-group.mjs
  var input_group_default = {
    "inputGroup": "pf-v5-c-input-group",
    "inputGroupItem": "pf-v5-c-input-group__item",
    "inputGroupText": "pf-v5-c-input-group__text",
    "modifiers": {
      "box": "pf-m-box",
      "plain": "pf-m-plain",
      "disabled": "pf-m-disabled",
      "fill": "pf-m-fill"
    },
    "themeDark": "pf-v5-theme-dark"
  };

  // node_modules/@patternfly/react-core/dist/esm/components/InputGroup/InputGroup.js
  var InputGroupBase = (_a) => {
    var { className, children, innerRef } = _a, props = __rest(_a, ["className", "children", "innerRef"]);
    const ref = React42.useRef(null);
    const inputGroupRef = innerRef || ref;
    return React42.createElement("div", Object.assign({ ref: inputGroupRef, className: css(input_group_default.inputGroup, className) }, props), children);
  };
  InputGroupBase.displayName = "InputGroupBase";
  var InputGroup = React42.forwardRef((props, ref) => React42.createElement(InputGroupBase, Object.assign({ innerRef: ref }, props)));
  InputGroup.displayName = "InputGroup";

  // node_modules/@patternfly/react-core/dist/esm/components/InputGroup/InputGroupItem.js
  var React43 = __toESM(require_react());
  var InputGroupItem = (_a) => {
    var { className, children, isFill = false, isBox = false, isPlain, isDisabled } = _a, props = __rest(_a, ["className", "children", "isFill", "isBox", "isPlain", "isDisabled"]);
    return React43.createElement("div", Object.assign({ className: css(input_group_default.inputGroupItem, isFill && input_group_default.modifiers.fill, isBox && input_group_default.modifiers.box, isPlain && input_group_default.modifiers.plain, isDisabled && input_group_default.modifiers.disabled, className) }, props), children);
  };
  InputGroupItem.displayName = "InputGroupItem";

  // node_modules/@patternfly/react-core/dist/esm/components/Card/Card.js
  var React44 = __toESM(require_react());

  // node_modules/@patternfly/react-styles/css/components/Card/card.mjs
  var card_default = {
    "card": "pf-v5-c-card",
    "cardActions": "pf-v5-c-card__actions",
    "cardBody": "pf-v5-c-card__body",
    "cardExpandableContent": "pf-v5-c-card__expandable-content",
    "cardFooter": "pf-v5-c-card__footer",
    "cardHeader": "pf-v5-c-card__header",
    "cardHeaderMain": "pf-v5-c-card__header-main",
    "cardHeaderToggle": "pf-v5-c-card__header-toggle",
    "cardHeaderToggleIcon": "pf-v5-c-card__header-toggle-icon",
    "cardSelectableActions": "pf-v5-c-card__selectable-actions",
    "cardSrInput": "pf-v5-c-card__sr-input",
    "cardTitle": "pf-v5-c-card__title",
    "cardTitleText": "pf-v5-c-card__title-text",
    "check": "pf-v5-c-check",
    "checkInput": "pf-v5-c-check__input",
    "checkLabel": "pf-v5-c-check__label",
    "dirRtl": "pf-v5-m-dir-rtl",
    "divider": "pf-v5-c-divider",
    "modifiers": {
      "selectable": "pf-m-selectable",
      "clickable": "pf-m-clickable",
      "selected": "pf-m-selected",
      "current": "pf-m-current",
      "disabled": "pf-m-disabled",
      "hoverableRaised": "pf-m-hoverable-raised",
      "selectableRaised": "pf-m-selectable-raised",
      "nonSelectableRaised": "pf-m-non-selectable-raised",
      "selectedRaised": "pf-m-selected-raised",
      "compact": "pf-m-compact",
      "displayLg": "pf-m-display-lg",
      "flat": "pf-m-flat",
      "plain": "pf-m-plain",
      "rounded": "pf-m-rounded",
      "expanded": "pf-m-expanded",
      "fullHeight": "pf-m-full-height",
      "toggleRight": "pf-m-toggle-right",
      "noOffset": "pf-m-no-offset",
      "noFill": "pf-m-no-fill"
    },
    "radio": "pf-v5-c-radio",
    "radioInput": "pf-v5-c-radio__input",
    "radioLabel": "pf-v5-c-radio__label",
    "themeDark": "pf-v5-theme-dark"
  };

  // node_modules/@patternfly/react-core/dist/esm/components/Card/Card.js
  var CardContext = React44.createContext({
    cardId: "",
    registerTitleId: () => {
    },
    isExpanded: false,
    isClickable: false,
    isSelectable: false,
    isSelected: false,
    isClicked: false,
    isDisabled: false
  });
  var Card = (_a) => {
    var { children, id = "", className, component = "div", isCompact = false, isSelectable = false, isClickable = false, isDisabled = false, isSelectableRaised = false, isSelected = false, isClicked = false, isDisabledRaised = false, isFlat = false, isExpanded = false, isRounded = false, isLarge = false, isFullHeight = false, isPlain = false, ouiaId, ouiaSafe = true, hasSelectableInput = false, selectableInputAriaLabel, onSelectableInputChange = () => {
    } } = _a, props = __rest(_a, ["children", "id", "className", "component", "isCompact", "isSelectable", "isClickable", "isDisabled", "isSelectableRaised", "isSelected", "isClicked", "isDisabledRaised", "isFlat", "isExpanded", "isRounded", "isLarge", "isFullHeight", "isPlain", "ouiaId", "ouiaSafe", "hasSelectableInput", "selectableInputAriaLabel", "onSelectableInputChange"]);
    const Component20 = component;
    const ouiaProps = useOUIAProps(Card.displayName, ouiaId, ouiaSafe);
    const [titleId, setTitleId] = React44.useState("");
    const [ariaProps, setAriaProps] = React44.useState();
    if (isCompact && isLarge) {
      console.warn("Card: Cannot use isCompact with isLarge. Defaulting to isCompact");
      isLarge = false;
    }
    const getSelectableModifiers = () => {
      if (isDisabledRaised) {
        return css(card_default.modifiers.nonSelectableRaised);
      }
      if (isSelectableRaised) {
        return css(card_default.modifiers.selectableRaised, isSelected && card_default.modifiers.selectedRaised);
      }
      if (isSelectable && isClickable) {
        return css(card_default.modifiers.selectable, card_default.modifiers.clickable, (isSelected || isClicked) && card_default.modifiers.current);
      }
      if (isSelectable) {
        return css(card_default.modifiers.selectable, isSelected && card_default.modifiers.selected);
      }
      if (isClickable) {
        return css(card_default.modifiers.clickable, isClicked && card_default.modifiers.current);
      }
      return "";
    };
    const containsCardTitleChildRef = React44.useRef(false);
    const registerTitleId = (id2) => {
      setTitleId(id2);
      containsCardTitleChildRef.current = !!id2;
    };
    React44.useEffect(() => {
      if (selectableInputAriaLabel) {
        setAriaProps({ "aria-label": selectableInputAriaLabel });
      } else if (titleId) {
        setAriaProps({ "aria-labelledby": titleId });
      } else if (hasSelectableInput && !containsCardTitleChildRef.current) {
        setAriaProps({});
        console.warn("If no CardTitle component is passed as a child of Card the selectableInputAriaLabel prop must be passed");
      }
    }, [hasSelectableInput, selectableInputAriaLabel, titleId]);
    return React44.createElement(
      CardContext.Provider,
      { value: {
        cardId: id,
        registerTitleId,
        isExpanded,
        isClickable,
        isSelectable,
        isSelected,
        isClicked,
        isDisabled,
        // TODO: Remove hasSelectableInput when deprecated prop is removed
        hasSelectableInput
      } },
      hasSelectableInput && React44.createElement("input", Object.assign({ className: "pf-v5-screen-reader", id: `${id}-input` }, ariaProps, { type: "checkbox", checked: isSelected, onChange: (event) => onSelectableInputChange(event, id), disabled: isDisabledRaised, tabIndex: -1 })),
      React44.createElement(Component20, Object.assign({ id, className: css(card_default.card, isCompact && card_default.modifiers.compact, isExpanded && card_default.modifiers.expanded, isFlat && card_default.modifiers.flat, isRounded && card_default.modifiers.rounded, isLarge && card_default.modifiers.displayLg, isFullHeight && card_default.modifiers.fullHeight, isPlain && card_default.modifiers.plain, getSelectableModifiers(), isDisabled && card_default.modifiers.disabled, className), tabIndex: isSelectableRaised ? "0" : void 0 }, props, ouiaProps), children)
    );
  };
  Card.displayName = "Card";

  // node_modules/@patternfly/react-core/dist/esm/components/Card/CardBody.js
  var React45 = __toESM(require_react());
  var CardBody = (_a) => {
    var { children, className, component = "div", isFilled = true } = _a, props = __rest(_a, ["children", "className", "component", "isFilled"]);
    const Component20 = component;
    return React45.createElement(Component20, Object.assign({ className: css(card_default.cardBody, !isFilled && card_default.modifiers.noFill, className) }, props), children);
  };
  CardBody.displayName = "CardBody";

  // node_modules/@patternfly/react-core/dist/esm/components/Card/CardTitle.js
  var React46 = __toESM(require_react());
  var CardTitle = (_a) => {
    var { children, className, component = "div" } = _a, props = __rest(_a, ["children", "className", "component"]);
    const { cardId, registerTitleId } = React46.useContext(CardContext);
    const Component20 = component;
    const titleId = cardId ? `${cardId}-title` : "";
    React46.useEffect(() => {
      registerTitleId(titleId);
      return () => registerTitleId("");
    }, [registerTitleId, titleId]);
    return React46.createElement(
      "div",
      { className: css(card_default.cardTitle) },
      React46.createElement(Component20, Object.assign({ className: css(card_default.cardTitleText, className), id: titleId || void 0 }, props), children)
    );
  };
  CardTitle.displayName = "CardTitle";

  // node_modules/@patternfly/react-core/dist/esm/components/Divider/Divider.js
  var React47 = __toESM(require_react());

  // node_modules/@patternfly/react-styles/css/components/Divider/divider.mjs
  var divider_default = {
    "divider": "pf-v5-c-divider",
    "modifiers": {
      "hidden": "pf-m-hidden",
      "hiddenOnSm": "pf-m-hidden-on-sm",
      "visibleOnSm": "pf-m-visible-on-sm",
      "hiddenOnMd": "pf-m-hidden-on-md",
      "visibleOnMd": "pf-m-visible-on-md",
      "hiddenOnLg": "pf-m-hidden-on-lg",
      "visibleOnLg": "pf-m-visible-on-lg",
      "hiddenOnXl": "pf-m-hidden-on-xl",
      "visibleOnXl": "pf-m-visible-on-xl",
      "hiddenOn_2xl": "pf-m-hidden-on-2xl",
      "visibleOn_2xl": "pf-m-visible-on-2xl",
      "vertical": "pf-m-vertical",
      "insetNone": "pf-m-inset-none",
      "insetXs": "pf-m-inset-xs",
      "insetSm": "pf-m-inset-sm",
      "insetMd": "pf-m-inset-md",
      "insetLg": "pf-m-inset-lg",
      "insetXl": "pf-m-inset-xl",
      "inset_2xl": "pf-m-inset-2xl",
      "inset_3xl": "pf-m-inset-3xl",
      "horizontalOnSm": "pf-m-horizontal-on-sm",
      "verticalOnSm": "pf-m-vertical-on-sm",
      "insetNoneOnSm": "pf-m-inset-none-on-sm",
      "insetXsOnSm": "pf-m-inset-xs-on-sm",
      "insetSmOnSm": "pf-m-inset-sm-on-sm",
      "insetMdOnSm": "pf-m-inset-md-on-sm",
      "insetLgOnSm": "pf-m-inset-lg-on-sm",
      "insetXlOnSm": "pf-m-inset-xl-on-sm",
      "inset_2xlOnSm": "pf-m-inset-2xl-on-sm",
      "inset_3xlOnSm": "pf-m-inset-3xl-on-sm",
      "horizontalOnMd": "pf-m-horizontal-on-md",
      "verticalOnMd": "pf-m-vertical-on-md",
      "insetNoneOnMd": "pf-m-inset-none-on-md",
      "insetXsOnMd": "pf-m-inset-xs-on-md",
      "insetSmOnMd": "pf-m-inset-sm-on-md",
      "insetMdOnMd": "pf-m-inset-md-on-md",
      "insetLgOnMd": "pf-m-inset-lg-on-md",
      "insetXlOnMd": "pf-m-inset-xl-on-md",
      "inset_2xlOnMd": "pf-m-inset-2xl-on-md",
      "inset_3xlOnMd": "pf-m-inset-3xl-on-md",
      "horizontalOnLg": "pf-m-horizontal-on-lg",
      "verticalOnLg": "pf-m-vertical-on-lg",
      "insetNoneOnLg": "pf-m-inset-none-on-lg",
      "insetXsOnLg": "pf-m-inset-xs-on-lg",
      "insetSmOnLg": "pf-m-inset-sm-on-lg",
      "insetMdOnLg": "pf-m-inset-md-on-lg",
      "insetLgOnLg": "pf-m-inset-lg-on-lg",
      "insetXlOnLg": "pf-m-inset-xl-on-lg",
      "inset_2xlOnLg": "pf-m-inset-2xl-on-lg",
      "inset_3xlOnLg": "pf-m-inset-3xl-on-lg",
      "horizontalOnXl": "pf-m-horizontal-on-xl",
      "verticalOnXl": "pf-m-vertical-on-xl",
      "insetNoneOnXl": "pf-m-inset-none-on-xl",
      "insetXsOnXl": "pf-m-inset-xs-on-xl",
      "insetSmOnXl": "pf-m-inset-sm-on-xl",
      "insetMdOnXl": "pf-m-inset-md-on-xl",
      "insetLgOnXl": "pf-m-inset-lg-on-xl",
      "insetXlOnXl": "pf-m-inset-xl-on-xl",
      "inset_2xlOnXl": "pf-m-inset-2xl-on-xl",
      "inset_3xlOnXl": "pf-m-inset-3xl-on-xl",
      "horizontalOn_2xl": "pf-m-horizontal-on-2xl",
      "verticalOn_2xl": "pf-m-vertical-on-2xl",
      "insetNoneOn_2xl": "pf-m-inset-none-on-2xl",
      "insetXsOn_2xl": "pf-m-inset-xs-on-2xl",
      "insetSmOn_2xl": "pf-m-inset-sm-on-2xl",
      "insetMdOn_2xl": "pf-m-inset-md-on-2xl",
      "insetLgOn_2xl": "pf-m-inset-lg-on-2xl",
      "insetXlOn_2xl": "pf-m-inset-xl-on-2xl",
      "inset_2xlOn_2xl": "pf-m-inset-2xl-on-2xl",
      "inset_3xlOn_2xl": "pf-m-inset-3xl-on-2xl"
    }
  };

  // node_modules/@patternfly/react-core/dist/esm/components/Divider/Divider.js
  var DividerVariant;
  (function(DividerVariant3) {
    DividerVariant3["hr"] = "hr";
    DividerVariant3["li"] = "li";
    DividerVariant3["div"] = "div";
  })(DividerVariant || (DividerVariant = {}));
  var Divider = (_a) => {
    var { className, component = DividerVariant.hr, inset, orientation } = _a, props = __rest(_a, ["className", "component", "inset", "orientation"]);
    const Component20 = component;
    return React47.createElement(Component20, Object.assign({ className: css(divider_default.divider, formatBreakpointMods(inset, divider_default), formatBreakpointMods(orientation, divider_default), className) }, component !== "hr" && { role: "separator" }, props));
  };
  Divider.displayName = "Divider";

  // node_modules/@patternfly/react-styles/css/components/Form/form.mjs
  var form_default = {
    "dirRtl": "pf-v5-m-dir-rtl",
    "form": "pf-v5-c-form",
    "formActions": "pf-v5-c-form__actions",
    "formFieldGroup": "pf-v5-c-form__field-group",
    "formFieldGroupBody": "pf-v5-c-form__field-group-body",
    "formFieldGroupHeader": "pf-v5-c-form__field-group-header",
    "formFieldGroupHeaderActions": "pf-v5-c-form__field-group-header-actions",
    "formFieldGroupHeaderDescription": "pf-v5-c-form__field-group-header-description",
    "formFieldGroupHeaderMain": "pf-v5-c-form__field-group-header-main",
    "formFieldGroupHeaderTitle": "pf-v5-c-form__field-group-header-title",
    "formFieldGroupHeaderTitleText": "pf-v5-c-form__field-group-header-title-text",
    "formFieldGroupToggle": "pf-v5-c-form__field-group-toggle",
    "formFieldGroupToggleButton": "pf-v5-c-form__field-group-toggle-button",
    "formFieldGroupToggleIcon": "pf-v5-c-form__field-group-toggle-icon",
    "formFieldset": "pf-v5-c-form__fieldset",
    "formGroup": "pf-v5-c-form__group",
    "formGroupControl": "pf-v5-c-form__group-control",
    "formGroupLabel": "pf-v5-c-form__group-label",
    "formGroupLabelHelp": "pf-v5-c-form__group-label-help",
    "formGroupLabelInfo": "pf-v5-c-form__group-label-info",
    "formGroupLabelMain": "pf-v5-c-form__group-label-main",
    "formHelperText": "pf-v5-c-form__helper-text",
    "formHelperTextIcon": "pf-v5-c-form__helper-text-icon",
    "formLabel": "pf-v5-c-form__label",
    "formLabelRequired": "pf-v5-c-form__label-required",
    "formLabelText": "pf-v5-c-form__label-text",
    "formSection": "pf-v5-c-form__section",
    "formSectionTitle": "pf-v5-c-form__section-title",
    "modifiers": {
      "horizontal": "pf-m-horizontal",
      "alignRight": "pf-m-align-right",
      "noPaddingTop": "pf-m-no-padding-top",
      "info": "pf-m-info",
      "horizontalOnXs": "pf-m-horizontal-on-xs",
      "horizontalOnSm": "pf-m-horizontal-on-sm",
      "horizontalOnMd": "pf-m-horizontal-on-md",
      "horizontalOnLg": "pf-m-horizontal-on-lg",
      "horizontalOnXl": "pf-m-horizontal-on-xl",
      "horizontalOn_2xl": "pf-m-horizontal-on-2xl",
      "limitWidth": "pf-m-limit-width",
      "action": "pf-m-action",
      "disabled": "pf-m-disabled",
      "inline": "pf-m-inline",
      "stack": "pf-m-stack",
      "error": "pf-m-error",
      "success": "pf-m-success",
      "warning": "pf-m-warning",
      "inactive": "pf-m-inactive",
      "hidden": "pf-m-hidden",
      "expanded": "pf-m-expanded"
    },
    "themeDark": "pf-v5-theme-dark"
  };

  // node_modules/@patternfly/react-core/dist/esm/components/Form/Form.js
  var React48 = __toESM(require_react());

  // node_modules/@patternfly/react-tokens/dist/esm/c_form_m_limit_width_MaxWidth.js
  var c_form_m_limit_width_MaxWidth = {
    "name": "--pf-v5-c-form--m-limit-width--MaxWidth",
    "value": "55rem",
    "var": "var(--pf-v5-c-form--m-limit-width--MaxWidth)"
  };
  var c_form_m_limit_width_MaxWidth_default = c_form_m_limit_width_MaxWidth;

  // node_modules/@patternfly/react-core/dist/esm/components/Form/Form.js
  var FormBase = (_a) => {
    var { children = null, className = "", isHorizontal = false, isWidthLimited = false, maxWidth = "", innerRef } = _a, props = __rest(_a, ["children", "className", "isHorizontal", "isWidthLimited", "maxWidth", "innerRef"]);
    return React48.createElement("form", Object.assign({ noValidate: true }, maxWidth && {
      style: Object.assign({ [c_form_m_limit_width_MaxWidth_default.name]: maxWidth }, props.style)
    }, props, { className: css(form_default.form, isHorizontal && form_default.modifiers.horizontal, (isWidthLimited || maxWidth) && form_default.modifiers.limitWidth, className), ref: innerRef }), children);
  };
  var Form2 = React48.forwardRef((props, ref) => React48.createElement(FormBase, Object.assign({ innerRef: ref }, props)));
  Form2.displayName = "Form";

  // node_modules/@patternfly/react-core/dist/esm/components/Form/FormGroup.js
  var React49 = __toESM(require_react());
  var FormGroup = (_a) => {
    var { children = null, className = "", label, labelInfo, labelIcon, isRequired = false, isInline = false, hasNoPaddingTop = false, isStack = false, fieldId, role } = _a, props = __rest(_a, ["children", "className", "label", "labelInfo", "labelIcon", "isRequired", "isInline", "hasNoPaddingTop", "isStack", "fieldId", "role"]);
    const isGroupOrRadioGroup = role === "group" || role === "radiogroup";
    const LabelComponent = isGroupOrRadioGroup ? "span" : "label";
    const labelContent = React49.createElement(
      React49.Fragment,
      null,
      React49.createElement(
        LabelComponent,
        Object.assign({ className: css(form_default.formLabel) }, !isGroupOrRadioGroup && { htmlFor: fieldId }),
        React49.createElement("span", { className: css(form_default.formLabelText) }, label),
        isRequired && React49.createElement(
          "span",
          { className: css(form_default.formLabelRequired), "aria-hidden": "true" },
          " ",
          ASTERISK
        )
      ),
      " ",
      React49.isValidElement(labelIcon) && labelIcon
    );
    return React49.createElement(GenerateId, null, (randomId) => React49.createElement(
      "div",
      Object.assign({ className: css(form_default.formGroup, className) }, role && { role }, isGroupOrRadioGroup && { "aria-labelledby": `${fieldId || randomId}-legend` }, props),
      label && React49.createElement(
        "div",
        Object.assign({ className: css(form_default.formGroupLabel, labelInfo && form_default.modifiers.info, hasNoPaddingTop && form_default.modifiers.noPaddingTop) }, isGroupOrRadioGroup && { id: `${fieldId || randomId}-legend` }),
        labelInfo && React49.createElement(
          React49.Fragment,
          null,
          React49.createElement("div", { className: css(form_default.formGroupLabelMain) }, labelContent),
          React49.createElement("div", { className: css(form_default.formGroupLabelInfo) }, labelInfo)
        ),
        !labelInfo && labelContent
      ),
      React49.createElement("div", { className: css(form_default.formGroupControl, isInline && form_default.modifiers.inline, isStack && form_default.modifiers.stack) }, children)
    ));
  };
  FormGroup.displayName = "FormGroup";

  // node_modules/@patternfly/react-core/dist/esm/components/TextArea/TextArea.js
  var React50 = __toESM(require_react());
  var TextAreResizeOrientation;
  (function(TextAreResizeOrientation2) {
    TextAreResizeOrientation2["horizontal"] = "horizontal";
    TextAreResizeOrientation2["vertical"] = "vertical";
    TextAreResizeOrientation2["both"] = "both";
  })(TextAreResizeOrientation || (TextAreResizeOrientation = {}));
  var TextAreaReadOnlyVariant;
  (function(TextAreaReadOnlyVariant2) {
    TextAreaReadOnlyVariant2["default"] = "default";
    TextAreaReadOnlyVariant2["plain"] = "plain";
  })(TextAreaReadOnlyVariant || (TextAreaReadOnlyVariant = {}));
  var TextAreaBase = class extends React50.Component {
    constructor(props) {
      super(props);
      this.inputRef = React50.createRef();
      this.setAutoHeight = (field) => {
        const parent2 = field.parentElement;
        parent2.style.setProperty("height", "inherit");
        const computed = window.getComputedStyle(field);
        const height = parseInt(computed.getPropertyValue("border-top-width")) + parseInt(computed.getPropertyValue("padding-top")) + field.scrollHeight + parseInt(computed.getPropertyValue("padding-bottom")) + parseInt(computed.getPropertyValue("border-bottom-width"));
        parent2.style.setProperty("height", `${height}px`);
      };
      this.handleChange = (event) => {
        const field = event.currentTarget;
        if (this.props.autoResize && canUseDOM) {
          this.setAutoHeight(field);
        }
        if (this.props.onChange) {
          this.props.onChange(event, field.value);
        }
      };
      if (!props.id && !props["aria-label"]) {
        console.error("TextArea: TextArea requires either an id or aria-label to be specified");
      }
    }
    componentDidMount() {
      const inputRef = this.props.innerRef || this.inputRef;
      if (this.props.autoResize && canUseDOM) {
        const field = inputRef.current;
        this.setAutoHeight(field);
      }
    }
    render() {
      const _a = this.props, {
        className,
        value,
        validated,
        isRequired,
        isDisabled,
        readOnlyVariant,
        resizeOrientation,
        innerRef,
        disabled,
        /* eslint-disable @typescript-eslint/no-unused-vars */
        autoResize,
        onChange,
        /* eslint-enable @typescript-eslint/no-unused-vars */
        onBlur,
        onFocus
      } = _a, props = __rest(_a, ["className", "value", "validated", "isRequired", "isDisabled", "readOnlyVariant", "resizeOrientation", "innerRef", "disabled", "autoResize", "onChange", "onBlur", "onFocus"]);
      const orientation = `resize${capitalize(resizeOrientation)}`;
      const hasStatusIcon = ["success", "error", "warning"].includes(validated);
      return React50.createElement(
        "span",
        { className: css(form_control_default.formControl, readOnlyVariant && form_control_default.modifiers.readonly, readOnlyVariant === "plain" && form_control_default.modifiers.plain, resizeOrientation && form_control_default.modifiers[orientation], isDisabled && form_control_default.modifiers.disabled, hasStatusIcon && form_control_default.modifiers[validated], className) },
        React50.createElement("textarea", Object.assign({ onChange: this.handleChange, onFocus, onBlur }, typeof this.props.defaultValue !== "string" && { value }, { "aria-invalid": validated === ValidatedOptions.error, required: isRequired, disabled: isDisabled || disabled, readOnly: !!readOnlyVariant, ref: innerRef || this.inputRef }, props)),
        hasStatusIcon && React50.createElement(
          "span",
          { className: css(form_control_default.formControlUtilities) },
          React50.createElement(FormControlIcon, { status: validated })
        )
      );
    }
  };
  TextAreaBase.displayName = "TextArea";
  TextAreaBase.defaultProps = {
    innerRef: React50.createRef(),
    className: "",
    isRequired: false,
    isDisabled: false,
    validated: "default",
    resizeOrientation: "both",
    "aria-label": null
  };
  var TextArea = React50.forwardRef((props, ref) => React50.createElement(TextAreaBase, Object.assign({}, props, { innerRef: ref })));
  TextArea.displayName = "TextArea";

  // node_modules/@patternfly/react-core/dist/esm/components/Masthead/Masthead.js
  var React52 = __toESM(require_react());

  // node_modules/@patternfly/react-styles/css/components/Masthead/masthead.mjs
  var masthead_default = {
    "button": "pf-v5-c-button",
    "contextSelector": "pf-v5-c-context-selector",
    "dropdown": "pf-v5-c-dropdown",
    "masthead": "pf-v5-c-masthead",
    "mastheadBrand": "pf-v5-c-masthead__brand",
    "mastheadContent": "pf-v5-c-masthead__content",
    "mastheadMain": "pf-v5-c-masthead__main",
    "mastheadToggle": "pf-v5-c-masthead__toggle",
    "menuToggle": "pf-v5-c-menu-toggle",
    "modifiers": {
      "light_200": "pf-m-light-200",
      "light": "pf-m-light",
      "plain": "pf-m-plain",
      "resizeObserver": "pf-m-resize-observer",
      "fullHeight": "pf-m-full-height",
      "horizontal": "pf-m-horizontal",
      "displayStack": "pf-m-display-stack",
      "displayInline": "pf-m-display-inline",
      "insetNone": "pf-m-inset-none",
      "insetSm": "pf-m-inset-sm",
      "insetMd": "pf-m-inset-md",
      "insetLg": "pf-m-inset-lg",
      "insetXl": "pf-m-inset-xl",
      "inset_2xl": "pf-m-inset-2xl",
      "displayStackOnSm": "pf-m-display-stack-on-sm",
      "displayInlineOnSm": "pf-m-display-inline-on-sm",
      "insetNoneOnSm": "pf-m-inset-none-on-sm",
      "insetSmOnSm": "pf-m-inset-sm-on-sm",
      "insetMdOnSm": "pf-m-inset-md-on-sm",
      "insetLgOnSm": "pf-m-inset-lg-on-sm",
      "insetXlOnSm": "pf-m-inset-xl-on-sm",
      "inset_2xlOnSm": "pf-m-inset-2xl-on-sm",
      "displayStackOnMd": "pf-m-display-stack-on-md",
      "displayInlineOnMd": "pf-m-display-inline-on-md",
      "insetNoneOnMd": "pf-m-inset-none-on-md",
      "insetSmOnMd": "pf-m-inset-sm-on-md",
      "insetMdOnMd": "pf-m-inset-md-on-md",
      "insetLgOnMd": "pf-m-inset-lg-on-md",
      "insetXlOnMd": "pf-m-inset-xl-on-md",
      "inset_2xlOnMd": "pf-m-inset-2xl-on-md",
      "displayStackOnLg": "pf-m-display-stack-on-lg",
      "displayInlineOnLg": "pf-m-display-inline-on-lg",
      "insetNoneOnLg": "pf-m-inset-none-on-lg",
      "insetSmOnLg": "pf-m-inset-sm-on-lg",
      "insetMdOnLg": "pf-m-inset-md-on-lg",
      "insetLgOnLg": "pf-m-inset-lg-on-lg",
      "insetXlOnLg": "pf-m-inset-xl-on-lg",
      "inset_2xlOnLg": "pf-m-inset-2xl-on-lg",
      "displayStackOnXl": "pf-m-display-stack-on-xl",
      "displayInlineOnXl": "pf-m-display-inline-on-xl",
      "insetNoneOnXl": "pf-m-inset-none-on-xl",
      "insetSmOnXl": "pf-m-inset-sm-on-xl",
      "insetMdOnXl": "pf-m-inset-md-on-xl",
      "insetLgOnXl": "pf-m-inset-lg-on-xl",
      "insetXlOnXl": "pf-m-inset-xl-on-xl",
      "inset_2xlOnXl": "pf-m-inset-2xl-on-xl",
      "displayStackOn_2xl": "pf-m-display-stack-on-2xl",
      "displayInlineOn_2xl": "pf-m-display-inline-on-2xl",
      "insetNoneOn_2xl": "pf-m-inset-none-on-2xl",
      "insetSmOn_2xl": "pf-m-inset-sm-on-2xl",
      "insetMdOn_2xl": "pf-m-inset-md-on-2xl",
      "insetLgOn_2xl": "pf-m-inset-lg-on-2xl",
      "insetXlOn_2xl": "pf-m-inset-xl-on-2xl",
      "inset_2xlOn_2xl": "pf-m-inset-2xl-on-2xl"
    },
    "nav": "pf-v5-c-nav",
    "page": "pf-v5-c-page",
    "themeDark": "pf-v5-theme-dark",
    "toolbar": "pf-v5-c-toolbar",
    "toolbarContentSection": "pf-v5-c-toolbar__content-section",
    "toolbarExpandableContent": "pf-v5-c-toolbar__expandable-content"
  };

  // node_modules/@patternfly/react-core/dist/esm/components/Page/PageContext.js
  var React51 = __toESM(require_react());
  var pageContextDefaults = {
    isManagedSidebar: false,
    isSidebarOpen: false,
    onSidebarToggle: () => null,
    width: null,
    height: null,
    getBreakpoint,
    getVerticalBreakpoint
  };
  var PageContext = React51.createContext(pageContextDefaults);
  var PageContextProvider = PageContext.Provider;
  var PageContextConsumer = PageContext.Consumer;

  // node_modules/@patternfly/react-core/dist/esm/components/Masthead/Masthead.js
  var Masthead = (_a) => {
    var { children, className, backgroundColor = "dark", display = {
      md: "inline"
    }, inset } = _a, props = __rest(_a, ["children", "className", "backgroundColor", "display", "inset"]);
    const { width, getBreakpoint: getBreakpoint2 } = React52.useContext(PageContext);
    return React52.createElement("header", Object.assign({ className: css(masthead_default.masthead, formatBreakpointMods(display, masthead_default, "display-", getBreakpoint2(width)), formatBreakpointMods(inset, masthead_default, "", getBreakpoint2(width)), backgroundColor === "light" && masthead_default.modifiers.light, backgroundColor === "light200" && masthead_default.modifiers.light_200, className) }, props), children);
  };
  Masthead.displayName = "Masthead";

  // node_modules/@patternfly/react-core/dist/esm/components/Masthead/MastheadBrand.js
  var React53 = __toESM(require_react());
  var MastheadBrand = (_a) => {
    var { children, className, component } = _a, props = __rest(_a, ["children", "className", "component"]);
    let Component20 = component;
    if (!component) {
      if ((props === null || props === void 0 ? void 0 : props.href) !== void 0) {
        Component20 = "a";
      } else {
        Component20 = "span";
      }
    }
    return React53.createElement(Component20, Object.assign({ className: css(masthead_default.mastheadBrand, className) }, Component20 === "a" && { tabIndex: 0 }, props), children);
  };
  MastheadBrand.displayName = "MastheadBrand";

  // node_modules/@patternfly/react-core/dist/esm/components/Masthead/MastheadContent.js
  var React54 = __toESM(require_react());
  var MastheadContent = (_a) => {
    var { children, className } = _a, props = __rest(_a, ["children", "className"]);
    return React54.createElement("div", Object.assign({ className: css(masthead_default.mastheadContent, className) }, props), children);
  };
  MastheadContent.displayName = "MastheadContent";

  // node_modules/@patternfly/react-core/dist/esm/components/Masthead/MastheadMain.js
  var React55 = __toESM(require_react());
  var MastheadMain = (_a) => {
    var { children, className } = _a, props = __rest(_a, ["children", "className"]);
    return React55.createElement("div", Object.assign({ className: css(masthead_default.mastheadMain, className) }, props), children);
  };
  MastheadMain.displayName = "MastheadMain";

  // node_modules/@patternfly/react-core/dist/esm/components/Masthead/MastheadToggle.js
  var React56 = __toESM(require_react());
  var MastheadToggle = (_a) => {
    var { children, className } = _a, props = __rest(_a, ["children", "className"]);
    return React56.createElement("span", Object.assign({ className: css(masthead_default.mastheadToggle, className) }, props), children);
  };
  MastheadToggle.displayName = "MastheadToggle";

  // node_modules/@patternfly/react-core/dist/esm/components/Nav/Nav.js
  var React57 = __toESM(require_react());

  // node_modules/@patternfly/react-styles/css/components/Nav/nav.mjs
  var nav_default = {
    "dirRtl": "pf-v5-m-dir-rtl",
    "divider": "pf-v5-c-divider",
    "menu": "pf-v5-c-menu",
    "menuContent": "pf-v5-c-menu__content",
    "menuItem": "pf-v5-c-menu__item",
    "menuItemToggleIcon": "pf-v5-c-menu__item-toggle-icon",
    "menuListItem": "pf-v5-c-menu__list-item",
    "modifiers": {
      "flyout": "pf-m-flyout",
      "top": "pf-m-top",
      "left": "pf-m-left",
      "current": "pf-m-current",
      "drillUp": "pf-m-drill-up",
      "horizontal": "pf-m-horizontal",
      "tertiary": "pf-m-tertiary",
      "horizontalSubnav": "pf-m-horizontal-subnav",
      "light": "pf-m-light",
      "scrollable": "pf-m-scrollable",
      "overflowHidden": "pf-m-overflow-hidden",
      "expandable": "pf-m-expandable",
      "expanded": "pf-m-expanded",
      "drilldown": "pf-m-drilldown",
      "hover": "pf-m-hover",
      "start": "pf-m-start"
    },
    "nav": "pf-v5-c-nav",
    "navItem": "pf-v5-c-nav__item",
    "navLink": "pf-v5-c-nav__link",
    "navList": "pf-v5-c-nav__list",
    "navScrollButton": "pf-v5-c-nav__scroll-button",
    "navSection": "pf-v5-c-nav__section",
    "navSectionTitle": "pf-v5-c-nav__section-title",
    "navSubnav": "pf-v5-c-nav__subnav",
    "navToggle": "pf-v5-c-nav__toggle",
    "navToggleIcon": "pf-v5-c-nav__toggle-icon",
    "themeDark": "pf-v5-theme-dark"
  };

  // node_modules/@patternfly/react-core/dist/esm/components/Nav/Nav.js
  var navContextDefaults = {};
  var NavContext = React57.createContext(navContextDefaults);
  var Nav = class _Nav extends React57.Component {
    constructor() {
      super(...arguments);
      this.state = {
        isScrollable: false,
        ouiaStateId: getDefaultOUIAId(_Nav.displayName, this.props.variant),
        flyoutRef: null
      };
      this.navRef = React57.createRef();
    }
    // Callback from NavItem
    onSelect(event, groupId, itemId, to, preventDefault, onClick) {
      if (preventDefault) {
        event.preventDefault();
      }
      this.props.onSelect(event, { groupId, itemId, to });
      if (onClick) {
        onClick(event, itemId, groupId, to);
      }
    }
    // Callback from NavExpandable
    onToggle(event, groupId, toggleValue) {
      this.props.onToggle(event, {
        groupId,
        isExpanded: toggleValue
      });
    }
    render() {
      const _a = this.props, {
        "aria-label": ariaLabel,
        children,
        className,
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        onSelect,
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        onToggle,
        theme,
        ouiaId,
        ouiaSafe,
        variant
      } = _a, props = __rest(_a, ["aria-label", "children", "className", "onSelect", "onToggle", "theme", "ouiaId", "ouiaSafe", "variant"]);
      const isHorizontal = ["horizontal", "tertiary"].includes(variant);
      return React57.createElement(
        NavContext.Provider,
        { value: {
          onSelect: (event, groupId, itemId, to, preventDefault, onClick) => this.onSelect(event, groupId, itemId, to, preventDefault, onClick),
          onToggle: (event, groupId, expanded) => this.onToggle(event, groupId, expanded),
          updateIsScrollable: (isScrollable) => this.setState({ isScrollable }),
          isHorizontal: ["horizontal", "tertiary", "horizontal-subnav"].includes(variant),
          flyoutRef: this.state.flyoutRef,
          setFlyoutRef: (flyoutRef) => this.setState({ flyoutRef }),
          navRef: this.navRef
        } },
        React57.createElement("nav", Object.assign({ className: css(nav_default.nav, theme === "light" && nav_default.modifiers.light, isHorizontal && nav_default.modifiers.horizontal, variant === "tertiary" && nav_default.modifiers.tertiary, variant === "horizontal-subnav" && nav_default.modifiers.horizontalSubnav, this.state.isScrollable && nav_default.modifiers.scrollable, className), "aria-label": ariaLabel || (["tertiary", "horizontal-subnav"].includes(variant) ? "Local" : "Global"), ref: this.navRef }, getOUIAProps(_Nav.displayName, ouiaId !== void 0 ? ouiaId : this.state.ouiaStateId, ouiaSafe), props), children)
      );
    }
  };
  Nav.displayName = "Nav";
  Nav.defaultProps = {
    onSelect: () => void 0,
    onToggle: () => void 0,
    theme: "dark",
    ouiaSafe: true
  };

  // node_modules/@patternfly/react-core/dist/esm/components/Nav/NavList.js
  var React59 = __toESM(require_react());

  // node_modules/@patternfly/react-core/dist/esm/components/Page/PageSidebar.js
  var React58 = __toESM(require_react());

  // node_modules/@patternfly/react-styles/css/components/Page/page.mjs
  var page_default = {
    "avatar": "pf-v5-c-avatar",
    "brand": "pf-v5-c-brand",
    "button": "pf-v5-c-button",
    "contextSelector": "pf-v5-c-context-selector",
    "dirRtl": "pf-v5-m-dir-rtl",
    "drawer": "pf-v5-c-drawer",
    "masthead": "pf-v5-c-masthead",
    "modifiers": {
      "light": "pf-m-light",
      "menu": "pf-m-menu",
      "hidden": "pf-m-hidden",
      "hiddenOnSm": "pf-m-hidden-on-sm",
      "visibleOnSm": "pf-m-visible-on-sm",
      "hiddenOnMd": "pf-m-hidden-on-md",
      "visibleOnMd": "pf-m-visible-on-md",
      "hiddenOnLg": "pf-m-hidden-on-lg",
      "visibleOnLg": "pf-m-visible-on-lg",
      "hiddenOnXl": "pf-m-hidden-on-xl",
      "visibleOnXl": "pf-m-visible-on-xl",
      "hiddenOn_2xl": "pf-m-hidden-on-2xl",
      "visibleOn_2xl": "pf-m-visible-on-2xl",
      "read": "pf-m-read",
      "selected": "pf-m-selected",
      "unread": "pf-m-unread",
      "attention": "pf-m-attention",
      "expanded": "pf-m-expanded",
      "collapsed": "pf-m-collapsed",
      "pageInsets": "pf-m-page-insets",
      "insetNone": "pf-m-inset-none",
      "fill": "pf-m-fill",
      "noFill": "pf-m-no-fill",
      "limitWidth": "pf-m-limit-width",
      "alignCenter": "pf-m-align-center",
      "overflowScroll": "pf-m-overflow-scroll",
      "shadowBottom": "pf-m-shadow-bottom",
      "shadowTop": "pf-m-shadow-top",
      "stickyTop": "pf-m-sticky-top",
      "stickyBottom": "pf-m-sticky-bottom",
      "stickyTopOnSmHeight": "pf-m-sticky-top-on-sm-height",
      "stickyBottomOnSmHeight": "pf-m-sticky-bottom-on-sm-height",
      "stickyTopOnMdHeight": "pf-m-sticky-top-on-md-height",
      "stickyBottomOnMdHeight": "pf-m-sticky-bottom-on-md-height",
      "stickyTopOnLgHeight": "pf-m-sticky-top-on-lg-height",
      "stickyBottomOnLgHeight": "pf-m-sticky-bottom-on-lg-height",
      "stickyTopOnXlHeight": "pf-m-sticky-top-on-xl-height",
      "stickyBottomOnXlHeight": "pf-m-sticky-bottom-on-xl-height",
      "stickyTopOn_2xlHeight": "pf-m-sticky-top-on-2xl-height",
      "stickyBottomOn_2xlHeight": "pf-m-sticky-bottom-on-2xl-height",
      "light_100": "pf-m-light-100",
      "dark_100": "pf-m-dark-100",
      "dark_200": "pf-m-dark-200",
      "padding": "pf-m-padding",
      "noPadding": "pf-m-no-padding",
      "paddingOnSm": "pf-m-padding-on-sm",
      "noPaddingOnSm": "pf-m-no-padding-on-sm",
      "paddingOnMd": "pf-m-padding-on-md",
      "noPaddingOnMd": "pf-m-no-padding-on-md",
      "paddingOnLg": "pf-m-padding-on-lg",
      "noPaddingOnLg": "pf-m-no-padding-on-lg",
      "paddingOnXl": "pf-m-padding-on-xl",
      "noPaddingOnXl": "pf-m-no-padding-on-xl",
      "paddingOn_2xl": "pf-m-padding-on-2xl",
      "noPaddingOn_2xl": "pf-m-no-padding-on-2xl",
      "light_200": "pf-m-light-200"
    },
    "nav": "pf-v5-c-nav",
    "notificationBadge": "pf-v5-c-notification-badge",
    "page": "pf-v5-c-page",
    "pageDrawer": "pf-v5-c-page__drawer",
    "pageHeader": "pf-v5-c-page__header",
    "pageHeaderBrand": "pf-v5-c-page__header-brand",
    "pageHeaderBrandLink": "pf-v5-c-page__header-brand-link",
    "pageHeaderBrandToggle": "pf-v5-c-page__header-brand-toggle",
    "pageHeaderNav": "pf-v5-c-page__header-nav",
    "pageHeaderTools": "pf-v5-c-page__header-tools",
    "pageHeaderToolsGroup": "pf-v5-c-page__header-tools-group",
    "pageHeaderToolsItem": "pf-v5-c-page__header-tools-item",
    "pageMain": "pf-v5-c-page__main",
    "pageMainBody": "pf-v5-c-page__main-body",
    "pageMainBreadcrumb": "pf-v5-c-page__main-breadcrumb",
    "pageMainDrawer": "pf-v5-c-page__main-drawer",
    "pageMainGroup": "pf-v5-c-page__main-group",
    "pageMainNav": "pf-v5-c-page__main-nav",
    "pageMainSection": "pf-v5-c-page__main-section",
    "pageMainSubnav": "pf-v5-c-page__main-subnav",
    "pageMainTabs": "pf-v5-c-page__main-tabs",
    "pageMainWizard": "pf-v5-c-page__main-wizard",
    "pageSidebar": "pf-v5-c-page__sidebar",
    "pageSidebarBody": "pf-v5-c-page__sidebar-body",
    "themeDark": "pf-v5-theme-dark"
  };

  // node_modules/@patternfly/react-core/dist/esm/components/Page/PageSidebar.js
  var pageSidebarContextDefaults = {
    isSidebarOpen: true
  };
  var PageSidebarContext = React58.createContext(pageSidebarContextDefaults);
  var PageSidebar = (_a) => {
    var { className = "", children, isSidebarOpen = true, theme = "dark", id = "page-sidebar" } = _a, props = __rest(_a, ["className", "children", "isSidebarOpen", "theme", "id"]);
    return React58.createElement(PageContextConsumer, null, ({ isManagedSidebar, isSidebarOpen: managedIsNavOpen }) => {
      const sidebarOpen = isManagedSidebar ? managedIsNavOpen : isSidebarOpen;
      return React58.createElement(
        "div",
        Object.assign({ id, className: css(page_default.pageSidebar, theme === "light" && page_default.modifiers.light, sidebarOpen && page_default.modifiers.expanded, !sidebarOpen && page_default.modifiers.collapsed, className), "aria-hidden": !sidebarOpen }, props),
        React58.createElement(PageSidebarContext.Provider, { value: { isSidebarOpen: sidebarOpen } }, children)
      );
    });
  };
  PageSidebar.displayName = "PageSidebar";

  // node_modules/@patternfly/react-core/dist/esm/components/Nav/NavList.js
  var NavList = class extends React59.Component {
    constructor() {
      super(...arguments);
      this.direction = "ltr";
      this.state = {
        scrollViewAtStart: false,
        scrollViewAtEnd: false
      };
      this.navList = React59.createRef();
      this.observer = () => {
      };
      this.handleScrollButtons = () => {
        const container = this.navList.current;
        if (container) {
          const scrollViewAtStart = isElementInView(container, container.firstChild, false);
          const scrollViewAtEnd = isElementInView(container, container.lastChild, false);
          this.setState({
            scrollViewAtStart,
            scrollViewAtEnd
          });
          this.context.updateIsScrollable(!scrollViewAtStart || !scrollViewAtEnd);
        }
      };
      this.scrollBack = () => {
        const container = this.navList.current;
        if (container) {
          const childrenArr = Array.from(container.children);
          let firstElementInView;
          let lastElementOutOfView;
          for (let i = 0; i < childrenArr.length && !firstElementInView; i++) {
            if (isElementInView(container, childrenArr[i], false)) {
              firstElementInView = childrenArr[i];
              lastElementOutOfView = childrenArr[i - 1];
            }
          }
          if (lastElementOutOfView) {
            if (this.direction === "ltr") {
              container.scrollLeft -= lastElementOutOfView.scrollWidth;
            } else {
              container.scrollLeft += lastElementOutOfView.scrollWidth;
            }
          }
          this.handleScrollButtons();
        }
      };
      this.scrollForward = () => {
        const container = this.navList.current;
        if (container) {
          const childrenArr = Array.from(container.children);
          let lastElementInView;
          let firstElementOutOfView;
          for (let i = childrenArr.length - 1; i >= 0 && !lastElementInView; i--) {
            if (isElementInView(container, childrenArr[i], false)) {
              lastElementInView = childrenArr[i];
              firstElementOutOfView = childrenArr[i + 1];
            }
          }
          if (firstElementOutOfView) {
            if (this.direction === "ltr") {
              container.scrollLeft += firstElementOutOfView.scrollWidth;
            } else {
              container.scrollLeft -= firstElementOutOfView.scrollWidth;
            }
          }
          this.handleScrollButtons();
        }
      };
    }
    componentDidMount() {
      this.observer = getResizeObserver(this.navList.current, this.handleScrollButtons, true);
      this.direction = getLanguageDirection(this.navList.current);
      this.handleScrollButtons();
    }
    componentWillUnmount() {
      this.observer();
    }
    componentDidUpdate() {
      this.direction = getLanguageDirection(this.navList.current);
    }
    render() {
      const _a = this.props, { children, className, ariaLeftScroll, ariaRightScroll, backScrollAriaLabel, forwardScrollAriaLabel } = _a, props = __rest(_a, ["children", "className", "ariaLeftScroll", "ariaRightScroll", "backScrollAriaLabel", "forwardScrollAriaLabel"]);
      const { scrollViewAtStart, scrollViewAtEnd } = this.state;
      return React59.createElement(NavContext.Consumer, null, ({ isHorizontal }) => React59.createElement(PageSidebarContext.Consumer, null, ({ isSidebarOpen }) => React59.createElement(
        React59.Fragment,
        null,
        isHorizontal && React59.createElement(
          "button",
          { className: css(nav_default.navScrollButton), "aria-label": backScrollAriaLabel || ariaLeftScroll, onClick: this.scrollBack, disabled: scrollViewAtStart, tabIndex: isSidebarOpen ? null : -1 },
          React59.createElement(angle_left_icon_default, null)
        ),
        React59.createElement("ul", Object.assign({ ref: this.navList, className: css(nav_default.navList, className), onScroll: this.handleScrollButtons, role: "list" }, props), children),
        isHorizontal && React59.createElement(
          "button",
          { className: css(nav_default.navScrollButton), "aria-label": forwardScrollAriaLabel || ariaRightScroll, onClick: this.scrollForward, disabled: scrollViewAtEnd, tabIndex: isSidebarOpen ? null : -1 },
          React59.createElement(angle_right_icon_default, null)
        )
      )));
    }
  };
  NavList.displayName = "NavList";
  NavList.contextType = NavContext;
  NavList.defaultProps = {
    ariaLeftScroll: "Scroll left",
    backScrollAriaLabel: "Scroll back",
    ariaRightScroll: "Scroll right",
    forwardScrollAriaLabel: "Scroll foward"
  };

  // node_modules/@patternfly/react-core/dist/esm/components/Nav/NavItem.js
  var React60 = __toESM(require_react());
  var NavItem = (_a) => {
    var { children, styleChildren = true, className, to, isActive = false, groupId = null, itemId = null, preventDefault = false, onClick, component = "a", flyout, onShowFlyout, ouiaId, ouiaSafe, zIndex = 9999, hasNavLinkWrapper } = _a, props = __rest(_a, ["children", "styleChildren", "className", "to", "isActive", "groupId", "itemId", "preventDefault", "onClick", "component", "flyout", "onShowFlyout", "ouiaId", "ouiaSafe", "zIndex", "hasNavLinkWrapper"]);
    const { flyoutRef, setFlyoutRef, navRef } = React60.useContext(NavContext);
    const { isSidebarOpen } = React60.useContext(PageSidebarContext);
    const [flyoutTarget, setFlyoutTarget] = React60.useState(null);
    const [isHovered, setIsHovered] = React60.useState(false);
    const ref = React60.useRef();
    const flyoutVisible = ref === flyoutRef;
    const popperRef = React60.useRef();
    const hasFlyout = flyout !== void 0;
    const Component20 = hasFlyout ? "button" : component;
    if (to && hasFlyout) {
      console.error('NavItem cannot have both "to" and "flyout" props.');
    }
    const showFlyout = (show, override) => {
      if ((!flyoutVisible || override) && show) {
        setFlyoutRef(ref);
      } else if ((flyoutVisible || override) && !show) {
        setFlyoutRef(null);
      }
      onShowFlyout && show && onShowFlyout();
    };
    const onMouseOver = (event) => {
      const evtContainedInFlyout = event.target.closest(`.${nav_default.navItem}.pf-m-flyout`);
      if (hasFlyout && !flyoutVisible) {
        showFlyout(true);
      } else if (flyoutRef !== null && !evtContainedInFlyout) {
        setFlyoutRef(null);
      }
    };
    const onFlyoutClick = (event) => {
      const target = event.target;
      const closestItem = target.closest(".pf-m-flyout");
      if (!closestItem) {
        if (hasFlyout) {
          showFlyout(false, true);
        } else if (flyoutRef !== null) {
          setFlyoutRef(null);
        }
      }
    };
    const handleFlyout = (event) => {
      var _a2, _b;
      const key = event.key;
      const target = event.target;
      if ((key === " " || key === "Enter" || key === "ArrowRight") && hasFlyout && ((_a2 = ref === null || ref === void 0 ? void 0 : ref.current) === null || _a2 === void 0 ? void 0 : _a2.contains(target))) {
        event.stopPropagation();
        event.preventDefault();
        if (!flyoutVisible) {
          showFlyout(true);
          setFlyoutTarget(target);
        }
      }
      if ((key === "Escape" || key === "ArrowLeft") && ((_b = popperRef === null || popperRef === void 0 ? void 0 : popperRef.current) === null || _b === void 0 ? void 0 : _b.querySelectorAll(`.${nav_default.menu}`).length) === 1) {
        if (flyoutVisible) {
          event.stopPropagation();
          event.preventDefault();
          showFlyout(false);
        }
      }
    };
    React60.useEffect(() => {
      if (hasFlyout) {
        window.addEventListener("click", onFlyoutClick);
      }
      return () => {
        if (hasFlyout) {
          window.removeEventListener("click", onFlyoutClick);
        }
      };
    }, []);
    React60.useEffect(() => {
      if (flyoutTarget) {
        if (flyoutVisible) {
          const flyoutItems = Array.from(popperRef.current.getElementsByTagName("UL")[0].children).filter((el) => !(el.classList.contains("pf-m-disabled") || el.classList.contains(nav_default.divider)));
          flyoutItems[0].firstChild.focus();
        } else {
          flyoutTarget.focus();
        }
      }
    }, [flyoutVisible, flyoutTarget]);
    const flyoutButton = React60.createElement(
      "span",
      { className: css(nav_default.navToggle) },
      React60.createElement(
        "span",
        { className: css(nav_default.navToggleIcon) },
        React60.createElement(angle_right_icon_default, { "aria-hidden": true })
      )
    );
    const ariaFlyoutProps = {
      "aria-haspopup": "menu",
      "aria-expanded": flyoutVisible
    };
    const tabIndex = isSidebarOpen ? null : -1;
    const renderDefaultLink = (context) => {
      const preventLinkDefault = preventDefault || !to;
      return React60.createElement(
        Component20,
        Object.assign({ href: to, onClick: (e) => context.onSelect(e, groupId, itemId, to, preventLinkDefault, onClick), className: css(nav_default.navLink, isActive && nav_default.modifiers.current, isHovered && nav_default.modifiers.hover, className), "aria-current": isActive ? "page" : null, tabIndex }, hasFlyout && Object.assign({}, ariaFlyoutProps), props),
        hasNavLinkWrapper ? React60.createElement("span", { className: css(`${nav_default.nav}__link-text`) }, children) : children,
        flyout && flyoutButton
      );
    };
    const renderClonedChild = (context, child) => React60.cloneElement(child, Object.assign(Object.assign({ onClick: (e) => context.onSelect(e, groupId, itemId, to, preventDefault, onClick), "aria-current": isActive ? "page" : null }, styleChildren && {
      className: css(nav_default.navLink, isActive && nav_default.modifiers.current, child.props && child.props.className)
    }), { tabIndex: child.props.tabIndex || tabIndex, children: hasFlyout ? React60.createElement(
      React60.Fragment,
      null,
      child.props.children,
      flyoutButton
    ) : child.props.children }));
    const ouiaProps = useOUIAProps(NavItem.displayName, ouiaId, ouiaSafe);
    const handleMouseEnter = () => {
      setIsHovered(true);
    };
    const handleMouseLeave = () => {
      setIsHovered(false);
    };
    const flyoutPopper = React60.createElement(Popper, { triggerRef: ref, popper: React60.createElement("div", { ref: popperRef, onMouseEnter: handleMouseEnter, onMouseLeave: handleMouseLeave }, flyout), popperRef, placement: "right-start", isVisible: flyoutVisible, onDocumentKeyDown: handleFlyout, zIndex, appendTo: navRef === null || navRef === void 0 ? void 0 : navRef.current });
    const navItem = React60.createElement(
      React60.Fragment,
      null,
      React60.createElement(
        "li",
        Object.assign({ onMouseOver, className: css(nav_default.navItem, hasFlyout && nav_default.modifiers.flyout, className), ref }, ouiaProps),
        React60.createElement(NavContext.Consumer, null, (context) => React60.isValidElement(children) ? renderClonedChild(context, children) : renderDefaultLink(context))
      ),
      flyout && flyoutPopper
    );
    return navItem;
  };
  NavItem.displayName = "NavItem";

  // node_modules/@patternfly/react-styles/css/components/Toolbar/toolbar.mjs
  var toolbar_default = {
    "button": "pf-v5-c-button",
    "chipGroup": "pf-v5-c-chip-group",
    "divider": "pf-v5-c-divider",
    "modifiers": {
      "hidden": "pf-m-hidden",
      "hiddenOnSm": "pf-m-hidden-on-sm",
      "visibleOnSm": "pf-m-visible-on-sm",
      "hiddenOnMd": "pf-m-hidden-on-md",
      "visibleOnMd": "pf-m-visible-on-md",
      "hiddenOnLg": "pf-m-hidden-on-lg",
      "visibleOnLg": "pf-m-visible-on-lg",
      "hiddenOnXl": "pf-m-hidden-on-xl",
      "visibleOnXl": "pf-m-visible-on-xl",
      "hiddenOn_2xl": "pf-m-hidden-on-2xl",
      "visibleOn_2xl": "pf-m-visible-on-2xl",
      "pageInsets": "pf-m-page-insets",
      "sticky": "pf-m-sticky",
      "fullHeight": "pf-m-full-height",
      "static": "pf-m-static",
      "vertical": "pf-m-vertical",
      "alignItemsStart": "pf-m-align-items-start",
      "alignItemsCenter": "pf-m-align-items-center",
      "alignItemsBaseline": "pf-m-align-items-baseline",
      "alignSelfStart": "pf-m-align-self-start",
      "alignSelfCenter": "pf-m-align-self-center",
      "alignSelfBaseline": "pf-m-align-self-baseline",
      "buttonGroup": "pf-m-button-group",
      "iconButtonGroup": "pf-m-icon-button-group",
      "filterGroup": "pf-m-filter-group",
      "toggleGroup": "pf-m-toggle-group",
      "overflowMenu": "pf-m-overflow-menu",
      "bulkSelect": "pf-m-bulk-select",
      "expandAll": "pf-m-expand-all",
      "expanded": "pf-m-expanded",
      "searchFilter": "pf-m-search-filter",
      "chipGroup": "pf-m-chip-group",
      "label": "pf-m-label",
      "formElement": "pf-m-form-element",
      "pagination": "pf-m-pagination",
      "overflowContainer": "pf-m-overflow-container",
      "chipContainer": "pf-m-chip-container",
      "plain": "pf-m-plain",
      "show": "pf-m-show",
      "showOnSm": "pf-m-show-on-sm",
      "showOnMd": "pf-m-show-on-md",
      "showOnLg": "pf-m-show-on-lg",
      "showOnXl": "pf-m-show-on-xl",
      "showOn_2xl": "pf-m-show-on-2xl",
      "alignRight": "pf-m-align-right",
      "alignLeft": "pf-m-align-left",
      "nowrap": "pf-m-nowrap",
      "wrap": "pf-m-wrap",
      "alignRightOnSm": "pf-m-align-right-on-sm",
      "alignLeftOnSm": "pf-m-align-left-on-sm",
      "nowrapOnSm": "pf-m-nowrap-on-sm",
      "wrapOnSm": "pf-m-wrap-on-sm",
      "alignRightOnMd": "pf-m-align-right-on-md",
      "alignLeftOnMd": "pf-m-align-left-on-md",
      "nowrapOnMd": "pf-m-nowrap-on-md",
      "wrapOnMd": "pf-m-wrap-on-md",
      "alignRightOnLg": "pf-m-align-right-on-lg",
      "alignLeftOnLg": "pf-m-align-left-on-lg",
      "nowrapOnLg": "pf-m-nowrap-on-lg",
      "wrapOnLg": "pf-m-wrap-on-lg",
      "alignRightOnXl": "pf-m-align-right-on-xl",
      "alignLeftOnXl": "pf-m-align-left-on-xl",
      "nowrapOnXl": "pf-m-nowrap-on-xl",
      "wrapOnXl": "pf-m-wrap-on-xl",
      "alignRightOn_2xl": "pf-m-align-right-on-2xl",
      "alignLeftOn_2xl": "pf-m-align-left-on-2xl",
      "nowrapOn_2xl": "pf-m-nowrap-on-2xl",
      "wrapOn_2xl": "pf-m-wrap-on-2xl",
      "spaceItemsNone": "pf-m-space-items-none",
      "spaceItemsSm": "pf-m-space-items-sm",
      "spaceItemsMd": "pf-m-space-items-md",
      "spaceItemsLg": "pf-m-space-items-lg",
      "spaceItemsNoneOnSm": "pf-m-space-items-none-on-sm",
      "spaceItemsSmOnSm": "pf-m-space-items-sm-on-sm",
      "spaceItemsMdOnSm": "pf-m-space-items-md-on-sm",
      "spaceItemsLgOnSm": "pf-m-space-items-lg-on-sm",
      "spaceItemsNoneOnMd": "pf-m-space-items-none-on-md",
      "spaceItemsSmOnMd": "pf-m-space-items-sm-on-md",
      "spaceItemsMdOnMd": "pf-m-space-items-md-on-md",
      "spaceItemsLgOnMd": "pf-m-space-items-lg-on-md",
      "spaceItemsNoneOnLg": "pf-m-space-items-none-on-lg",
      "spaceItemsSmOnLg": "pf-m-space-items-sm-on-lg",
      "spaceItemsMdOnLg": "pf-m-space-items-md-on-lg",
      "spaceItemsLgOnLg": "pf-m-space-items-lg-on-lg",
      "spaceItemsNoneOnXl": "pf-m-space-items-none-on-xl",
      "spaceItemsSmOnXl": "pf-m-space-items-sm-on-xl",
      "spaceItemsMdOnXl": "pf-m-space-items-md-on-xl",
      "spaceItemsLgOnXl": "pf-m-space-items-lg-on-xl",
      "spaceItemsNoneOn_2xl": "pf-m-space-items-none-on-2xl",
      "spaceItemsSmOn_2xl": "pf-m-space-items-sm-on-2xl",
      "spaceItemsMdOn_2xl": "pf-m-space-items-md-on-2xl",
      "spaceItemsLgOn_2xl": "pf-m-space-items-lg-on-2xl",
      "spacerNone": "pf-m-spacer-none",
      "spacerSm": "pf-m-spacer-sm",
      "spacerMd": "pf-m-spacer-md",
      "spacerLg": "pf-m-spacer-lg",
      "spacerNoneOnSm": "pf-m-spacer-none-on-sm",
      "spacerSmOnSm": "pf-m-spacer-sm-on-sm",
      "spacerMdOnSm": "pf-m-spacer-md-on-sm",
      "spacerLgOnSm": "pf-m-spacer-lg-on-sm",
      "spacerNoneOnMd": "pf-m-spacer-none-on-md",
      "spacerSmOnMd": "pf-m-spacer-sm-on-md",
      "spacerMdOnMd": "pf-m-spacer-md-on-md",
      "spacerLgOnMd": "pf-m-spacer-lg-on-md",
      "spacerNoneOnLg": "pf-m-spacer-none-on-lg",
      "spacerSmOnLg": "pf-m-spacer-sm-on-lg",
      "spacerMdOnLg": "pf-m-spacer-md-on-lg",
      "spacerLgOnLg": "pf-m-spacer-lg-on-lg",
      "spacerNoneOnXl": "pf-m-spacer-none-on-xl",
      "spacerSmOnXl": "pf-m-spacer-sm-on-xl",
      "spacerMdOnXl": "pf-m-spacer-md-on-xl",
      "spacerLgOnXl": "pf-m-spacer-lg-on-xl",
      "spacerNoneOn_2xl": "pf-m-spacer-none-on-2xl",
      "spacerSmOn_2xl": "pf-m-spacer-sm-on-2xl",
      "spacerMdOn_2xl": "pf-m-spacer-md-on-2xl",
      "spacerLgOn_2xl": "pf-m-spacer-lg-on-2xl",
      "insetNone": "pf-m-inset-none",
      "insetSm": "pf-m-inset-sm",
      "insetMd": "pf-m-inset-md",
      "insetLg": "pf-m-inset-lg",
      "insetXl": "pf-m-inset-xl",
      "inset_2xl": "pf-m-inset-2xl",
      "insetNoneOnSm": "pf-m-inset-none-on-sm",
      "insetSmOnSm": "pf-m-inset-sm-on-sm",
      "insetMdOnSm": "pf-m-inset-md-on-sm",
      "insetLgOnSm": "pf-m-inset-lg-on-sm",
      "insetXlOnSm": "pf-m-inset-xl-on-sm",
      "inset_2xlOnSm": "pf-m-inset-2xl-on-sm",
      "insetNoneOnMd": "pf-m-inset-none-on-md",
      "insetSmOnMd": "pf-m-inset-sm-on-md",
      "insetMdOnMd": "pf-m-inset-md-on-md",
      "insetLgOnMd": "pf-m-inset-lg-on-md",
      "insetXlOnMd": "pf-m-inset-xl-on-md",
      "inset_2xlOnMd": "pf-m-inset-2xl-on-md",
      "insetNoneOnLg": "pf-m-inset-none-on-lg",
      "insetSmOnLg": "pf-m-inset-sm-on-lg",
      "insetMdOnLg": "pf-m-inset-md-on-lg",
      "insetLgOnLg": "pf-m-inset-lg-on-lg",
      "insetXlOnLg": "pf-m-inset-xl-on-lg",
      "inset_2xlOnLg": "pf-m-inset-2xl-on-lg",
      "insetNoneOnXl": "pf-m-inset-none-on-xl",
      "insetSmOnXl": "pf-m-inset-sm-on-xl",
      "insetMdOnXl": "pf-m-inset-md-on-xl",
      "insetLgOnXl": "pf-m-inset-lg-on-xl",
      "insetXlOnXl": "pf-m-inset-xl-on-xl",
      "inset_2xlOnXl": "pf-m-inset-2xl-on-xl",
      "insetNoneOn_2xl": "pf-m-inset-none-on-2xl",
      "insetSmOn_2xl": "pf-m-inset-sm-on-2xl",
      "insetMdOn_2xl": "pf-m-inset-md-on-2xl",
      "insetLgOn_2xl": "pf-m-inset-lg-on-2xl",
      "insetXlOn_2xl": "pf-m-inset-xl-on-2xl",
      "inset_2xlOn_2xl": "pf-m-inset-2xl-on-2xl"
    },
    "pagination": "pf-v5-c-pagination",
    "toolbar": "pf-v5-c-toolbar",
    "toolbarContent": "pf-v5-c-toolbar__content",
    "toolbarContentSection": "pf-v5-c-toolbar__content-section",
    "toolbarExpandAllIcon": "pf-v5-c-toolbar__expand-all-icon",
    "toolbarExpandableContent": "pf-v5-c-toolbar__expandable-content",
    "toolbarGroup": "pf-v5-c-toolbar__group",
    "toolbarItem": "pf-v5-c-toolbar__item",
    "toolbarToggle": "pf-v5-c-toolbar__toggle"
  };

  // node_modules/@patternfly/react-core/dist/esm/components/Toolbar/ToolbarItem.js
  var React61 = __toESM(require_react());

  // node_modules/@patternfly/react-tokens/dist/esm/c_toolbar__item_Width.js
  var c_toolbar__item_Width = {
    "name": "--pf-v5-c-toolbar__item--Width",
    "value": "auto",
    "var": "var(--pf-v5-c-toolbar__item--Width)"
  };
  var c_toolbar_item_Width_default = c_toolbar__item_Width;

  // node_modules/@patternfly/react-core/dist/esm/components/Toolbar/ToolbarItem.js
  var ToolbarItemVariant;
  (function(ToolbarItemVariant2) {
    ToolbarItemVariant2["separator"] = "separator";
    ToolbarItemVariant2["bulk-select"] = "bulk-select";
    ToolbarItemVariant2["overflow-menu"] = "overflow-menu";
    ToolbarItemVariant2["pagination"] = "pagination";
    ToolbarItemVariant2["search-filter"] = "search-filter";
    ToolbarItemVariant2["label"] = "label";
    ToolbarItemVariant2["chip-group"] = "chip-group";
    ToolbarItemVariant2["expand-all"] = "expand-all";
  })(ToolbarItemVariant || (ToolbarItemVariant = {}));
  var ToolbarItem = (_a) => {
    var { className, variant, visibility, spacer, widths, align, alignSelf, alignItems, id, children, isAllExpanded, isOverflowContainer } = _a, props = __rest(_a, ["className", "variant", "visibility", "spacer", "widths", "align", "alignSelf", "alignItems", "id", "children", "isAllExpanded", "isOverflowContainer"]);
    if (variant === ToolbarItemVariant.separator) {
      return React61.createElement(Divider, Object.assign({ className: css(toolbar_default.modifiers.vertical, className) }, props));
    }
    const widthStyles = {};
    if (widths) {
      Object.entries(widths || {}).map(([breakpoint, value]) => widthStyles[`${c_toolbar_item_Width_default.name}${breakpoint !== "default" ? `-on-${breakpoint}` : ""}`] = value);
    }
    return React61.createElement(PageContext.Consumer, null, ({ width, getBreakpoint: getBreakpoint2 }) => React61.createElement("div", Object.assign({ className: css(toolbar_default.toolbarItem, variant && toolbar_default.modifiers[toCamel(variant)], isAllExpanded && toolbar_default.modifiers.expanded, isOverflowContainer && toolbar_default.modifiers.overflowContainer, formatBreakpointMods(visibility, toolbar_default, "", getBreakpoint2(width)), formatBreakpointMods(align, toolbar_default, "", getBreakpoint2(width)), formatBreakpointMods(spacer, toolbar_default, "", getBreakpoint2(width)), alignItems === "start" && toolbar_default.modifiers.alignItemsStart, alignItems === "center" && toolbar_default.modifiers.alignItemsCenter, alignItems === "baseline" && toolbar_default.modifiers.alignItemsBaseline, alignSelf === "start" && toolbar_default.modifiers.alignSelfStart, alignSelf === "center" && toolbar_default.modifiers.alignSelfCenter, alignSelf === "baseline" && toolbar_default.modifiers.alignSelfBaseline, className) }, variant === "label" && { "aria-hidden": true }, { id }, props, widths && { style: Object.assign(Object.assign({}, widthStyles), props.style) }), children));
  };
  ToolbarItem.displayName = "ToolbarItem";

  // node_modules/@patternfly/react-table/dist/esm/components/Table/ActionsColumn.js
  var React87 = __toESM(require_react());

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-core/dist/esm/components/Dropdown/Dropdown.js
  var import_react8 = __toESM(require_react());

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-styles/dist/esm/index.js
  function css2(...args) {
    const classes = [];
    const hasOwn = {}.hasOwnProperty;
    args.filter(Boolean).forEach((arg) => {
      const argType = typeof arg;
      if (argType === "string" || argType === "number") {
        classes.push(arg);
      } else if (Array.isArray(arg) && arg.length) {
        const inner = css2(...arg);
        if (inner) {
          classes.push(inner);
        }
      } else if (argType === "object") {
        for (const key in arg) {
          if (hasOwn.call(arg, key) && arg[key]) {
            classes.push(key);
          }
        }
      }
    });
    return classes.join(" ");
  }

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-core/dist/esm/components/Menu/Menu.js
  var React70 = __toESM(require_react());

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-styles/css/components/Menu/menu.mjs
  var menu_default2 = {
    "button": "pf-v6-c-button",
    "check": "pf-v6-c-check",
    "dirRtl": "pf-v6-m-dir-rtl",
    "divider": "pf-v6-c-divider",
    "menu": "pf-v6-c-menu",
    "menuBreadcrumb": "pf-v6-c-menu__breadcrumb",
    "menuContent": "pf-v6-c-menu__content",
    "menuFooter": "pf-v6-c-menu__footer",
    "menuGroup": "pf-v6-c-menu__group",
    "menuGroupTitle": "pf-v6-c-menu__group-title",
    "menuHeader": "pf-v6-c-menu__header",
    "menuItem": "pf-v6-c-menu__item",
    "menuItemAction": "pf-v6-c-menu__item-action",
    "menuItemActionIcon": "pf-v6-c-menu__item-action-icon",
    "menuItemCheck": "pf-v6-c-menu__item-check",
    "menuItemDescription": "pf-v6-c-menu__item-description",
    "menuItemExternalIcon": "pf-v6-c-menu__item-external-icon",
    "menuItemIcon": "pf-v6-c-menu__item-icon",
    "menuItemMain": "pf-v6-c-menu__item-main",
    "menuItemSelectIcon": "pf-v6-c-menu__item-select-icon",
    "menuItemText": "pf-v6-c-menu__item-text",
    "menuItemToggleIcon": "pf-v6-c-menu__item-toggle-icon",
    "menuList": "pf-v6-c-menu__list",
    "menuListItem": "pf-v6-c-menu__list-item",
    "menuSearch": "pf-v6-c-menu__search",
    "menuToggle": "pf-v6-c-menu-toggle",
    "modifiers": {
      "hidden": "pf-m-hidden",
      "hiddenOnSm": "pf-m-hidden-on-sm",
      "visibleOnSm": "pf-m-visible-on-sm",
      "hiddenOnMd": "pf-m-hidden-on-md",
      "visibleOnMd": "pf-m-visible-on-md",
      "hiddenOnLg": "pf-m-hidden-on-lg",
      "visibleOnLg": "pf-m-visible-on-lg",
      "hiddenOnXl": "pf-m-hidden-on-xl",
      "visibleOnXl": "pf-m-visible-on-xl",
      "hiddenOn_2xl": "pf-m-hidden-on-2xl",
      "visibleOn_2xl": "pf-m-visible-on-2xl",
      "disabled": "pf-m-disabled",
      "ariaDisabled": "pf-m-aria-disabled",
      "flyout": "pf-m-flyout",
      "top": "pf-m-top",
      "left": "pf-m-left",
      "drilldown": "pf-m-drilldown",
      "drilledIn": "pf-m-drilled-in",
      "currentPath": "pf-m-current-path",
      "static": "pf-m-static",
      "plain": "pf-m-plain",
      "scrollable": "pf-m-scrollable",
      "load": "pf-m-load",
      "loading": "pf-m-loading",
      "danger": "pf-m-danger",
      "focus": "pf-m-focus",
      "selected": "pf-m-selected",
      "favorited": "pf-m-favorited"
    }
  };

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-styles/css/components/Breadcrumb/breadcrumb.mjs
  var breadcrumb_default2 = {
    "breadcrumb": "pf-v6-c-breadcrumb",
    "breadcrumbDropdown": "pf-v6-c-breadcrumb__dropdown",
    "breadcrumbHeading": "pf-v6-c-breadcrumb__heading",
    "breadcrumbItem": "pf-v6-c-breadcrumb__item",
    "breadcrumbItemDivider": "pf-v6-c-breadcrumb__item-divider",
    "breadcrumbLink": "pf-v6-c-breadcrumb__link",
    "breadcrumbList": "pf-v6-c-breadcrumb__list",
    "dirRtl": "pf-v6-m-dir-rtl",
    "modifiers": {
      "current": "pf-m-current"
    }
  };

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-tokens/dist/esm/t_global_breakpoint_sm.js
  var t_global_breakpoint_sm = {
    "name": "--pf-t--global--breakpoint--sm",
    "value": "36rem",
    "var": "var(--pf-t--global--breakpoint--sm)"
  };
  var t_global_breakpoint_sm_default = t_global_breakpoint_sm;

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-tokens/dist/esm/t_global_breakpoint_md.js
  var t_global_breakpoint_md = {
    "name": "--pf-t--global--breakpoint--md",
    "value": "48rem",
    "var": "var(--pf-t--global--breakpoint--md)"
  };
  var t_global_breakpoint_md_default = t_global_breakpoint_md;

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-tokens/dist/esm/t_global_breakpoint_lg.js
  var t_global_breakpoint_lg = {
    "name": "--pf-t--global--breakpoint--lg",
    "value": "62rem",
    "var": "var(--pf-t--global--breakpoint--lg)"
  };
  var t_global_breakpoint_lg_default = t_global_breakpoint_lg;

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-tokens/dist/esm/t_global_breakpoint_xl.js
  var t_global_breakpoint_xl = {
    "name": "--pf-t--global--breakpoint--xl",
    "value": "75rem",
    "var": "var(--pf-t--global--breakpoint--xl)"
  };
  var t_global_breakpoint_xl_default = t_global_breakpoint_xl;

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-tokens/dist/esm/t_global_breakpoint_2xl.js
  var t_global_breakpoint_2xl = {
    "name": "--pf-t--global--breakpoint--2xl",
    "value": "90.625rem",
    "var": "var(--pf-t--global--breakpoint--2xl)"
  };
  var t_global_breakpoint_2xl_default = t_global_breakpoint_2xl;

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-tokens/dist/esm/t_global_breakpoint_height_sm.js
  var t_global_breakpoint_height_sm = {
    "name": "--pf-t--global--breakpoint--height--sm",
    "value": "0rem",
    "var": "var(--pf-t--global--breakpoint--height--sm)"
  };
  var t_global_breakpoint_height_sm_default = t_global_breakpoint_height_sm;

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-tokens/dist/esm/t_global_breakpoint_height_md.js
  var t_global_breakpoint_height_md = {
    "name": "--pf-t--global--breakpoint--height--md",
    "value": "40rem",
    "var": "var(--pf-t--global--breakpoint--height--md)"
  };
  var t_global_breakpoint_height_md_default = t_global_breakpoint_height_md;

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-tokens/dist/esm/t_global_breakpoint_height_lg.js
  var t_global_breakpoint_height_lg = {
    "name": "--pf-t--global--breakpoint--height--lg",
    "value": "48rem",
    "var": "var(--pf-t--global--breakpoint--height--lg)"
  };
  var t_global_breakpoint_height_lg_default = t_global_breakpoint_height_lg;

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-tokens/dist/esm/t_global_breakpoint_height_xl.js
  var t_global_breakpoint_height_xl = {
    "name": "--pf-t--global--breakpoint--height--xl",
    "value": "60rem",
    "var": "var(--pf-t--global--breakpoint--height--xl)"
  };
  var t_global_breakpoint_height_xl_default = t_global_breakpoint_height_xl;

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-tokens/dist/esm/t_global_breakpoint_height_2xl.js
  var t_global_breakpoint_height_2xl = {
    "name": "--pf-t--global--breakpoint--height--2xl",
    "value": "80rem",
    "var": "var(--pf-t--global--breakpoint--height--2xl)"
  };
  var t_global_breakpoint_height_2xl_default = t_global_breakpoint_height_2xl;

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-icons/dist/esm/createIcon.js
  var React62 = __toESM(require_react());
  var currentId3 = 0;
  function createIcon2({ name, xOffset = 0, yOffset = 0, width, height, svgPath }) {
    var _a;
    return _a = class SVGIcon extends React62.Component {
      constructor() {
        super(...arguments);
        this.id = `icon-title-${currentId3++}`;
      }
      render() {
        const _b = this.props, { title, className } = _b, props = __rest(_b, ["title", "className"]);
        const classes = className ? `pf-v6-svg ${className}` : "pf-v6-svg";
        const hasTitle = Boolean(title);
        const viewBox = [xOffset, yOffset, width, height].join(" ");
        return React62.createElement(
          "svg",
          Object.assign({ className: classes, viewBox, fill: "currentColor", "aria-labelledby": hasTitle ? this.id : null, "aria-hidden": hasTitle ? null : true, role: "img", width: "1em", height: "1em" }, props),
          hasTitle && React62.createElement("title", { id: this.id }, title),
          React62.createElement("path", { d: svgPath })
        );
      }
    }, _a.displayName = name, _a;
  }

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-icons/dist/esm/icons/check-circle-icon.js
  var CheckCircleIconConfig2 = {
    name: "CheckCircleIcon",
    height: 512,
    width: 512,
    svgPath: "M504 256c0 136.967-111.033 248-248 248S8 392.967 8 256 119.033 8 256 8s248 111.033 248 248zM227.314 387.314l184-184c6.248-6.248 6.248-16.379 0-22.627l-22.627-22.627c-6.248-6.249-16.379-6.249-22.628 0L216 308.118l-70.059-70.059c-6.248-6.248-16.379-6.248-22.628 0l-22.627 22.627c-6.248 6.248-6.248 16.379 0 22.627l104 104c6.249 6.249 16.379 6.249 22.628.001z",
    yOffset: 0,
    xOffset: 0
  };
  var CheckCircleIcon2 = createIcon2(CheckCircleIconConfig2);
  var check_circle_icon_default2 = CheckCircleIcon2;

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-icons/dist/esm/icons/exclamation-circle-icon.js
  var ExclamationCircleIconConfig2 = {
    name: "ExclamationCircleIcon",
    height: 512,
    width: 512,
    svgPath: "M504 256c0 136.997-111.043 248-248 248S8 392.997 8 256C8 119.083 119.043 8 256 8s248 111.083 248 248zm-248 50c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z",
    yOffset: 0,
    xOffset: 0
  };
  var ExclamationCircleIcon2 = createIcon2(ExclamationCircleIconConfig2);
  var exclamation_circle_icon_default2 = ExclamationCircleIcon2;

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-icons/dist/esm/icons/exclamation-triangle-icon.js
  var ExclamationTriangleIconConfig2 = {
    name: "ExclamationTriangleIcon",
    height: 512,
    width: 576,
    svgPath: "M569.517 440.013C587.975 472.007 564.806 512 527.94 512H48.054c-36.937 0-59.999-40.055-41.577-71.987L246.423 23.985c18.467-32.009 64.72-31.951 83.154 0l239.94 416.028zM288 354c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z",
    yOffset: 0,
    xOffset: 0
  };
  var ExclamationTriangleIcon2 = createIcon2(ExclamationTriangleIconConfig2);
  var exclamation_triangle_icon_default2 = ExclamationTriangleIcon2;

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-core/dist/esm/helpers/constants.js
  var ValidatedOptions2;
  (function(ValidatedOptions3) {
    ValidatedOptions3["success"] = "success";
    ValidatedOptions3["error"] = "error";
    ValidatedOptions3["warning"] = "warning";
    ValidatedOptions3["default"] = "default";
  })(ValidatedOptions2 || (ValidatedOptions2 = {}));
  var KeyTypes2 = {
    Tab: "Tab",
    Space: " ",
    Escape: "Escape",
    Enter: "Enter",
    ArrowUp: "ArrowUp",
    ArrowDown: "ArrowDown",
    ArrowLeft: "ArrowLeft",
    ArrowRight: "ArrowRight"
  };
  var globalWidthBreakpoints2 = {
    sm: parseInt(t_global_breakpoint_sm_default.value) * 16,
    md: parseInt(t_global_breakpoint_md_default.value) * 16,
    lg: parseInt(t_global_breakpoint_lg_default.value) * 16,
    xl: parseInt(t_global_breakpoint_xl_default.value) * 16,
    "2xl": parseInt(t_global_breakpoint_2xl_default.value) * 16
  };
  var globalHeightBreakpoints2 = {
    sm: parseInt(t_global_breakpoint_height_sm_default.value) * 16,
    md: parseInt(t_global_breakpoint_height_md_default.value) * 16,
    lg: parseInt(t_global_breakpoint_height_lg_default.value) * 16,
    xl: parseInt(t_global_breakpoint_height_xl_default.value) * 16,
    "2xl": parseInt(t_global_breakpoint_height_2xl_default.value) * 16
  };

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-core/dist/esm/helpers/FocusTrap/FocusTrap.js
  var import_react6 = __toESM(require_react());

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-core/dist/esm/helpers/useUnmountEffect.js
  var import_react5 = __toESM(require_react());
  function useUnmountEffect(effect7) {
    const effectRef = (0, import_react5.useRef)(effect7);
    effectRef.current = effect7;
    (0, import_react5.useEffect)(() => () => {
      effectRef.current();
    }, []);
  }

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-core/dist/esm/helpers/FocusTrap/FocusTrap.js
  var FocusTrap = (0, import_react6.forwardRef)(function FocusTrap2(_a, forwardedRef) {
    var { active = true, paused = false, focusTrapOptions = {}, preventScrollOnDeactivate = false } = _a, props = __rest(_a, ["active", "paused", "focusTrapOptions", "preventScrollOnDeactivate"]);
    const ref = (0, import_react6.useRef)(null);
    (0, import_react6.useImperativeHandle)(forwardedRef, () => ref.current);
    const focusTrapRef = (0, import_react6.useRef)(null);
    (0, import_react6.useEffect)(() => {
      const focusTrap = createFocusTrap(ref.current, Object.assign(Object.assign({}, focusTrapOptions), { returnFocusOnDeactivate: false }));
      focusTrapRef.current = focusTrap;
      return () => {
        focusTrap.deactivate();
      };
    }, []);
    (0, import_react6.useEffect)(() => {
      const focusTrap = focusTrapRef.current;
      active ? focusTrap === null || focusTrap === void 0 ? void 0 : focusTrap.activate() : focusTrap === null || focusTrap === void 0 ? void 0 : focusTrap.deactivate();
    }, [active]);
    (0, import_react6.useEffect)(() => {
      const focusTrap = focusTrapRef.current;
      paused ? focusTrap === null || focusTrap === void 0 ? void 0 : focusTrap.pause() : focusTrap === null || focusTrap === void 0 ? void 0 : focusTrap.unpause();
    }, [paused]);
    const previousElementRef = (0, import_react6.useRef)(typeof document !== "undefined" ? document.activeElement : null);
    useUnmountEffect(() => {
      if (focusTrapOptions.returnFocusOnDeactivate !== false && previousElementRef.current instanceof HTMLElement) {
        previousElementRef.current.focus({
          preventScroll: preventScrollOnDeactivate
        });
      }
    });
    return import_react6.default.createElement("div", Object.assign({ ref }, props));
  });
  FocusTrap.displayName = "FocusTrap";

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-core/dist/esm/helpers/GenerateId/GenerateId.js
  var React64 = __toESM(require_react());

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-core/dist/esm/helpers/util.js
  var ReactDOM3 = __toESM(require_react_dom());
  function getUniqueId2(prefix = "pf") {
    const uid3 = (/* @__PURE__ */ new Date()).getTime() + Math.random().toString(36).slice(2);
    return `${prefix}-${uid3}`;
  }
  var formatBreakpointMods2 = (mods, styles, stylePrefix = "", breakpoint, vertical) => {
    if (!mods) {
      return "";
    }
    if (breakpoint && !vertical) {
      if (breakpoint in mods) {
        return styles.modifiers[toCamel2(`${stylePrefix}${mods[breakpoint]}`)];
      }
      const breakpointsOrder = ["2xl", "xl", "lg", "md", "sm", "default"];
      const breakpointsIndex = breakpointsOrder.indexOf(breakpoint);
      for (let i = breakpointsIndex; i < breakpointsOrder.length; i++) {
        if (breakpointsOrder[i] in mods) {
          return styles.modifiers[toCamel2(`${stylePrefix}${mods[breakpointsOrder[i]]}`)];
        }
      }
      return "";
    }
    return Object.entries(mods || {}).map(([breakpoint2, mod]) => `${stylePrefix}${mod}${breakpoint2 !== "default" ? `-on-${breakpoint2}` : ""}${vertical && breakpoint2 !== "default" ? "-height" : ""}`).map(toCamel2).map((mod) => mod.replace(/-?(\dxl)/gi, (_res, group) => `_${group}`)).map((modifierKey) => styles.modifiers[modifierKey]).filter(Boolean).join(" ");
  };
  var camelize2 = (s) => s.toUpperCase().replace("-", "").replace("_", "");
  var toCamel2 = (s) => s.replace(/([-_][a-z])/gi, camelize2);
  var canUseDOM2 = !!(typeof window !== "undefined" && window.document && window.document.createElement);
  var clearTimeouts2 = (timeoutRefs) => {
    timeoutRefs.forEach((ref) => {
      if (ref.current) {
        clearTimeout(ref.current);
      }
    });
  };
  var getLanguageDirection2 = (targetElement, defaultDirection = "ltr") => {
    if (!targetElement) {
      return defaultDirection;
    }
    const computedDirection = getComputedStyle(targetElement).getPropertyValue("direction");
    if (["ltr", "rtl"].includes(computedDirection)) {
      return computedDirection;
    }
    return defaultDirection;
  };

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-core/dist/esm/helpers/GenerateId/GenerateId.js
  var currentId4 = 0;
  function getRandomId2() {
    if (typeof crypto !== "undefined" && crypto.randomUUID) {
      return crypto.randomUUID();
    } else {
      return getUniqueId2();
    }
  }
  var GenerateId2 = class extends React64.Component {
    constructor() {
      super(...arguments);
      this.uniqueElement = this.props.isRandom ? getRandomId2() : currentId4++;
      this.id = `${this.props.prefix}${this.uniqueElement}`;
    }
    render() {
      return this.props.children(this.id);
    }
  };
  GenerateId2.displayName = "GenerateId";
  GenerateId2.defaultProps = {
    prefix: "pf-random-id-",
    isRandom: false
  };

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-core/dist/esm/helpers/htmlConstants.js
  var ASTERISK2 = "*";

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-core/dist/esm/helpers/OUIA/ouia.js
  var import_react7 = __toESM(require_react());
  var uid2 = 0;
  var ouiaPrefix2 = "OUIA-Generated-";
  var ouiaIdByRoute2 = {};
  function getOUIAProps2(componentType, id, ouiaSafe = true) {
    return {
      "data-ouia-component-type": `PF6/${componentType}`,
      "data-ouia-safe": ouiaSafe,
      "data-ouia-component-id": id
    };
  }
  var useOUIAProps2 = (componentType, id, ouiaSafe = true, variant) => ({
    "data-ouia-component-type": `PF6/${componentType}`,
    "data-ouia-safe": ouiaSafe,
    "data-ouia-component-id": useOUIAId2(componentType, id, variant)
  });
  var useOUIAId2 = (componentType, id, variant) => {
    const defaultOUIAId = (0, import_react7.useMemo)(() => getDefaultOUIAId2(componentType, variant), [componentType, variant]);
    return id !== null && id !== void 0 ? id : defaultOUIAId;
  };
  function getDefaultOUIAId2(componentType, variant) {
    try {
      let key;
      if (typeof window !== "undefined") {
        key = `${window.location.href}-${componentType}-${variant || ""}`;
      } else {
        key = `${componentType}-${variant || ""}`;
      }
      if (!ouiaIdByRoute2[key]) {
        ouiaIdByRoute2[key] = 0;
      }
      return `${ouiaPrefix2}${componentType}-${variant ? `${variant}-` : ""}${++ouiaIdByRoute2[key]}`;
    } catch (exception) {
      return `${ouiaPrefix2}${componentType}-${variant ? `${variant}-` : ""}${++uid2}`;
    }
  }

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-core/dist/esm/helpers/Popper/Popper.js
  var React67 = __toESM(require_react());
  var ReactDOM4 = __toESM(require_react_dom());

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/react-popper/usePopper.js
  var React66 = __toESM(require_react());

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/dom-utils/getBoundingClientRect.js
  function getBoundingClientRect2(element) {
    const rect = element.getBoundingClientRect();
    return {
      width: rect.width,
      height: rect.height,
      top: rect.top,
      right: rect.right,
      bottom: rect.bottom,
      left: rect.left,
      x: rect.left,
      y: rect.top
    };
  }

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/dom-utils/getWindow.js
  function getWindow2(node) {
    if (node.toString() !== "[object Window]") {
      const ownerDocument = node.ownerDocument;
      return ownerDocument ? ownerDocument.defaultView : window;
    }
    return node;
  }

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/dom-utils/getWindowScroll.js
  function getWindowScroll2(node) {
    const win = getWindow2(node);
    const scrollLeft = win.pageXOffset;
    const scrollTop = win.pageYOffset;
    return {
      scrollLeft,
      scrollTop
    };
  }

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/dom-utils/instanceOf.js
  function isElement2(node) {
    const OwnElement = getWindow2(node).Element;
    return node instanceof OwnElement || node instanceof Element;
  }
  function isHTMLElement2(node) {
    const OwnElement = getWindow2(node).HTMLElement;
    return node instanceof OwnElement || node instanceof HTMLElement;
  }

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/dom-utils/getHTMLElementScroll.js
  function getHTMLElementScroll2(element) {
    return {
      scrollLeft: element.scrollLeft,
      scrollTop: element.scrollTop
    };
  }

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/dom-utils/getNodeScroll.js
  function getNodeScroll2(node) {
    if (node === getWindow2(node) || !isHTMLElement2(node)) {
      return getWindowScroll2(node);
    } else {
      return getHTMLElementScroll2(node);
    }
  }

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/dom-utils/getNodeName.js
  function getNodeName2(element) {
    return element ? (element.nodeName || "").toLowerCase() : null;
  }

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/dom-utils/getDocumentElement.js
  function getDocumentElement2(element) {
    return (isElement2(element) ? element.ownerDocument : element.document).documentElement;
  }

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/dom-utils/getWindowScrollBarX.js
  function getWindowScrollBarX2(element) {
    return getBoundingClientRect2(getDocumentElement2(element)).left + getWindowScroll2(element).scrollLeft;
  }

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/dom-utils/getComputedStyle.js
  function getComputedStyle3(element) {
    return getWindow2(element).getComputedStyle(element);
  }

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/dom-utils/isScrollParent.js
  function isScrollParent2(element) {
    const { overflow, overflowX, overflowY } = getComputedStyle3(element);
    return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
  }

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/dom-utils/getCompositeRect.js
  function getCompositeRect2(elementOrVirtualElement, offsetParent, isFixed = false) {
    const documentElement = getDocumentElement2(offsetParent);
    const rect = getBoundingClientRect2(elementOrVirtualElement);
    const isOffsetParentAnElement = isHTMLElement2(offsetParent);
    let scroll = { scrollLeft: 0, scrollTop: 0 };
    let offsets = { x: 0, y: 0 };
    if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
      if (getNodeName2(offsetParent) !== "body" || // https://github.com/popperjs/popper-core/issues/1078
      isScrollParent2(documentElement)) {
        scroll = getNodeScroll2(offsetParent);
      }
      if (isHTMLElement2(offsetParent)) {
        offsets = getBoundingClientRect2(offsetParent);
        offsets.x += offsetParent.clientLeft;
        offsets.y += offsetParent.clientTop;
      } else if (documentElement) {
        offsets.x = getWindowScrollBarX2(documentElement);
      }
    }
    return {
      x: rect.left + scroll.scrollLeft - offsets.x,
      y: rect.top + scroll.scrollTop - offsets.y,
      width: rect.width,
      height: rect.height
    };
  }

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/dom-utils/getLayoutRect.js
  function getLayoutRect2(element) {
    return {
      x: element.offsetLeft,
      y: element.offsetTop,
      width: element.offsetWidth,
      height: element.offsetHeight
    };
  }

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/dom-utils/getParentNode.js
  function getParentNode2(element) {
    if (getNodeName2(element) === "html") {
      return element;
    }
    return (
      // $FlowFixMe: this is a quicker (but less type safe) way to save quite some bytes from the bundle
      element.assignedSlot || // step into the shadow DOM of the parent of a slotted node
      element.parentNode || // DOM Element detected
      // $FlowFixMe: need a better way to handle this...
      element.host || // ShadowRoot detected
      // $FlowFixMe: HTMLElement is a Node
      getDocumentElement2(element)
    );
  }

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/dom-utils/getScrollParent.js
  function getScrollParent2(node) {
    if (["html", "body", "#document"].indexOf(getNodeName2(node)) >= 0) {
      return node.ownerDocument.body;
    }
    if (isHTMLElement2(node) && isScrollParent2(node)) {
      return node;
    }
    return getScrollParent2(getParentNode2(node));
  }

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/dom-utils/listScrollParents.js
  function listScrollParents2(element, list = []) {
    const scrollParent = getScrollParent2(element);
    const isBody = getNodeName2(scrollParent) === "body";
    const win = getWindow2(scrollParent);
    const target = isBody ? [win].concat(win.visualViewport || [], isScrollParent2(scrollParent) ? scrollParent : []) : scrollParent;
    const updatedList = list.concat(target);
    return isBody ? updatedList : updatedList.concat(listScrollParents2(getParentNode2(target)));
  }

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/dom-utils/isTableElement.js
  function isTableElement2(element) {
    return ["table", "td", "th"].indexOf(getNodeName2(element)) >= 0;
  }

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/dom-utils/getOffsetParent.js
  function getTrueOffsetParent2(element) {
    if (!isHTMLElement2(element) || // https://github.com/popperjs/popper-core/issues/837
    getComputedStyle3(element).position === "fixed") {
      return null;
    }
    const offsetParent = element.offsetParent;
    if (offsetParent) {
      const html = getDocumentElement2(offsetParent);
      if (getNodeName2(offsetParent) === "body" && getComputedStyle3(offsetParent).position === "static" && getComputedStyle3(html).position !== "static") {
        return html;
      }
    }
    return offsetParent;
  }
  function getContainingBlock2(element) {
    let currentNode = getParentNode2(element);
    while (isHTMLElement2(currentNode) && ["html", "body"].indexOf(getNodeName2(currentNode)) < 0) {
      const css3 = getComputedStyle3(currentNode);
      if (css3.transform !== "none" || css3.perspective !== "none" || css3.willChange && css3.willChange !== "auto") {
        return currentNode;
      } else {
        currentNode = currentNode.parentNode;
      }
    }
    return null;
  }
  function getOffsetParent2(element) {
    const window2 = getWindow2(element);
    let offsetParent = getTrueOffsetParent2(element);
    while (offsetParent && isTableElement2(offsetParent) && getComputedStyle3(offsetParent).position === "static") {
      offsetParent = getTrueOffsetParent2(offsetParent);
    }
    if (offsetParent && getNodeName2(offsetParent) === "body" && getComputedStyle3(offsetParent).position === "static") {
      return window2;
    }
    return offsetParent || getContainingBlock2(element) || window2;
  }

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/enums.js
  var top2 = "top";
  var bottom2 = "bottom";
  var right2 = "right";
  var left2 = "left";
  var auto2 = "auto";
  var basePlacements2 = [top2, bottom2, right2, left2];
  var start2 = "start";
  var end2 = "end";
  var clippingParents2 = "clippingParents";
  var viewport2 = "viewport";
  var popper2 = "popper";
  var reference2 = "reference";
  var variationPlacements2 = basePlacements2.reduce((acc, placement) => acc.concat([`${placement}-${start2}`, `${placement}-${end2}`]), []);
  var placements2 = [...basePlacements2, auto2].reduce((acc, placement) => acc.concat([placement, `${placement}-${start2}`, `${placement}-${end2}`]), []);
  var beforeRead2 = "beforeRead";
  var read2 = "read";
  var afterRead2 = "afterRead";
  var beforeMain2 = "beforeMain";
  var main2 = "main";
  var afterMain2 = "afterMain";
  var beforeWrite2 = "beforeWrite";
  var write2 = "write";
  var afterWrite2 = "afterWrite";
  var modifierPhases2 = [
    beforeRead2,
    read2,
    afterRead2,
    beforeMain2,
    main2,
    afterMain2,
    beforeWrite2,
    write2,
    afterWrite2
  ];

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/utils/orderModifiers.js
  function order2(modifiers) {
    const map = /* @__PURE__ */ new Map();
    const visited = /* @__PURE__ */ new Set();
    const result = [];
    modifiers.forEach((modifier) => {
      map.set(modifier.name, modifier);
    });
    function sort(modifier) {
      visited.add(modifier.name);
      const requires = [...modifier.requires || [], ...modifier.requiresIfExists || []];
      requires.forEach((dep) => {
        if (!visited.has(dep)) {
          const depModifier = map.get(dep);
          if (depModifier) {
            sort(depModifier);
          }
        }
      });
      result.push(modifier);
    }
    modifiers.forEach((modifier) => {
      if (!visited.has(modifier.name)) {
        sort(modifier);
      }
    });
    return result;
  }
  function orderModifiers2(modifiers) {
    const orderedModifiers = order2(modifiers);
    return modifierPhases2.reduce((acc, phase) => acc.concat(orderedModifiers.filter((modifier) => modifier.phase === phase)), []);
  }

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/utils/debounce.js
  function debounce2(fn) {
    let pending;
    return () => {
      if (!pending) {
        pending = new Promise((resolve) => {
          Promise.resolve().then(() => {
            pending = void 0;
            resolve(fn());
          });
        });
      }
      return pending;
    };
  }

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/utils/getBasePlacement.js
  function getBasePlacement2(placement) {
    return placement.split("-")[0];
  }

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/utils/mergeByName.js
  function mergeByName2(modifiers) {
    const merged = modifiers.reduce((merged2, current) => {
      const existing = merged2[current.name];
      merged2[current.name] = existing ? Object.assign(Object.assign(Object.assign({}, existing), current), { options: Object.assign(Object.assign({}, existing.options), current.options), data: Object.assign(Object.assign({}, existing.data), current.data) }) : current;
      return merged2;
    }, {});
    return Object.keys(merged).map((key) => merged[key]);
  }

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/dom-utils/getViewportRect.js
  function getViewportRect2(element) {
    const win = getWindow2(element);
    const html = getDocumentElement2(element);
    const visualViewport = win.visualViewport;
    let width = html.clientWidth;
    let height = html.clientHeight;
    let x = 0;
    let y = 0;
    if (visualViewport) {
      width = visualViewport.width;
      height = visualViewport.height;
      if (!/^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {
        x = visualViewport.offsetLeft;
        y = visualViewport.offsetTop;
      }
    }
    return {
      width,
      height,
      x: x + getWindowScrollBarX2(element),
      y
    };
  }

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/dom-utils/getDocumentRect.js
  function getDocumentRect2(element) {
    const html = getDocumentElement2(element);
    const winScroll = getWindowScroll2(element);
    const body = element.ownerDocument.body;
    const width = Math.max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
    const height = Math.max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
    let x = -winScroll.scrollLeft + getWindowScrollBarX2(element);
    const y = -winScroll.scrollTop;
    if (getComputedStyle3(body || html).direction === "rtl") {
      x += Math.max(html.clientWidth, body ? body.clientWidth : 0) - width;
    }
    return { width, height, x, y };
  }

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/dom-utils/contains.js
  function contains2(parent2, child) {
    const isShadow = Boolean(child.getRootNode && child.getRootNode().host);
    if (parent2.contains(child)) {
      return true;
    } else if (isShadow) {
      let next = child;
      do {
        if (next && parent2.isSameNode(next)) {
          return true;
        }
        next = next.parentNode || next.host;
      } while (next);
    }
    return false;
  }

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/utils/rectToClientRect.js
  function rectToClientRect2(rect) {
    return Object.assign(Object.assign({}, rect), { left: rect.x, top: rect.y, right: rect.x + rect.width, bottom: rect.y + rect.height });
  }

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/dom-utils/getClippingRect.js
  function getInnerBoundingClientRect2(element) {
    const rect = getBoundingClientRect2(element);
    rect.top = rect.top + element.clientTop;
    rect.left = rect.left + element.clientLeft;
    rect.bottom = rect.top + element.clientHeight;
    rect.right = rect.left + element.clientWidth;
    rect.width = element.clientWidth;
    rect.height = element.clientHeight;
    rect.x = rect.left;
    rect.y = rect.top;
    return rect;
  }
  function getClientRectFromMixedType2(element, clippingParent) {
    return clippingParent === viewport2 ? rectToClientRect2(getViewportRect2(element)) : isHTMLElement2(clippingParent) ? getInnerBoundingClientRect2(clippingParent) : rectToClientRect2(getDocumentRect2(getDocumentElement2(element)));
  }
  function getClippingParents2(element) {
    const clippingParents3 = listScrollParents2(getParentNode2(element));
    const canEscapeClipping = ["absolute", "fixed"].indexOf(getComputedStyle3(element).position) >= 0;
    const clipperElement = canEscapeClipping && isHTMLElement2(element) ? getOffsetParent2(element) : element;
    if (!isElement2(clipperElement)) {
      return [];
    }
    return clippingParents3.filter((clippingParent) => isElement2(clippingParent) && contains2(clippingParent, clipperElement) && getNodeName2(clippingParent) !== "body");
  }
  function getClippingRect2(element, boundary, rootBoundary) {
    const mainClippingParents = boundary === "clippingParents" ? getClippingParents2(element) : [].concat(boundary);
    const clippingParents3 = [...mainClippingParents, rootBoundary];
    const firstClippingParent = clippingParents3[0];
    const clippingRect = clippingParents3.reduce((accRect, clippingParent) => {
      const rect = getClientRectFromMixedType2(element, clippingParent);
      accRect.top = Math.max(rect.top, accRect.top);
      accRect.right = Math.min(rect.right, accRect.right);
      accRect.bottom = Math.min(rect.bottom, accRect.bottom);
      accRect.left = Math.max(rect.left, accRect.left);
      return accRect;
    }, getClientRectFromMixedType2(element, firstClippingParent));
    clippingRect.width = clippingRect.right - clippingRect.left;
    clippingRect.height = clippingRect.bottom - clippingRect.top;
    clippingRect.x = clippingRect.left;
    clippingRect.y = clippingRect.top;
    return clippingRect;
  }

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/utils/getVariation.js
  function getVariation2(placement) {
    return placement.split("-")[1];
  }

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/utils/getMainAxisFromPlacement.js
  function getMainAxisFromPlacement2(placement) {
    return ["top", "bottom"].indexOf(placement) >= 0 ? "x" : "y";
  }

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/utils/computeOffsets.js
  function computeOffsets2({ reference: reference3, element, placement }) {
    const basePlacement = placement ? getBasePlacement2(placement) : null;
    const variation = placement ? getVariation2(placement) : null;
    const commonX = reference3.x + reference3.width / 2 - element.width / 2;
    const commonY = reference3.y + reference3.height / 2 - element.height / 2;
    let offsets;
    switch (basePlacement) {
      case top2:
        offsets = {
          x: commonX,
          y: reference3.y - element.height
        };
        break;
      case bottom2:
        offsets = {
          x: commonX,
          y: reference3.y + reference3.height
        };
        break;
      case right2:
        offsets = {
          x: reference3.x + reference3.width,
          y: commonY
        };
        break;
      case left2:
        offsets = {
          x: reference3.x - element.width,
          y: commonY
        };
        break;
      default:
        offsets = {
          x: reference3.x,
          y: reference3.y
        };
    }
    const mainAxis = basePlacement ? getMainAxisFromPlacement2(basePlacement) : null;
    if (mainAxis != null) {
      const len = mainAxis === "y" ? "height" : "width";
      switch (variation) {
        case start2:
          offsets[mainAxis] = Math.floor(offsets[mainAxis]) - Math.floor(reference3[len] / 2 - element[len] / 2);
          break;
        case end2:
          offsets[mainAxis] = Math.floor(offsets[mainAxis]) + Math.ceil(reference3[len] / 2 - element[len] / 2);
          break;
        default:
      }
    }
    return offsets;
  }

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/utils/getFreshSideObject.js
  function getFreshSideObject2() {
    return {
      top: 0,
      right: 0,
      bottom: 0,
      left: 0
    };
  }

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/utils/mergePaddingObject.js
  function mergePaddingObject2(paddingObject) {
    return Object.assign(Object.assign({}, getFreshSideObject2()), paddingObject);
  }

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/utils/expandToHashMap.js
  function expandToHashMap2(value, keys) {
    return keys.reduce((hashMap, key) => {
      hashMap[key] = value;
      return hashMap;
    }, {});
  }

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/utils/detectOverflow.js
  function detectOverflow2(state, options = {}) {
    const { placement = state.placement, boundary = clippingParents2, rootBoundary = viewport2, elementContext = popper2, altBoundary = false, padding = 0 } = options;
    const paddingObject = mergePaddingObject2(typeof padding !== "number" ? padding : expandToHashMap2(padding, basePlacements2));
    const altContext = elementContext === popper2 ? reference2 : popper2;
    const referenceElement = state.elements.reference;
    const popperRect = state.rects.popper;
    const element = state.elements[altBoundary ? altContext : elementContext];
    const clippingClientRect = getClippingRect2(isElement2(element) ? element : element.contextElement || getDocumentElement2(state.elements.popper), boundary, rootBoundary);
    const referenceClientRect = getBoundingClientRect2(referenceElement);
    const popperOffsets3 = computeOffsets2({
      reference: referenceClientRect,
      element: popperRect,
      strategy: "absolute",
      placement
    });
    const popperClientRect = rectToClientRect2(Object.assign(Object.assign({}, popperRect), popperOffsets3));
    const elementClientRect = elementContext === popper2 ? popperClientRect : referenceClientRect;
    const overflowOffsets = {
      top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
      bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
      left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
      right: elementClientRect.right - clippingClientRect.right + paddingObject.right
    };
    const offsetData = state.modifiersData.offset;
    if (elementContext === popper2 && offsetData) {
      const offset3 = offsetData[placement];
      Object.keys(overflowOffsets).forEach((key) => {
        const multiply = [right2, bottom2].indexOf(key) >= 0 ? 1 : -1;
        const axis = [top2, bottom2].indexOf(key) >= 0 ? "y" : "x";
        overflowOffsets[key] += offset3[axis] * multiply;
      });
    }
    return overflowOffsets;
  }

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/index.js
  var DEFAULT_OPTIONS2 = {
    placement: "bottom",
    modifiers: [],
    strategy: "absolute"
  };
  function areValidElements2(...args) {
    return !args.some((element) => !(element && typeof element.getBoundingClientRect === "function"));
  }
  function popperGenerator2(generatorOptions = {}) {
    const { defaultModifiers: defaultModifiers3 = [], defaultOptions = DEFAULT_OPTIONS2 } = generatorOptions;
    return function createPopper5(reference3, popper3, options = defaultOptions) {
      let state = {
        placement: "bottom",
        orderedModifiers: [],
        options: Object.assign(Object.assign({}, DEFAULT_OPTIONS2), defaultOptions),
        modifiersData: {},
        elements: {
          reference: reference3,
          popper: popper3
        },
        attributes: {},
        styles: {}
      };
      let effectCleanupFns = [];
      let isDestroyed = false;
      const instance = {
        state,
        setOptions(options2) {
          cleanupModifierEffects();
          state.options = Object.assign(Object.assign(Object.assign({}, defaultOptions), state.options), options2);
          state.scrollParents = {
            reference: isElement2(reference3) ? listScrollParents2(reference3) : reference3.contextElement ? listScrollParents2(reference3.contextElement) : [],
            popper: listScrollParents2(popper3)
          };
          const orderedModifiers = orderModifiers2(mergeByName2([...defaultModifiers3, ...state.options.modifiers]));
          state.orderedModifiers = orderedModifiers.filter((m) => m.enabled);
          if (false) {
            const modifiers = uniqueBy([...orderedModifiers, ...state.options.modifiers], ({ name }) => name);
            validateModifiers(modifiers);
            if (getBasePlacement2(state.options.placement) === auto2) {
              const flipModifier = state.orderedModifiers.find(({ name }) => name === "flip");
              if (!flipModifier) {
                console.error(['Popper: "auto" placements require the "flip" modifier be', "present and enabled to work."].join(" "));
              }
            }
            const { marginTop, marginRight, marginBottom, marginLeft } = getComputedStyle3(popper3);
            if ([marginTop, marginRight, marginBottom, marginLeft].some((margin) => parseFloat(margin))) {
              console.warn([
                'Popper: CSS "margin" styles cannot be used to apply padding',
                "between the popper and its reference element or boundary.",
                "To replicate margin, use the `offset` modifier, as well as",
                "the `padding` option in the `preventOverflow` and `flip`",
                "modifiers."
              ].join(" "));
            }
          }
          runModifierEffects();
          return instance.update();
        },
        // Sync update – it will always be executed, even if not necessary. This
        // is useful for low frequency updates where sync behavior simplifies the
        // logic.
        // For high frequency updates (e.g. `resize` and `scroll` events), always
        // prefer the async Popper#update method
        forceUpdate() {
          if (isDestroyed) {
            return;
          }
          const { reference: reference4, popper: popper4 } = state.elements;
          if (!areValidElements2(reference4, popper4)) {
            if (false) {
              console.error(INVALID_ELEMENT_ERROR);
            }
            return;
          }
          state.rects = {
            reference: getCompositeRect2(reference4, getOffsetParent2(popper4), state.options.strategy === "fixed"),
            popper: getLayoutRect2(popper4)
          };
          state.reset = false;
          state.placement = state.options.placement;
          state.orderedModifiers.forEach((modifier) => state.modifiersData[modifier.name] = Object.assign({}, modifier.data));
          let __debug_loops__ = 0;
          for (let index = 0; index < state.orderedModifiers.length; index++) {
            if (false) {
              __debug_loops__ += 1;
              if (__debug_loops__ > 100) {
                console.error(INFINITE_LOOP_ERROR);
                break;
              }
            }
            if (state.reset === true) {
              state.reset = false;
              index = -1;
              continue;
            }
            const { fn, options: options2 = {}, name } = state.orderedModifiers[index];
            if (typeof fn === "function") {
              state = fn({ state, options: options2, name, instance }) || state;
            }
          }
        },
        // Async and optimistically optimized update – it will not be executed if
        // not necessary (debounced to run at most once-per-tick)
        update: debounce2(() => new Promise((resolve) => {
          instance.forceUpdate();
          resolve(state);
        })),
        destroy() {
          cleanupModifierEffects();
          isDestroyed = true;
        }
      };
      if (!areValidElements2(reference3, popper3)) {
        if (false) {
          console.error(INVALID_ELEMENT_ERROR);
        }
        return instance;
      }
      instance.setOptions(options).then((state2) => {
        if (!isDestroyed && options.onFirstUpdate) {
          options.onFirstUpdate(state2);
        }
      });
      function runModifierEffects() {
        state.orderedModifiers.forEach(({ name, options: options2 = {}, effect: effect7 }) => {
          if (typeof effect7 === "function") {
            const cleanupFn = effect7({ state, name, instance, options: options2 });
            const noopFn = () => {
            };
            effectCleanupFns.push(cleanupFn || noopFn);
          }
        });
      }
      function cleanupModifierEffects() {
        effectCleanupFns.forEach((fn) => fn());
        effectCleanupFns = [];
      }
      return instance;
    };
  }
  var createPopper3 = popperGenerator2();

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/modifiers/eventListeners.js
  var passive2 = { passive: true };
  function effect4({ state, instance, options }) {
    const { scroll = true, resize = true } = options;
    const window2 = getWindow2(state.elements.popper);
    const scrollParents = [...state.scrollParents.reference, ...state.scrollParents.popper];
    if (scroll) {
      scrollParents.forEach((scrollParent) => {
        scrollParent.addEventListener("scroll", instance.update, passive2);
      });
    }
    if (resize) {
      window2.addEventListener("resize", instance.update, passive2);
    }
    return () => {
      if (scroll) {
        scrollParents.forEach((scrollParent) => {
          scrollParent.removeEventListener("scroll", instance.update, passive2);
        });
      }
      if (resize) {
        window2.removeEventListener("resize", instance.update, passive2);
      }
    };
  }
  var eventListeners_default2 = {
    name: "eventListeners",
    enabled: true,
    phase: "write",
    fn: () => {
    },
    effect: effect4,
    data: {}
  };

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/modifiers/popperOffsets.js
  function popperOffsets2({ state, name }) {
    state.modifiersData[name] = computeOffsets2({
      reference: state.rects.reference,
      element: state.rects.popper,
      strategy: "absolute",
      placement: state.placement
    });
  }
  var popperOffsets_default2 = {
    name: "popperOffsets",
    enabled: true,
    phase: "read",
    fn: popperOffsets2,
    data: {}
  };

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/modifiers/computeStyles.js
  var unsetSides2 = {
    top: "auto",
    right: "auto",
    bottom: "auto",
    left: "auto"
  };
  function roundOffsets2({ x, y }) {
    const win = window;
    const dpr = win.devicePixelRatio || 1;
    return {
      x: Math.round(x * dpr) / dpr || 0,
      y: Math.round(y * dpr) / dpr || 0
    };
  }
  function mapToStyles2({ popper: popper3, popperRect, placement, offsets, position, gpuAcceleration, adaptive }) {
    let { x, y } = roundOffsets2(offsets);
    const hasX = offsets.hasOwnProperty("x");
    const hasY = offsets.hasOwnProperty("y");
    let sideX = left2;
    let sideY = top2;
    const win = window;
    if (adaptive) {
      let offsetParent = getOffsetParent2(popper3);
      if (offsetParent === getWindow2(popper3)) {
        offsetParent = getDocumentElement2(popper3);
      }
      if (placement === top2) {
        sideY = bottom2;
        y -= offsetParent.clientHeight - popperRect.height;
        y *= gpuAcceleration ? 1 : -1;
      }
      if (placement === left2) {
        sideX = right2;
        x -= offsetParent.clientWidth - popperRect.width;
        x *= gpuAcceleration ? 1 : -1;
      }
    }
    const commonStyles = Object.assign({ position }, adaptive && unsetSides2);
    if (gpuAcceleration) {
      return Object.assign(Object.assign({}, commonStyles), {
        [sideY]: hasY ? "0" : "",
        [sideX]: hasX ? "0" : "",
        // Layer acceleration can disable subpixel rendering which causes slightly
        // blurry text on low PPI displays, so we want to use 2D transforms
        // instead
        transform: (win.devicePixelRatio || 1) < 2 ? `translate(${x}px, ${y}px)` : `translate3d(${x}px, ${y}px, 0)`
      });
    }
    return Object.assign(Object.assign({}, commonStyles), { [sideY]: hasY ? `${y}px` : "", [sideX]: hasX ? `${x}px` : "", transform: "" });
  }
  function computeStyles2({ state, options }) {
    const { gpuAcceleration = true, adaptive = true } = options;
    if (false) {
      const transitionProperty = getComputedStyle3(state.elements.popper).transitionProperty || "";
      if (adaptive && ["transform", "top", "right", "bottom", "left"].some((property) => transitionProperty.indexOf(property) >= 0)) {
        console.warn([
          "Popper: Detected CSS transitions on at least one of the following",
          'CSS properties: "transform", "top", "right", "bottom", "left".',
          "\n\n",
          'Disable the "computeStyles" modifier\'s `adaptive` option to allow',
          "for smooth transitions, or remove these properties from the CSS",
          "transition declaration on the popper element if only transitioning",
          "opacity or background-color for example.",
          "\n\n",
          "We recommend using the popper element as a wrapper around an inner",
          "element that can have any CSS property transitioned for animations."
        ].join(" "));
      }
    }
    const commonStyles = {
      placement: getBasePlacement2(state.placement),
      popper: state.elements.popper,
      popperRect: state.rects.popper,
      gpuAcceleration
    };
    if (state.modifiersData.popperOffsets != null) {
      state.styles.popper = Object.assign(Object.assign({}, state.styles.popper), mapToStyles2(Object.assign(Object.assign({}, commonStyles), { offsets: state.modifiersData.popperOffsets, position: state.options.strategy, adaptive })));
    }
    if (state.modifiersData.arrow != null) {
      state.styles.arrow = Object.assign(Object.assign({}, state.styles.arrow), mapToStyles2(Object.assign(Object.assign({}, commonStyles), { offsets: state.modifiersData.arrow, position: "absolute", adaptive: false })));
    }
    state.attributes.popper = Object.assign(Object.assign({}, state.attributes.popper), { "data-popper-placement": state.placement });
  }
  var computeStyles_default2 = {
    name: "computeStyles",
    enabled: true,
    phase: "beforeWrite",
    fn: computeStyles2,
    data: {}
  };

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/modifiers/applyStyles.js
  function applyStyles2({ state }) {
    Object.keys(state.elements).forEach((name) => {
      const style = state.styles[name] || {};
      const attributes = state.attributes[name] || {};
      const element = state.elements[name];
      if (!isHTMLElement2(element) || !getNodeName2(element)) {
        return;
      }
      Object.assign(element.style, style);
      Object.keys(attributes).forEach((name2) => {
        const value = attributes[name2];
        if (value === false) {
          element.removeAttribute(name2);
        } else {
          element.setAttribute(name2, value === true ? "" : value);
        }
      });
    });
  }
  function effect5({ state }) {
    const initialStyles = {
      popper: {
        position: state.options.strategy,
        left: "0",
        top: "0",
        margin: "0"
      },
      arrow: {
        position: "absolute"
      },
      reference: {}
    };
    Object.assign(state.elements.popper.style, initialStyles.popper);
    if (state.elements.arrow) {
      Object.assign(state.elements.arrow.style, initialStyles.arrow);
    }
    return () => {
      Object.keys(state.elements).forEach((name) => {
        const element = state.elements[name];
        const attributes = state.attributes[name] || {};
        const styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]);
        const style = styleProperties.reduce((style2, property) => {
          style2[property] = "";
          return style2;
        }, {});
        if (!isHTMLElement2(element) || !getNodeName2(element)) {
          return;
        }
        Object.assign(element.style, style);
        Object.keys(attributes).forEach((attribute) => {
          element.removeAttribute(attribute);
        });
      });
    };
  }
  var applyStyles_default2 = {
    name: "applyStyles",
    enabled: true,
    phase: "write",
    fn: applyStyles2,
    effect: effect5,
    requires: ["computeStyles"]
  };

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/modifiers/offset.js
  function distanceAndSkiddingToXY2(placement, rects, offset3) {
    const basePlacement = getBasePlacement2(placement);
    const invertDistance = [left2, top2].indexOf(basePlacement) >= 0 ? -1 : 1;
    let [skidding, distance] = typeof offset3 === "function" ? offset3(Object.assign(Object.assign({}, rects), { placement })) : offset3;
    skidding = skidding || 0;
    distance = (distance || 0) * invertDistance;
    return [left2, right2].indexOf(basePlacement) >= 0 ? { x: distance, y: skidding } : { x: skidding, y: distance };
  }
  function offset2({ state, options, name }) {
    const { offset: offset3 = [0, 0] } = options;
    const data2 = placements2.reduce((acc, placement) => {
      acc[placement] = distanceAndSkiddingToXY2(placement, state.rects, offset3);
      return acc;
    }, {});
    const { x, y } = data2[state.placement];
    if (state.modifiersData.popperOffsets != null) {
      state.modifiersData.popperOffsets.x += x;
      state.modifiersData.popperOffsets.y += y;
    }
    state.modifiersData[name] = data2;
  }
  var offset_default2 = {
    name: "offset",
    enabled: true,
    phase: "main",
    requires: ["popperOffsets"],
    fn: offset2
  };

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/utils/getOppositePlacement.js
  var hash4 = { left: "right", right: "left", bottom: "top", top: "bottom" };
  function getOppositePlacement3(placement) {
    return placement.replace(/left|right|bottom|top/g, (matched) => hash4[matched]);
  }

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/utils/getOppositeVariationPlacement.js
  var hash5 = { start: "end", end: "start" };
  function getOppositeVariationPlacement2(placement) {
    return placement.replace(/start|end/g, (matched) => hash5[matched]);
  }

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/utils/computeAutoPlacement.js
  function computeAutoPlacement2(state, options = {}) {
    const { placement, boundary, rootBoundary, padding, flipVariations, allowedAutoPlacements = placements2 } = options;
    const variation = getVariation2(placement);
    const placements3 = variation ? flipVariations ? variationPlacements2 : variationPlacements2.filter((placement2) => getVariation2(placement2) === variation) : basePlacements2;
    let allowedPlacements = placements3.filter((placement2) => allowedAutoPlacements.indexOf(placement2) >= 0);
    if (allowedPlacements.length === 0) {
      allowedPlacements = placements3;
      if (false) {
        console.error([
          "Popper: The `allowedAutoPlacements` option did not allow any",
          "placements. Ensure the `placement` option matches the variation",
          "of the allowed placements.",
          'For example, "auto" cannot be used to allow "bottom-start".',
          'Use "auto-start" instead.'
        ].join(" "));
      }
    }
    const overflows = allowedPlacements.reduce((acc, placement2) => {
      acc[placement2] = detectOverflow2(state, {
        placement: placement2,
        boundary,
        rootBoundary,
        padding
      })[getBasePlacement2(placement2)];
      return acc;
    }, {});
    return Object.keys(overflows).sort((a, b) => overflows[a] - overflows[b]);
  }

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/modifiers/flip.js
  function getExpandedFallbackPlacements2(placement) {
    if (getBasePlacement2(placement) === auto2) {
      return [];
    }
    const oppositePlacement = getOppositePlacement3(placement);
    return [
      getOppositeVariationPlacement2(placement),
      oppositePlacement,
      getOppositeVariationPlacement2(oppositePlacement)
    ];
  }
  function flip2({ state, options, name }) {
    if (state.modifiersData[name]._skip) {
      return;
    }
    const { mainAxis: checkMainAxis = true, altAxis: checkAltAxis = true, fallbackPlacements: specifiedFallbackPlacements, padding, boundary, rootBoundary, altBoundary, flipVariations = true, allowedAutoPlacements } = options;
    const preferredPlacement = state.options.placement;
    const basePlacement = getBasePlacement2(preferredPlacement);
    const isBasePlacement = basePlacement === preferredPlacement;
    const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement3(preferredPlacement)] : getExpandedFallbackPlacements2(preferredPlacement));
    const placements3 = [preferredPlacement, ...fallbackPlacements].reduce((acc, placement) => acc.concat(getBasePlacement2(placement) === auto2 ? computeAutoPlacement2(state, {
      placement,
      boundary,
      rootBoundary,
      padding,
      flipVariations,
      allowedAutoPlacements
    }) : placement), []);
    const referenceRect = state.rects.reference;
    const popperRect = state.rects.popper;
    const checksMap = /* @__PURE__ */ new Map();
    let makeFallbackChecks = true;
    let firstFittingPlacement = placements3[0];
    for (let i = 0; i < placements3.length; i++) {
      const placement = placements3[i];
      const basePlacement2 = getBasePlacement2(placement);
      const isStartVariation = getVariation2(placement) === start2;
      const isVertical = [top2, bottom2].indexOf(basePlacement2) >= 0;
      const len = isVertical ? "width" : "height";
      const overflow = detectOverflow2(state, {
        placement,
        boundary,
        rootBoundary,
        altBoundary,
        padding
      });
      let mainVariationSide = isVertical ? isStartVariation ? right2 : left2 : isStartVariation ? bottom2 : top2;
      if (referenceRect[len] > popperRect[len]) {
        mainVariationSide = getOppositePlacement3(mainVariationSide);
      }
      const altVariationSide = getOppositePlacement3(mainVariationSide);
      const checks = [];
      if (checkMainAxis) {
        checks.push(overflow[basePlacement2] <= 0);
      }
      if (checkAltAxis) {
        checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
      }
      if (checks.every((check) => check)) {
        firstFittingPlacement = placement;
        makeFallbackChecks = false;
        break;
      }
      checksMap.set(placement, checks);
    }
    if (makeFallbackChecks) {
      const numberOfChecks = flipVariations ? 3 : 1;
      for (let i = numberOfChecks; i > 0; i--) {
        const fittingPlacement = placements3.find((placement) => {
          const checks = checksMap.get(placement);
          if (checks) {
            return checks.slice(0, i).every((check) => check);
          }
        });
        if (fittingPlacement) {
          firstFittingPlacement = fittingPlacement;
          break;
        }
      }
    }
    if (state.placement !== firstFittingPlacement) {
      state.modifiersData[name]._skip = true;
      state.placement = firstFittingPlacement;
      state.reset = true;
    }
  }
  var flip_default2 = {
    name: "flip",
    enabled: true,
    phase: "main",
    fn: flip2,
    requiresIfExists: ["offset"],
    data: { _skip: false }
  };

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/utils/getAltAxis.js
  function getAltAxis2(axis) {
    return axis === "x" ? "y" : "x";
  }

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/utils/within.js
  function within2(min, value, max) {
    return Math.max(min, Math.min(value, max));
  }

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/modifiers/preventOverflow.js
  function preventOverflow2({ state, options, name }) {
    const { mainAxis: checkMainAxis = true, altAxis: checkAltAxis = false, boundary, rootBoundary, altBoundary, padding, tether = true, tetherOffset = 0 } = options;
    const overflow = detectOverflow2(state, {
      boundary,
      rootBoundary,
      padding,
      altBoundary
    });
    const basePlacement = getBasePlacement2(state.placement);
    const variation = getVariation2(state.placement);
    const isBasePlacement = !variation;
    const mainAxis = getMainAxisFromPlacement2(basePlacement);
    const altAxis = getAltAxis2(mainAxis);
    const popperOffsets3 = state.modifiersData.popperOffsets;
    const referenceRect = state.rects.reference;
    const popperRect = state.rects.popper;
    const tetherOffsetValue = typeof tetherOffset === "function" ? tetherOffset(Object.assign(Object.assign({}, state.rects), { placement: state.placement })) : tetherOffset;
    const data2 = { x: 0, y: 0 };
    if (!popperOffsets3) {
      return;
    }
    if (checkMainAxis) {
      const mainSide = mainAxis === "y" ? top2 : left2;
      const altSide = mainAxis === "y" ? bottom2 : right2;
      const len = mainAxis === "y" ? "height" : "width";
      const offset3 = popperOffsets3[mainAxis];
      const min = popperOffsets3[mainAxis] + overflow[mainSide];
      const max = popperOffsets3[mainAxis] - overflow[altSide];
      const additive = tether ? -popperRect[len] / 2 : 0;
      const minLen = variation === start2 ? referenceRect[len] : popperRect[len];
      const maxLen = variation === start2 ? -popperRect[len] : -referenceRect[len];
      const arrowElement = state.elements.arrow;
      const arrowRect = tether && arrowElement ? getLayoutRect2(arrowElement) : { width: 0, height: 0 };
      const arrowPaddingObject = state.modifiersData["arrow#persistent"] ? state.modifiersData["arrow#persistent"].padding : getFreshSideObject2();
      const arrowPaddingMin = arrowPaddingObject[mainSide];
      const arrowPaddingMax = arrowPaddingObject[altSide];
      const arrowLen = within2(0, referenceRect[len], arrowRect[len]);
      const minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - tetherOffsetValue : minLen - arrowLen - arrowPaddingMin - tetherOffsetValue;
      const maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + tetherOffsetValue : maxLen + arrowLen + arrowPaddingMax + tetherOffsetValue;
      const arrowOffsetParent = state.elements.arrow && getOffsetParent2(state.elements.arrow);
      const clientOffset = arrowOffsetParent ? mainAxis === "y" ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
      const offsetModifierValue = state.modifiersData.offset ? state.modifiersData.offset[state.placement][mainAxis] : 0;
      const tetherMin = popperOffsets3[mainAxis] + minOffset - offsetModifierValue - clientOffset;
      const tetherMax = popperOffsets3[mainAxis] + maxOffset - offsetModifierValue;
      const preventedOffset = within2(tether ? Math.min(min, tetherMin) : min, offset3, tether ? Math.max(max, tetherMax) : max);
      popperOffsets3[mainAxis] = preventedOffset;
      data2[mainAxis] = preventedOffset - offset3;
    }
    if (checkAltAxis) {
      const mainSide = mainAxis === "x" ? top2 : left2;
      const altSide = mainAxis === "x" ? bottom2 : right2;
      const offset3 = popperOffsets3[altAxis];
      const min = offset3 + overflow[mainSide];
      const max = offset3 - overflow[altSide];
      const preventedOffset = within2(min, offset3, max);
      popperOffsets3[altAxis] = preventedOffset;
      data2[altAxis] = preventedOffset - offset3;
    }
    state.modifiersData[name] = data2;
  }
  var preventOverflow_default2 = {
    name: "preventOverflow",
    enabled: true,
    phase: "main",
    fn: preventOverflow2,
    requiresIfExists: ["offset"]
  };

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/modifiers/arrow.js
  function arrow2({ state, name }) {
    const arrowElement = state.elements.arrow;
    const popperOffsets3 = state.modifiersData.popperOffsets;
    const basePlacement = getBasePlacement2(state.placement);
    const axis = getMainAxisFromPlacement2(basePlacement);
    const isVertical = [left2, right2].indexOf(basePlacement) >= 0;
    const len = isVertical ? "height" : "width";
    if (!arrowElement || !popperOffsets3) {
      return;
    }
    const paddingObject = state.modifiersData[`${name}#persistent`].padding;
    const arrowRect = getLayoutRect2(arrowElement);
    const minProp = axis === "y" ? top2 : left2;
    const maxProp = axis === "y" ? bottom2 : right2;
    const endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets3[axis] - state.rects.popper[len];
    const startDiff = popperOffsets3[axis] - state.rects.reference[axis];
    const arrowOffsetParent = getOffsetParent2(arrowElement);
    const clientSize = arrowOffsetParent ? axis === "y" ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
    const centerToReference = endDiff / 2 - startDiff / 2;
    const min = paddingObject[minProp];
    const max = clientSize - arrowRect[len] - paddingObject[maxProp];
    const center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
    const offset3 = within2(min, center, max);
    const axisProp = axis;
    state.modifiersData[name] = {
      [axisProp]: offset3,
      centerOffset: offset3 - center
    };
  }
  function effect6({ state, options, name }) {
    let { element: arrowElement = "[data-popper-arrow]", padding = 0 } = options;
    if (arrowElement == null) {
      return;
    }
    if (typeof arrowElement === "string") {
      arrowElement = state.elements.popper.querySelector(arrowElement);
      if (!arrowElement) {
        return;
      }
    }
    if (false) {
      if (!isHTMLElement2(arrowElement)) {
        console.error([
          'Popper: "arrow" element must be an HTMLElement (not an SVGElement).',
          "To use an SVG arrow, wrap it in an HTMLElement that will be used as",
          "the arrow."
        ].join(" "));
      }
    }
    if (!contains2(state.elements.popper, arrowElement)) {
      if (false) {
        console.error(['Popper: "arrow" modifier\'s `element` must be a child of the popper', "element."].join(" "));
      }
      return;
    }
    state.elements.arrow = arrowElement;
    state.modifiersData[`${name}#persistent`] = {
      padding: mergePaddingObject2(typeof padding !== "number" ? padding : expandToHashMap2(padding, basePlacements2))
    };
  }
  var arrow_default2 = {
    name: "arrow",
    enabled: true,
    phase: "main",
    fn: arrow2,
    effect: effect6,
    requires: ["popperOffsets"],
    requiresIfExists: ["preventOverflow"]
  };

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/modifiers/hide.js
  function getSideOffsets2(overflow, rect, preventedOffsets = { x: 0, y: 0 }) {
    return {
      top: overflow.top - rect.height - preventedOffsets.y,
      right: overflow.right - rect.width + preventedOffsets.x,
      bottom: overflow.bottom - rect.height + preventedOffsets.y,
      left: overflow.left - rect.width - preventedOffsets.x
    };
  }
  function isAnySideFullyClipped2(overflow) {
    return [top2, right2, bottom2, left2].some((side) => overflow[side] >= 0);
  }
  function hide2({ state, name }) {
    const referenceRect = state.rects.reference;
    const popperRect = state.rects.popper;
    const preventedOffsets = state.modifiersData.preventOverflow;
    const referenceOverflow = detectOverflow2(state, {
      elementContext: "reference"
    });
    const popperAltOverflow = detectOverflow2(state, {
      altBoundary: true
    });
    const referenceClippingOffsets = getSideOffsets2(referenceOverflow, referenceRect);
    const popperEscapeOffsets = getSideOffsets2(popperAltOverflow, popperRect, preventedOffsets);
    const isReferenceHidden = isAnySideFullyClipped2(referenceClippingOffsets);
    const hasPopperEscaped = isAnySideFullyClipped2(popperEscapeOffsets);
    state.modifiersData[name] = {
      referenceClippingOffsets,
      popperEscapeOffsets,
      isReferenceHidden,
      hasPopperEscaped
    };
    state.attributes.popper = Object.assign(Object.assign({}, state.attributes.popper), { "data-popper-reference-hidden": isReferenceHidden, "data-popper-escaped": hasPopperEscaped });
  }
  var hide_default2 = {
    name: "hide",
    enabled: true,
    phase: "main",
    requiresIfExists: ["preventOverflow"],
    fn: hide2
  };

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/popper.js
  var defaultModifiers2 = [
    eventListeners_default2,
    popperOffsets_default2,
    computeStyles_default2,
    applyStyles_default2,
    offset_default2,
    flip_default2,
    preventOverflow_default2,
    arrow_default2,
    hide_default2
  ];
  var createPopper4 = popperGenerator2({ defaultModifiers: defaultModifiers2 });

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-core/dist/esm/helpers/useIsomorphicLayout.js
  var React65 = __toESM(require_react());
  var useIsomorphicLayoutEffect3 = canUseDOM2 ? React65.useLayoutEffect : React65.useEffect;

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/react-popper/usePopper.js
  var isEqual2 = (a, b) => JSON.stringify(a) === JSON.stringify(b);
  var fromEntries2 = (entries) => entries.reduce((acc, [key, value]) => {
    acc[key] = value;
    return acc;
  }, {});
  var EMPTY_MODIFIERS2 = [];
  var usePopper2 = (referenceElement, popperElement, options = {}) => {
    const prevOptions = React66.useRef(null);
    const optionsWithDefaults = {
      onFirstUpdate: options.onFirstUpdate,
      placement: options.placement || "bottom",
      strategy: options.strategy || "absolute",
      modifiers: options.modifiers || EMPTY_MODIFIERS2
    };
    const [state, setState] = React66.useState({
      styles: {
        popper: {
          position: optionsWithDefaults.strategy,
          left: "0",
          top: "0"
        }
      },
      attributes: {}
    });
    const updateStateModifier = React66.useMemo(() => ({
      name: "updateState",
      enabled: true,
      phase: "write",
      // eslint-disable-next-line no-shadow
      fn: ({ state: state2 }) => {
        const elements = Object.keys(state2.elements);
        setState({
          styles: fromEntries2(elements.map((element) => [element, state2.styles[element] || {}])),
          attributes: fromEntries2(elements.map((element) => [element, state2.attributes[element]]))
        });
      },
      requires: ["computeStyles"]
    }), []);
    const popperOptions = React66.useMemo(() => {
      const newOptions = {
        onFirstUpdate: optionsWithDefaults.onFirstUpdate,
        placement: optionsWithDefaults.placement,
        strategy: optionsWithDefaults.strategy,
        modifiers: [...optionsWithDefaults.modifiers, updateStateModifier, { name: "applyStyles", enabled: false }]
      };
      if (isEqual2(prevOptions.current, newOptions)) {
        return prevOptions.current || newOptions;
      } else {
        prevOptions.current = newOptions;
        return newOptions;
      }
    }, [
      optionsWithDefaults.onFirstUpdate,
      optionsWithDefaults.placement,
      optionsWithDefaults.strategy,
      optionsWithDefaults.modifiers,
      updateStateModifier
    ]);
    const popperInstanceRef = React66.useRef();
    useIsomorphicLayoutEffect3(() => {
      if (popperInstanceRef && popperInstanceRef.current) {
        popperInstanceRef.current.setOptions(popperOptions);
      }
    }, [popperOptions]);
    useIsomorphicLayoutEffect3(() => {
      if (referenceElement == null || popperElement == null) {
        return;
      }
      const createPopper5 = options.createPopper || createPopper4;
      const popperInstance = createPopper5(referenceElement, popperElement, popperOptions);
      popperInstanceRef.current = popperInstance;
      return () => {
        popperInstance.destroy();
        popperInstanceRef.current = null;
      };
    }, [referenceElement, popperElement, options.createPopper]);
    return {
      state: popperInstanceRef.current ? popperInstanceRef.current.state : null,
      styles: state.styles,
      attributes: state.attributes,
      update: popperInstanceRef.current ? popperInstanceRef.current.update : null,
      forceUpdate: popperInstanceRef.current ? popperInstanceRef.current.forceUpdate : null
    };
  };

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-core/dist/esm/helpers/Popper/Popper.js
  var hash6 = {
    left: "right",
    right: "left",
    bottom: "top",
    top: "bottom",
    "top-start": "bottom-end",
    "top-end": "bottom-start",
    "bottom-start": "top-end",
    "bottom-end": "top-start",
    "left-start": "right-end",
    "left-end": "right-start",
    "right-start": "left-end",
    "right-end": "left-start"
  };
  var getOppositePlacement4 = (placement) => placement.replace(/left|right|bottom|top|top-start|top-end|bottom-start|bottom-end|right-start|right-end|left-start|left-end/g, (matched) => hash6[matched]);
  var getOpacityTransition2 = (animationDuration) => `opacity ${animationDuration}ms cubic-bezier(.54, 1.5, .38, 1.11)`;
  var Popper2 = ({ trigger, popper: popper3, direction = "down", position = "start", placement, width, minWidth = "trigger", maxWidth, appendTo = () => document.body, zIndex = 9999, isVisible = true, positionModifiers, distance = 0, onMouseEnter, onMouseLeave, onFocus, onBlur, onDocumentClick, onTriggerClick, onTriggerEnter, onPopperClick, onPopperMouseEnter, onPopperMouseLeave, onDocumentKeyDown, enableFlip = true, flipBehavior = "flip", triggerRef, popperRef, animationDuration = 0, entryDelay = 0, exitDelay = 0, onHidden = () => {
  }, onHide = () => {
  }, onMount = () => {
  }, onShow = () => {
  }, onShown = () => {
  }, preventOverflow: preventOverflow3 = false }) => {
    var _a;
    const [triggerElement, setTriggerElement] = React67.useState(null);
    const [refElement, setRefElement] = React67.useState(null);
    const [popperElement, setPopperElement] = React67.useState(null);
    const [popperContent, setPopperContent] = React67.useState(null);
    const [ready, setReady] = React67.useState(false);
    const [opacity, setOpacity] = React67.useState(0);
    const [internalIsVisible, setInternalIsVisible] = React67.useState(isVisible);
    const transitionTimerRef = React67.useRef(null);
    const showTimerRef = React67.useRef(null);
    const hideTimerRef = React67.useRef(null);
    const prevExitDelayRef = React67.useRef();
    const refOrTrigger = refElement || triggerElement;
    const showPopper = isVisible || internalIsVisible;
    const triggerParent = (_a = (triggerRef === null || triggerRef === void 0 ? void 0 : triggerRef.current) || triggerElement) === null || _a === void 0 ? void 0 : _a.parentElement;
    const languageDirection = getLanguageDirection2(triggerParent);
    const internalPosition = React67.useMemo(() => {
      const fixedPositions = { left: "left", right: "right", center: "center" };
      const positionMap = {
        ltr: Object.assign({ start: "left", end: "right" }, fixedPositions),
        rtl: Object.assign({ start: "right", end: "left" }, fixedPositions)
      };
      return positionMap[languageDirection][position];
    }, [position, languageDirection]);
    const onDocumentClickCallback = React67.useCallback((event) => onDocumentClick(event, refOrTrigger, popperElement), [showPopper, triggerElement, refElement, popperElement, onDocumentClick]);
    React67.useEffect(() => {
      setReady(true);
      onMount();
    }, []);
    React67.useEffect(() => () => {
      clearTimeouts2([transitionTimerRef, hideTimerRef, showTimerRef]);
    }, []);
    React67.useEffect(() => {
      if (triggerRef) {
        if (triggerRef.current) {
          setRefElement(triggerRef.current);
        } else if (typeof triggerRef === "function") {
          setRefElement(triggerRef());
        }
      }
    }, [triggerRef, trigger]);
    React67.useEffect(() => {
      if (popperRef) {
        if (popperRef.current) {
          setPopperElement(popperRef.current);
        } else if (typeof popperRef === "function") {
          setPopperElement(popperRef());
        }
      }
    }, [showPopper, popperRef]);
    React67.useEffect(() => {
      const observer = new MutationObserver(() => {
        update && update();
      });
      popperElement && observer.observe(popperElement, { attributes: true, childList: true, subtree: true });
      return () => {
        observer.disconnect();
      };
    }, [popperElement]);
    const addEventListener = (listener, element, event, capture = false) => {
      if (listener && element) {
        element.addEventListener(event, listener, { capture });
      }
    };
    const removeEventListener = (listener, element, event, capture = false) => {
      if (listener && element) {
        element.removeEventListener(event, listener, { capture });
      }
    };
    React67.useEffect(() => {
      addEventListener(onMouseEnter, refOrTrigger, "mouseenter");
      addEventListener(onMouseLeave, refOrTrigger, "mouseleave");
      addEventListener(onFocus, refOrTrigger, "focus");
      addEventListener(onBlur, refOrTrigger, "blur");
      addEventListener(onTriggerClick, refOrTrigger, "click");
      addEventListener(onTriggerEnter, refOrTrigger, "keydown");
      addEventListener(onPopperClick, popperElement, "click");
      addEventListener(onPopperMouseEnter, popperElement, "mouseenter");
      addEventListener(onPopperMouseLeave, popperElement, "mouseleave");
      onDocumentClick && addEventListener(onDocumentClickCallback, document, "click", true);
      addEventListener(onDocumentKeyDown, document, "keydown", true);
      return () => {
        removeEventListener(onMouseEnter, refOrTrigger, "mouseenter");
        removeEventListener(onMouseLeave, refOrTrigger, "mouseleave");
        removeEventListener(onFocus, refOrTrigger, "focus");
        removeEventListener(onBlur, refOrTrigger, "blur");
        removeEventListener(onTriggerClick, refOrTrigger, "click");
        removeEventListener(onTriggerEnter, refOrTrigger, "keydown");
        removeEventListener(onPopperClick, popperElement, "click");
        removeEventListener(onPopperMouseEnter, popperElement, "mouseenter");
        removeEventListener(onPopperMouseLeave, popperElement, "mouseleave");
        onDocumentClick && removeEventListener(onDocumentClickCallback, document, "click", true);
        removeEventListener(onDocumentKeyDown, document, "keydown", true);
      };
    }, [
      triggerElement,
      popperElement,
      onMouseEnter,
      onMouseLeave,
      onFocus,
      onBlur,
      onTriggerClick,
      onTriggerEnter,
      onPopperClick,
      onPopperMouseEnter,
      onPopperMouseLeave,
      onDocumentClick,
      onDocumentKeyDown,
      refElement
    ]);
    const getPlacement = () => {
      if (placement) {
        return placement;
      }
      let convertedPlacement = direction === "up" ? "top" : "bottom";
      if (internalPosition !== "center") {
        convertedPlacement = `${convertedPlacement}-${internalPosition === "right" ? "end" : "start"}`;
      }
      return convertedPlacement;
    };
    const getPlacementMemo = React67.useMemo(getPlacement, [direction, internalPosition, placement]);
    const getOppositePlacementMemo = React67.useMemo(() => getOppositePlacement4(getPlacement()), [direction, internalPosition, placement]);
    const widthMods = React67.useMemo(() => ({
      name: "widthMods",
      enabled: width !== void 0 || minWidth !== void 0 || maxWidth !== void 0,
      phase: "beforeWrite",
      requires: ["computeStyles"],
      fn: ({ state }) => {
        const triggerWidth = state.rects.reference.width;
        if (width) {
          state.styles.popper.width = width === "trigger" ? `${triggerWidth}px` : width;
        }
        if (minWidth) {
          state.styles.popper.minWidth = minWidth === "trigger" ? `${triggerWidth}px` : minWidth;
        }
        if (maxWidth) {
          state.styles.popper.maxWidth = maxWidth === "trigger" ? `${triggerWidth}px` : maxWidth;
        }
      },
      effect: ({ state }) => {
        const triggerWidth = state.elements.reference.offsetWidth;
        if (width) {
          state.elements.popper.style.width = width === "trigger" ? `${triggerWidth}px` : width;
        }
        if (minWidth) {
          state.elements.popper.style.minWidth = minWidth === "trigger" ? `${triggerWidth}px` : minWidth;
        }
        if (maxWidth) {
          state.elements.popper.style.maxWidth = maxWidth === "trigger" ? `${triggerWidth}px` : maxWidth;
        }
        return () => {
        };
      }
    }), [width, minWidth, maxWidth]);
    const { styles: popperStyles, attributes, update, forceUpdate } = usePopper2(refOrTrigger, popperElement, {
      placement: getPlacementMemo,
      modifiers: [
        {
          name: "offset",
          options: {
            offset: [0, distance]
          }
        },
        {
          name: "preventOverflow",
          enabled: preventOverflow3
        },
        {
          // adds attribute [data-popper-reference-hidden] to the popper element which can be used to hide it using CSS
          name: "hide",
          enabled: true
        },
        {
          name: "flip",
          enabled: getPlacementMemo.startsWith("auto") || enableFlip,
          options: {
            fallbackPlacements: flipBehavior === "flip" ? [getOppositePlacementMemo] : flipBehavior
          }
        },
        widthMods
      ]
    });
    React67.useEffect(() => {
      var _a2, _b, _c, _d, _e, _f, _g;
      const currentPopperContent = ((_d = (_c = (_b = (_a2 = popper3 === null || popper3 === void 0 ? void 0 : popper3.props) === null || _a2 === void 0 ? void 0 : _a2.children) === null || _b === void 0 ? void 0 : _b[1]) === null || _c === void 0 ? void 0 : _c.props) === null || _d === void 0 ? void 0 : _d.children) || ((_g = (_f = (_e = popper3 === null || popper3 === void 0 ? void 0 : popper3.props) === null || _e === void 0 ? void 0 : _e.children) === null || _f === void 0 ? void 0 : _f.props) === null || _g === void 0 ? void 0 : _g.children);
      setPopperContent(currentPopperContent);
      if (currentPopperContent && popperContent && currentPopperContent !== popperContent) {
        forceUpdate && forceUpdate();
      }
    }, [popper3]);
    React67.useEffect(() => {
      if (prevExitDelayRef.current < exitDelay) {
        clearTimeouts2([transitionTimerRef, hideTimerRef]);
        hideTimerRef.current = setTimeout(() => {
          transitionTimerRef.current = setTimeout(() => {
            setInternalIsVisible(false);
          }, animationDuration);
        }, exitDelay);
      }
      prevExitDelayRef.current = exitDelay;
    }, [exitDelay]);
    const show = () => {
      onShow();
      clearTimeouts2([transitionTimerRef, hideTimerRef]);
      showTimerRef.current = setTimeout(() => {
        setInternalIsVisible(true);
        setOpacity(1);
        onShown();
      }, entryDelay);
    };
    const hide3 = () => {
      onHide();
      clearTimeouts2([showTimerRef]);
      hideTimerRef.current = setTimeout(() => {
        setOpacity(0);
        transitionTimerRef.current = setTimeout(() => {
          setInternalIsVisible(false);
          onHidden();
        }, animationDuration);
      }, exitDelay);
    };
    React67.useEffect(() => {
      if (isVisible) {
        show();
      } else {
        hide3();
      }
    }, [isVisible]);
    const modifierFromPopperPosition = () => {
      if (attributes && attributes.popper && attributes.popper["data-popper-placement"]) {
        const popperPlacement = attributes.popper["data-popper-placement"];
        return positionModifiers[popperPlacement];
      }
      return positionModifiers.top;
    };
    const options = Object.assign({ className: css2(popper3.props && popper3.props.className, positionModifiers && modifierFromPopperPosition()), style: Object.assign(Object.assign(Object.assign({}, popper3.props && popper3.props.style || {}), popperStyles.popper), {
      zIndex,
      opacity,
      transition: getOpacityTransition2(animationDuration)
    }) }, attributes.popper);
    const getMenuWithPopper = () => {
      const localPopper = React67.cloneElement(popper3, options);
      return popperRef ? localPopper : React67.createElement("div", { style: { display: "contents" }, ref: (node) => setPopperElement(node === null || node === void 0 ? void 0 : node.firstElementChild) }, localPopper);
    };
    const getPopper = () => {
      if (appendTo === "inline") {
        return getMenuWithPopper();
      } else {
        const target = typeof appendTo === "function" ? appendTo() : appendTo;
        return ReactDOM4.createPortal(getMenuWithPopper(), target);
      }
    };
    return React67.createElement(
      React67.Fragment,
      null,
      !triggerRef && trigger && React67.isValidElement(trigger) && React67.createElement("div", { style: { display: "contents" }, ref: (node) => setTriggerElement(node === null || node === void 0 ? void 0 : node.firstElementChild) }, trigger),
      triggerRef && trigger && React67.isValidElement(trigger) && trigger,
      ready && showPopper && getPopper()
    );
  };
  Popper2.displayName = "Popper";

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-core/dist/esm/helpers/KeyboardHandler.js
  var React68 = __toESM(require_react());
  var handleArrows2 = (event, navigableElements, isActiveElement = (element) => document.activeElement.contains(element), getFocusableElement = (element) => element, validSiblingTags = ["A", "BUTTON", "INPUT"], noVerticalArrowHandling = false, noHorizontalArrowHandling = false, updateTabIndex = true, onlyTraverseSiblings = true) => {
    const activeElement = document.activeElement;
    const key = event.key;
    let moveTarget = null;
    if (!noVerticalArrowHandling) {
      if (["ArrowUp", "ArrowDown"].includes(key)) {
        event.preventDefault();
        event.stopImmediatePropagation();
        let currentIndex = -1;
        navigableElements.forEach((element, index) => {
          if (isActiveElement(element)) {
            let increment = 0;
            while (!moveTarget && increment < navigableElements.length && increment * -1 < navigableElements.length) {
              key === "ArrowUp" ? increment-- : increment++;
              currentIndex = index + increment;
              if (currentIndex >= navigableElements.length) {
                currentIndex = 0;
              }
              if (currentIndex < 0) {
                currentIndex = navigableElements.length - 1;
              }
              moveTarget = getFocusableElement(navigableElements[currentIndex]);
            }
          }
        });
      }
    }
    if (!noHorizontalArrowHandling) {
      if (["ArrowLeft", "ArrowRight"].includes(key)) {
        event.preventDefault();
        event.stopImmediatePropagation();
        let currentIndex = -1;
        navigableElements.forEach((element, index) => {
          if (isActiveElement(element)) {
            const activeRow = navigableElements[index].querySelectorAll(validSiblingTags.join(","));
            if (!activeRow.length || onlyTraverseSiblings) {
              let nextSibling = activeElement;
              while (nextSibling) {
                const isDirectChildOfNavigableElement = nextSibling.parentElement === element;
                const nextSiblingMainElement = isDirectChildOfNavigableElement ? nextSibling : nextSibling.parentElement;
                nextSibling = key === "ArrowLeft" ? nextSiblingMainElement.previousElementSibling : nextSiblingMainElement.nextElementSibling;
                if (nextSibling) {
                  if (validSiblingTags.includes(nextSibling.tagName)) {
                    moveTarget = nextSibling;
                    break;
                  }
                  if (validSiblingTags.includes(nextSibling.children[0].tagName)) {
                    moveTarget = nextSibling.children[0];
                    break;
                  }
                }
              }
            } else {
              activeRow.forEach((focusableElement, index2) => {
                if (event.target === focusableElement) {
                  const increment = key === "ArrowLeft" ? -1 : 1;
                  currentIndex = index2 + increment;
                  if (currentIndex >= activeRow.length) {
                    currentIndex = 0;
                  }
                  if (currentIndex < 0) {
                    currentIndex = activeRow.length - 1;
                  }
                  moveTarget = activeRow[currentIndex];
                }
              });
            }
          }
        });
      }
    }
    if (moveTarget) {
      if (updateTabIndex) {
        activeElement.tabIndex = -1;
        moveTarget.tabIndex = 0;
      }
      moveTarget.focus();
    }
  };
  var setTabIndex = (options) => {
    if (options && options.length > 0) {
      options.forEach((option) => {
        option.tabIndex = -1;
      });
      options[0].tabIndex = 0;
    }
  };
  var onToggleArrowKeydownDefault2 = (event, menuRef) => {
    var _a;
    if (event.key !== "ArrowDown" && event.key !== "ArrowUp") {
      return;
    }
    event.preventDefault();
    const listItems = Array.from((_a = menuRef.current) === null || _a === void 0 ? void 0 : _a.querySelectorAll("li"));
    const focusableElements = listItems.map((li) => li.querySelector('button:not(:disabled),input:not(:disabled),a:not([aria-disabled="true"])')).filter((el) => el !== null);
    let focusableElement;
    if (event.key === "ArrowDown") {
      focusableElement = focusableElements[0];
    } else {
      focusableElement = focusableElements[focusableElements.length - 1];
    }
    focusableElement && focusableElement.focus();
  };
  var KeyboardHandler2 = class extends React68.Component {
    constructor() {
      super(...arguments);
      this.keyHandler = (event) => {
        const { isEventFromContainer } = this.props;
        if (isEventFromContainer ? !isEventFromContainer(event) : !this._isEventFromContainer(event)) {
          return;
        }
        const { isActiveElement, getFocusableElement, noVerticalArrowHandling, noHorizontalArrowHandling, noEnterHandling, noSpaceHandling, updateTabIndex, validSiblingTags, additionalKeyHandler, createNavigableElements, onlyTraverseSiblings } = this.props;
        additionalKeyHandler && additionalKeyHandler(event);
        const navigableElements = createNavigableElements();
        if (!navigableElements) {
          console.warn("No navigable elements have been passed to the KeyboardHandler. Keyboard navigation provided by this component will be ignored.");
          return;
        }
        const key = event.key;
        if (!noEnterHandling) {
          if (key === "Enter") {
            event.preventDefault();
            event.stopImmediatePropagation();
            document.activeElement.click();
          }
        }
        if (!noSpaceHandling) {
          if (key === " ") {
            event.preventDefault();
            event.stopImmediatePropagation();
            document.activeElement.click();
          }
        }
        handleArrows2(event, navigableElements, isActiveElement, getFocusableElement, validSiblingTags, noVerticalArrowHandling, noHorizontalArrowHandling, updateTabIndex, onlyTraverseSiblings);
      };
      this._isEventFromContainer = (event) => {
        const { containerRef } = this.props;
        return containerRef.current && containerRef.current.contains(event.target);
      };
    }
    componentDidMount() {
      if (canUseDOM2) {
        window.addEventListener("keydown", this.keyHandler);
      }
    }
    componentWillUnmount() {
      if (canUseDOM2) {
        window.removeEventListener("keydown", this.keyHandler);
      }
    }
    render() {
      return null;
    }
  };
  KeyboardHandler2.displayName = "KeyboardHandler";
  KeyboardHandler2.defaultProps = {
    containerRef: null,
    createNavigableElements: () => null,
    isActiveElement: (navigableElement) => document.activeElement === navigableElement,
    getFocusableElement: (navigableElement) => navigableElement,
    validSiblingTags: ["BUTTON", "A"],
    onlyTraverseSiblings: true,
    updateTabIndex: true,
    noHorizontalArrowHandling: false,
    noVerticalArrowHandling: false,
    noEnterHandling: false,
    noSpaceHandling: false
  };

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-core/dist/esm/components/Menu/MenuContext.js
  var React69 = __toESM(require_react());
  var MenuContext2 = React69.createContext({
    menuId: null,
    parentMenu: null,
    onActionClick: () => null,
    onSelect: () => null,
    activeItemId: null,
    selected: null,
    drilledInMenus: [],
    drilldownItemPath: [],
    onDrillIn: null,
    onDrillOut: null,
    onGetMenuHeight: () => null,
    flyoutRef: null,
    setFlyoutRef: () => null,
    disableHover: false,
    role: "menu"
  });
  var MenuItemContext2 = React69.createContext({
    itemId: null,
    isDisabled: false
  });

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-core/dist/esm/components/Menu/Menu.js
  var MenuBase2 = class extends React70.Component {
    constructor(props) {
      super(props);
      this.menuRef = React70.createRef();
      this.activeMenu = null;
      this.state = {
        ouiaStateId: getDefaultOUIAId2(Menu2.displayName),
        transitionMoveTarget: null,
        flyoutRef: null,
        disableHover: false,
        currentDrilldownMenuId: this.props.id
      };
      this.handleDrilldownTransition = (event) => {
        const current = this.menuRef.current;
        if (!current || current !== event.target.closest(`.${menu_default2.menu}`) && !Array.from(current.getElementsByClassName(menu_default2.menu)).includes(event.target.closest(`.${menu_default2.menu}`))) {
          return;
        }
        if (this.state.transitionMoveTarget) {
          this.state.transitionMoveTarget.focus();
          this.setState({ transitionMoveTarget: null });
        } else {
          const nextMenu = current.querySelector("#" + this.props.activeMenu) || current || null;
          const nextMenuLists = nextMenu.getElementsByTagName("UL");
          if (nextMenuLists.length === 0) {
            return;
          }
          const nextMenuChildren = Array.from(nextMenuLists[0].children);
          if (!this.state.currentDrilldownMenuId || nextMenu.id !== this.state.currentDrilldownMenuId) {
            this.setState({ currentDrilldownMenuId: nextMenu.id });
          } else {
            return;
          }
          const nextTarget = nextMenuChildren.filter((el) => !(el.classList.contains("pf-m-disabled") || el.classList.contains(menu_default2.divider)))[0].firstChild;
          nextTarget.focus();
          nextTarget.tabIndex = 0;
        }
      };
      this.handleExtraKeys = (event) => {
        const isDrilldown = this.props.containsDrilldown;
        const activeElement = document.activeElement;
        if (event.target.closest(`.${menu_default2.menu}`) !== this.activeMenu && !event.target.classList.contains(breadcrumb_default2.breadcrumbLink)) {
          this.activeMenu = event.target.closest(`.${menu_default2.menu}`);
          this.setState({ disableHover: true });
        }
        if (event.target.tagName === "INPUT") {
          return;
        }
        const parentMenu = this.activeMenu;
        const key = event.key;
        const isFromBreadcrumb = activeElement.classList.contains(breadcrumb_default2.breadcrumbLink);
        if (key === " " || key === "Enter") {
          event.preventDefault();
          if (isDrilldown && !isFromBreadcrumb) {
            const isDrillingOut = activeElement.closest("li").classList.contains("pf-m-current-path");
            if (isDrillingOut && parentMenu.parentElement.tagName === "LI") {
              activeElement.tabIndex = -1;
              parentMenu.parentElement.firstChild.tabIndex = 0;
              this.setState({ transitionMoveTarget: parentMenu.parentElement.firstChild });
            } else {
              if (activeElement.nextElementSibling && activeElement.nextElementSibling.classList.contains(menu_default2.menu)) {
                const childItems = Array.from(activeElement.nextElementSibling.getElementsByTagName("UL")[0].children).filter((el) => !(el.classList.contains("pf-m-disabled") || el.classList.contains(menu_default2.divider)));
                activeElement.tabIndex = -1;
                childItems[0].firstChild.tabIndex = 0;
                this.setState({ transitionMoveTarget: childItems[0].firstChild });
              }
            }
          }
          document.activeElement.click();
        }
      };
      this.createNavigableElements = () => {
        const isDrilldown = this.props.containsDrilldown;
        if (isDrilldown) {
          return this.activeMenu ? Array.from(this.activeMenu.getElementsByTagName("UL")[0].children).filter((el) => !(el.classList.contains("pf-m-disabled") || el.classList.contains(menu_default2.divider))) : [];
        } else {
          return this.menuRef.current ? Array.from(this.menuRef.current.getElementsByTagName("LI")).filter((el) => !(el.classList.contains("pf-m-disabled") || el.classList.contains(menu_default2.divider))) : [];
        }
      };
      if (props.innerRef) {
        this.menuRef = props.innerRef;
      }
    }
    allowTabFirstItem() {
      const current = this.menuRef.current;
      if (current) {
        const first = current.querySelector("ul button:not(:disabled), ul a:not(:disabled)");
        if (first) {
          first.tabIndex = 0;
        }
      }
    }
    componentDidMount() {
      if (this.context) {
        this.setState({ disableHover: this.context.disableHover });
      }
      if (canUseDOM2 && this.props.containsDrilldown) {
        window.addEventListener("transitionend", this.props.isRootMenu ? this.handleDrilldownTransition : null);
      }
      this.allowTabFirstItem();
    }
    componentWillUnmount() {
      if (canUseDOM2 && this.props.containsDrilldown) {
        window.removeEventListener("transitionend", this.handleDrilldownTransition);
      }
    }
    componentDidUpdate(prevProps) {
      if (prevProps.children !== this.props.children) {
        this.allowTabFirstItem();
      }
    }
    render() {
      const _a = this.props, {
        id,
        children,
        className,
        onSelect,
        selected = null,
        onActionClick,
        ouiaId,
        ouiaSafe,
        containsFlyout,
        containsDrilldown,
        isMenuDrilledIn,
        isPlain,
        isScrollable,
        drilldownItemPath,
        drilledInMenus,
        onDrillIn,
        onDrillOut,
        onGetMenuHeight,
        parentMenu = null,
        activeItemId = null,
        /* eslint-disable @typescript-eslint/no-unused-vars */
        innerRef,
        isRootMenu,
        activeMenu,
        role,
        isNavFlyout
      } = _a, props = __rest(_a, ["id", "children", "className", "onSelect", "selected", "onActionClick", "ouiaId", "ouiaSafe", "containsFlyout", "containsDrilldown", "isMenuDrilledIn", "isPlain", "isScrollable", "drilldownItemPath", "drilledInMenus", "onDrillIn", "onDrillOut", "onGetMenuHeight", "parentMenu", "activeItemId", "innerRef", "isRootMenu", "activeMenu", "role", "isNavFlyout"]);
      const _isMenuDrilledIn = isMenuDrilledIn || drilledInMenus && drilledInMenus.includes(id) || false;
      return React70.createElement(
        MenuContext2.Provider,
        { value: {
          menuId: id,
          parentMenu: parentMenu || id,
          onSelect,
          onActionClick,
          activeItemId,
          selected,
          drilledInMenus,
          drilldownItemPath,
          onDrillIn,
          onDrillOut,
          onGetMenuHeight,
          flyoutRef: this.state.flyoutRef,
          setFlyoutRef: (flyoutRef) => this.setState({ flyoutRef }),
          disableHover: this.state.disableHover,
          role
        } },
        isRootMenu && React70.createElement(KeyboardHandler2, { containerRef: this.menuRef || null, additionalKeyHandler: this.handleExtraKeys, createNavigableElements: this.createNavigableElements, isActiveElement: (element) => document.activeElement.closest("li") === element || // if element is a basic MenuItem
        document.activeElement.parentElement === element || document.activeElement.closest(`.${menu_default2.menuSearch}`) === element || // if element is a MenuSearch
        document.activeElement.closest("ol") && document.activeElement.closest("ol").firstChild === element, getFocusableElement: (navigableElement) => {
          var _a2, _b;
          return (navigableElement === null || navigableElement === void 0 ? void 0 : navigableElement.tagName) === "DIV" && navigableElement.querySelector("input") || // for MenuSearchInput
          ((_a2 = navigableElement.firstChild) === null || _a2 === void 0 ? void 0 : _a2.tagName) === "LABEL" && navigableElement.querySelector("input") || // for MenuItem checkboxes
          ((_b = navigableElement.firstChild) === null || _b === void 0 ? void 0 : _b.tagName) === "DIV" && navigableElement.querySelector("a, button, input") || // For aria-disabled element that is rendered inside a div with "display: contents" styling
          navigableElement.firstChild;
        }, noHorizontalArrowHandling: document.activeElement && (document.activeElement.classList.contains(breadcrumb_default2.breadcrumbLink) || document.activeElement.tagName === "INPUT"), noEnterHandling: true, noSpaceHandling: true }),
        React70.createElement("div", Object.assign({ id, className: css2(menu_default2.menu, isPlain && menu_default2.modifiers.plain, isScrollable && menu_default2.modifiers.scrollable, containsFlyout && menu_default2.modifiers.flyout, isNavFlyout && "pf-m-nav", containsDrilldown && menu_default2.modifiers.drilldown, _isMenuDrilledIn && menu_default2.modifiers.drilledIn, className), ref: this.menuRef }, getOUIAProps2(Menu2.displayName, ouiaId !== void 0 ? ouiaId : this.state.ouiaStateId, ouiaSafe), props), children)
      );
    }
  };
  MenuBase2.displayName = "Menu";
  MenuBase2.contextType = MenuContext2;
  MenuBase2.defaultProps = {
    ouiaSafe: true,
    isRootMenu: true,
    isPlain: false,
    isScrollable: false,
    role: "menu"
  };
  var Menu2 = React70.forwardRef((props, ref) => React70.createElement(MenuBase2, Object.assign({}, props, { innerRef: ref })));
  Menu2.displayName = "Menu";

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-core/dist/esm/components/Menu/MenuContent.js
  var React71 = __toESM(require_react());

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-tokens/dist/esm/c_menu__content_Height.js
  var c_menu__content_Height2 = {
    "name": "--pf-v6-c-menu__content--Height",
    "value": "auto",
    "var": "var(--pf-v6-c-menu__content--Height)"
  };
  var c_menu_content_Height_default2 = c_menu__content_Height2;

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-tokens/dist/esm/c_menu__content_MaxHeight.js
  var c_menu__content_MaxHeight2 = {
    "name": "--pf-v6-c-menu__content--MaxHeight",
    "value": "18.75rem",
    "var": "var(--pf-v6-c-menu__content--MaxHeight)"
  };
  var c_menu_content_MaxHeight_default2 = c_menu__content_MaxHeight2;

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-core/dist/esm/components/Menu/MenuContent.js
  var MenuContent2 = React71.forwardRef((props, ref) => {
    const { getHeight, children, menuHeight, maxMenuHeight } = props, rest = __rest(props, ["getHeight", "children", "menuHeight", "maxMenuHeight"]);
    const menuContentRef = React71.createRef();
    const refCallback = (el, menuId, onGetMenuHeight) => {
      if (el) {
        let clientHeight = el.clientHeight;
        let rootMenuList = null;
        let parentEl = el.closest(`.${menu_default2.menuList}`);
        while (parentEl !== null && parentEl.nodeType === 1) {
          if (parentEl.classList.contains(menu_default2.menuList)) {
            rootMenuList = parentEl;
          }
          parentEl = parentEl.parentElement;
        }
        if (rootMenuList) {
          const rootMenuListStyles = getComputedStyle(rootMenuList);
          const rootMenuListPaddingOffset = parseFloat(rootMenuListStyles.getPropertyValue("padding-top").replace(/px/g, "")) + parseFloat(rootMenuListStyles.getPropertyValue("padding-bottom").replace(/px/g, "")) + parseFloat(getComputedStyle(rootMenuList.parentElement).getPropertyValue("border-bottom-width").replace(/px/g, ""));
          clientHeight = clientHeight + rootMenuListPaddingOffset;
        }
        onGetMenuHeight && onGetMenuHeight(menuId, clientHeight);
        getHeight && getHeight(clientHeight.toString());
      }
      return ref || menuContentRef;
    };
    return React71.createElement(MenuContext2.Consumer, null, ({ menuId, onGetMenuHeight }) => React71.createElement("div", Object.assign({}, rest, { className: css2(menu_default2.menuContent, props.className), ref: (el) => refCallback(el, menuId, onGetMenuHeight), style: Object.assign(Object.assign({}, menuHeight && { [c_menu_content_Height_default2.name]: menuHeight }), maxMenuHeight && { [c_menu_content_MaxHeight_default2.name]: maxMenuHeight }) }), children));
  });
  MenuContent2.displayName = "MenuContent";

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-core/dist/esm/components/Menu/MenuItem.js
  var React80 = __toESM(require_react());

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-tokens/dist/esm/c_menu_m_flyout__menu_top_offset.js
  var c_menu_m_flyout__menu_top_offset2 = {
    "name": "--pf-v6-c-menu--m-flyout__menu--top-offset",
    "value": "0px",
    "var": "var(--pf-v6-c-menu--m-flyout__menu--top-offset)"
  };
  var c_menu_m_flyout_menu_top_offset_default2 = c_menu_m_flyout__menu_top_offset2;

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-tokens/dist/esm/c_menu_m_flyout__menu_m_left_right_offset.js
  var c_menu_m_flyout__menu_m_left_right_offset2 = {
    "name": "--pf-v6-c-menu--m-flyout__menu--m-left--right-offset",
    "value": "0px",
    "var": "var(--pf-v6-c-menu--m-flyout__menu--m-left--right-offset)"
  };
  var c_menu_m_flyout_menu_m_left_right_offset_default2 = c_menu_m_flyout__menu_m_left_right_offset2;

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-tokens/dist/esm/c_menu_m_flyout__menu_left_offset.js
  var c_menu_m_flyout__menu_left_offset2 = {
    "name": "--pf-v6-c-menu--m-flyout__menu--left-offset",
    "value": "0px",
    "var": "var(--pf-v6-c-menu--m-flyout__menu--left-offset)"
  };
  var c_menu_m_flyout_menu_left_offset_default2 = c_menu_m_flyout__menu_left_offset2;

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-icons/dist/esm/icons/external-link-alt-icon.js
  var ExternalLinkAltIconConfig2 = {
    name: "ExternalLinkAltIcon",
    height: 512,
    width: 512,
    svgPath: "M432,320H400a16,16,0,0,0-16,16V448H64V128H208a16,16,0,0,0,16-16V80a16,16,0,0,0-16-16H48A48,48,0,0,0,0,112V464a48,48,0,0,0,48,48H400a48,48,0,0,0,48-48V336A16,16,0,0,0,432,320ZM488,0h-128c-21.37,0-32.05,25.91-17,41l35.73,35.73L135,320.37a24,24,0,0,0,0,34L157.67,377a24,24,0,0,0,34,0L435.28,133.32,471,169c15,15,41,4.5,41-17V24A24,24,0,0,0,488,0Z",
    yOffset: 0,
    xOffset: 0
  };
  var ExternalLinkAltIcon2 = createIcon2(ExternalLinkAltIconConfig2);
  var external_link_alt_icon_default2 = ExternalLinkAltIcon2;

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-icons/dist/esm/icons/angle-right-icon.js
  var AngleRightIconConfig2 = {
    name: "AngleRightIcon",
    height: 512,
    width: 256,
    svgPath: "M224.3 273l-136 136c-9.4 9.4-24.6 9.4-33.9 0l-22.6-22.6c-9.4-9.4-9.4-24.6 0-33.9l96.4-96.4-96.4-96.4c-9.4-9.4-9.4-24.6 0-33.9L54.3 103c9.4-9.4 24.6-9.4 33.9 0l136 136c9.5 9.4 9.5 24.6.1 34z",
    yOffset: 0,
    xOffset: 0
  };
  var AngleRightIcon2 = createIcon2(AngleRightIconConfig2);
  var angle_right_icon_default2 = AngleRightIcon2;

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-icons/dist/esm/icons/angle-left-icon.js
  var AngleLeftIconConfig2 = {
    name: "AngleLeftIcon",
    height: 512,
    width: 256,
    svgPath: "M31.7 239l136-136c9.4-9.4 24.6-9.4 33.9 0l22.6 22.6c9.4 9.4 9.4 24.6 0 33.9L127.9 256l96.4 96.4c9.4 9.4 9.4 24.6 0 33.9L201.7 409c-9.4 9.4-24.6 9.4-33.9 0l-136-136c-9.5-9.4-9.5-24.6-.1-34z",
    yOffset: 0,
    xOffset: 0
  };
  var AngleLeftIcon2 = createIcon2(AngleLeftIconConfig2);
  var angle_left_icon_default2 = AngleLeftIcon2;

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-icons/dist/esm/icons/check-icon.js
  var CheckIconConfig2 = {
    name: "CheckIcon",
    height: 512,
    width: 512,
    svgPath: "M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z",
    yOffset: 0,
    xOffset: 0
  };
  var CheckIcon2 = createIcon2(CheckIconConfig2);
  var check_icon_default2 = CheckIcon2;

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-core/dist/esm/components/Checkbox/Checkbox.js
  var React72 = __toESM(require_react());

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-styles/css/components/Check/check.mjs
  var check_default2 = {
    "check": "pf-v6-c-check",
    "checkBody": "pf-v6-c-check__body",
    "checkDescription": "pf-v6-c-check__description",
    "checkInput": "pf-v6-c-check__input",
    "checkLabel": "pf-v6-c-check__label",
    "checkLabelRequired": "pf-v6-c-check__label-required",
    "modifiers": {
      "standalone": "pf-m-standalone",
      "disabled": "pf-m-disabled"
    }
  };

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-core/dist/esm/components/Checkbox/Checkbox.js
  var defaultOnChange2 = () => {
  };
  var Checkbox2 = class _Checkbox extends React72.Component {
    constructor(props) {
      super(props);
      this.handleChange = (event) => {
        this.props.onChange(event, event.currentTarget.checked);
      };
      this.state = {
        ouiaStateId: getDefaultOUIAId2(_Checkbox.displayName)
      };
    }
    render() {
      const _a = this.props, { "aria-label": ariaLabel, className, inputClassName, onChange, isLabelWrapped, labelPosition = "end", isValid, isDisabled, isRequired, isChecked, label, checked, defaultChecked, description, body, ouiaId, ouiaSafe, component } = _a, props = __rest(_a, ["aria-label", "className", "inputClassName", "onChange", "isLabelWrapped", "labelPosition", "isValid", "isDisabled", "isRequired", "isChecked", "label", "checked", "defaultChecked", "description", "body", "ouiaId", "ouiaSafe", "component"]);
      if (!props.id) {
        console.error("Checkbox:", "id is required to make input accessible");
      }
      const checkedProps = {};
      if ([true, false].includes(checked) || isChecked === true) {
        checkedProps.checked = checked || isChecked;
      }
      if (onChange !== defaultOnChange2) {
        checkedProps.checked = isChecked;
      }
      if ([false, true].includes(defaultChecked)) {
        checkedProps.defaultChecked = defaultChecked;
      }
      const inputRendered = React72.createElement("input", Object.assign({}, props, { className: css2(check_default2.checkInput, inputClassName), type: "checkbox", onChange: this.handleChange, "aria-invalid": !isValid, "aria-label": ariaLabel, disabled: isDisabled, required: isRequired, ref: (elem) => elem && (elem.indeterminate = isChecked === null) }, checkedProps, getOUIAProps2(_Checkbox.displayName, ouiaId !== void 0 ? ouiaId : this.state.ouiaStateId, ouiaSafe)));
      const wrapWithLabel = isLabelWrapped && !component || component === "label";
      const Label = wrapWithLabel ? "span" : "label";
      const labelRendered = label ? React72.createElement(
        Label,
        { className: css2(check_default2.checkLabel, isDisabled && check_default2.modifiers.disabled), htmlFor: !wrapWithLabel ? props.id : void 0 },
        label,
        isRequired && React72.createElement("span", { className: css2(check_default2.checkLabelRequired), "aria-hidden": "true" }, ASTERISK2)
      ) : null;
      const Component20 = component !== null && component !== void 0 ? component : wrapWithLabel ? "label" : "div";
      checkedProps.checked = checkedProps.checked === null ? false : checkedProps.checked;
      return React72.createElement(
        Component20,
        { className: css2(check_default2.check, !label && check_default2.modifiers.standalone, className), htmlFor: wrapWithLabel ? props.id : void 0 },
        labelPosition === "start" ? React72.createElement(
          React72.Fragment,
          null,
          labelRendered,
          inputRendered
        ) : React72.createElement(
          React72.Fragment,
          null,
          inputRendered,
          labelRendered
        ),
        description && React72.createElement("span", { className: css2(check_default2.checkDescription) }, description),
        body && React72.createElement("span", { className: css2(check_default2.checkBody) }, body)
      );
    }
  };
  Checkbox2.displayName = "Checkbox";
  Checkbox2.defaultProps = {
    className: "",
    isLabelWrapped: false,
    isValid: true,
    isDisabled: false,
    isRequired: false,
    isChecked: false,
    onChange: defaultOnChange2,
    ouiaSafe: true
  };

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-core/dist/esm/components/Menu/MenuItemAction.js
  var React76 = __toESM(require_react());

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-icons/dist/esm/icons/star-icon.js
  var StarIconConfig2 = {
    name: "StarIcon",
    height: 512,
    width: 576,
    svgPath: "M259.3 17.8L194 150.2 47.9 171.5c-26.2 3.8-36.7 36.1-17.7 54.6l105.7 103-25 145.5c-4.5 26.3 23.2 46 46.4 33.7L288 439.6l130.7 68.7c23.2 12.2 50.9-7.4 46.4-33.7l-25-145.5 105.7-103c19-18.5 8.5-50.8-17.7-54.6L382 150.2 316.7 17.8c-11.7-23.6-45.6-23.9-57.4 0z",
    yOffset: 0,
    xOffset: 0
  };
  var StarIcon2 = createIcon2(StarIconConfig2);
  var star_icon_default2 = StarIcon2;

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-core/dist/esm/components/Button/Button.js
  var React75 = __toESM(require_react());

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-styles/css/components/Button/button.mjs
  var button_default2 = {
    "badge": "pf-v6-c-badge",
    "button": "pf-v6-c-button",
    "buttonCount": "pf-v6-c-button__count",
    "buttonIcon": "pf-v6-c-button__icon",
    "buttonProgress": "pf-v6-c-button__progress",
    "modifiers": {
      "primary": "pf-m-primary",
      "unread": "pf-m-unread",
      "secondary": "pf-m-secondary",
      "danger": "pf-m-danger",
      "tertiary": "pf-m-tertiary",
      "link": "pf-m-link",
      "inline": "pf-m-inline",
      "displayLg": "pf-m-display-lg",
      "warning": "pf-m-warning",
      "control": "pf-m-control",
      "stateful": "pf-m-stateful",
      "read": "pf-m-read",
      "attention": "pf-m-attention",
      "plain": "pf-m-plain",
      "noPadding": "pf-m-no-padding",
      "block": "pf-m-block",
      "small": "pf-m-small",
      "clicked": "pf-m-clicked",
      "disabled": "pf-m-disabled",
      "ariaDisabled": "pf-m-aria-disabled",
      "progress": "pf-m-progress",
      "inProgress": "pf-m-in-progress",
      "start": "pf-m-start",
      "end": "pf-m-end"
    },
    "spinner": "pf-v6-c-spinner"
  };

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-core/dist/esm/components/Spinner/Spinner.js
  var React73 = __toESM(require_react());

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-styles/css/components/Spinner/spinner.mjs
  var spinner_default2 = {
    "modifiers": {
      "inline": "pf-m-inline",
      "sm": "pf-m-sm",
      "md": "pf-m-md",
      "lg": "pf-m-lg",
      "xl": "pf-m-xl"
    },
    "spinner": "pf-v6-c-spinner",
    "spinnerPath": "pf-v6-c-spinner__path"
  };

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-tokens/dist/esm/c_spinner_diameter.js
  var c_spinner_diameter2 = {
    "name": "--pf-v6-c-spinner--diameter",
    "value": "3.5rem",
    "var": "var(--pf-v6-c-spinner--diameter)"
  };
  var c_spinner_diameter_default2 = c_spinner_diameter2;

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-core/dist/esm/components/Spinner/Spinner.js
  var spinnerSize2;
  (function(spinnerSize3) {
    spinnerSize3["sm"] = "sm";
    spinnerSize3["md"] = "md";
    spinnerSize3["lg"] = "lg";
    spinnerSize3["xl"] = "xl";
  })(spinnerSize2 || (spinnerSize2 = {}));
  var Spinner2 = (_a) => {
    var { className = "", size = "xl", "aria-valuetext": ariaValueText = "Loading...", diameter, isInline = false, "aria-label": ariaLabel, "aria-labelledBy": ariaLabelledBy } = _a, props = __rest(_a, ["className", "size", "aria-valuetext", "diameter", "isInline", "aria-label", "aria-labelledBy"]);
    return React73.createElement(
      "svg",
      Object.assign({ className: css2(spinner_default2.spinner, isInline ? spinner_default2.modifiers.inline : spinner_default2.modifiers[size], className), role: "progressbar", "aria-valuetext": ariaValueText, viewBox: "0 0 100 100" }, diameter && { style: { [c_spinner_diameter_default2.name]: diameter } }, ariaLabel && { "aria-label": ariaLabel }, ariaLabelledBy && { "aria-labelledBy": ariaLabelledBy }, !ariaLabel && !ariaLabelledBy && { "aria-label": "Contents" }, props),
      React73.createElement("circle", { className: spinner_default2.spinnerPath, cx: "50", cy: "50", r: "45", fill: "none" })
    );
  };
  Spinner2.displayName = "Spinner";

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-core/dist/esm/components/Badge/Badge.js
  var React74 = __toESM(require_react());

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-styles/css/components/Badge/badge.mjs
  var badge_default2 = {
    "badge": "pf-v6-c-badge",
    "badgeToggleIcon": "pf-v6-c-badge__toggle-icon",
    "modifiers": {
      "read": "pf-m-read",
      "unread": "pf-m-unread",
      "disabled": "pf-m-disabled"
    }
  };

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-core/dist/esm/components/Badge/Badge.js
  var Badge2 = (_a) => {
    var { isRead = false, isDisabled = false, className = "", children = "", screenReaderText } = _a, props = __rest(_a, ["isRead", "isDisabled", "className", "children", "screenReaderText"]);
    return React74.createElement(
      "span",
      Object.assign({}, props, { className: css2(badge_default2.badge, isRead ? badge_default2.modifiers.read : badge_default2.modifiers.unread, isDisabled && badge_default2.modifiers.disabled, className) }),
      children,
      screenReaderText && React74.createElement("span", { className: "pf-v6-screen-reader" }, screenReaderText)
    );
  };
  Badge2.displayName = "Badge";

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-core/dist/esm/components/Button/Button.js
  var ButtonVariant2;
  (function(ButtonVariant3) {
    ButtonVariant3["primary"] = "primary";
    ButtonVariant3["secondary"] = "secondary";
    ButtonVariant3["tertiary"] = "tertiary";
    ButtonVariant3["danger"] = "danger";
    ButtonVariant3["warning"] = "warning";
    ButtonVariant3["link"] = "link";
    ButtonVariant3["plain"] = "plain";
    ButtonVariant3["control"] = "control";
    ButtonVariant3["stateful"] = "stateful";
  })(ButtonVariant2 || (ButtonVariant2 = {}));
  var ButtonType2;
  (function(ButtonType3) {
    ButtonType3["button"] = "button";
    ButtonType3["submit"] = "submit";
    ButtonType3["reset"] = "reset";
  })(ButtonType2 || (ButtonType2 = {}));
  var ButtonSize2;
  (function(ButtonSize3) {
    ButtonSize3["default"] = "default";
    ButtonSize3["sm"] = "sm";
    ButtonSize3["lg"] = "lg";
  })(ButtonSize2 || (ButtonSize2 = {}));
  var ButtonState;
  (function(ButtonState2) {
    ButtonState2["read"] = "read";
    ButtonState2["unread"] = "unread";
    ButtonState2["attention"] = "attention";
  })(ButtonState || (ButtonState = {}));
  var ButtonBase2 = (_a) => {
    var { children = null, className = "", component = "button", isClicked = false, isBlock = false, isDisabled = false, isAriaDisabled = false, isLoading = null, isDanger = false, spinnerAriaValueText, spinnerAriaLabelledBy, spinnerAriaLabel, size = ButtonSize2.default, inoperableEvents = ["onClick", "onKeyPress"], isInline = false, type = ButtonType2.button, variant = ButtonVariant2.primary, state = ButtonState.unread, hasNoPadding = false, iconPosition = "start", "aria-label": ariaLabel = null, icon = null, role, ouiaId, ouiaSafe = true, tabIndex = null, innerRef, countOptions } = _a, props = __rest(_a, ["children", "className", "component", "isClicked", "isBlock", "isDisabled", "isAriaDisabled", "isLoading", "isDanger", "spinnerAriaValueText", "spinnerAriaLabelledBy", "spinnerAriaLabel", "size", "inoperableEvents", "isInline", "type", "variant", "state", "hasNoPadding", "iconPosition", "aria-label", "icon", "role", "ouiaId", "ouiaSafe", "tabIndex", "innerRef", "countOptions"]);
    const ouiaProps = useOUIAProps2(Button2.displayName, ouiaId, ouiaSafe, variant);
    const Component20 = component;
    const isButtonElement2 = Component20 === "button";
    const isInlineSpan = isInline && Component20 === "span";
    const isIconAlignedAtEnd = iconPosition === "end" || iconPosition === "right";
    const preventedEvents = inoperableEvents.reduce((handlers, eventToPrevent) => Object.assign(Object.assign({}, handlers), { [eventToPrevent]: (event) => {
      event.preventDefault();
    } }), {});
    const getDefaultTabIdx = () => {
      if (isDisabled) {
        return isButtonElement2 ? null : -1;
      } else if (isAriaDisabled) {
        return null;
      } else if (isInlineSpan) {
        return 0;
      }
    };
    const _icon = icon && React75.createElement("span", { className: css2(button_default2.buttonIcon, children && button_default2.modifiers[isIconAlignedAtEnd ? "end" : "start"]) }, icon);
    const _children = children && React75.createElement("span", { className: css2("pf-v6-c-button__text") }, children);
    return React75.createElement(
      Component20,
      Object.assign({}, props, isAriaDisabled ? preventedEvents : null, { "aria-disabled": isAriaDisabled || !isButtonElement2 && isDisabled, "aria-label": ariaLabel, className: css2(button_default2.button, button_default2.modifiers[variant], isBlock && button_default2.modifiers.block, isDisabled && !isButtonElement2 && button_default2.modifiers.disabled, isAriaDisabled && button_default2.modifiers.ariaDisabled, isClicked && button_default2.modifiers.clicked, isInline && variant === ButtonVariant2.link && button_default2.modifiers.inline, isDanger && (variant === ButtonVariant2.secondary || variant === ButtonVariant2.link) && button_default2.modifiers.danger, isLoading !== null && variant !== ButtonVariant2.plain && button_default2.modifiers.progress, isLoading && button_default2.modifiers.inProgress, hasNoPadding && variant === ButtonVariant2.plain && button_default2.modifiers.noPadding, variant === ButtonVariant2.stateful && button_default2.modifiers[state], size === ButtonSize2.sm && button_default2.modifiers.small, size === ButtonSize2.lg && button_default2.modifiers.displayLg, className), disabled: isButtonElement2 ? isDisabled : null, tabIndex: tabIndex !== null ? tabIndex : getDefaultTabIdx(), type: isButtonElement2 || isInlineSpan ? type : null, role: isInlineSpan ? "button" : role, ref: innerRef }, ouiaProps),
      isLoading && React75.createElement(
        "span",
        { className: css2(button_default2.buttonProgress) },
        React75.createElement(Spinner2, { size: spinnerSize2.md, isInline, "aria-valuetext": spinnerAriaValueText, "aria-label": spinnerAriaLabel, "aria-labelledby": spinnerAriaLabelledBy })
      ),
      isIconAlignedAtEnd ? React75.createElement(
        React75.Fragment,
        null,
        _children,
        _icon
      ) : React75.createElement(
        React75.Fragment,
        null,
        _icon,
        _children
      ),
      countOptions && React75.createElement(
        "span",
        { className: css2(button_default2.buttonCount, countOptions.className) },
        React75.createElement(Badge2, { isRead: countOptions.isRead, isDisabled }, countOptions.count)
      )
    );
  };
  var Button2 = React75.forwardRef((props, ref) => React75.createElement(ButtonBase2, Object.assign({ innerRef: ref }, props)));
  Button2.displayName = "Button";

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-core/dist/esm/components/Menu/MenuItemAction.js
  var MenuItemActionBase2 = (_a) => {
    var { className, icon, onClick, "aria-label": ariaLabel, isFavorited = null, isDisabled, actionId, innerRef } = _a, props = __rest(_a, ["className", "icon", "onClick", "aria-label", "isFavorited", "isDisabled", "actionId", "innerRef"]);
    return React76.createElement(MenuContext2.Consumer, null, ({ onActionClick }) => React76.createElement(MenuItemContext2.Consumer, null, ({ itemId, isDisabled: isDisabledContext }) => {
      const onClickButton = (event) => {
        onClick && onClick(event);
        onActionClick && onActionClick(event, itemId, actionId);
      };
      return React76.createElement(
        "div",
        Object.assign({ className: css2(menu_default2.menuItemAction, isFavorited !== null && "pf-m-favorite", isFavorited && menu_default2.modifiers.favorited, className) }, props),
        React76.createElement(Button2, { "aria-label": ariaLabel, onClick: onClickButton, ref: innerRef, role: "menuitem", variant: "plain", tabIndex: -1, isDisabled: isDisabled || isDisabledContext, icon: icon === "favorites" || isFavorited !== null ? React76.createElement(star_icon_default2, { "aria-hidden": true }) : icon })
      );
    }));
  };
  var MenuItemAction2 = React76.forwardRef((props, ref) => React76.createElement(MenuItemActionBase2, Object.assign({}, props, { innerRef: ref })));
  MenuItemAction2.displayName = "MenuItemAction";

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-core/dist/esm/components/Tooltip/Tooltip.js
  var React79 = __toESM(require_react());

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-styles/css/components/Tooltip/tooltip.mjs
  var tooltip_default2 = {
    "modifiers": {
      "top": "pf-m-top",
      "topLeft": "pf-m-top-left",
      "topRight": "pf-m-top-right",
      "bottom": "pf-m-bottom",
      "bottomLeft": "pf-m-bottom-left",
      "bottomRight": "pf-m-bottom-right",
      "left": "pf-m-left",
      "leftTop": "pf-m-left-top",
      "leftBottom": "pf-m-left-bottom",
      "right": "pf-m-right",
      "rightTop": "pf-m-right-top",
      "rightBottom": "pf-m-right-bottom",
      "textAlignLeft": "pf-m-text-align-left"
    },
    "tooltip": "pf-v6-c-tooltip",
    "tooltipArrow": "pf-v6-c-tooltip__arrow",
    "tooltipContent": "pf-v6-c-tooltip__content"
  };

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-core/dist/esm/components/Tooltip/TooltipContent.js
  var React77 = __toESM(require_react());
  var TooltipContent2 = (_a) => {
    var { className, children, isLeftAligned } = _a, props = __rest(_a, ["className", "children", "isLeftAligned"]);
    return React77.createElement("div", Object.assign({ className: css2(tooltip_default2.tooltipContent, isLeftAligned && tooltip_default2.modifiers.textAlignLeft, className) }, props), children);
  };
  TooltipContent2.displayName = "TooltipContent";

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-core/dist/esm/components/Tooltip/TooltipArrow.js
  var React78 = __toESM(require_react());
  var TooltipArrow2 = (_a) => {
    var { className } = _a, props = __rest(_a, ["className"]);
    return React78.createElement("div", Object.assign({ className: css2(tooltip_default2.tooltipArrow, className) }, props));
  };
  TooltipArrow2.displayName = "TooltipArrow";

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-tokens/dist/esm/c_tooltip_MaxWidth.js
  var c_tooltip_MaxWidth2 = {
    "name": "--pf-v6-c-tooltip--MaxWidth",
    "value": "18.75rem",
    "var": "var(--pf-v6-c-tooltip--MaxWidth)"
  };
  var c_tooltip_MaxWidth_default2 = c_tooltip_MaxWidth2;

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-core/dist/esm/components/Tooltip/Tooltip.js
  var TooltipPosition2;
  (function(TooltipPosition3) {
    TooltipPosition3["auto"] = "auto";
    TooltipPosition3["top"] = "top";
    TooltipPosition3["bottom"] = "bottom";
    TooltipPosition3["left"] = "left";
    TooltipPosition3["right"] = "right";
    TooltipPosition3["topStart"] = "top-start";
    TooltipPosition3["topEnd"] = "top-end";
    TooltipPosition3["bottomStart"] = "bottom-start";
    TooltipPosition3["bottomEnd"] = "bottom-end";
    TooltipPosition3["leftStart"] = "left-start";
    TooltipPosition3["leftEnd"] = "left-end";
    TooltipPosition3["rightStart"] = "right-start";
    TooltipPosition3["rightEnd"] = "right-end";
  })(TooltipPosition2 || (TooltipPosition2 = {}));
  var pfTooltipIdCounter2 = 1;
  var Tooltip2 = (_a) => {
    var {
      content: bodyContent,
      position = "top",
      trigger = "mouseenter focus",
      isVisible = false,
      isContentLeftAligned = false,
      enableFlip = true,
      className = "",
      entryDelay = 300,
      exitDelay = 300,
      appendTo = () => document.body,
      zIndex = 9999,
      minWidth,
      maxWidth = c_tooltip_MaxWidth_default2.value,
      distance = 15,
      aria = "describedby",
      // For every initial starting position, there are 3 escape positions
      flipBehavior = ["top", "right", "bottom", "left", "top", "right", "bottom"],
      id = `pf-tooltip-${pfTooltipIdCounter2++}`,
      children,
      animationDuration = 300,
      triggerRef,
      "aria-live": ariaLive = triggerRef ? "polite" : "off",
      onTooltipHidden = () => {
      }
    } = _a, rest = __rest(_a, ["content", "position", "trigger", "isVisible", "isContentLeftAligned", "enableFlip", "className", "entryDelay", "exitDelay", "appendTo", "zIndex", "minWidth", "maxWidth", "distance", "aria", "flipBehavior", "id", "children", "animationDuration", "triggerRef", "aria-live", "onTooltipHidden"]);
    const hideOnClick = true;
    const triggerOnMouseenter = trigger.includes("mouseenter");
    const triggerOnFocus = trigger.includes("focus");
    const triggerOnClick = trigger.includes("click");
    const triggerManually = trigger === "manual";
    const [visible, setVisible] = React79.useState(false);
    const popperRef = React79.createRef();
    const onDocumentKeyDown = (event) => {
      if (!triggerManually) {
        if (event.key === KeyTypes2.Escape && visible) {
          hide3();
        }
      }
    };
    const onTriggerEnter = (event) => {
      if (event.key === KeyTypes2.Enter) {
        if (!visible) {
          show();
        } else {
          hide3();
        }
      }
    };
    React79.useEffect(() => {
      if (isVisible) {
        show();
      } else {
        hide3();
      }
    }, [isVisible]);
    const show = () => {
      setVisible(true);
    };
    const hide3 = () => {
      setVisible(false);
    };
    const positionModifiers = {
      top: tooltip_default2.modifiers.top,
      bottom: tooltip_default2.modifiers.bottom,
      left: tooltip_default2.modifiers.left,
      right: tooltip_default2.modifiers.right,
      "top-start": tooltip_default2.modifiers.topLeft,
      "top-end": tooltip_default2.modifiers.topRight,
      "bottom-start": tooltip_default2.modifiers.bottomLeft,
      "bottom-end": tooltip_default2.modifiers.bottomRight,
      "left-start": tooltip_default2.modifiers.leftTop,
      "left-end": tooltip_default2.modifiers.leftBottom,
      "right-start": tooltip_default2.modifiers.rightTop,
      "right-end": tooltip_default2.modifiers.rightBottom
    };
    const hasCustomMaxWidth = maxWidth !== c_tooltip_MaxWidth_default2.value;
    const content = React79.createElement(
      "div",
      Object.assign({ "aria-live": ariaLive, className: css2(tooltip_default2.tooltip, className), role: "tooltip", id, style: {
        maxWidth: hasCustomMaxWidth ? maxWidth : null
      }, ref: popperRef }, rest),
      React79.createElement(TooltipArrow2, null),
      React79.createElement(TooltipContent2, { isLeftAligned: isContentLeftAligned }, bodyContent)
    );
    const onDocumentClick = (event, triggerElement) => {
      if (hideOnClick === true) {
        if (visible) {
          hide3();
        } else if (event.target === triggerElement) {
          show();
        }
      } else if (hideOnClick === "toggle" && event.target === triggerElement) {
        if (visible) {
          hide3();
        } else {
          show();
        }
      } else if (hideOnClick === false && !visible && event.target === triggerElement) {
        show();
      }
    };
    const addAriaToTrigger = () => {
      if (aria === "describedby" && children && children.props && !children.props["aria-describedby"]) {
        return React79.cloneElement(children, { "aria-describedby": id });
      } else if (aria === "labelledby" && children.props && !children.props["aria-labelledby"]) {
        return React79.cloneElement(children, { "aria-labelledby": id });
      }
      return children;
    };
    return React79.createElement(Popper2, { trigger: aria !== "none" && visible ? addAriaToTrigger() : children, triggerRef, popper: content, popperRef, minWidth: minWidth !== void 0 ? minWidth : "revert", appendTo, isVisible: visible, positionModifiers, distance, placement: position, onMouseEnter: triggerOnMouseenter && show, onMouseLeave: triggerOnMouseenter && hide3, onPopperMouseEnter: triggerOnMouseenter && show, onPopperMouseLeave: triggerOnMouseenter && hide3, onFocus: triggerOnFocus && show, onBlur: triggerOnFocus && hide3, onDocumentClick: triggerOnClick && onDocumentClick, onDocumentKeyDown: triggerManually ? null : onDocumentKeyDown, onTriggerEnter: triggerManually ? null : onTriggerEnter, enableFlip, zIndex, flipBehavior, animationDuration, entryDelay, exitDelay, onHidden: onTooltipHidden });
  };
  Tooltip2.displayName = "Tooltip";

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-core/dist/esm/components/Menu/MenuItem.js
  var FlyoutContext2 = React80.createContext({
    direction: "right"
  });
  var MenuItemBase2 = (_a) => {
    var { children, className, itemId = null, to, hasCheckbox = false, isActive = null, isFavorited = null, isLoadButton = false, isLoading = false, flyoutMenu, direction, description = null, onClick = () => {
    }, component = "button", isDisabled = false, isAriaDisabled = false, isExternalLink = false, isSelected = null, isFocused, isDanger = false, icon, actions, onShowFlyout, drilldownMenu, isOnPath, innerRef, id, "aria-label": ariaLabel, tooltipProps, rel, target, download } = _a, props = __rest(_a, ["children", "className", "itemId", "to", "hasCheckbox", "isActive", "isFavorited", "isLoadButton", "isLoading", "flyoutMenu", "direction", "description", "onClick", "component", "isDisabled", "isAriaDisabled", "isExternalLink", "isSelected", "isFocused", "isDanger", "icon", "actions", "onShowFlyout", "drilldownMenu", "isOnPath", "innerRef", "id", "aria-label", "tooltipProps", "rel", "target", "download"]);
    const { menuId, parentMenu, onSelect, onActionClick, activeItemId, selected, drilldownItemPath, onDrillIn, onDrillOut, flyoutRef, setFlyoutRef, disableHover, role: menuRole } = React80.useContext(MenuContext2);
    let Component20 = to ? "a" : component;
    if (hasCheckbox && !to) {
      Component20 = "label";
    }
    const [flyoutTarget, setFlyoutTarget] = React80.useState(null);
    const flyoutContext = React80.useContext(FlyoutContext2);
    const [flyoutXDirection, setFlyoutXDirection] = React80.useState(flyoutContext.direction);
    const ref = React80.useRef();
    const flyoutVisible = ref === flyoutRef;
    const hasFlyout = flyoutMenu !== void 0;
    const showFlyout = (show) => {
      if (!flyoutVisible && show) {
        setFlyoutRef(ref);
      } else if (flyoutVisible && !show) {
        setFlyoutRef(null);
      }
      onShowFlyout && show && onShowFlyout();
    };
    useIsomorphicLayoutEffect3(() => {
      if (hasFlyout && ref.current && canUseDOM2) {
        const flyoutMenu2 = ref.current.lastElementChild;
        if (flyoutMenu2 && flyoutMenu2.classList.contains(menu_default2.menu)) {
          const origin = ref.current.getClientRects()[0];
          const rect = flyoutMenu2.getClientRects()[0];
          if (origin && rect) {
            const spaceLeftLeft = origin.x - rect.width;
            const spaceLeftRight = window.innerWidth - origin.x - origin.width - rect.width;
            let xDir = flyoutXDirection;
            if (spaceLeftRight < 0 && xDir !== "left") {
              setFlyoutXDirection("left");
              xDir = "left";
            } else if (spaceLeftLeft < 0 && xDir !== "right") {
              setFlyoutXDirection("right");
              xDir = "right";
            }
            let xOffset = 0;
            if (spaceLeftLeft < 0 && spaceLeftRight < 0) {
              xOffset = xDir === "right" ? -spaceLeftRight : -spaceLeftLeft;
            }
            if (xDir === "left") {
              flyoutMenu2.classList.add(menu_default2.modifiers.left);
              flyoutMenu2.style.setProperty(c_menu_m_flyout_menu_m_left_right_offset_default2.name, `-${xOffset}px`);
            } else {
              flyoutMenu2.style.setProperty(c_menu_m_flyout_menu_left_offset_default2.name, `-${xOffset}px`);
            }
            const spaceLeftBot = window.innerHeight - origin.y - rect.height;
            const spaceLeftTop = window.innerHeight - rect.height;
            if (spaceLeftTop < 0 && spaceLeftBot < 0) {
            } else if (spaceLeftBot < 0) {
              flyoutMenu2.style.setProperty(c_menu_m_flyout_menu_top_offset_default2.name, `${spaceLeftBot}px`);
            }
          }
        }
      }
    }, [flyoutVisible, flyoutMenu]);
    React80.useEffect(() => {
      setFlyoutXDirection(flyoutContext.direction);
    }, [flyoutContext]);
    React80.useEffect(() => {
      if (flyoutTarget) {
        if (flyoutVisible) {
          const flyoutMenu2 = flyoutTarget.nextElementSibling;
          const flyoutItems = Array.from(flyoutMenu2.getElementsByTagName("UL")[0].children).filter((el) => !(el.classList.contains("pf-m-disabled") || el.classList.contains(menu_default2.divider)));
          flyoutItems[0].firstChild.focus();
        } else {
          flyoutTarget.focus();
        }
      }
    }, [flyoutVisible, flyoutTarget]);
    const handleFlyout = (event) => {
      const key = event.key;
      const target2 = event.target;
      const type = event.type;
      if (key === " " || key === "Enter" || key === "ArrowRight" || type === "click") {
        event.stopPropagation();
        event.preventDefault();
        if (!flyoutVisible) {
          showFlyout(true);
          setFlyoutTarget(target2);
        }
      }
      if (key === "Escape" || key === "ArrowLeft") {
        if (flyoutVisible) {
          event.stopPropagation();
          showFlyout(false);
        }
      }
    };
    const onItemSelect = (event, onSelect2) => {
      if (!isAriaDisabled) {
        onSelect2 && onSelect2(event, itemId);
        onClick && onClick(event);
      }
    };
    const _isOnPath = isOnPath && isOnPath || drilldownItemPath && drilldownItemPath.includes(itemId) || false;
    let drill;
    if (direction) {
      if (direction === "down") {
        drill = (event) => onDrillIn && onDrillIn(event, menuId, typeof drilldownMenu === "function" ? drilldownMenu().props.id : drilldownMenu.props.id, itemId);
      } else {
        drill = (event) => onDrillOut && onDrillOut(event, parentMenu, itemId);
      }
    }
    let additionalProps = {};
    if (Component20 === "a") {
      additionalProps = {
        href: to,
        "aria-disabled": isDisabled || isAriaDisabled ? true : null,
        // prevent invalid 'disabled' attribute on <a> tags
        disabled: null,
        target: isExternalLink ? "_blank" : target,
        rel,
        download
      };
    } else if (Component20 === "button") {
      additionalProps = {
        type: "button",
        "aria-disabled": isAriaDisabled ? true : null
      };
    }
    if (isOnPath) {
      additionalProps["aria-expanded"] = true;
    } else if (hasFlyout) {
      additionalProps["aria-haspopup"] = "menu";
      additionalProps["aria-expanded"] = flyoutVisible;
    }
    const getAriaCurrent = () => {
      if (isActive !== null) {
        if (isActive) {
          return "page";
        } else {
          return null;
        }
      } else if (itemId !== null && activeItemId !== null) {
        return itemId === activeItemId;
      }
      return null;
    };
    const getIsSelected = () => {
      if (isSelected !== null) {
        return isSelected;
      } else if (selected !== null && itemId !== null) {
        return Array.isArray(selected) && selected.includes(itemId) || itemId === selected;
      }
      return false;
    };
    const onMouseOver = () => {
      if (disableHover) {
        return;
      }
      if (hasFlyout) {
        showFlyout(true);
      } else {
        setFlyoutRef(null);
      }
    };
    React80.useEffect(() => {
      if (isFocused && ref.current) {
        const itemEl = ref.current;
        const parentListEl = itemEl.parentElement;
        if (parentListEl) {
          const isAboveTop = itemEl.offsetTop - parentListEl.offsetTop < parentListEl.scrollTop;
          const isBelowBottom = itemEl.offsetTop - parentListEl.offsetTop + itemEl.clientHeight;
          if (isAboveTop || isBelowBottom) {
            itemEl.scrollIntoView({ behavior: "auto", block: "nearest" });
          }
        }
      }
    }, [isFocused]);
    const isSelectMenu = menuRole === "listbox";
    const renderItem = React80.createElement(
      React80.Fragment,
      null,
      React80.createElement(GenerateId2, null, (randomId) => React80.createElement(
        Component20,
        Object.assign({ id, tabIndex: -1, className: css2(menu_default2.menuItem, getIsSelected() && !hasCheckbox && menu_default2.modifiers.selected, className), "aria-current": getAriaCurrent() }, !hasCheckbox && { disabled: isDisabled, "aria-label": ariaLabel }, !hasCheckbox && !flyoutMenu && { role: isSelectMenu ? "option" : "menuitem" }, !hasCheckbox && !flyoutMenu && isSelectMenu && { "aria-selected": getIsSelected() }, { ref: innerRef }, !hasCheckbox && {
          onClick: (event) => {
            if (!isAriaDisabled) {
              onItemSelect(event, onSelect);
              drill && drill(event);
              flyoutMenu && handleFlyout(event);
            } else {
              event.preventDefault();
            }
          }
        }, hasCheckbox && { htmlFor: randomId }, additionalProps),
        React80.createElement(
          "span",
          { className: css2(menu_default2.menuItemMain) },
          direction === "up" && React80.createElement(
            "span",
            { className: css2(menu_default2.menuItemToggleIcon) },
            React80.createElement(angle_left_icon_default2, { "aria-hidden": true })
          ),
          icon && React80.createElement("span", { className: css2(menu_default2.menuItemIcon) }, icon),
          hasCheckbox && React80.createElement(
            "span",
            { className: css2(menu_default2.menuItemCheck) },
            React80.createElement(Checkbox2, { id: randomId, component: "span", isChecked: isSelected || false, onChange: (event) => onItemSelect(event, onSelect), isDisabled, "aria-disabled": isAriaDisabled })
          ),
          React80.createElement("span", { className: css2(menu_default2.menuItemText) }, children),
          isExternalLink && React80.createElement(
            "span",
            { className: css2(menu_default2.menuItemExternalIcon) },
            React80.createElement(external_link_alt_icon_default2, { "aria-hidden": true })
          ),
          (flyoutMenu || direction === "down") && React80.createElement(
            "span",
            { className: css2(menu_default2.menuItemToggleIcon) },
            React80.createElement(angle_right_icon_default2, { "aria-hidden": true })
          ),
          getIsSelected() && React80.createElement(
            "span",
            { className: css2(menu_default2.menuItemSelectIcon) },
            React80.createElement(check_icon_default2, { "aria-hidden": true })
          )
        ),
        description && direction !== "up" && React80.createElement(
          "span",
          { className: css2(menu_default2.menuItemDescription) },
          React80.createElement("span", null, description)
        )
      )),
      flyoutVisible && React80.createElement(
        MenuContext2.Provider,
        { value: { disableHover } },
        React80.createElement(FlyoutContext2.Provider, { value: { direction: flyoutXDirection } }, flyoutMenu)
      ),
      typeof drilldownMenu === "function" ? drilldownMenu() : drilldownMenu,
      React80.createElement(
        MenuItemContext2.Provider,
        { value: { itemId, isDisabled } },
        actions,
        isFavorited !== null && React80.createElement(MenuItemAction2, { icon: "favorites", isFavorited, "aria-label": isFavorited ? "starred" : "not starred", onClick: (event) => onActionClick(event, itemId), tabIndex: -1, actionId: "fav" })
      )
    );
    return React80.createElement("li", Object.assign({ className: css2(menu_default2.menuListItem, isDisabled && menu_default2.modifiers.disabled, isAriaDisabled && menu_default2.modifiers.ariaDisabled, _isOnPath && menu_default2.modifiers.currentPath, isLoadButton && menu_default2.modifiers.load, isLoading && menu_default2.modifiers.loading, isFocused && "pf-m-focus", isDanger && menu_default2.modifiers.danger, className), onMouseOver: () => {
      if (!isAriaDisabled) {
        onMouseOver();
      }
    } }, flyoutMenu && !isAriaDisabled && { onKeyDown: handleFlyout }, { ref, role: !hasCheckbox ? "none" : "menuitem" }, hasCheckbox && { "aria-label": ariaLabel }, props), tooltipProps ? React80.createElement(Tooltip2, Object.assign({}, tooltipProps), renderItem) : renderItem);
  };
  var MenuItem2 = React80.forwardRef((props, ref) => React80.createElement(MenuItemBase2, Object.assign({}, props, { innerRef: ref })));
  MenuItem2.displayName = "MenuItem";

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-core/dist/esm/components/Menu/MenuList.js
  var React81 = __toESM(require_react());
  var MenuList = (_a) => {
    var { children = null, className, isAriaMultiselectable = false, "aria-label": ariaLabel } = _a, props = __rest(_a, ["children", "className", "isAriaMultiselectable", "aria-label"]);
    const { role } = React81.useContext(MenuContext2);
    return React81.createElement("ul", Object.assign({ role }, role === "listbox" && { "aria-multiselectable": isAriaMultiselectable }, { className: css2(menu_default2.menuList, className), "aria-label": ariaLabel }, props), children);
  };
  MenuList.displayName = "MenuList";

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-core/dist/esm/components/Dropdown/Dropdown.js
  var DropdownBase = (_a) => {
    var { children, className, onSelect, isOpen, toggle, shouldFocusToggleOnSelect = false, onOpenChange, onToggleKeydown, isPlain, isScrollable, innerRef, ouiaId, ouiaSafe = true, zIndex = 9999, popperProps, onOpenChangeKeys = ["Escape", "Tab"], menuHeight, maxMenuHeight, shouldFocusFirstItemOnOpen = false, shouldPreventScrollOnItemFocus = true, focusTimeoutDelay = 0 } = _a, props = __rest(_a, ["children", "className", "onSelect", "isOpen", "toggle", "shouldFocusToggleOnSelect", "onOpenChange", "onToggleKeydown", "isPlain", "isScrollable", "innerRef", "ouiaId", "ouiaSafe", "zIndex", "popperProps", "onOpenChangeKeys", "menuHeight", "maxMenuHeight", "shouldFocusFirstItemOnOpen", "shouldPreventScrollOnItemFocus", "focusTimeoutDelay"]);
    const localMenuRef = import_react8.default.useRef();
    const localToggleRef = import_react8.default.useRef();
    const ouiaProps = useOUIAProps2(Dropdown.displayName, ouiaId, ouiaSafe);
    const menuRef = innerRef || localMenuRef;
    const toggleRef = typeof toggle === "function" || typeof toggle !== "function" && !toggle.toggleRef ? localToggleRef : toggle === null || toggle === void 0 ? void 0 : toggle.toggleRef;
    const prevIsOpen = import_react8.default.useRef(isOpen);
    import_react8.default.useEffect(() => {
      if (prevIsOpen.current === false && isOpen === true && shouldFocusFirstItemOnOpen) {
        setTimeout(() => {
          var _a2;
          const firstElement = (_a2 = menuRef === null || menuRef === void 0 ? void 0 : menuRef.current) === null || _a2 === void 0 ? void 0 : _a2.querySelector('li button:not(:disabled),li input:not(:disabled),li a:not([aria-disabled="true"])');
          firstElement && firstElement.focus({ preventScroll: shouldPreventScrollOnItemFocus });
        }, focusTimeoutDelay);
      }
      prevIsOpen.current = isOpen;
    }, [isOpen]);
    import_react8.default.useEffect(() => {
      const handleMenuKeys = (event) => {
        var _a2, _b, _c, _d;
        if (isOpen && onOpenChange && (((_a2 = menuRef.current) === null || _a2 === void 0 ? void 0 : _a2.contains(event.target)) || ((_b = toggleRef.current) === null || _b === void 0 ? void 0 : _b.contains(event.target)))) {
          if (onOpenChangeKeys.includes(event.key)) {
            onOpenChange(false);
            (_c = toggleRef.current) === null || _c === void 0 ? void 0 : _c.focus();
          }
        }
        if ((_d = toggleRef.current) === null || _d === void 0 ? void 0 : _d.contains(event.target)) {
          if (onToggleKeydown) {
            onToggleKeydown(event);
          } else if (isOpen) {
            onToggleArrowKeydownDefault2(event, menuRef);
          }
        }
      };
      const handleClick = (event) => {
        var _a2, _b;
        if (isOpen && onOpenChange && !((_a2 = toggleRef === null || toggleRef === void 0 ? void 0 : toggleRef.current) === null || _a2 === void 0 ? void 0 : _a2.contains(event.target))) {
          if (isOpen && !((_b = menuRef.current) === null || _b === void 0 ? void 0 : _b.contains(event.target))) {
            onOpenChange(false);
          }
        }
      };
      window.addEventListener("keydown", handleMenuKeys);
      window.addEventListener("click", handleClick);
      return () => {
        window.removeEventListener("keydown", handleMenuKeys);
        window.removeEventListener("click", handleClick);
      };
    }, [
      isOpen,
      menuRef,
      toggleRef,
      onOpenChange,
      onOpenChangeKeys,
      onToggleKeydown,
      shouldPreventScrollOnItemFocus,
      shouldFocusFirstItemOnOpen,
      focusTimeoutDelay
    ]);
    const scrollable = maxMenuHeight !== void 0 || menuHeight !== void 0 || isScrollable;
    const menu = import_react8.default.createElement(
      Menu2,
      Object.assign({ className: css2(className), ref: menuRef, onSelect: (event, value) => {
        var _a2;
        onSelect && onSelect(event, value);
        shouldFocusToggleOnSelect && ((_a2 = toggleRef.current) === null || _a2 === void 0 ? void 0 : _a2.focus());
      }, isPlain, isScrollable: scrollable }, props, ouiaProps),
      import_react8.default.createElement(MenuContent2, { menuHeight, maxMenuHeight }, children)
    );
    return import_react8.default.createElement(Popper2, Object.assign({ trigger: typeof toggle === "function" ? toggle(toggleRef) : toggle.toggleNode, triggerRef: toggleRef, popper: menu, popperRef: menuRef, isVisible: isOpen, zIndex }, popperProps));
  };
  var Dropdown = import_react8.default.forwardRef((props, ref) => import_react8.default.createElement(DropdownBase, Object.assign({ innerRef: ref }, props)));
  Dropdown.displayName = "Dropdown";

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-core/dist/esm/components/Dropdown/DropdownItem.js
  var import_react9 = __toESM(require_react());
  var DropdownItemBase = (_a) => {
    var { children, className, description, isDisabled, isAriaDisabled, value, onClick, ouiaId, ouiaSafe, innerRef, tooltipProps } = _a, props = __rest(_a, ["children", "className", "description", "isDisabled", "isAriaDisabled", "value", "onClick", "ouiaId", "ouiaSafe", "innerRef", "tooltipProps"]);
    const ouiaProps = useOUIAProps2(DropdownItem.displayName, ouiaId, ouiaSafe);
    return import_react9.default.createElement(MenuItem2, Object.assign({ className: css2(className), description, isDisabled, isAriaDisabled, itemId: value, onClick, tooltipProps, ref: innerRef }, ouiaProps, props), children);
  };
  var DropdownItem = import_react9.default.forwardRef((props, ref) => import_react9.default.createElement(DropdownItemBase, Object.assign({}, props, { innerRef: ref })));
  DropdownItem.displayName = "DropdownItem";

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-core/dist/esm/components/Dropdown/DropdownList.js
  var import_react10 = __toESM(require_react());
  var DropdownList = (_a) => {
    var { children, className } = _a, props = __rest(_a, ["children", "className"]);
    return import_react10.default.createElement(MenuList, Object.assign({ className: css2(className) }, props), children);
  };
  DropdownList.displayName = "DropdownList";

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-core/dist/esm/components/Divider/Divider.js
  var React85 = __toESM(require_react());

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-styles/css/components/Divider/divider.mjs
  var divider_default2 = {
    "divider": "pf-v6-c-divider",
    "modifiers": {
      "hidden": "pf-m-hidden",
      "hiddenOnSm": "pf-m-hidden-on-sm",
      "visibleOnSm": "pf-m-visible-on-sm",
      "hiddenOnMd": "pf-m-hidden-on-md",
      "visibleOnMd": "pf-m-visible-on-md",
      "hiddenOnLg": "pf-m-hidden-on-lg",
      "visibleOnLg": "pf-m-visible-on-lg",
      "hiddenOnXl": "pf-m-hidden-on-xl",
      "visibleOnXl": "pf-m-visible-on-xl",
      "hiddenOn_2xl": "pf-m-hidden-on-2xl",
      "visibleOn_2xl": "pf-m-visible-on-2xl",
      "horizontal": "pf-m-horizontal",
      "vertical": "pf-m-vertical",
      "insetNone": "pf-m-inset-none",
      "insetXs": "pf-m-inset-xs",
      "insetSm": "pf-m-inset-sm",
      "insetMd": "pf-m-inset-md",
      "insetLg": "pf-m-inset-lg",
      "insetXl": "pf-m-inset-xl",
      "inset_2xl": "pf-m-inset-2xl",
      "inset_3xl": "pf-m-inset-3xl",
      "horizontalOnSm": "pf-m-horizontal-on-sm",
      "verticalOnSm": "pf-m-vertical-on-sm",
      "insetNoneOnSm": "pf-m-inset-none-on-sm",
      "insetXsOnSm": "pf-m-inset-xs-on-sm",
      "insetSmOnSm": "pf-m-inset-sm-on-sm",
      "insetMdOnSm": "pf-m-inset-md-on-sm",
      "insetLgOnSm": "pf-m-inset-lg-on-sm",
      "insetXlOnSm": "pf-m-inset-xl-on-sm",
      "inset_2xlOnSm": "pf-m-inset-2xl-on-sm",
      "inset_3xlOnSm": "pf-m-inset-3xl-on-sm",
      "horizontalOnMd": "pf-m-horizontal-on-md",
      "verticalOnMd": "pf-m-vertical-on-md",
      "insetNoneOnMd": "pf-m-inset-none-on-md",
      "insetXsOnMd": "pf-m-inset-xs-on-md",
      "insetSmOnMd": "pf-m-inset-sm-on-md",
      "insetMdOnMd": "pf-m-inset-md-on-md",
      "insetLgOnMd": "pf-m-inset-lg-on-md",
      "insetXlOnMd": "pf-m-inset-xl-on-md",
      "inset_2xlOnMd": "pf-m-inset-2xl-on-md",
      "inset_3xlOnMd": "pf-m-inset-3xl-on-md",
      "horizontalOnLg": "pf-m-horizontal-on-lg",
      "verticalOnLg": "pf-m-vertical-on-lg",
      "insetNoneOnLg": "pf-m-inset-none-on-lg",
      "insetXsOnLg": "pf-m-inset-xs-on-lg",
      "insetSmOnLg": "pf-m-inset-sm-on-lg",
      "insetMdOnLg": "pf-m-inset-md-on-lg",
      "insetLgOnLg": "pf-m-inset-lg-on-lg",
      "insetXlOnLg": "pf-m-inset-xl-on-lg",
      "inset_2xlOnLg": "pf-m-inset-2xl-on-lg",
      "inset_3xlOnLg": "pf-m-inset-3xl-on-lg",
      "horizontalOnXl": "pf-m-horizontal-on-xl",
      "verticalOnXl": "pf-m-vertical-on-xl",
      "insetNoneOnXl": "pf-m-inset-none-on-xl",
      "insetXsOnXl": "pf-m-inset-xs-on-xl",
      "insetSmOnXl": "pf-m-inset-sm-on-xl",
      "insetMdOnXl": "pf-m-inset-md-on-xl",
      "insetLgOnXl": "pf-m-inset-lg-on-xl",
      "insetXlOnXl": "pf-m-inset-xl-on-xl",
      "inset_2xlOnXl": "pf-m-inset-2xl-on-xl",
      "inset_3xlOnXl": "pf-m-inset-3xl-on-xl",
      "horizontalOn_2xl": "pf-m-horizontal-on-2xl",
      "verticalOn_2xl": "pf-m-vertical-on-2xl",
      "insetNoneOn_2xl": "pf-m-inset-none-on-2xl",
      "insetXsOn_2xl": "pf-m-inset-xs-on-2xl",
      "insetSmOn_2xl": "pf-m-inset-sm-on-2xl",
      "insetMdOn_2xl": "pf-m-inset-md-on-2xl",
      "insetLgOn_2xl": "pf-m-inset-lg-on-2xl",
      "insetXlOn_2xl": "pf-m-inset-xl-on-2xl",
      "inset_2xlOn_2xl": "pf-m-inset-2xl-on-2xl",
      "inset_3xlOn_2xl": "pf-m-inset-3xl-on-2xl"
    }
  };

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-core/dist/esm/components/Divider/Divider.js
  var DividerVariant2;
  (function(DividerVariant3) {
    DividerVariant3["hr"] = "hr";
    DividerVariant3["li"] = "li";
    DividerVariant3["div"] = "div";
  })(DividerVariant2 || (DividerVariant2 = {}));
  var Divider2 = (_a) => {
    var { className, component = DividerVariant2.hr, inset, orientation } = _a, props = __rest(_a, ["className", "component", "inset", "orientation"]);
    const Component20 = component;
    return React85.createElement(Component20, Object.assign({ className: css2(divider_default2.divider, formatBreakpointMods2(inset, divider_default2), formatBreakpointMods2(orientation, divider_default2), className) }, component !== "hr" && { role: "separator" }, props));
  };
  Divider2.displayName = "Divider";

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-core/dist/esm/components/MenuToggle/MenuToggle.js
  var React86 = __toESM(require_react());

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-styles/css/components/MenuToggle/menu-toggle.mjs
  var menu_toggle_default2 = {
    "avatar": "pf-v6-c-avatar",
    "button": "pf-v6-c-button",
    "check": "pf-v6-c-check",
    "checkInput": "pf-v6-c-check__input",
    "menuToggle": "pf-v6-c-menu-toggle",
    "menuToggleButton": "pf-v6-c-menu-toggle__button",
    "menuToggleControls": "pf-v6-c-menu-toggle__controls",
    "menuToggleCount": "pf-v6-c-menu-toggle__count",
    "menuToggleIcon": "pf-v6-c-menu-toggle__icon",
    "menuToggleStatusIcon": "pf-v6-c-menu-toggle__status-icon",
    "menuToggleText": "pf-v6-c-menu-toggle__text",
    "menuToggleToggleIcon": "pf-v6-c-menu-toggle__toggle-icon",
    "modifiers": {
      "primary": "pf-m-primary",
      "secondary": "pf-m-secondary",
      "fullHeight": "pf-m-full-height",
      "fullWidth": "pf-m-full-width",
      "plain": "pf-m-plain",
      "expanded": "pf-m-expanded",
      "disabled": "pf-m-disabled",
      "small": "pf-m-small",
      "success": "pf-m-success",
      "warning": "pf-m-warning",
      "danger": "pf-m-danger",
      "placeholder": "pf-m-placeholder",
      "splitButton": "pf-m-split-button",
      "standalone": "pf-m-standalone",
      "typeahead": "pf-m-typeahead",
      "text": "pf-m-text",
      "avatar": "pf-m-avatar"
    },
    "textInputGroup": "pf-v6-c-text-input-group"
  };

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-icons/dist/esm/icons/caret-down-icon.js
  var CaretDownIconConfig2 = {
    name: "CaretDownIcon",
    height: 512,
    width: 320,
    svgPath: "M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z",
    yOffset: 0,
    xOffset: 0
  };
  var CaretDownIcon2 = createIcon2(CaretDownIconConfig2);
  var caret_down_icon_default2 = CaretDownIcon2;

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-core/dist/esm/components/MenuToggle/MenuToggle.js
  var MenuToggleStatus2;
  (function(MenuToggleStatus3) {
    MenuToggleStatus3["success"] = "success";
    MenuToggleStatus3["danger"] = "danger";
    MenuToggleStatus3["warning"] = "warning";
  })(MenuToggleStatus2 || (MenuToggleStatus2 = {}));
  var MenuToggleSize;
  (function(MenuToggleSize2) {
    MenuToggleSize2["default"] = "default";
    MenuToggleSize2["sm"] = "sm";
  })(MenuToggleSize || (MenuToggleSize = {}));
  var MenuToggleBase2 = class extends React86.Component {
    constructor() {
      super(...arguments);
      this.displayName = "MenuToggleBase";
      this.state = {
        ouiaStateId: getDefaultOUIAId2(MenuToggle2.displayName, this.props.variant)
      };
    }
    render() {
      const _a = this.props, { children, className, icon, badge, isExpanded, isDisabled, isFullHeight, isFullWidth, isPlaceholder, splitButtonItems, variant, status, statusIcon, innerRef, onClick, "aria-label": ariaLabel, ouiaId, ouiaSafe, size } = _a, otherProps = __rest(_a, ["children", "className", "icon", "badge", "isExpanded", "isDisabled", "isFullHeight", "isFullWidth", "isPlaceholder", "splitButtonItems", "variant", "status", "statusIcon", "innerRef", "onClick", "aria-label", "ouiaId", "ouiaSafe", "size"]);
      const isPlain = variant === "plain";
      const isPlainText = variant === "plainText";
      const isTypeahead = variant === "typeahead";
      const ouiaProps = getOUIAProps2(MenuToggle2.displayName, ouiaId !== null && ouiaId !== void 0 ? ouiaId : this.state.ouiaStateId, ouiaSafe);
      let _statusIcon = statusIcon;
      if (!statusIcon) {
        switch (status) {
          case MenuToggleStatus2.success:
            _statusIcon = React86.createElement(check_circle_icon_default2, { "aria-hidden": "true" });
            break;
          case MenuToggleStatus2.warning:
            _statusIcon = React86.createElement(exclamation_triangle_icon_default2, { "aria-hidden": "true" });
            break;
          case MenuToggleStatus2.danger:
            _statusIcon = React86.createElement(exclamation_circle_icon_default2, { "aria-hidden": "true" });
            break;
        }
      }
      const toggleControls = React86.createElement(
        "span",
        { className: css2(menu_toggle_default2.menuToggleControls) },
        status !== void 0 && React86.createElement("span", { className: css2(menu_toggle_default2.menuToggleStatusIcon) }, _statusIcon),
        React86.createElement(
          "span",
          { className: css2(menu_toggle_default2.menuToggleToggleIcon) },
          React86.createElement(caret_down_icon_default2, { "aria-hidden": true })
        )
      );
      const content = React86.createElement(
        React86.Fragment,
        null,
        icon && React86.createElement("span", { className: css2(menu_toggle_default2.menuToggleIcon) }, icon),
        isTypeahead ? children : children && React86.createElement("span", { className: css2(menu_toggle_default2.menuToggleText) }, children),
        React86.isValidElement(badge) && React86.createElement("span", { className: css2(menu_toggle_default2.menuToggleCount) }, badge),
        isTypeahead ? React86.createElement("button", Object.assign({ type: "button", className: css2(menu_toggle_default2.menuToggleButton), "aria-expanded": isExpanded, onClick, "aria-label": ariaLabel || "Menu toggle", tabIndex: -1 }, ouiaProps), toggleControls) : !isPlain && toggleControls
      );
      const commonStyles = css2(menu_toggle_default2.menuToggle, isExpanded && menu_toggle_default2.modifiers.expanded, variant === "primary" && menu_toggle_default2.modifiers.primary, variant === "secondary" && menu_toggle_default2.modifiers.secondary, status && menu_toggle_default2.modifiers[status], (isPlain || isPlainText) && menu_toggle_default2.modifiers.plain, isPlainText && "pf-m-text", isFullHeight && menu_toggle_default2.modifiers.fullHeight, isFullWidth && menu_toggle_default2.modifiers.fullWidth, isDisabled && menu_toggle_default2.modifiers.disabled, isPlaceholder && menu_toggle_default2.modifiers.placeholder, size === MenuToggleSize.sm && menu_toggle_default2.modifiers.small, className);
      const componentProps = Object.assign(Object.assign({ children: content }, isDisabled && { disabled: true }), otherProps);
      if (isTypeahead) {
        return React86.createElement("div", Object.assign({ ref: innerRef, className: css2(commonStyles, menu_toggle_default2.modifiers.typeahead) }, componentProps));
      }
      if (splitButtonItems) {
        return React86.createElement(
          "div",
          { ref: innerRef, className: css2(commonStyles, menu_toggle_default2.modifiers.splitButton) },
          splitButtonItems,
          React86.createElement(
            "button",
            Object.assign({ className: css2(menu_toggle_default2.menuToggleButton, children && menu_toggle_default2.modifiers.text), type: "button", "aria-expanded": isExpanded, "aria-label": ariaLabel, disabled: isDisabled, onClick }, otherProps, ouiaProps),
            children && React86.createElement("span", { className: css2(menu_toggle_default2.menuToggleText) }, children),
            toggleControls
          )
        );
      }
      return React86.createElement("button", Object.assign({ className: css2(commonStyles), type: "button", "aria-label": ariaLabel, "aria-expanded": isExpanded, ref: innerRef, disabled: isDisabled, onClick }, componentProps, ouiaProps));
    }
  };
  MenuToggleBase2.defaultProps = {
    className: "",
    isExpanded: false,
    isDisabled: false,
    isFullWidth: false,
    isFullHeight: false,
    isPlaceholder: false,
    size: "default",
    ouiaSafe: true
  };
  var MenuToggle2 = React86.forwardRef((props, ref) => React86.createElement(MenuToggleBase2, Object.assign({ innerRef: ref }, props)));
  MenuToggle2.displayName = "MenuToggle";

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-icons/dist/esm/icons/ellipsis-v-icon.js
  var EllipsisVIconConfig = {
    name: "EllipsisVIcon",
    height: 512,
    width: 192,
    svgPath: "M96 184c39.8 0 72 32.2 72 72s-32.2 72-72 72-72-32.2-72-72 32.2-72 72-72zM24 80c0 39.8 32.2 72 72 72s72-32.2 72-72S135.8 8 96 8 24 40.2 24 80zm0 352c0 39.8 32.2 72 72 72s72-32.2 72-72-32.2-72-72-72-72 32.2-72 72z",
    yOffset: 0,
    xOffset: 0
  };
  var EllipsisVIcon = createIcon2(EllipsisVIconConfig);
  var ellipsis_v_icon_default = EllipsisVIcon;

  // node_modules/@patternfly/react-table/dist/esm/components/Table/ActionsColumn.js
  var ActionsColumnBase = (_a) => {
    var { items, isDisabled, rowData, extraData, actionsToggle, popperProps = {
      position: "end",
      direction: "down"
    }, innerRef, firstActionItemRef, isOnOpenChangeDisabled = false } = _a, props = __rest(_a, ["items", "isDisabled", "rowData", "extraData", "actionsToggle", "popperProps", "innerRef", "firstActionItemRef", "isOnOpenChangeDisabled"]);
    const [isOpen, setIsOpen] = React87.useState(false);
    const onToggle = () => {
      setIsOpen(!isOpen);
    };
    const onActionClick = (event, onClick) => {
      if (onClick) {
        event.preventDefault();
        onClick(event, extraData && extraData.rowIndex, rowData, extraData);
      }
    };
    return React87.createElement(
      React87.Fragment,
      null,
      items.filter((item) => item.isOutsideDropdown).map((_a2, key) => {
        var { title, itemKey, onClick, isOutsideDropdown } = _a2, props2 = __rest(_a2, ["title", "itemKey", "onClick", "isOutsideDropdown"]);
        return typeof title === "string" ? React87.createElement(Button2, Object.assign({ onClick: (event) => onActionClick(event, onClick) }, props2, { isDisabled, key: itemKey || `outside_dropdown_${key}`, "data-key": itemKey || `outside_dropdown_${key}` }), title) : React87.cloneElement(title, Object.assign({ onClick, isDisabled }, props2));
      }),
      React87.createElement(
        Dropdown,
        Object.assign({ isOpen, onOpenChange: !isOnOpenChangeDisabled ? (isOpen2) => setIsOpen(isOpen2) : void 0, toggle: (toggleRef) => actionsToggle ? actionsToggle({ onToggle, isOpen, isDisabled, toggleRef }) : React87.createElement(MenuToggle2, { "aria-label": "Kebab toggle", ref: toggleRef, onClick: onToggle, isExpanded: isOpen, isDisabled, variant: "plain", icon: React87.createElement(ellipsis_v_icon_default, null) }) }, rowData && rowData.actionProps, { ref: innerRef }, props, { popperProps }),
        React87.createElement(DropdownList, null, items.filter((item) => !item.isOutsideDropdown).map((_a2, index) => {
          var { title, itemKey, onClick, tooltipProps, isSeparator, shouldCloseOnClick = true } = _a2, props2 = __rest(_a2, ["title", "itemKey", "onClick", "tooltipProps", "isSeparator", "shouldCloseOnClick"]);
          if (isSeparator) {
            return React87.createElement(Divider2, { key: itemKey || index, "data-key": itemKey || index });
          }
          const item = React87.createElement(DropdownItem, Object.assign({ onClick: (event) => {
            onActionClick(event, onClick);
            shouldCloseOnClick && onToggle();
          } }, props2, { key: itemKey || index, "data-key": itemKey || index, ref: index === 0 ? firstActionItemRef : void 0 }), title);
          if (tooltipProps === null || tooltipProps === void 0 ? void 0 : tooltipProps.content) {
            return React87.createElement(Tooltip2, Object.assign({ key: itemKey || index }, tooltipProps), item);
          } else {
            return item;
          }
        }))
      )
    );
  };
  var ActionsColumn = React87.forwardRef((props, ref) => React87.createElement(ActionsColumnBase, Object.assign({}, props, { innerRef: ref })));
  ActionsColumn.displayName = "ActionsColumn";

  // node_modules/@patternfly/react-table/dist/esm/components/Table/CollapseColumn.js
  var React88 = __toESM(require_react());

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-icons/dist/esm/icons/angle-down-icon.js
  var AngleDownIconConfig = {
    name: "AngleDownIcon",
    height: 512,
    width: 320,
    svgPath: "M143 352.3L7 216.3c-9.4-9.4-9.4-24.6 0-33.9l22.6-22.6c9.4-9.4 24.6-9.4 33.9 0l96.4 96.4 96.4-96.4c9.4-9.4 24.6-9.4 33.9 0l22.6 22.6c9.4 9.4 9.4 24.6 0 33.9l-136 136c-9.2 9.4-24.4 9.4-33.8 0z",
    yOffset: 0,
    xOffset: 0
  };
  var AngleDownIcon = createIcon2(AngleDownIconConfig);
  var angle_down_icon_default = AngleDownIcon;

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-styles/css/components/Table/table.mjs
  var table_default = {
    "button": "pf-v6-c-button",
    "check": "pf-v6-c-check",
    "dirRtl": "pf-v6-m-dir-rtl",
    "modifiers": {
      "fixed": "pf-m-fixed",
      "stickyHeader": "pf-m-sticky-header",
      "nestedColumnHeader": "pf-m-nested-column-header",
      "striped": "pf-m-striped",
      "expandable": "pf-m-expandable",
      "stripedEven": "pf-m-striped-even",
      "ghostRow": "pf-m-ghost-row",
      "hidden": "pf-m-hidden",
      "hiddenOnSm": "pf-m-hidden-on-sm",
      "visibleOnSm": "pf-m-visible-on-sm",
      "hiddenOnMd": "pf-m-hidden-on-md",
      "visibleOnMd": "pf-m-visible-on-md",
      "hiddenOnLg": "pf-m-hidden-on-lg",
      "visibleOnLg": "pf-m-visible-on-lg",
      "hiddenOnXl": "pf-m-hidden-on-xl",
      "visibleOnXl": "pf-m-visible-on-xl",
      "hiddenOn_2xl": "pf-m-hidden-on-2xl",
      "visibleOn_2xl": "pf-m-visible-on-2xl",
      "center": "pf-m-center",
      "help": "pf-m-help",
      "favorite": "pf-m-favorite",
      "borderRight": "pf-m-border-right",
      "borderLeft": "pf-m-border-left",
      "noBorderRows": "pf-m-no-border-rows",
      "expanded": "pf-m-expanded",
      "clickable": "pf-m-clickable",
      "selected": "pf-m-selected",
      "firstCellOffsetReset": "pf-m-first-cell-offset-reset",
      "dragOver": "pf-m-drag-over",
      "truncate": "pf-m-truncate",
      "wrap": "pf-m-wrap",
      "nowrap": "pf-m-nowrap",
      "fitContent": "pf-m-fit-content",
      "breakWord": "pf-m-break-word",
      "standalone": "pf-m-standalone",
      "favorited": "pf-m-favorited",
      "noPadding": "pf-m-no-padding",
      "compact": "pf-m-compact",
      "borderRow": "pf-m-border-row",
      "width_10": "pf-m-width-10",
      "width_15": "pf-m-width-15",
      "width_20": "pf-m-width-20",
      "width_25": "pf-m-width-25",
      "width_30": "pf-m-width-30",
      "width_35": "pf-m-width-35",
      "width_40": "pf-m-width-40",
      "width_45": "pf-m-width-45",
      "width_50": "pf-m-width-50",
      "width_60": "pf-m-width-60",
      "width_70": "pf-m-width-70",
      "width_80": "pf-m-width-80",
      "width_90": "pf-m-width-90",
      "width_100": "pf-m-width-100"
    },
    "radio": "pf-v6-c-radio",
    "table": "pf-v6-c-table",
    "tableAction": "pf-v6-c-table__action",
    "tableButton": "pf-v6-c-table__button",
    "tableButtonContent": "pf-v6-c-table__button-content",
    "tableCaption": "pf-v6-c-table__caption",
    "tableCellEmpty": "pf-v6-c-table__cell-empty",
    "tableCheck": "pf-v6-c-table__check",
    "tableColumnHelp": "pf-v6-c-table__column-help",
    "tableColumnHelpAction": "pf-v6-c-table__column-help-action",
    "tableCompoundExpansionToggle": "pf-v6-c-table__compound-expansion-toggle",
    "tableControlRow": "pf-v6-c-table__control-row",
    "tableDraggable": "pf-v6-c-table__draggable",
    "tableExpandableRow": "pf-v6-c-table__expandable-row",
    "tableExpandableRowContent": "pf-v6-c-table__expandable-row-content",
    "tableFavorite": "pf-v6-c-table__favorite",
    "tableIcon": "pf-v6-c-table__icon",
    "tableIconInline": "pf-v6-c-table__icon-inline",
    "tableInlineEditAction": "pf-v6-c-table__inline-edit-action",
    "tableSort": "pf-v6-c-table__sort",
    "tableSortIndicator": "pf-v6-c-table__sort-indicator",
    "tableSubhead": "pf-v6-c-table__subhead",
    "tableTbody": "pf-v6-c-table__tbody",
    "tableTd": "pf-v6-c-table__td",
    "tableText": "pf-v6-c-table__text",
    "tableTh": "pf-v6-c-table__th",
    "tableThead": "pf-v6-c-table__thead",
    "tableToggle": "pf-v6-c-table__toggle",
    "tableToggleIcon": "pf-v6-c-table__toggle-icon",
    "tableTr": "pf-v6-c-table__tr"
  };

  // node_modules/@patternfly/react-table/dist/esm/components/Table/CollapseColumn.js
  var CollapseColumn = (_a) => {
    var { className = "", children = null, isOpen, onToggle } = _a, props = __rest(_a, ["className", "children", "isOpen", "onToggle"]);
    return React88.createElement(
      React88.Fragment,
      null,
      isOpen !== void 0 && React88.createElement(Button2, Object.assign({ className: css2(className, isOpen && table_default.modifiers.expanded) }, props, { variant: "plain", "aria-label": props["aria-label"] || "Details", onClick: onToggle, "aria-expanded": isOpen, icon: React88.createElement(
        "div",
        { className: css2(table_default.tableToggleIcon) },
        React88.createElement(angle_down_icon_default, null)
      ) })),
      children
    );
  };
  CollapseColumn.displayName = "CollapseColumn";

  // node_modules/@patternfly/react-table/dist/esm/components/Table/DraggableCell.js
  var React89 = __toESM(require_react());

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-icons/dist/esm/icons/grip-vertical-icon.js
  var GripVerticalIconConfig = {
    name: "GripVerticalIcon",
    height: 512,
    width: 320,
    svgPath: "M96 32H32C14.33 32 0 46.33 0 64v64c0 17.67 14.33 32 32 32h64c17.67 0 32-14.33 32-32V64c0-17.67-14.33-32-32-32zm0 160H32c-17.67 0-32 14.33-32 32v64c0 17.67 14.33 32 32 32h64c17.67 0 32-14.33 32-32v-64c0-17.67-14.33-32-32-32zm0 160H32c-17.67 0-32 14.33-32 32v64c0 17.67 14.33 32 32 32h64c17.67 0 32-14.33 32-32v-64c0-17.67-14.33-32-32-32zM288 32h-64c-17.67 0-32 14.33-32 32v64c0 17.67 14.33 32 32 32h64c17.67 0 32-14.33 32-32V64c0-17.67-14.33-32-32-32zm0 160h-64c-17.67 0-32 14.33-32 32v64c0 17.67 14.33 32 32 32h64c17.67 0 32-14.33 32-32v-64c0-17.67-14.33-32-32-32zm0 160h-64c-17.67 0-32 14.33-32 32v64c0 17.67 14.33 32 32 32h64c17.67 0 32-14.33 32-32v-64c0-17.67-14.33-32-32-32z",
    yOffset: 0,
    xOffset: 0
  };
  var GripVerticalIcon = createIcon2(GripVerticalIconConfig);
  var grip_vertical_icon_default = GripVerticalIcon;

  // node_modules/@patternfly/react-table/dist/esm/components/Table/DraggableCell.js
  var DraggableCell = (_a) => {
    var { className, onClick, "aria-label": ariaLabel, id } = _a, props = __rest(_a, ["className", "onClick", "aria-label", "id"]);
    return React89.createElement(Button2, Object.assign({ id, variant: "plain", className, type: "button", "aria-label": ariaLabel || `Draggable row draggable button`, onClick }, props, { icon: React89.createElement(grip_vertical_icon_default, { "aria-hidden": true }) }));
  };
  DraggableCell.displayName = "DraggableCell";

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-styles/css/components/InlineEdit/inline-edit.mjs
  var inline_edit_default = {
    "button": "pf-v6-c-button",
    "inlineEdit": "pf-v6-c-inline-edit",
    "inlineEditAction": "pf-v6-c-inline-edit__action",
    "inlineEditEditableText": "pf-v6-c-inline-edit__editable-text",
    "inlineEditGroup": "pf-v6-c-inline-edit__group",
    "inlineEditInput": "pf-v6-c-inline-edit__input",
    "inlineEditLabel": "pf-v6-c-inline-edit__label",
    "inlineEditValue": "pf-v6-c-inline-edit__value",
    "modifiers": {
      "iconGroup": "pf-m-icon-group",
      "footer": "pf-m-footer",
      "column": "pf-m-column",
      "valid": "pf-m-valid",
      "plain": "pf-m-plain",
      "actionGroup": "pf-m-action-group",
      "enableEditable": "pf-m-enable-editable",
      "inlineEditable": "pf-m-inline-editable",
      "enable": "pf-m-enable",
      "bold": "pf-m-bold"
    }
  };

  // node_modules/@patternfly/react-table/dist/esm/components/Table/HeaderCellInfoWrapper.js
  var React101 = __toESM(require_react());

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-icons/dist/esm/icons/help-icon.js
  var HelpIconConfig = {
    name: "HelpIcon",
    height: 1024,
    width: 1024,
    svgPath: "M521.3,576 C627.5,576 713.7,502 713.7,413.7 C713.7,325.4 627.6,253.6 521.3,253.6 C366,253.6 334.5,337.7 329.2,407.2 C329.2,414.3 335.2,416 343.5,416 L445,416 C450.5,416 458,415.5 460.8,406.5 C460.8,362.6 582.9,357.1 582.9,413.6 C582.9,441.9 556.2,470.9 521.3,473 C486.4,475.1 447.3,479.8 447.3,521.7 L447.3,553.8 C447.3,570.8 456.1,576 472,576 C487.9,576 521.3,576 521.3,576 M575.3,751.3 L575.3,655.3 C575.313862,651.055109 573.620137,646.982962 570.6,644 C567.638831,640.947672 563.552355,639.247987 559.3,639.29884 L463.3,639.29884 C459.055109,639.286138 454.982962,640.979863 452,644 C448.947672,646.961169 447.247987,651.047645 447.29884,655.3 L447.29884,751.3 C447.286138,755.544891 448.979863,759.617038 452,762.6 C454.961169,765.652328 459.047645,767.352013 463.3,767.30116 L559.3,767.30116 C563.544891,767.313862 567.617038,765.620137 570.6,762.6 C573.659349,759.643612 575.360354,755.553963 575.3,751.3 M512,896 C300.2,896 128,723.9 128,512 C128,300.3 300.2,128 512,128 C723.8,128 896,300.2 896,512 C896,723.8 723.7,896 512,896 M512.1,0 C229.7,0 0,229.8 0,512 C0,794.2 229.8,1024 512.1,1024 C794.4,1024 1024,794.3 1024,512 C1024,229.7 794.4,0 512.1,0",
    yOffset: 0,
    xOffset: 0
  };
  var HelpIcon = createIcon2(HelpIconConfig);
  var help_icon_default = HelpIcon;

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-core/dist/esm/components/Popover/Popover.js
  var React99 = __toESM(require_react());

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-styles/css/components/Popover/popover.mjs
  var popover_default = {
    "modifiers": {
      "noPadding": "pf-m-no-padding",
      "widthAuto": "pf-m-width-auto",
      "top": "pf-m-top",
      "topLeft": "pf-m-top-left",
      "topRight": "pf-m-top-right",
      "bottom": "pf-m-bottom",
      "bottomLeft": "pf-m-bottom-left",
      "bottomRight": "pf-m-bottom-right",
      "left": "pf-m-left",
      "leftTop": "pf-m-left-top",
      "leftBottom": "pf-m-left-bottom",
      "right": "pf-m-right",
      "rightTop": "pf-m-right-top",
      "rightBottom": "pf-m-right-bottom",
      "danger": "pf-m-danger",
      "warning": "pf-m-warning",
      "success": "pf-m-success",
      "custom": "pf-m-custom",
      "info": "pf-m-info"
    },
    "popover": "pf-v6-c-popover",
    "popoverArrow": "pf-v6-c-popover__arrow",
    "popoverBody": "pf-v6-c-popover__body",
    "popoverClose": "pf-v6-c-popover__close",
    "popoverContent": "pf-v6-c-popover__content",
    "popoverFooter": "pf-v6-c-popover__footer",
    "popoverHeader": "pf-v6-c-popover__header",
    "popoverTitle": "pf-v6-c-popover__title",
    "popoverTitleIcon": "pf-v6-c-popover__title-icon",
    "popoverTitleText": "pf-v6-c-popover__title-text"
  };

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-core/dist/esm/components/Popover/PopoverContext.js
  var React90 = __toESM(require_react());
  var PopoverContext = React90.createContext({});

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-core/dist/esm/components/Popover/PopoverContent.js
  var React91 = __toESM(require_react());
  var PopoverContent = (_a) => {
    var { className = null, children } = _a, props = __rest(_a, ["className", "children"]);
    return React91.createElement("div", Object.assign({ className: css2(popover_default.popoverContent, className) }, props), children);
  };
  PopoverContent.displayName = "PopoverContent";

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-core/dist/esm/components/Popover/PopoverBody.js
  var React92 = __toESM(require_react());
  var PopoverBody = (_a) => {
    var { children, id, className } = _a, props = __rest(_a, ["children", "id", "className"]);
    return React92.createElement("div", Object.assign({ className: css2(popover_default.popoverBody, className), id }, props), children);
  };
  PopoverBody.displayName = "PopoverBody";

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-core/dist/esm/components/Popover/PopoverHeader.js
  var React95 = __toESM(require_react());

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-core/dist/esm/components/Popover/PopoverHeaderIcon.js
  var React93 = __toESM(require_react());
  var PopoverHeaderIcon = (_a) => {
    var { children, className } = _a, props = __rest(_a, ["children", "className"]);
    return React93.createElement("span", Object.assign({ className: css2(popover_default.popoverTitleIcon, className) }, props), children);
  };
  PopoverHeaderIcon.displayName = "PopoverHeaderIcon";

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-core/dist/esm/components/Popover/PopoverHeaderText.js
  var React94 = __toESM(require_react());
  var PopoverHeaderText = (_a) => {
    var { children, className, headingLevel } = _a, props = __rest(_a, ["children", "className", "headingLevel"]);
    const HeadingLevel = headingLevel;
    return React94.createElement(HeadingLevel, Object.assign({ className: css2(popover_default.popoverTitleText, className) }, props), children);
  };
  PopoverHeaderText.displayName = "PopoverHeaderText";

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-core/dist/esm/components/Popover/PopoverHeader.js
  var PopoverHeader = (_a) => {
    var { children, icon, className, titleHeadingLevel = "h6", alertSeverityVariant, id, alertSeverityScreenReaderText } = _a, props = __rest(_a, ["children", "icon", "className", "titleHeadingLevel", "alertSeverityVariant", "id", "alertSeverityScreenReaderText"]);
    return React95.createElement(
      "header",
      Object.assign({ className: css2(popover_default.popoverHeader, className) }, props),
      React95.createElement(
        "div",
        { className: css2(popover_default.popoverTitle), id },
        icon && React95.createElement(PopoverHeaderIcon, null, icon),
        React95.createElement(
          PopoverHeaderText,
          { headingLevel: titleHeadingLevel },
          alertSeverityVariant && alertSeverityScreenReaderText && React95.createElement("span", { className: "pf-v6-screen-reader" }, alertSeverityScreenReaderText),
          children
        )
      )
    );
  };
  PopoverHeader.displayName = "PopoverHeader";

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-core/dist/esm/components/Popover/PopoverFooter.js
  var React96 = __toESM(require_react());
  var PopoverFooter = (_a) => {
    var { children, className = "" } = _a, props = __rest(_a, ["children", "className"]);
    return React96.createElement("footer", Object.assign({ className: css2(popover_default.popoverFooter, className) }, props), children);
  };
  PopoverFooter.displayName = "PopoverFooter";

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-core/dist/esm/components/Popover/PopoverCloseButton.js
  var React97 = __toESM(require_react());

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-icons/dist/esm/icons/times-icon.js
  var TimesIconConfig = {
    name: "TimesIcon",
    height: 512,
    width: 352,
    svgPath: "M242.72 256l100.07-100.07c12.28-12.28 12.28-32.19 0-44.48l-22.24-22.24c-12.28-12.28-32.19-12.28-44.48 0L176 189.28 75.93 89.21c-12.28-12.28-32.19-12.28-44.48 0L9.21 111.45c-12.28 12.28-12.28 32.19 0 44.48L109.28 256 9.21 356.07c-12.28 12.28-12.28 32.19 0 44.48l22.24 22.24c12.28 12.28 32.2 12.28 44.48 0L176 322.72l100.07 100.07c12.28 12.28 32.2 12.28 44.48 0l22.24-22.24c12.28-12.28 12.28-32.19 0-44.48L242.72 256z",
    yOffset: 0,
    xOffset: 0
  };
  var TimesIcon = createIcon2(TimesIconConfig);
  var times_icon_default = TimesIcon;

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-core/dist/esm/components/Popover/PopoverCloseButton.js
  var PopoverCloseButton = (_a) => {
    var { onClose = () => void 0 } = _a, props = __rest(_a, ["onClose"]);
    return React97.createElement(
      "div",
      { className: css2(popover_default.popoverClose) },
      React97.createElement(Button2, Object.assign({ onClick: onClose, variant: "plain", "aria-label": true }, props, { style: { pointerEvents: "auto" }, icon: React97.createElement(times_icon_default, null) }))
    );
  };
  PopoverCloseButton.displayName = "PopoverCloseButton";

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-core/dist/esm/components/Popover/PopoverArrow.js
  var React98 = __toESM(require_react());
  var PopoverArrow = (_a) => {
    var { className = "" } = _a, props = __rest(_a, ["className"]);
    return React98.createElement("div", Object.assign({ className: css2(popover_default.popoverArrow, className) }, props));
  };
  PopoverArrow.displayName = "PopoverArrow";

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-tokens/dist/esm/c_popover_MaxWidth.js
  var c_popover_MaxWidth = {
    "name": "--pf-v6-c-popover--MaxWidth",
    "value": "none",
    "var": "var(--pf-v6-c-popover--MaxWidth)"
  };
  var c_popover_MaxWidth_default = c_popover_MaxWidth;

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-tokens/dist/esm/c_popover_MinWidth.js
  var c_popover_MinWidth = {
    "name": "--pf-v6-c-popover--MinWidth",
    "value": "auto",
    "var": "var(--pf-v6-c-popover--MinWidth)"
  };
  var c_popover_MinWidth_default = c_popover_MinWidth;

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-core/dist/esm/components/Popover/Popover.js
  var PopoverPosition;
  (function(PopoverPosition2) {
    PopoverPosition2["auto"] = "auto";
    PopoverPosition2["top"] = "top";
    PopoverPosition2["bottom"] = "bottom";
    PopoverPosition2["left"] = "left";
    PopoverPosition2["right"] = "right";
    PopoverPosition2["topStart"] = "top-start";
    PopoverPosition2["topEnd"] = "top-end";
    PopoverPosition2["bottomStart"] = "bottom-start";
    PopoverPosition2["bottomEnd"] = "bottom-end";
    PopoverPosition2["leftStart"] = "left-start";
    PopoverPosition2["leftEnd"] = "left-end";
    PopoverPosition2["rightStart"] = "right-start";
    PopoverPosition2["rightEnd"] = "right-end";
  })(PopoverPosition || (PopoverPosition = {}));
  var alertStyle = {
    custom: popover_default.modifiers.custom,
    info: popover_default.modifiers.info,
    success: popover_default.modifiers.success,
    warning: popover_default.modifiers.warning,
    danger: popover_default.modifiers.danger
  };
  var Popover = (_a) => {
    var { children, position = "top", enableFlip = true, className = "", isVisible = null, shouldClose = () => null, shouldOpen = () => null, "aria-label": ariaLabel = "", bodyContent, headerContent = null, headerComponent = "h6", headerIcon = null, alertSeverityVariant, alertSeverityScreenReaderText, footerContent = null, appendTo = () => document.body, hideOnOutsideClick = true, onHide = () => null, onHidden = () => null, onShow = () => null, onShown = () => null, onMount = () => null, zIndex = 9999, triggerAction = "click", minWidth = c_popover_MinWidth_default && c_popover_MinWidth_default.value, maxWidth = c_popover_MaxWidth_default && c_popover_MaxWidth_default.value, closeBtnAriaLabel = "Close", showClose = true, distance = 25, flipBehavior = [
      "top",
      "bottom",
      "left",
      "right",
      "top-start",
      "top-end",
      "bottom-start",
      "bottom-end",
      "left-start",
      "left-end",
      "right-start",
      "right-end"
    ], animationDuration = 300, id, withFocusTrap: propWithFocusTrap, triggerRef, hasNoPadding = false, hasAutoWidth = false, elementToFocus } = _a, rest = __rest(_a, ["children", "position", "enableFlip", "className", "isVisible", "shouldClose", "shouldOpen", "aria-label", "bodyContent", "headerContent", "headerComponent", "headerIcon", "alertSeverityVariant", "alertSeverityScreenReaderText", "footerContent", "appendTo", "hideOnOutsideClick", "onHide", "onHidden", "onShow", "onShown", "onMount", "zIndex", "triggerAction", "minWidth", "maxWidth", "closeBtnAriaLabel", "showClose", "distance", "flipBehavior", "animationDuration", "id", "withFocusTrap", "triggerRef", "hasNoPadding", "hasAutoWidth", "elementToFocus"]);
    const uniqueId = id || getUniqueId2();
    const triggerManually = isVisible !== null;
    const [visible, setVisible] = React99.useState(false);
    const [focusTrapActive, setFocusTrapActive] = React99.useState(Boolean(propWithFocusTrap));
    const popoverRef = React99.useRef(null);
    React99.useEffect(() => {
      onMount();
    }, []);
    React99.useEffect(() => {
      if (triggerManually) {
        if (isVisible) {
          show(void 0, true);
        } else {
          hide3();
        }
      }
    }, [isVisible, triggerManually]);
    const show = (event, withFocusTrap) => {
      event && onShow(event);
      setVisible(true);
      propWithFocusTrap !== false && withFocusTrap && setFocusTrapActive(true);
    };
    const hide3 = (event) => {
      event && onHide(event);
      setVisible(false);
    };
    const positionModifiers = {
      top: popover_default.modifiers.top,
      bottom: popover_default.modifiers.bottom,
      left: popover_default.modifiers.left,
      right: popover_default.modifiers.right,
      "top-start": popover_default.modifiers.topLeft,
      "top-end": popover_default.modifiers.topRight,
      "bottom-start": popover_default.modifiers.bottomLeft,
      "bottom-end": popover_default.modifiers.bottomRight,
      "left-start": popover_default.modifiers.leftTop,
      "left-end": popover_default.modifiers.leftBottom,
      "right-start": popover_default.modifiers.rightTop,
      "right-end": popover_default.modifiers.rightBottom
    };
    const hasCustomMinWidth = minWidth !== c_popover_MinWidth_default.value;
    const hasCustomMaxWidth = maxWidth !== c_popover_MaxWidth_default.value;
    const onDocumentKeyDown = (event) => {
      if (event.key === KeyTypes2.Escape && visible) {
        if (triggerManually) {
          shouldClose(event, hide3);
        } else {
          hide3(event);
        }
      }
    };
    const onDocumentClick = (event, triggerElement, popperElement) => {
      if (hideOnOutsideClick && visible) {
        const isFromChild = popperElement && popperElement.contains(event.target);
        const isFromTrigger = triggerElement && triggerElement.contains(event.target);
        if (isFromChild || isFromTrigger) {
          return;
        }
        if (triggerManually) {
          shouldClose(event, hide3);
        } else {
          hide3(event);
        }
      }
    };
    const onTriggerClick = (event) => {
      if (triggerManually) {
        if (visible) {
          shouldClose(event, hide3);
        } else {
          shouldOpen(event, show);
        }
      } else {
        if (visible) {
          hide3(event);
        } else {
          show(event, true);
        }
      }
    };
    const onContentMouseDown = () => {
      if (focusTrapActive) {
        setFocusTrapActive(false);
      }
    };
    const onMouseEnter = (event) => {
      if (triggerManually) {
        shouldOpen(event, show);
      } else {
        show(event, false);
      }
    };
    const onMouseLeave = (event) => {
      if (triggerManually) {
        shouldClose(event, hide3);
      } else {
        hide3(event);
      }
    };
    const onFocus = (event) => {
      if (triggerManually) {
        shouldOpen(event, show);
      } else {
        show(event, false);
      }
    };
    const onBlur = (event) => {
      if (triggerManually) {
        shouldClose(event, hide3);
      } else {
        hide3(event);
      }
    };
    const closePopover = (event) => {
      event.stopPropagation();
      if (triggerManually) {
        shouldClose(event, hide3);
      } else {
        hide3(event);
      }
    };
    const content = React99.createElement(
      FocusTrap,
      Object.assign({ ref: popoverRef, active: focusTrapActive, focusTrapOptions: {
        returnFocusOnDeactivate: propWithFocusTrap !== false,
        clickOutsideDeactivates: true,
        // FocusTrap's initialFocus can accept false as a value to prevent initial focus.
        // We want to prevent this in case false is ever passed in.
        initialFocus: elementToFocus || void 0,
        checkCanFocusTrap: (containers) => new Promise((resolve) => {
          const interval = setInterval(() => {
            if (containers.every((container) => getComputedStyle(container).visibility !== "hidden")) {
              resolve();
              clearInterval(interval);
            }
          }, 10);
        }),
        tabbableOptions: { displayCheck: "none" },
        fallbackFocus: () => {
          let node = null;
          if (document && document.activeElement) {
            node = document.activeElement;
          }
          return node;
        }
      }, preventScrollOnDeactivate: true, className: css2(popover_default.popover, alertSeverityVariant && alertStyle[alertSeverityVariant], hasNoPadding && popover_default.modifiers.noPadding, hasAutoWidth && popover_default.modifiers.widthAuto, className), role: "dialog", "aria-modal": "true", "aria-label": headerContent ? void 0 : ariaLabel, "aria-labelledby": headerContent ? `popover-${uniqueId}-header` : void 0, "aria-describedby": `popover-${uniqueId}-body`, onMouseDown: onContentMouseDown, style: {
        minWidth: hasCustomMinWidth ? minWidth : null,
        maxWidth: hasCustomMaxWidth ? maxWidth : null
      } }, rest),
      React99.createElement(PopoverArrow, null),
      React99.createElement(
        PopoverContent,
        null,
        showClose && triggerAction === "click" && React99.createElement(PopoverCloseButton, { onClose: closePopover, "aria-label": closeBtnAriaLabel }),
        headerContent && React99.createElement(PopoverHeader, { id: `popover-${uniqueId}-header`, icon: headerIcon, alertSeverityVariant, alertSeverityScreenReaderText: alertSeverityScreenReaderText || `${alertSeverityVariant} alert:`, titleHeadingLevel: headerComponent }, typeof headerContent === "function" ? headerContent(hide3) : headerContent),
        React99.createElement(PopoverBody, { id: `popover-${uniqueId}-body` }, typeof bodyContent === "function" ? bodyContent(hide3) : bodyContent),
        footerContent && React99.createElement(PopoverFooter, { id: `popover-${uniqueId}-footer` }, typeof footerContent === "function" ? footerContent(hide3) : footerContent)
      )
    );
    return React99.createElement(
      PopoverContext.Provider,
      { value: { headerComponent } },
      React99.createElement(Popper2, { trigger: children, triggerRef, popper: content, popperRef: popoverRef, minWidth, appendTo, isVisible: visible, onMouseEnter: triggerAction === "hover" && onMouseEnter, onMouseLeave: triggerAction === "hover" && onMouseLeave, onPopperMouseEnter: triggerAction === "hover" && onMouseEnter, onPopperMouseLeave: triggerAction === "hover" && onMouseLeave, onFocus: triggerAction === "hover" && onFocus, onBlur: triggerAction === "hover" && onBlur, positionModifiers, distance, placement: position, onTriggerClick: triggerAction === "click" && onTriggerClick, onDocumentClick, onDocumentKeyDown, enableFlip, zIndex, flipBehavior, animationDuration, onHidden, onShown, onHide: () => setFocusTrapActive(false) })
    );
  };
  Popover.displayName = "Popover";

  // node_modules/@patternfly/react-table/dist/esm/components/Table/TableText.js
  var React100 = __toESM(require_react());
  var TableTextVariant;
  (function(TableTextVariant2) {
    TableTextVariant2["div"] = "div";
    TableTextVariant2["nav"] = "nav";
  })(TableTextVariant || (TableTextVariant = {}));
  var WrapModifier;
  (function(WrapModifier2) {
    WrapModifier2["wrap"] = "wrap";
    WrapModifier2["nowrap"] = "nowrap";
    WrapModifier2["truncate"] = "truncate";
    WrapModifier2["breakWord"] = "breakWord";
    WrapModifier2["fitContent"] = "fitContent";
  })(WrapModifier || (WrapModifier = {}));
  var TableText = (_a) => {
    var { children = null, className = "", variant = "span", wrapModifier = null, tooltip: tooltipProp = "", tooltipProps = {}, onMouseEnter: onMouseEnterProp = () => {
    }, focused = false, tooltipHasDefaultBehavior = false } = _a, props = __rest(_a, ["children", "className", "variant", "wrapModifier", "tooltip", "tooltipProps", "onMouseEnter", "focused", "tooltipHasDefaultBehavior"]);
    const Component20 = variant;
    const textRef = React100.createRef();
    const [tooltip, setTooltip] = React100.useState(tooltipProp);
    const onMouseEnter = (event) => {
      if (event.target.offsetWidth < event.target.scrollWidth) {
        setTooltip(tooltipProp || event.target.innerText);
      } else {
        setTooltip("");
      }
      onMouseEnterProp(event);
    };
    const onFocus = (element) => {
      if (element.offsetWidth < element.scrollWidth) {
        setTooltip(tooltipProp || element.innerText);
      } else {
        setTooltip("");
      }
    };
    const text = React100.createElement(Component20, Object.assign({ ref: textRef, onMouseEnter: !tooltipHasDefaultBehavior ? onMouseEnter : void 0, className: css2(className, wrapModifier && table_default.modifiers[wrapModifier], table_default.tableText) }, props), children);
    React100.useEffect(() => {
      if (!tooltipHasDefaultBehavior) {
        if (focused) {
          onFocus(textRef.current);
        } else {
          setTooltip("");
        }
      }
    }, [focused, tooltipHasDefaultBehavior]);
    return tooltip !== "" ? React100.createElement(Tooltip2, Object.assign({ triggerRef: textRef, content: tooltip }, !tooltipHasDefaultBehavior && { isVisible: true }, tooltipProps), text) : text;
  };
  TableText.displayName = "TableText";

  // node_modules/@patternfly/react-table/dist/esm/components/Table/HeaderCellInfoWrapper.js
  var HeaderCellInfoWrapper = ({ children, info: info2, className, variant = "tooltip", popoverProps, tooltipProps, ariaLabel }) => React101.createElement(
    "div",
    { className: css2(table_default.tableColumnHelp, className) },
    typeof children === "string" ? React101.createElement(TableText, null, children) : children,
    React101.createElement("span", { className: css2(table_default.tableColumnHelpAction) }, variant === "tooltip" ? React101.createElement(
      Tooltip2,
      Object.assign({ content: info2 }, tooltipProps),
      React101.createElement(Button2, { variant: "plain", hasNoPadding: true, "aria-label": ariaLabel || typeof info2 === "string" && info2 || "More info", icon: React101.createElement(help_icon_default, null) })
    ) : React101.createElement(
      Popover,
      Object.assign({ bodyContent: info2 }, popoverProps),
      React101.createElement(Button2, { variant: "plain", hasNoPadding: true, "aria-label": ariaLabel || typeof info2 === "string" && info2 || "More info", icon: React101.createElement(help_icon_default, null) })
    ))
  );
  HeaderCellInfoWrapper.displayName = "HeaderCellInfoWrapper";

  // node_modules/@patternfly/react-table/dist/esm/components/Table/Tr.js
  var React116 = __toESM(require_react());

  // node_modules/@patternfly/react-table/dist/esm/components/Table/Table.js
  var React115 = __toESM(require_react());

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-styles/css/components/Table/table-grid.mjs
  var table_grid_default = {
    "button": "pf-v6-c-button",
    "modifiers": {
      "grid": "pf-m-grid",
      "expandable": "pf-m-expandable",
      "expanded": "pf-m-expanded",
      "selected": "pf-m-selected",
      "compact": "pf-m-compact",
      "noPadding": "pf-m-no-padding",
      "hoverable": "pf-m-hoverable",
      "nowrap": "pf-m-nowrap",
      "fitContent": "pf-m-fit-content",
      "truncate": "pf-m-truncate",
      "gridMd": "pf-m-grid-md",
      "gridLg": "pf-m-grid-lg",
      "gridXl": "pf-m-grid-xl",
      "grid_2xl": "pf-m-grid-2xl"
    },
    "table": "pf-v6-c-table",
    "tableAction": "pf-v6-c-table__action",
    "tableButton": "pf-v6-c-table__button",
    "tableCheck": "pf-v6-c-table__check",
    "tableCompoundExpansionToggle": "pf-v6-c-table__compound-expansion-toggle",
    "tableExpandableRow": "pf-v6-c-table__expandable-row",
    "tableExpandableRowContent": "pf-v6-c-table__expandable-row-content",
    "tableFavorite": "pf-v6-c-table__favorite",
    "tableIcon": "pf-v6-c-table__icon",
    "tableInlineEditAction": "pf-v6-c-table__inline-edit-action",
    "tableTbody": "pf-v6-c-table__tbody",
    "tableTd": "pf-v6-c-table__td",
    "tableText": "pf-v6-c-table__text",
    "tableTh": "pf-v6-c-table__th",
    "tableThead": "pf-v6-c-table__thead",
    "tableToggle": "pf-v6-c-table__toggle",
    "tableToggleIcon": "pf-v6-c-table__toggle-icon",
    "tableTr": "pf-v6-c-table__tr"
  };

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-styles/css/components/Table/table-tree-view.mjs
  var table_tree_view_default = {
    "button": "pf-v6-c-button",
    "dirRtl": "pf-v6-m-dir-rtl",
    "modifiers": {
      "treeView": "pf-m-tree-view",
      "noInset": "pf-m-no-inset",
      "treeViewGrid": "pf-m-tree-view-grid",
      "borderRight": "pf-m-border-right",
      "treeViewDetailsExpanded": "pf-m-tree-view-details-expanded",
      "treeViewGridMd": "pf-m-tree-view-grid-md",
      "treeViewGridLg": "pf-m-tree-view-grid-lg",
      "treeViewGridXl": "pf-m-tree-view-grid-xl",
      "treeViewGrid_2xl": "pf-m-tree-view-grid-2xl"
    },
    "table": "pf-v6-c-table",
    "tableAction": "pf-v6-c-table__action",
    "tableCheck": "pf-v6-c-table__check",
    "tableTbody": "pf-v6-c-table__tbody",
    "tableTd": "pf-v6-c-table__td",
    "tableTh": "pf-v6-c-table__th",
    "tableThead": "pf-v6-c-table__thead",
    "tableToggle": "pf-v6-c-table__toggle",
    "tableToggleIcon": "pf-v6-c-table__toggle-icon",
    "tableTr": "pf-v6-c-table__tr",
    "tableTreeViewDetailsToggle": "pf-v6-c-table__tree-view-details-toggle",
    "tableTreeViewIcon": "pf-v6-c-table__tree-view-icon",
    "tableTreeViewMain": "pf-v6-c-table__tree-view-main",
    "tableTreeViewText": "pf-v6-c-table__tree-view-text",
    "tableTreeViewTitleCell": "pf-v6-c-table__tree-view-title-cell"
  };

  // node_modules/@patternfly/react-table/dist/esm/components/Table/utils/decorators/selectable.js
  var React103 = __toESM(require_react());

  // node_modules/@patternfly/react-table/dist/esm/components/Table/SelectColumn.js
  var React102 = __toESM(require_react());
  var RowSelectVariant;
  (function(RowSelectVariant2) {
    RowSelectVariant2["radio"] = "radio";
    RowSelectVariant2["checkbox"] = "checkbox";
  })(RowSelectVariant || (RowSelectVariant = {}));
  var SelectColumn = (_a) => {
    var {
      children = null,
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      className,
      onSelect = null,
      selectVariant,
      tooltip,
      tooltipProps
    } = _a, props = __rest(_a, ["children", "className", "onSelect", "selectVariant", "tooltip", "tooltipProps"]);
    const inputRef = React102.createRef();
    const content = React102.createElement(
      React102.Fragment,
      null,
      React102.createElement(
        "label",
        null,
        React102.createElement("input", Object.assign({}, props, { ref: inputRef, type: selectVariant, onChange: onSelect }))
      ),
      children
    );
    return tooltip ? React102.createElement(Tooltip2, Object.assign({ triggerRef: inputRef, content: tooltip }, tooltipProps), content) : content;
  };
  SelectColumn.displayName = "SelectColumn";

  // node_modules/@patternfly/react-table/dist/esm/components/Table/utils/decorators/selectable.js
  var selectable = (label, { rowIndex, columnIndex, rowData, column, property, tooltip }) => {
    const { extraParams: { onSelect, selectVariant, allRowsSelected, isHeaderSelectDisabled } } = column;
    const extraData = {
      rowIndex,
      columnIndex,
      column,
      property
    };
    if (rowData && rowData.hasOwnProperty("parent") && !rowData.showSelect && !rowData.fullWidth) {
      return {
        component: "td",
        isVisible: true
      };
    }
    const rowId = rowIndex !== void 0 ? rowIndex : -1;
    function selectClick(event) {
      const selected = rowIndex === void 0 ? event.currentTarget.checked : rowData && !rowData.selected;
      onSelect && onSelect(event, selected, rowId, rowData, extraData);
    }
    const customProps = Object.assign(Object.assign(Object.assign({}, rowId !== -1 ? {
      checked: rowData && !!rowData.selected,
      "aria-label": `Select row ${rowIndex}`
    } : {
      checked: allRowsSelected,
      "aria-label": "Select all rows"
    }), rowData && (rowData.disableCheckbox || rowData.disableSelection) && {
      disabled: true,
      className: check_default2.checkInput
    }), !rowData && isHeaderSelectDisabled && { disabled: true });
    let selectName = "check-all";
    if (rowId !== -1 && selectVariant === RowSelectVariant.checkbox) {
      selectName = `checkrow${rowIndex}`;
    } else if (rowId !== -1) {
      selectName = "radioGroup";
    }
    return {
      className: css2(table_default.tableCheck),
      component: rowId !== -1 ? "td" : "th",
      isVisible: !rowData || !rowData.fullWidth,
      children: React103.createElement(SelectColumn, Object.assign({}, customProps, { selectVariant, onSelect: selectClick, name: selectName, tooltip }), label)
    };
  };

  // node_modules/@patternfly/react-table/dist/esm/components/Table/utils/decorators/sortable.js
  var React107 = __toESM(require_react());

  // node_modules/@patternfly/react-table/dist/esm/components/Table/SortColumn.js
  var React106 = __toESM(require_react());

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-icons/dist/esm/icons/long-arrow-alt-up-icon.js
  var LongArrowAltUpIconConfig = {
    name: "LongArrowAltUpIcon",
    height: 512,
    width: 256,
    svgPath: "M88 166.059V468c0 6.627 5.373 12 12 12h56c6.627 0 12-5.373 12-12V166.059h46.059c21.382 0 32.09-25.851 16.971-40.971l-86.059-86.059c-9.373-9.373-24.569-9.373-33.941 0l-86.059 86.059c-15.119 15.119-4.411 40.971 16.971 40.971H88z",
    yOffset: 0,
    xOffset: 0
  };
  var LongArrowAltUpIcon = createIcon2(LongArrowAltUpIconConfig);
  var long_arrow_alt_up_icon_default = LongArrowAltUpIcon;

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-icons/dist/esm/icons/long-arrow-alt-down-icon.js
  var LongArrowAltDownIconConfig = {
    name: "LongArrowAltDownIcon",
    height: 512,
    width: 256,
    svgPath: "M168 345.941V44c0-6.627-5.373-12-12-12h-56c-6.627 0-12 5.373-12 12v301.941H41.941c-21.382 0-32.09 25.851-16.971 40.971l86.059 86.059c9.373 9.373 24.569 9.373 33.941 0l86.059-86.059c15.119-15.119 4.411-40.971-16.971-40.971H168z",
    yOffset: 0,
    xOffset: 0
  };
  var LongArrowAltDownIcon = createIcon2(LongArrowAltDownIconConfig);
  var long_arrow_alt_down_icon_default = LongArrowAltDownIcon;

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-icons/dist/esm/icons/arrows-alt-v-icon.js
  var ArrowsAltVIconConfig = {
    name: "ArrowsAltVIcon",
    height: 512,
    width: 256,
    svgPath: "M214.059 377.941H168V134.059h46.059c21.382 0 32.09-25.851 16.971-40.971L144.971 7.029c-9.373-9.373-24.568-9.373-33.941 0L24.971 93.088c-15.119 15.119-4.411 40.971 16.971 40.971H88v243.882H41.941c-21.382 0-32.09 25.851-16.971 40.971l86.059 86.059c9.373 9.373 24.568 9.373 33.941 0l86.059-86.059c15.12-15.119 4.412-40.971-16.97-40.971z",
    yOffset: 0,
    xOffset: 0
  };
  var ArrowsAltVIcon = createIcon2(ArrowsAltVIconConfig);
  var arrows_alt_v_icon_default = ArrowsAltVIcon;

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-core/dist/esm/components/ActionList/ActionList.js
  var React104 = __toESM(require_react());

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-styles/css/components/ActionList/action-list.mjs
  var action_list_default = {
    "actionList": "pf-v6-c-action-list",
    "actionListGroup": "pf-v6-c-action-list__group",
    "modifiers": {
      "icons": "pf-m-icons"
    }
  };

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-core/dist/esm/components/ActionList/ActionList.js
  var ActionList = (_a) => {
    var { children, isIconList, className } = _a, props = __rest(_a, ["children", "isIconList", "className"]);
    return React104.createElement("div", Object.assign({ className: css2(action_list_default.actionList, isIconList && action_list_default.modifiers.icons, className) }, props), children);
  };
  ActionList.displayName = "ActionList";

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-core/dist/esm/components/ActionList/ActionListItem.js
  var React105 = __toESM(require_react());
  var ActionListItem = (_a) => {
    var { children, className } = _a, props = __rest(_a, ["children", "className"]);
    return React105.createElement("div", Object.assign({ className: css2(`${action_list_default.actionList}__item`, className) }, props), children);
  };
  ActionListItem.displayName = "ActionListItem";

  // node_modules/@patternfly/react-table/dist/esm/components/Table/SortColumn.js
  var SortByDirection;
  (function(SortByDirection2) {
    SortByDirection2["asc"] = "asc";
    SortByDirection2["desc"] = "desc";
  })(SortByDirection || (SortByDirection = {}));
  var SortColumn = (_a) => {
    var { children = null, className = "", isSortedBy = false, onSort = null, sortDirection = "", type = "button", tooltip, tooltipProps, tooltipHasDefaultBehavior, favoriteButtonProps } = _a, props = __rest(_a, ["children", "className", "isSortedBy", "onSort", "sortDirection", "type", "tooltip", "tooltipProps", "tooltipHasDefaultBehavior", "favoriteButtonProps"]);
    let SortedByIcon;
    const [focused, setFocused] = React106.useState(false);
    if (isSortedBy) {
      SortedByIcon = sortDirection === SortByDirection.asc ? long_arrow_alt_up_icon_default : long_arrow_alt_down_icon_default;
    } else {
      SortedByIcon = arrows_alt_v_icon_default;
    }
    if (favoriteButtonProps) {
      return React106.createElement(
        ActionList,
        { isIconList: true },
        React106.createElement(
          ActionListItem,
          null,
          React106.createElement(Button2, Object.assign({ variant: "plain", icon: React106.createElement(star_icon_default2, null) }, favoriteButtonProps))
        ),
        React106.createElement(
          ActionListItem,
          null,
          React106.createElement(Button2, Object.assign({ variant: "plain", icon: React106.createElement(
            "span",
            { className: css2(table_default.tableSortIndicator) },
            React106.createElement(SortedByIcon, null)
          ), onClick: (event) => onSort && onSort(event) }, props))
        )
      );
    }
    return React106.createElement(
      "button",
      Object.assign({}, props, { type, className: css2(className, table_default.tableButton), onClick: (event) => onSort && onSort(event), onFocus: () => setFocused(true), onBlur: () => setFocused(false) }),
      React106.createElement(
        "div",
        { className: css2(className, table_default.tableButtonContent) },
        React106.createElement(TableText, { tooltip, tooltipProps, tooltipHasDefaultBehavior, focused }, children),
        React106.createElement(
          "span",
          { className: css2(table_default.tableSortIndicator) },
          React106.createElement(SortedByIcon, null)
        )
      )
    );
  };
  SortColumn.displayName = "SortColumn";

  // node_modules/@patternfly/react-table/dist/esm/components/Table/utils/decorators/sortable.js
  var sortableFavorites = (sort) => () => {
    var _a;
    return sortable(React107.createElement(star_icon_default2, { "aria-hidden": true }), {
      columnIndex: sort.columnIndex,
      className: table_default.tableFavorite,
      ariaLabel: (_a = sort.ariaLabel) !== null && _a !== void 0 ? _a : "Sort favorites",
      column: {
        extraParams: {
          sortBy: sort.sortBy,
          onSort: sort.onSort,
          favoriteButtonProps: sort.favoriteButtonProps
        }
      },
      tooltip: sort.tooltip,
      tooltipProps: sort.tooltipProps,
      tooltipHasDefaultBehavior: true
    });
  };
  var sortable = (label, { columnIndex, column, property, className, ariaLabel, tooltip, tooltipProps, tooltipHasDefaultBehavior }) => {
    const { extraParams: { sortBy, onSort, favoriteButtonProps } } = column;
    const extraData = {
      columnIndex,
      column,
      property
    };
    const isSortedBy = sortBy && columnIndex === sortBy.index;
    function sortClicked(event) {
      let reversedDirection;
      if (!isSortedBy) {
        reversedDirection = sortBy.defaultDirection ? sortBy.defaultDirection : SortByDirection.asc;
      } else {
        reversedDirection = sortBy.direction === SortByDirection.asc ? SortByDirection.desc : SortByDirection.asc;
      }
      onSort && onSort(event, columnIndex, reversedDirection, extraData);
    }
    return Object.assign(Object.assign({ className: css2(table_default.tableSort, isSortedBy && table_default.modifiers.selected, className) }, isSortedBy && { "aria-sort": `${sortBy.direction}ending` }), { children: React107.createElement(SortColumn, { isSortedBy, sortDirection: isSortedBy ? sortBy.direction : "", onSort: sortClicked, "aria-label": ariaLabel, tooltip, tooltipProps, tooltipHasDefaultBehavior, favoriteButtonProps }, label) });
  };

  // node_modules/@patternfly/react-table/dist/esm/components/Table/utils/decorators/cellActions.js
  var React108 = __toESM(require_react());
  var resolveOrDefault = (resolver, defaultValue, rowData, extraData) => typeof resolver === "function" ? resolver(rowData, extraData) : defaultValue;
  var cellActions = (actions, actionResolver, areActionsDisabled) => (label, { rowData, column, rowIndex, columnIndex, column: { extraParams: { actionsToggle, actionsPopperProps } }, property }) => {
    const extraData = {
      rowIndex,
      columnIndex,
      column,
      property
    };
    const resolvedActions = resolveOrDefault(actionResolver, actions, rowData, extraData);
    const resolvedIsDisabled = resolveOrDefault(areActionsDisabled, rowData && rowData.disableActions, rowData, extraData);
    const renderProps = resolvedActions && resolvedActions.length > 0 ? {
      children: React108.createElement(ActionsColumn, { items: resolvedActions, isDisabled: resolvedIsDisabled, rowData, extraData, actionsToggle, popperProps: actionsPopperProps }, label)
    } : {};
    return Object.assign({ className: css2(table_default.tableAction), style: { paddingRight: 0 }, isVisible: true }, renderProps);
  };

  // node_modules/@patternfly/react-table/dist/esm/components/Table/utils/utils.js
  var camelize3 = (s) => s.toUpperCase().replace("-", "").replace("_", "");
  var toCamel3 = (s) => s.replace(/([-_][a-z])/gi, camelize3);
  function capitalize2(input) {
    return input[0].toUpperCase() + input.substring(1);
  }

  // node_modules/@patternfly/react-table/dist/esm/components/Table/utils/decorators/cellWidth.js
  var cellWidth = (width) => () => ({
    className: css2(table_default.modifiers[typeof width === "number" ? `width_${width}` : `width${capitalize2(width)}`])
  });

  // node_modules/@patternfly/react-table/dist/esm/components/Table/utils/decorators/collapsible.js
  var React109 = __toESM(require_react());
  var collapsible = (value, { rowIndex, columnIndex, rowData, column, property }) => {
    const { extraParams: { onCollapse, rowLabeledBy = "simple-node", expandId = "expand-toggle", allRowsExpanded, collapseAllAriaLabel } } = column;
    const extraData = {
      rowIndex,
      columnIndex,
      column,
      property
    };
    const rowId = rowIndex !== void 0 ? rowIndex : -1;
    const customProps = Object.assign({}, rowId !== -1 ? {
      isOpen: rowData === null || rowData === void 0 ? void 0 : rowData.isOpen,
      "aria-labelledby": `${rowLabeledBy}${rowId} ${expandId}${rowId}`
    } : {
      isOpen: allRowsExpanded,
      "aria-label": collapseAllAriaLabel || "Expand all rows"
    });
    function onToggle(event) {
      const open = rowData ? !rowData.isOpen : !allRowsExpanded;
      onCollapse && onCollapse(event, rowIndex, open, rowData, extraData);
    }
    return {
      className: ((rowData === null || rowData === void 0 ? void 0 : rowData.isOpen) !== void 0 || rowId === -1) && css2(table_default.tableToggle),
      isVisible: !(rowData === null || rowData === void 0 ? void 0 : rowData.fullWidth),
      children: React109.createElement(CollapseColumn, Object.assign({ "aria-labelledby": `${rowLabeledBy}${rowId} ${expandId}${rowId}`, onToggle, id: expandId + rowId }, customProps), value)
    };
  };

  // node_modules/@patternfly/react-table/dist/esm/components/Table/utils/decorators/compoundExpand.js
  var React110 = __toESM(require_react());
  var compoundExpand = (value, { rowIndex, columnIndex, rowData, column, property }) => {
    if (!value) {
      return null;
    }
    const { title, props } = value;
    const { extraParams: { onExpand, expandId = "expand-toggle" } } = column;
    const extraData = {
      rowIndex,
      columnIndex,
      column,
      property
    };
    function onToggle(event) {
      onExpand && onExpand(event, rowIndex, columnIndex, props.isOpen, rowData, extraData);
    }
    return {
      className: css2(table_default.tableCompoundExpansionToggle, props.isOpen && table_default.modifiers.expanded),
      children: props.isOpen !== void 0 && React110.createElement(
        "button",
        { type: "button", className: css2(table_default.tableButton), onClick: onToggle, "aria-expanded": props.isOpen, "aria-controls": props.ariaControls, id: `${expandId}-${rowIndex}-${columnIndex}` },
        React110.createElement(TableText, null, title)
      )
    };
  };

  // node_modules/@patternfly/react-table/dist/esm/components/Table/utils/decorators/classNames.js
  var visibilityModifiers = [
    "hidden",
    "hiddenOnSm",
    "hiddenOnMd",
    "hiddenOnLg",
    "hiddenOnXl",
    "hiddenOn_2xl",
    "visibleOnSm",
    "visibleOnMd",
    "visibleOnLg",
    "visibleOnXl",
    "visibleOn_2xl"
  ];
  var Visibility = visibilityModifiers.filter((key) => table_default.modifiers[key]).reduce((acc, curr) => {
    const key2 = curr.replace("_2xl", "2Xl");
    acc[key2] = table_default.modifiers[curr];
    return acc;
  }, {});
  var classNames = (...classes) => () => ({
    className: css2(...classes)
  });

  // node_modules/@patternfly/react-table/dist/esm/components/Table/utils/decorators/info.js
  var React111 = __toESM(require_react());
  var info = ({ tooltip, tooltipProps, popover, popoverProps, className, ariaLabel }) => {
    const infoObj = (value) => ({
      className: table_default.modifiers.help,
      children: tooltip ? React111.createElement(HeaderCellInfoWrapper, { variant: "tooltip", info: tooltip, tooltipProps, ariaLabel, className }, value) : React111.createElement(HeaderCellInfoWrapper, { variant: "popover", info: popover, popoverProps, ariaLabel, className }, value)
    });
    return infoObj;
  };

  // node_modules/@patternfly/react-table/dist/esm/components/Table/utils/decorators/favoritable.js
  var React113 = __toESM(require_react());

  // node_modules/@patternfly/react-table/dist/esm/components/Table/FavoritesCell.js
  var React112 = __toESM(require_react());
  var FavoritesCell = (_a) => {
    var { className = "", onFavorite, isFavorited, rowIndex } = _a, props = __rest(_a, ["className", "onFavorite", "isFavorited", "rowIndex"]);
    const ariaProps = rowIndex === void 0 ? {} : {
      id: `favorites-button-${rowIndex}`,
      "aria-labelledby": `favorites-button-${rowIndex}`
    };
    return React112.createElement(Button2, Object.assign({ variant: "plain", className, type: "button", "aria-label": isFavorited ? "Starred" : "Not starred", onClick: onFavorite }, ariaProps, props, { icon: React112.createElement(star_icon_default2, { "aria-hidden": true }) }));
  };
  FavoritesCell.displayName = "FavoritesCell";

  // node_modules/@patternfly/react-table/dist/esm/components/Table/utils/decorators/favoritable.js
  var favoritable = (value, { rowIndex, columnIndex, rowData, column, property }) => {
    const { extraParams: { onFavorite } } = column;
    const extraData = {
      rowIndex,
      columnIndex,
      column,
      property
    };
    if (rowData && rowData.hasOwnProperty("parent") && !rowData.fullWidth) {
      return {
        component: "td",
        isVisible: true
      };
    }
    function favoritesClick(event) {
      onFavorite && onFavorite(event, rowData && !rowData.favorited, rowIndex, rowData, extraData);
    }
    const additionalProps = rowData.favoritesProps || {};
    return {
      className: css2(table_default.tableFavorite, rowData && rowData.favorited && table_default.modifiers.favorited),
      isVisible: !rowData || !rowData.fullWidth,
      children: React113.createElement(FavoritesCell, Object.assign({ rowIndex, onFavorite: favoritesClick, isFavorited: rowData && rowData.favorited }, additionalProps))
    };
  };

  // node_modules/@patternfly/react-table/dist/esm/components/Table/utils/decorators/treeRow.js
  var React114 = __toESM(require_react());

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-icons/dist/esm/icons/ellipsis-h-icon.js
  var EllipsisHIconConfig = {
    name: "EllipsisHIcon",
    height: 512,
    width: 512,
    svgPath: "M328 256c0 39.8-32.2 72-72 72s-72-32.2-72-72 32.2-72 72-72 72 32.2 72 72zm104-72c-39.8 0-72 32.2-72 72s32.2 72 72 72 72-32.2 72-72-32.2-72-72-72zm-352 0c-39.8 0-72 32.2-72 72s32.2 72 72 72 72-32.2 72-72-32.2-72-72-72z",
    yOffset: 0,
    xOffset: 0
  };
  var EllipsisHIcon = createIcon2(EllipsisHIconConfig);
  var ellipsis_h_icon_default = EllipsisHIcon;

  // node_modules/@patternfly/react-table/dist/esm/components/Table/utils/decorators/treeRow.js
  var treeRow = (onCollapse, onCheckChange, onToggleRowDetails) => (value, { rowIndex, rowData }) => {
    const { isExpanded, isDetailsExpanded, "aria-level": level, "aria-setsize": setsize, toggleAriaLabel, checkAriaLabel, showDetailsAriaLabel, isChecked, checkboxId, icon } = rowData.props;
    const content = value.title || value;
    const text = React114.createElement(
      "div",
      { className: css2(table_tree_view_default.tableTreeViewText), key: "tree-view-text" },
      icon && React114.createElement("span", { className: css2(table_tree_view_default.tableTreeViewIcon), key: "tree-view-text-icon" }, icon),
      React114.createElement("span", { className: table_default.tableText, key: "table-text" }, content)
    );
    const onChange = (isChecked2, event) => {
      onCheckChange(event, isChecked2, rowIndex, content, rowData);
    };
    return {
      component: "th",
      className: table_tree_view_default.tableTreeViewTitleCell,
      children: level !== void 0 ? React114.createElement(
        "div",
        { className: css2(table_tree_view_default.tableTreeViewMain) },
        setsize > 0 && React114.createElement(
          "span",
          { className: css2(table_tree_view_default.tableToggle), key: "table-toggle" },
          React114.createElement(Button2, { variant: "plain", onClick: (event) => onCollapse && onCollapse(event, rowIndex, content, rowData), className: css2(isExpanded && table_default.modifiers.expanded), "aria-expanded": isExpanded, "aria-label": toggleAriaLabel || `${isExpanded ? "Collapse" : "Expand"} row ${rowIndex}`, icon: React114.createElement(
            "div",
            { className: css2(table_tree_view_default.tableToggleIcon) },
            React114.createElement(angle_down_icon_default, { "aria-hidden": "true" })
          ) })
        ),
        !!onCheckChange && React114.createElement(
          "span",
          { className: css2(table_tree_view_default.tableCheck), key: "table-check" },
          React114.createElement(
            "label",
            { htmlFor: checkboxId || `checkbox_${rowIndex}` },
            React114.createElement(Checkbox2, { id: checkboxId || `checkbox_${rowIndex}`, "aria-label": checkAriaLabel || `Row ${rowIndex} checkbox`, isChecked, onChange: (event, checked) => onChange(checked, event) })
          )
        ),
        text,
        !!onToggleRowDetails && React114.createElement(
          "span",
          { className: css2(table_tree_view_default.tableTreeViewDetailsToggle), key: "view-details-toggle" },
          React114.createElement(Button2, { variant: "plain", "aria-expanded": isDetailsExpanded, "aria-label": showDetailsAriaLabel || "Show row details", onClick: (event) => onToggleRowDetails && onToggleRowDetails(event, rowIndex, content, rowData), icon: React114.createElement(
            "span",
            { className: `${table_default.table}__details-toggle-icon` },
            React114.createElement(ellipsis_h_icon_default, { "aria-hidden": true })
          ) })
        )
      ) : text
    };
  };

  // node_modules/@patternfly/react-table/dist/esm/components/Table/TableTypes.js
  var TableGridBreakpoint;
  (function(TableGridBreakpoint2) {
    TableGridBreakpoint2["none"] = "";
    TableGridBreakpoint2["grid"] = "grid";
    TableGridBreakpoint2["gridMd"] = "grid-md";
    TableGridBreakpoint2["gridLg"] = "grid-lg";
    TableGridBreakpoint2["gridXl"] = "grid-xl";
    TableGridBreakpoint2["grid2xl"] = "grid-2xl";
  })(TableGridBreakpoint || (TableGridBreakpoint = {}));
  var TableVariant;
  (function(TableVariant2) {
    TableVariant2["compact"] = "compact";
  })(TableVariant || (TableVariant = {}));

  // node_modules/@patternfly/react-table/dist/esm/components/Table/Table.js
  var TableContext = React115.createContext({
    registerSelectableRow: () => {
    }
  });
  var TableBase = (_a) => {
    var _b, _c;
    var {
      children,
      className,
      variant,
      borders = true,
      isStickyHeader = false,
      gridBreakPoint = TableGridBreakpoint.gridMd,
      "aria-label": ariaLabel,
      role = "grid",
      innerRef,
      ouiaId,
      ouiaSafe = true,
      isTreeTable = false,
      isNested = false,
      isStriped = false,
      isExpandable = false,
      hasNoInset = false,
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      nestedHeaderColumnSpans,
      selectableRowCaptionText
    } = _a, props = __rest(_a, ["children", "className", "variant", "borders", "isStickyHeader", "gridBreakPoint", "aria-label", "role", "innerRef", "ouiaId", "ouiaSafe", "isTreeTable", "isNested", "isStriped", "isExpandable", "hasNoInset", "nestedHeaderColumnSpans", "selectableRowCaptionText"]);
    const ref = React115.useRef(null);
    const tableRef = innerRef || ref;
    const [hasSelectableRows, setHasSelectableRows] = React115.useState(false);
    const [tableCaption, setTableCaption] = React115.useState();
    React115.useEffect(() => {
      document.addEventListener("keydown", handleKeys);
      if (tableRef && tableRef.current && tableRef.current.classList.contains("pf-m-tree-view")) {
        const tbody = tableRef.current.querySelector("tbody");
        tbody && setTabIndex(Array.from(tbody.querySelectorAll("button, a, input")));
      }
      return function cleanup() {
        document.removeEventListener("keydown", handleKeys);
      };
    }, [tableRef, tableRef.current]);
    React115.useEffect(() => {
      if (selectableRowCaptionText) {
        setTableCaption(React115.createElement(
          "caption",
          null,
          selectableRowCaptionText,
          React115.createElement("div", { className: "pf-v6-screen-reader" }, "This table has selectable rows. It can be navigated by row using tab, and each row can be selected using space or enter.")
        ));
      } else {
        setTableCaption(React115.createElement("caption", { className: "pf-v6-screen-reader" }, "This table has selectable rows. It can be navigated by row using tab, and each row can be selected using space or enter."));
      }
    }, [selectableRowCaptionText]);
    const ouiaProps = useOUIAProps2("Table", ouiaId, ouiaSafe);
    const grid = (_b = table_grid_default.modifiers) === null || _b === void 0 ? void 0 : _b[toCamel3(gridBreakPoint || "").replace(/-?2xl/, "_2xl")];
    const breakPointPrefix = `treeView${gridBreakPoint.charAt(0).toUpperCase() + gridBreakPoint.slice(1)}`;
    const treeGrid = (_c = table_tree_view_default.modifiers) === null || _c === void 0 ? void 0 : _c[toCamel3(breakPointPrefix || "").replace(/-?2xl/, "_2xl")];
    const handleKeys = (event) => {
      if (isNested || !(tableRef && tableRef.current && tableRef.current.classList.contains(table_tree_view_default.modifiers.treeView)) || // implements roving tab-index to tree tables only
      tableRef && tableRef.current !== event.target.closest(`.${table_default.table}:not(.pf-m-nested)`)) {
        return;
      }
      const activeElement = document.activeElement;
      const key = event.key;
      const rows = Array.from(tableRef.current.querySelectorAll("tbody tr")).filter((el) => !el.classList.contains("pf-m-disabled") && !el.hidden);
      if (key === KeyTypes2.Space || key === KeyTypes2.Enter) {
        activeElement.click();
        event.preventDefault();
      }
      const getFocusableElement = (element) => element.querySelectorAll("button:not(:disabled), input:not(:disabled), a:not(:disabled)")[0];
      handleArrows2(event, rows, (element) => element === activeElement.closest("tr"), getFocusableElement, ["button", "input", "a"], void 0, false, true, false);
    };
    const registerSelectableRow = () => {
      !hasSelectableRows && setHasSelectableRows(true);
    };
    return React115.createElement(
      TableContext.Provider,
      { value: { registerSelectableRow } },
      React115.createElement(
        "table",
        Object.assign({ "aria-label": ariaLabel, role, className: css2(className, table_default.table, isTreeTable ? treeGrid : grid, table_default.modifiers[variant], !borders && table_default.modifiers.noBorderRows, isStickyHeader && table_default.modifiers.stickyHeader, isTreeTable && table_tree_view_default.modifiers.treeView, isStriped && table_default.modifiers.striped, isExpandable && table_default.modifiers.expandable, hasNoInset && table_tree_view_default.modifiers.noInset, isNested && "pf-m-nested"), ref: tableRef }, isTreeTable && { role: "treegrid" }, ouiaProps, props),
        hasSelectableRows && tableCaption,
        children
      )
    );
  };
  var Table = React115.forwardRef((props, ref) => React115.createElement(TableBase, Object.assign({}, props, { innerRef: ref })));
  Table.displayName = "Table";

  // node_modules/@patternfly/react-table/dist/esm/components/Table/Tr.js
  var TrBase = (_a) => {
    var { children, className, isExpanded, isEditable, isHidden: isHidden3 = false, isClickable = false, isRowSelected = false, isStriped = false, isBorderRow = false, isControlRow = false, innerRef, ouiaId, ouiaSafe = true, resetOffset = false, onRowClick, isSelectable, "aria-label": passedAriaLabel } = _a, props = __rest(_a, ["children", "className", "isExpanded", "isEditable", "isHidden", "isClickable", "isRowSelected", "isStriped", "isBorderRow", "isControlRow", "innerRef", "ouiaId", "ouiaSafe", "resetOffset", "onRowClick", "isSelectable", "aria-label"]);
    const ouiaProps = useOUIAProps2("TableRow", ouiaId, ouiaSafe);
    const [computedAriaLabel, setComputedAriaLabel] = React116.useState("");
    let onKeyDown = null;
    if (onRowClick) {
      onKeyDown = (e) => {
        if (e.key === "Enter" || e.key === " ") {
          onRowClick(e);
          e.preventDefault();
        }
      };
    }
    const rowIsHidden = isHidden3 || isExpanded !== void 0 && !isExpanded;
    const { registerSelectableRow } = React116.useContext(TableContext);
    React116.useEffect(() => {
      if (isSelectable && !rowIsHidden) {
        setComputedAriaLabel(`${isRowSelected ? "Row selected" : ""}`);
        registerSelectableRow();
      } else {
        setComputedAriaLabel(void 0);
      }
    }, [isRowSelected, isSelectable, registerSelectableRow, rowIsHidden]);
    const ariaLabel = passedAriaLabel || computedAriaLabel;
    return React116.createElement(
      React116.Fragment,
      null,
      React116.createElement("tr", Object.assign({ className: css2(table_default.tableTr, className, isExpanded !== void 0 && table_default.tableExpandableRow, isExpanded && table_default.modifiers.expanded, isEditable && inline_edit_default.modifiers.inlineEditable, isClickable && table_default.modifiers.clickable, isRowSelected && table_default.modifiers.selected, isStriped && table_default.modifiers.striped, isBorderRow && table_default.modifiers.borderRow, isControlRow && table_default.tableControlRow, resetOffset && table_default.modifiers.firstCellOffsetReset), hidden: rowIsHidden }, isClickable && { tabIndex: 0 }, { "aria-label": ariaLabel, ref: innerRef }, onRowClick && { onClick: onRowClick, onKeyDown }, ouiaProps, props), children)
    );
  };
  var Tr = React116.forwardRef((props, ref) => React116.createElement(TrBase, Object.assign({}, props, { innerRef: ref })));
  Tr.displayName = "Tr";

  // node_modules/@patternfly/react-table/dist/esm/components/Table/Thead.js
  var React117 = __toESM(require_react());
  var TheadBase = (_a) => {
    var { children, className, noWrap = false, innerRef, hasNestedHeader } = _a, props = __rest(_a, ["children", "className", "noWrap", "innerRef", "hasNestedHeader"]);
    return React117.createElement("thead", Object.assign({ className: css2(table_default.tableThead, className, noWrap && table_default.modifiers.nowrap, hasNestedHeader && table_default.modifiers.nestedColumnHeader), ref: innerRef }, props), children);
  };
  var Thead = React117.forwardRef((props, ref) => React117.createElement(TheadBase, Object.assign({}, props, { innerRef: ref })));
  Thead.displayName = "Thead";

  // node_modules/@patternfly/react-table/dist/esm/components/Table/Tbody.js
  var React118 = __toESM(require_react());
  var TbodyBase = (_a) => {
    var { children, className, isExpanded, innerRef, isEvenStriped = false, isOddStriped = false } = _a, props = __rest(_a, ["children", "className", "isExpanded", "innerRef", "isEvenStriped", "isOddStriped"]);
    return React118.createElement("tbody", Object.assign({ role: "rowgroup", className: css2(table_default.tableTbody, className, isExpanded && table_default.modifiers.expanded, isOddStriped && table_default.modifiers.striped, isEvenStriped && table_default.modifiers.stripedEven), ref: innerRef }, props), children);
  };
  var Tbody = React118.forwardRef((props, ref) => React118.createElement(TbodyBase, Object.assign({}, props, { innerRef: ref })));
  Tbody.displayName = "Tbody";

  // node_modules/@patternfly/react-table/dist/esm/components/Table/Th.js
  var React120 = __toESM(require_react());

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-styles/css/components/Table/table-scrollable.mjs
  var table_scrollable_default = {
    "modifiers": {
      "borderRight": "pf-m-border-right",
      "borderLeft": "pf-m-border-left",
      "right": "pf-m-right",
      "inlineEnd": "pf-m-inline-end",
      "left": "pf-m-left",
      "inlineStart": "pf-m-inline-start"
    },
    "scrollInnerWrapper": "pf-v6-c-scroll-inner-wrapper",
    "scrollOuterWrapper": "pf-v6-c-scroll-outer-wrapper",
    "table": "pf-v6-c-table",
    "tableStickyCell": "pf-v6-c-table__sticky-cell"
  };

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-styles/css/utilities/Accessibility/accessibility.mjs
  var accessibility_default = {
    "hidden": "pf-v6-u-hidden",
    "hiddenOnLg": "pf-v6-u-hidden-on-lg",
    "hiddenOnMd": "pf-v6-u-hidden-on-md",
    "hiddenOnSm": "pf-v6-u-hidden-on-sm",
    "hiddenOnXl": "pf-v6-u-hidden-on-xl",
    "hiddenOn_2xl": "pf-v6-u-hidden-on-2xl",
    "screenReader": "pf-v6-u-screen-reader",
    "screenReaderOnLg": "pf-v6-u-screen-reader-on-lg",
    "screenReaderOnMd": "pf-v6-u-screen-reader-on-md",
    "screenReaderOnSm": "pf-v6-u-screen-reader-on-sm",
    "screenReaderOnXl": "pf-v6-u-screen-reader-on-xl",
    "screenReaderOn_2xl": "pf-v6-u-screen-reader-on-2xl",
    "visible": "pf-v6-u-visible",
    "visibleOnLg": "pf-v6-u-visible-on-lg",
    "visibleOnMd": "pf-v6-u-visible-on-md",
    "visibleOnSm": "pf-v6-u-visible-on-sm",
    "visibleOnXl": "pf-v6-u-visible-on-xl",
    "visibleOn_2xl": "pf-v6-u-visible-on-2xl"
  };

  // node_modules/@patternfly/react-table/dist/esm/components/Table/base/merge-props.js
  var React119 = __toESM(require_react());
  var import_mergeWith = __toESM(require_mergeWith());
  function mergeProps(...props) {
    const firstProps = props[0];
    const restProps = props.slice(1);
    if (!restProps.length) {
      return (0, import_mergeWith.default)({}, firstProps);
    }
    return (0, import_mergeWith.default)((0, import_mergeWith.default)({}, firstProps), ...restProps, (a, b, key) => {
      if (key === "children") {
        if (a && b) {
          return React119.cloneElement(a, {
            children: b
          });
        }
        return Object.assign(Object.assign({}, b), a);
      }
      if (key === "className") {
        return css2(a, b);
      }
      return void 0;
    });
  }

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-tokens/dist/esm/c_table__sticky_cell_MinWidth.js
  var c_table__sticky_cell_MinWidth = {
    "name": "--pf-v6-c-table__sticky-cell--MinWidth",
    "value": "8.75rem",
    "var": "var(--pf-v6-c-table__sticky-cell--MinWidth)"
  };
  var c_table_sticky_cell_MinWidth_default = c_table__sticky_cell_MinWidth;

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-tokens/dist/esm/c_table__sticky_cell_InsetInlineStart.js
  var c_table__sticky_cell_InsetInlineStart = {
    "name": "--pf-v6-c-table__sticky-cell--InsetInlineStart",
    "value": "0",
    "var": "var(--pf-v6-c-table__sticky-cell--InsetInlineStart)"
  };
  var c_table_sticky_cell_InsetInlineStart_default = c_table__sticky_cell_InsetInlineStart;

  // node_modules/@patternfly/react-table/node_modules/@patternfly/react-tokens/dist/esm/c_table__sticky_cell_InsetInlineEnd.js
  var c_table__sticky_cell_InsetInlineEnd = {
    "name": "--pf-v6-c-table__sticky-cell--InsetInlineEnd",
    "value": "0",
    "var": "var(--pf-v6-c-table__sticky-cell--InsetInlineEnd)"
  };
  var c_table_sticky_cell_InsetInlineEnd_default = c_table__sticky_cell_InsetInlineEnd;

  // node_modules/@patternfly/react-table/dist/esm/components/Table/Th.js
  var ThBase = (_a) => {
    var _b;
    var { children, className, component = "th", dataLabel, scope = "col", textCenter = false, sort = null, modifier, select = null, expand: collapse = null, tooltip = "", tooltipProps, onMouseEnter: onMouseEnterProp = () => {
    }, width, visibility, innerRef, info: infoProps, isStickyColumn = false, hasRightBorder = false, hasLeftBorder = false, stickyMinWidth = "120px", stickyLeftOffset, stickyRightOffset, isSubheader = false, screenReaderText, "aria-label": ariaLabel } = _a, props = __rest(_a, ["children", "className", "component", "dataLabel", "scope", "textCenter", "sort", "modifier", "select", "expand", "tooltip", "tooltipProps", "onMouseEnter", "width", "visibility", "innerRef", "info", "isStickyColumn", "hasRightBorder", "hasLeftBorder", "stickyMinWidth", "stickyLeftOffset", "stickyRightOffset", "isSubheader", "screenReaderText", "aria-label"]);
    if (!children && !screenReaderText && !ariaLabel) {
      console.warn("Th: Table headers must have an accessible name. If the Th is intended to be visually empty, pass in screenReaderText. If the Th contains only non-text, interactive content such as a checkbox or expand toggle, pass in an aria-label.");
    }
    const [showTooltip, setShowTooltip] = React120.useState(false);
    const [truncated, setTruncated] = React120.useState(false);
    const cellRef = innerRef ? innerRef : React120.createRef();
    const onMouseEnter = (event) => {
      if (event.target.offsetWidth < event.target.scrollWidth) {
        !showTooltip && setShowTooltip(true);
      } else {
        showTooltip && setShowTooltip(false);
      }
      onMouseEnterProp(event);
    };
    let sortParams = null;
    if (sort) {
      if (sort.isFavorites) {
        sortParams = sortableFavorites({
          onSort: sort.onSort,
          columnIndex: sort.columnIndex,
          sortBy: sort.sortBy,
          tooltip,
          tooltipProps,
          ariaLabel: sort["aria-label"],
          favoriteButtonProps: sort.favoriteButtonProps
        })();
      } else {
        sortParams = sortable(children, {
          columnIndex: sort.columnIndex,
          column: {
            extraParams: {
              sortBy: sort.sortBy,
              onSort: sort === null || sort === void 0 ? void 0 : sort.onSort
            }
          },
          tooltip,
          tooltipProps
        });
      }
    }
    const selectParams = select ? selectable(children, {
      rowData: {
        selected: select.isSelected,
        disableSelection: select === null || select === void 0 ? void 0 : select.isDisabled,
        props: select === null || select === void 0 ? void 0 : select.props
      },
      column: {
        extraParams: {
          onSelect: select === null || select === void 0 ? void 0 : select.onSelect,
          selectVariant: "checkbox",
          allRowsSelected: select.isSelected,
          isHeaderSelectDisabled: !!select.isHeaderSelectDisabled
        }
      },
      tooltip,
      tooltipProps
    }) : null;
    const collapseParams = collapse ? collapsible(children, {
      column: {
        extraParams: {
          onCollapse: collapse === null || collapse === void 0 ? void 0 : collapse.onToggle,
          allRowsExpanded: !collapse.areAllExpanded,
          collapseAllAriaLabel: ""
        }
      }
    }) : null;
    const widthParams = width ? cellWidth(width)() : null;
    const visibilityParams = visibility ? classNames(...visibility.map((vis) => Visibility[vis]))() : null;
    let transformedChildren = (sortParams === null || sortParams === void 0 ? void 0 : sortParams.children) || (selectParams === null || selectParams === void 0 ? void 0 : selectParams.children) || (collapseParams === null || collapseParams === void 0 ? void 0 : collapseParams.children) || children;
    let infoParams = null;
    if (infoProps) {
      infoParams = info(infoProps)(transformedChildren);
      transformedChildren = infoParams.children;
    }
    const merged = mergeProps(sortParams, selectParams, collapseParams, widthParams, visibilityParams, infoParams);
    const {
      // ignore the merged children since we transform them ourselves so we can wrap it with info
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      children: mergedChildren = null,
      // selectable adds this but we don't want it
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      isVisible = null,
      className: mergedClassName = "",
      component: MergedComponent = component
    } = merged, mergedProps = __rest(merged, ["children", "isVisible", "className", "component"]);
    React120.useEffect(() => {
      setTruncated(cellRef.current.offsetWidth < cellRef.current.scrollWidth);
    }, [cellRef]);
    const cell = React120.createElement(MergedComponent, Object.assign({ tabIndex: sort || select || !truncated ? -1 : 0, onFocus: tooltip !== null ? onMouseEnter : onMouseEnterProp, onBlur: () => setShowTooltip(false), "data-label": dataLabel, onMouseEnter: tooltip !== null ? onMouseEnter : onMouseEnterProp, scope: component === "th" ? scope : null, ref: cellRef, "aria-label": ariaLabel, className: css2(table_default.tableTh, className, textCenter && table_default.modifiers.center, isSubheader && table_default.tableSubhead, isStickyColumn && table_scrollable_default.tableStickyCell, hasRightBorder && table_scrollable_default.modifiers.borderRight, hasLeftBorder && table_scrollable_default.modifiers.borderLeft, modifier && table_default.modifiers[modifier], ((_b = sort === null || sort === void 0 ? void 0 : sort.favoriteButtonProps) === null || _b === void 0 ? void 0 : _b.favorited) && table_default.modifiers.favorited, mergedClassName) }, mergedProps, props, isStickyColumn && {
      style: Object.assign({ [c_table_sticky_cell_MinWidth_default.name]: stickyMinWidth ? stickyMinWidth : void 0, [c_table_sticky_cell_InsetInlineStart_default.name]: stickyLeftOffset ? stickyLeftOffset : 0, [c_table_sticky_cell_InsetInlineEnd_default.name]: stickyRightOffset ? stickyRightOffset : 0 }, props.style)
    }), transformedChildren || screenReaderText && React120.createElement("span", { className: accessibility_default.screenReader }, screenReaderText));
    const canMakeDefaultTooltip = tooltip === "" ? typeof transformedChildren === "string" : true;
    const childControlsTooltip = sortParams || selectParams;
    return tooltip !== null && canMakeDefaultTooltip && !childControlsTooltip && showTooltip ? React120.createElement(
      React120.Fragment,
      null,
      cell,
      React120.createElement(Tooltip2, Object.assign({ triggerRef: cellRef, content: tooltip || tooltip === "" && children, isVisible: true }, tooltipProps))
    ) : cell;
  };
  var Th = React120.forwardRef((props, ref) => React120.createElement(ThBase, Object.assign({}, props, { innerRef: ref })));
  Th.displayName = "Th";

  // node_modules/@patternfly/react-table/dist/esm/components/Table/Td.js
  var React122 = __toESM(require_react());

  // node_modules/@patternfly/react-table/dist/esm/components/Table/utils/decorators/draggable.js
  var React121 = __toESM(require_react());
  var draggable = (value, { rowData }) => {
    const { id } = rowData;
    return {
      className: "",
      children: React121.createElement(DraggableCell, { id })
    };
  };

  // node_modules/@patternfly/react-table/dist/esm/components/Table/Td.js
  var TdBase = (_a) => {
    var { children, className, isActionCell = false, component = "td", dataLabel, textCenter = false, modifier, select = null, actions = null, expand = null, treeRow: treeRowProp = null, compoundExpand: compoundExpandProp = null, noPadding, width, visibility, innerRef, favorites = null, draggableRow: draggableRowProp = null, tooltip = "", onMouseEnter: onMouseEnterProp = () => {
    }, isStickyColumn = false, hasRightBorder = false, hasLeftBorder = false, stickyMinWidth = "120px", stickyLeftOffset, stickyRightOffset } = _a, props = __rest(_a, ["children", "className", "isActionCell", "component", "dataLabel", "textCenter", "modifier", "select", "actions", "expand", "treeRow", "compoundExpand", "noPadding", "width", "visibility", "innerRef", "favorites", "draggableRow", "tooltip", "onMouseEnter", "isStickyColumn", "hasRightBorder", "hasLeftBorder", "stickyMinWidth", "stickyLeftOffset", "stickyRightOffset"]);
    const [showTooltip, setShowTooltip] = React122.useState(false);
    const [truncated, setTruncated] = React122.useState(false);
    const cellRef = innerRef ? innerRef : React122.createRef();
    const onMouseEnter = (event) => {
      if (event.target.offsetWidth < event.target.scrollWidth) {
        !showTooltip && setShowTooltip(true);
      } else {
        showTooltip && setShowTooltip(false);
      }
      onMouseEnterProp(event);
    };
    const selectParams = select ? selectable(children, {
      rowIndex: select.rowIndex,
      rowData: {
        selected: select.isSelected,
        disableSelection: select === null || select === void 0 ? void 0 : select.isDisabled,
        props: select === null || select === void 0 ? void 0 : select.props
      },
      column: {
        extraParams: {
          onSelect: select === null || select === void 0 ? void 0 : select.onSelect,
          selectVariant: select.variant || "checkbox"
        }
      }
    }) : null;
    const favoriteParams = favorites ? favoritable(null, {
      rowIndex: favorites === null || favorites === void 0 ? void 0 : favorites.rowIndex,
      rowData: {
        favorited: favorites.isFavorited,
        favoritesProps: favorites === null || favorites === void 0 ? void 0 : favorites.props
      },
      column: {
        extraParams: {
          onFavorite: favorites === null || favorites === void 0 ? void 0 : favorites.onFavorite
        }
      }
    }) : null;
    const draggableParams = draggableRowProp !== null ? draggable(null, {
      rowData: {
        id: draggableRowProp.id
      }
    }) : null;
    const actionParamsFunc = actions ? cellActions(actions.items, null, null) : null;
    const actionParams = actionParamsFunc ? actionParamsFunc(null, {
      rowIndex: actions === null || actions === void 0 ? void 0 : actions.rowIndex,
      rowData: {
        disableActions: actions === null || actions === void 0 ? void 0 : actions.isDisabled
      },
      column: {
        extraParams: {
          dropdownPosition: actions === null || actions === void 0 ? void 0 : actions.dropdownPosition,
          dropdownDirection: actions === null || actions === void 0 ? void 0 : actions.dropdownDirection,
          menuAppendTo: actions === null || actions === void 0 ? void 0 : actions.menuAppendTo,
          actionsToggle: actions === null || actions === void 0 ? void 0 : actions.actionsToggle
        }
      }
    }) : null;
    const expandableParams = expand !== null ? collapsible(null, {
      rowIndex: expand.rowIndex,
      columnIndex: expand === null || expand === void 0 ? void 0 : expand.columnIndex,
      rowData: {
        isOpen: expand.isExpanded
      },
      column: {
        extraParams: {
          onCollapse: expand === null || expand === void 0 ? void 0 : expand.onToggle,
          expandId: expand === null || expand === void 0 ? void 0 : expand.expandId
        }
      }
    }) : null;
    const compoundParams = compoundExpandProp !== null ? compoundExpand({
      title: children,
      props: {
        isOpen: compoundExpandProp.isExpanded
      }
    }, {
      rowIndex: compoundExpandProp === null || compoundExpandProp === void 0 ? void 0 : compoundExpandProp.rowIndex,
      columnIndex: compoundExpandProp === null || compoundExpandProp === void 0 ? void 0 : compoundExpandProp.columnIndex,
      column: {
        extraParams: {
          onExpand: compoundExpandProp === null || compoundExpandProp === void 0 ? void 0 : compoundExpandProp.onToggle,
          expandId: compoundExpandProp === null || compoundExpandProp === void 0 ? void 0 : compoundExpandProp.expandId
        }
      }
    }) : null;
    const widthParams = width ? cellWidth(width)() : null;
    const visibilityParams = visibility ? classNames(...visibility.map((vis) => Visibility[vis]))() : null;
    const treeRowParams = treeRowProp !== null ? treeRow(treeRowProp.onCollapse, treeRowProp.onCheckChange, treeRowProp.onToggleRowDetails)({
      title: children
    }, {
      rowIndex: treeRowProp.rowIndex,
      rowData: {
        props: treeRowProp.props
      }
    }) : null;
    const merged = mergeProps(selectParams, actionParams, expandableParams, compoundParams, widthParams, visibilityParams, favoriteParams, treeRowParams, draggableParams);
    const {
      // selectable adds this but we don't want it
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      isVisible = null,
      children: mergedChildren = null,
      className: mergedClassName = "",
      component: MergedComponent = component
    } = merged, mergedProps = __rest(merged, ["isVisible", "children", "className", "component"]);
    const treeTableTitleCell = className && className.includes(table_tree_view_default.tableTreeViewTitleCell) || mergedClassName && mergedClassName.includes(table_tree_view_default.tableTreeViewTitleCell);
    React122.useEffect(() => {
      setTruncated(cellRef.current.offsetWidth < cellRef.current.scrollWidth);
    }, [cellRef]);
    const cell = React122.createElement(MergedComponent, Object.assign({ tabIndex: (select || !truncated) && modifier !== "truncate" ? -1 : 0 }, !treeTableTitleCell && { "data-label": dataLabel }, { onFocus: tooltip !== null ? onMouseEnter : onMouseEnterProp, onBlur: () => setShowTooltip(false), onMouseEnter: tooltip !== null ? onMouseEnter : onMouseEnterProp, className: css2(table_default.tableTd, className, isActionCell && table_default.tableAction, textCenter && table_default.modifiers.center, noPadding && table_default.modifiers.noPadding, isStickyColumn && table_scrollable_default.tableStickyCell, hasRightBorder && table_scrollable_default.modifiers.borderRight, hasLeftBorder && table_scrollable_default.modifiers.borderLeft, table_default.modifiers[modifier], draggableParams && table_default.tableDraggable, mergedClassName), ref: cellRef }, mergedProps, props, isStickyColumn && {
      style: Object.assign({ [c_table_sticky_cell_MinWidth_default.name]: stickyMinWidth ? stickyMinWidth : void 0, [c_table_sticky_cell_InsetInlineStart_default.name]: stickyLeftOffset ? stickyLeftOffset : 0, [c_table_sticky_cell_InsetInlineEnd_default.name]: stickyRightOffset ? stickyRightOffset : 0 }, props.style)
    }), mergedChildren || children);
    const canMakeDefaultTooltip = tooltip === "" ? typeof children === "string" : true;
    return tooltip !== null && canMakeDefaultTooltip && showTooltip ? React122.createElement(
      React122.Fragment,
      null,
      cell,
      React122.createElement(Tooltip2, { triggerRef: cellRef, content: tooltip || tooltip === "" && children, isVisible: true })
    ) : cell;
  };
  var Td = React122.forwardRef((props, ref) => React122.createElement(TdBase, Object.assign({}, props, { innerRef: ref })));
  Td.displayName = "Td";

  // node_modules/@patternfly/react-table/dist/esm/components/Table/Caption.js
  var React123 = __toESM(require_react());
  var Caption = (_a) => {
    var { children, className } = _a, props = __rest(_a, ["children", "className"]);
    return React123.createElement("caption", Object.assign({ className: css2(table_default.tableCaption, className) }, props), children);
  };
  Caption.displayName = "Caption";

  // pkg/lib/cockpit/_internal/base64.js
  function uint6_to_b64(x) {
    return x < 26 ? x + 65 : x < 52 ? x + 71 : x < 62 ? x - 4 : x === 62 ? 43 : x === 63 ? 47 : 65;
  }
  function base64_encode(data2) {
    if (typeof data2 === "string")
      return window.btoa(data2);
    if (data2 instanceof window.ArrayBuffer)
      data2 = new window.Uint8Array(data2);
    const length = data2.length;
    let mod3 = 2;
    let str = "";
    for (let uint24 = 0, i = 0; i < length; i++) {
      mod3 = i % 3;
      uint24 |= data2[i] << (16 >>> mod3 & 24);
      if (mod3 === 2 || length - i === 1) {
        str += String.fromCharCode(
          uint6_to_b64(uint24 >>> 18 & 63),
          uint6_to_b64(uint24 >>> 12 & 63),
          uint6_to_b64(uint24 >>> 6 & 63),
          uint6_to_b64(uint24 & 63)
        );
        uint24 = 0;
      }
    }
    return str.substring(0, str.length - 2 + mod3) + (mod3 === 2 ? "" : mod3 === 1 ? "=" : "==");
  }
  function b64_to_uint6(x) {
    return x > 64 && x < 91 ? x - 65 : x > 96 && x < 123 ? x - 71 : x > 47 && x < 58 ? x + 4 : x === 43 ? 62 : x === 47 ? 63 : 0;
  }
  function base64_decode(str, constructor) {
    if (constructor === String)
      return window.atob(str);
    const ilen = str.length;
    let eq;
    for (eq = 0; eq < 3; eq++) {
      if (str[ilen - (eq + 1)] != "=")
        break;
    }
    const olen = (ilen * 3 + 1 >> 2) - eq;
    const data2 = new (constructor || Array)(olen);
    for (let mod3, mod4, uint24 = 0, oi = 0, ii = 0; ii < ilen; ii++) {
      mod4 = ii & 3;
      uint24 |= b64_to_uint6(str.charCodeAt(ii)) << 18 - 6 * mod4;
      if (mod4 === 3 || ilen - ii === 1) {
        for (mod3 = 0; mod3 < 3 && oi < olen; mod3++, oi++)
          data2[oi] = uint24 >>> (16 >>> mod3 & 24) & 255;
        uint24 = 0;
      }
    }
    return data2;
  }

  // pkg/lib/cockpit/_internal/common.ts
  if (typeof window.debugging === "undefined") {
    try {
      Object.defineProperty(window, "debugging", {
        get: function() {
          return window.sessionStorage.debugging || window.localStorage.debugging;
        },
        set: function(x) {
          window.sessionStorage.debugging = x;
        }
      });
    } catch {
    }
  }
  function in_array(array, val) {
    const length = array.length;
    for (let i = 0; i < length; i++) {
      if (val === array[i])
        return true;
    }
    return false;
  }
  function is_function(x) {
    return typeof x === "function";
  }
  function is_object(x) {
    return x !== null && typeof x === "object";
  }
  function is_plain_object(x) {
    return is_object(x) && Object.prototype.toString.call(x) === "[object Object]";
  }
  function invoke_functions(functions, self2, args) {
    const length = functions?.length ?? 0;
    for (let i = 0; i < length; i++) {
      if (functions[i])
        functions[i].apply(self2, args);
    }
  }
  function iterate_data(data2, callback, batch = 64 * 1024) {
    if (typeof data2 === "string") {
      for (let i = 0; i < data2.length; i += batch) {
        callback(data2.substring(i, i + batch));
      }
    } else if (data2) {
      for (let i = 0; i < data2.byteLength; i += batch) {
        const n = Math.min(data2.byteLength - i, batch);
        callback(new Uint8Array(data2.buffer, i, n));
      }
    }
  }
  function join_data(buffers, binary) {
    if (!binary)
      return buffers.join("");
    let total = 0;
    const length = buffers.length;
    for (let i = 0; i < length; i++)
      total += buffers[i].length;
    const data2 = new Uint8Array(total);
    for (let j = 0, i = 0; i < length; i++) {
      data2.set(buffers[i], j);
      j += buffers[i].length;
    }
    return data2;
  }

  // pkg/lib/cockpit/_internal/deferred.js
  var later_queue = [];
  var later_timeout = null;
  function later_drain() {
    const queue = later_queue;
    later_timeout = null;
    later_queue = [];
    for (; ; ) {
      const func = queue.shift();
      if (!func)
        break;
      func();
    }
  }
  function later_invoke(func) {
    if (func)
      later_queue.push(func);
    if (later_timeout === null)
      later_timeout = window.setTimeout(later_drain, 0);
  }
  function promise_then(state, fulfilled, rejected, updated) {
    if (fulfilled === void 0 && rejected === void 0 && updated === void 0)
      return null;
    const result = new Deferred();
    state.pending = state.pending || [];
    state.pending.push([result, fulfilled, rejected, updated]);
    if (state.status > 0)
      schedule_process_queue(state);
    return result.promise;
  }
  function create_promise(state) {
    const self2 = function Promise2(target) {
      if (target) {
        Object.assign(target, self2);
        return target;
      }
      return self2;
    };
    state.status = 0;
    self2.then = function then(fulfilled, rejected, updated) {
      return promise_then(state, fulfilled, rejected, updated) || self2;
    };
    self2.catch = function catch_(callback) {
      return promise_then(state, null, callback) || self2;
    };
    self2.finally = function finally_(callback, updated) {
      return promise_then(state, function() {
        return handle_callback(arguments, true, callback);
      }, function() {
        return handle_callback(arguments, false, callback);
      }, updated) || self2;
    };
    self2.done = function done(fulfilled) {
      promise_then(state, fulfilled);
      return self2;
    };
    self2.fail = function fail(rejected) {
      promise_then(state, null, rejected);
      return self2;
    };
    self2.always = function always(callback) {
      promise_then(state, callback, callback);
      return self2;
    };
    self2.progress = function progress(updated) {
      promise_then(state, null, null, updated);
      return self2;
    };
    self2.state = function state_() {
      if (state.status == 1)
        return "resolved";
      if (state.status == 2)
        return "rejected";
      return "pending";
    };
    self2.promise = self2;
    return self2;
  }
  function process_queue(state) {
    const pending = state.pending;
    state.process_scheduled = false;
    state.pending = void 0;
    for (let i = 0, ii = pending.length; i < ii; ++i) {
      state.pur = true;
      const deferred = pending[i][0];
      const fn = pending[i][state.status];
      if (is_function(fn)) {
        deferred.resolve(fn.apply(state.promise, state.values));
      } else if (state.status === 1) {
        deferred.resolve.apply(deferred.resolve, state.values);
      } else {
        deferred.reject.apply(deferred.reject, state.values);
      }
    }
  }
  function schedule_process_queue(state) {
    if (state.process_scheduled || !state.pending)
      return;
    state.process_scheduled = true;
    later_invoke(function() {
      process_queue(state);
    });
  }
  function deferred_resolve(state, values) {
    let then;
    let done = false;
    if (is_object(values[0]) || is_function(values[0]))
      then = values[0]?.then;
    if (is_function(then)) {
      state.status = -1;
      then.call(values[0], function() {
        if (done)
          return;
        done = true;
        deferred_resolve(state, arguments);
      }, function() {
        if (done)
          return;
        done = true;
        deferred_reject(state, arguments);
      }, function() {
        deferred_notify(state, arguments);
      });
    } else {
      state.values = values;
      state.status = 1;
      schedule_process_queue(state);
    }
  }
  function deferred_reject(state, values) {
    state.values = values;
    state.status = 2;
    schedule_process_queue(state);
  }
  function deferred_notify(state, values) {
    const callbacks = state.pending;
    if (state.status <= 0 && callbacks?.length) {
      later_invoke(function() {
        for (let i = 0, ii = callbacks.length; i < ii; i++) {
          const result = callbacks[i][0];
          const callback = callbacks[i][3];
          if (is_function(callback))
            result.notify(callback.apply(state.promise, values));
          else
            result.notify.apply(result, values);
        }
      });
    }
  }
  function Deferred() {
    const self2 = this;
    const state = {};
    self2.promise = state.promise = create_promise(state);
    self2.resolve = function resolve() {
      if (arguments[0] === state.promise)
        throw new Error("Expected promise to be resolved with other value than itself");
      if (!state.status)
        deferred_resolve(state, arguments);
      return self2;
    };
    self2.reject = function reject() {
      if (state.status)
        return;
      deferred_reject(state, arguments);
      return self2;
    };
    self2.notify = function notify() {
      deferred_notify(state, arguments);
      return self2;
    };
  }
  function prep_promise(values, resolved) {
    const result = new Deferred();
    if (resolved)
      result.resolve.apply(result, values);
    else
      result.reject.apply(result, values);
    return result.promise;
  }
  function handle_callback(values, is_resolved, callback) {
    let callback_output = null;
    if (is_function(callback))
      callback_output = callback();
    if (callback_output && is_function(callback_output.then)) {
      return callback_output.then(function() {
        return prep_promise(values, is_resolved);
      }, function() {
        return prep_promise(arguments, false);
      });
    } else {
      return prep_promise(values, is_resolved);
    }
  }

  // pkg/lib/cockpit/_internal/event-mixin.js
  function event_mixin(obj, handlers) {
    Object.defineProperties(obj, {
      addEventListener: {
        enumerable: false,
        value: function addEventListener(type, handler) {
          if (handlers[type] === void 0)
            handlers[type] = [];
          handlers[type].push(handler);
        }
      },
      removeEventListener: {
        enumerable: false,
        value: function removeEventListener(type, handler) {
          const length = handlers[type] ? handlers[type].length : 0;
          for (let i = 0; i < length; i++) {
            if (handlers[type][i] === handler) {
              handlers[type][i] = null;
              break;
            }
          }
        }
      },
      dispatchEvent: {
        enumerable: false,
        value: function dispatchEvent(event) {
          let type, args;
          if (typeof event === "string") {
            type = event;
            args = Array.prototype.slice.call(arguments, 1);
            let detail = null;
            if (arguments.length == 2)
              detail = arguments[1];
            else if (arguments.length > 2)
              detail = args;
            event = new CustomEvent(type, {
              bubbles: false,
              cancelable: false,
              detail
            });
            args.unshift(event);
          } else {
            type = event.type;
            args = arguments;
          }
          if (is_function(obj["on" + type]))
            obj["on" + type].apply(obj, args);
          invoke_functions(handlers[type], obj, args);
        }
      }
    });
  }

  // pkg/lib/cockpit/event.ts
  var _listeners;
  var EventEmitter = class {
    constructor() {
      __privateAdd(this, _listeners, {});
    }
    on(event, listener) {
      var _a;
      const listeners = (_a = __privateGet(this, _listeners))[event] || (_a[event] = []);
      listeners.push(listener);
      return () => {
        listeners.splice(listeners.indexOf(listener), 1);
      };
    }
    emit(event, ...args) {
      for (const listener of __privateGet(this, _listeners)[event] || []) {
        listener(...args);
      }
    }
  };
  _listeners = new WeakMap();

  // pkg/lib/cockpit/_internal/location-utils.ts
  function get_url_root() {
    const meta_url_root = document.head.querySelector("meta[name='url-root']");
    if (meta_url_root instanceof HTMLMetaElement) {
      return meta_url_root.content.replace(/^\/+|\/+$/g, "");
    } else {
      try {
        return window.localStorage.getItem("url-root");
      } catch {
        return null;
      }
    }
  }
  var url_root = get_url_root();
  var transport_origin = window.location.origin;
  function calculate_application() {
    let path = window.location.pathname || "/";
    let _url_root = url_root;
    if (window.mock?.pathname)
      path = window.mock.pathname;
    if (window.mock?.url_root)
      _url_root = window.mock.url_root;
    if (_url_root && path.indexOf("/" + _url_root) === 0)
      path = path.replace("/" + _url_root, "") || "/";
    if (path.indexOf("/cockpit/") !== 0 && path.indexOf("/cockpit+") !== 0) {
      if (path.indexOf("/=") === 0)
        path = "/cockpit+" + path.split("/")[1];
      else
        path = "/cockpit";
    }
    return path.split("/")[1];
  }
  function calculate_url(suffix) {
    if (!suffix)
      suffix = "socket";
    const window_loc = window.location.toString();
    let _url_root = url_root;
    if (window.mock?.url)
      return window.mock.url;
    if (window.mock?.url_root)
      _url_root = window.mock.url_root;
    let prefix = calculate_application();
    if (_url_root)
      prefix = _url_root + "/" + prefix;
    if (window_loc.indexOf("http:") === 0) {
      return "ws://" + window.location.host + "/" + prefix + "/" + suffix;
    } else if (window_loc.indexOf("https:") === 0) {
      return "wss://" + window.location.host + "/" + prefix + "/" + suffix;
    } else {
      throw new Error("Cockpit must be used over http or https");
    }
  }

  // pkg/lib/cockpit/_internal/parentwebsocket.ts
  var ParentWebSocket = class {
    constructor(parent2) {
      this.binaryType = "arraybuffer";
      // compatibility with Transport, which sets this
      this.readyState = 0;
      window.addEventListener("message", (event) => {
        if (event.origin !== transport_origin || event.source !== parent2)
          return;
        const data2 = event.data;
        if (data2 === void 0 || data2.length === void 0 && data2.byteLength === void 0)
          return;
        if (data2.length === 0) {
          this.readyState = 3;
          this.onclose();
        } else {
          this.onmessage(event);
        }
      }, false);
      window.setTimeout(() => {
        this.readyState = 1;
        this.onopen();
      }, 0);
    }
    // essentially signal handlers: these are assigned to from Transport
    onopen() {
    }
    onclose() {
    }
    onmessage(_event) {
    }
    // same types as the real WebSocket
    send(message) {
      parent.postMessage(message, transport_origin);
    }
    close() {
      this.readyState = 3;
      parent.postMessage("", transport_origin);
      this.onclose();
    }
  };

  // pkg/lib/cockpit/_internal/transport.ts
  var TransportGlobals = class {
    constructor() {
      this.default_transport = null;
      this.reload_after_disconnect = false;
      this.expect_disconnect = false;
      this.init_callback = null;
      this.default_host = null;
      this.process_hints = null;
      this.incoming_filters = [];
    }
  };
  if (!document.cockpit_transport_globals)
    document.cockpit_transport_globals = new TransportGlobals();
  var transport_globals = document.cockpit_transport_globals;
  window.addEventListener("beforeunload", () => {
    transport_globals.expect_disconnect = true;
  }, false);
  function transport_debug(...args) {
    if (window.debugging == "all" || window.debugging?.includes("channel"))
      console.debug(...args);
  }
  var _last_channel, _channel_seed, _ws, _ignore_health_check, _got_message, _check_health_timer, _control_cbs, _message_cbs, _waiting_for_init, _Transport_instances, ready_for_channels_fn, process_init_fn, process_control_fn, process_message_fn;
  var Transport = class extends EventEmitter {
    constructor() {
      super();
      __privateAdd(this, _Transport_instances);
      __privateAdd(this, _last_channel, 0);
      __privateAdd(this, _channel_seed, "");
      __privateAdd(this, _ws);
      __privateAdd(this, _ignore_health_check, false);
      __privateAdd(this, _got_message, false);
      __privateAdd(this, _check_health_timer);
      __privateAdd(this, _control_cbs, {});
      __privateAdd(this, _message_cbs, {});
      __privateAdd(this, _waiting_for_init, true);
      this.application = calculate_application();
      if (window.mock)
        window.mock.last_transport = this;
      if (window.parent !== window && window.name.indexOf("cockpit1:") === 0) {
        __privateSet(this, _ws, new ParentWebSocket(window.parent));
      } else {
        const ws_loc = calculate_url();
        transport_debug("connecting to " + ws_loc);
        __privateSet(this, _ws, new WebSocket(ws_loc, "cockpit1"));
        __privateSet(this, _check_health_timer, window.setInterval(() => {
          if (this.ready && __privateGet(this, _ws))
            __privateGet(this, _ws).send('\n{ "command": "ping" }');
          if (!__privateGet(this, _got_message)) {
            if (__privateGet(this, _ignore_health_check)) {
              console.log("health check failure ignored");
            } else {
              console.log("health check failed");
              this.close({ problem: "timeout" });
            }
          }
          __privateSet(this, _got_message, false);
        }, 3e4));
      }
      this.ready = false;
      __privateGet(this, _ws).onopen = () => {
        if (__privateGet(this, _ws)) {
          if (typeof __privateGet(this, _ws).binaryType !== "undefined")
            __privateGet(this, _ws).binaryType = "arraybuffer";
          __privateGet(this, _ws).send('\n{ "command": "init", "version": 1 }');
        }
      };
      __privateGet(this, _ws).onclose = () => {
        transport_debug("WebSocket onclose");
        __privateSet(this, _ws, null);
        if (transport_globals.reload_after_disconnect) {
          transport_globals.expect_disconnect = true;
          window.location.reload(true);
        }
        this.close();
      };
      __privateGet(this, _ws).onmessage = (event) => this.dispatch_data(event);
    }
    dispatch_data(arg) {
      __privateSet(this, _got_message, true);
      const message = arg.data;
      let channel;
      let control = null;
      let payload = null;
      if (message instanceof ArrayBuffer) {
        const frame = new window.Uint8Array(message);
        const nl = frame.indexOf(10);
        channel = new TextDecoder().decode(frame.subarray(0, nl));
        if (!channel) {
          console.warn("Received invalid binary message without a channel");
          return false;
        }
        payload = frame.subarray(nl + 1);
        transport_debug("recv binary message:", control, payload);
      } else {
        const nl = message.indexOf("\n");
        channel = message.substring(0, nl);
        if (nl == 0) {
          control = JSON.parse(message);
          transport_debug("recv control:", control);
        } else {
          payload = message.substring(nl + 1);
          transport_debug("recv text message:", channel, payload);
        }
      }
      for (const filter of transport_globals.incoming_filters)
        if (filter(message, channel, control) === false)
          return false;
      if (control)
        __privateMethod(this, _Transport_instances, process_control_fn).call(this, control);
      else if (channel && payload)
        __privateMethod(this, _Transport_instances, process_message_fn).call(this, channel, payload);
      return true;
    }
    close(options) {
      if (!options)
        options = { problem: "disconnected" };
      options.command = "close";
      window.clearInterval(__privateGet(this, _check_health_timer));
      const ows = __privateGet(this, _ws);
      __privateSet(this, _ws, null);
      if (ows)
        ows.close();
      if (transport_globals.expect_disconnect)
        return;
      __privateMethod(this, _Transport_instances, ready_for_channels_fn).call(this);
      for (const chan in __privateGet(this, _control_cbs))
        __privateGet(this, _control_cbs)[chan].apply(null, [options]);
    }
    next_channel() {
      __privateWrapper(this, _last_channel)._++;
      return __privateGet(this, _channel_seed) + String(__privateGet(this, _last_channel));
    }
    send_data(data2) {
      if (!__privateGet(this, _ws)) {
        return false;
      }
      __privateGet(this, _ws).send(data2);
      return true;
    }
    send_message(payload, channel) {
      if (channel)
        transport_debug("send " + channel, payload);
      else
        transport_debug("send control:", payload);
      if (typeof payload !== "string") {
        const body = payload instanceof ArrayBuffer ? new Uint8Array(payload) : payload;
        const header = new TextEncoder().encode(`${channel}
`);
        const output = new Uint8Array(header.length + body.length);
        output.set(header);
        output.set(body, header.length);
        return this.send_data(output.buffer);
      } else {
        return this.send_data(channel.toString() + "\n" + payload);
      }
    }
    send_control(data2) {
      if (!__privateGet(this, _ws) && (data2.command == "close" || data2.command == "kill"))
        return false;
      if (__privateGet(this, _check_health_timer) && data2.command == "hint" && data2.hint == "ignore_transport_health_check") {
        __privateSet(this, _ignore_health_check, !!data2.data);
        return false;
      }
      return this.send_message(JSON.stringify(data2), "");
    }
    register(channel, control_cb, message_cb) {
      __privateGet(this, _control_cbs)[channel] = control_cb;
      __privateGet(this, _message_cbs)[channel] = message_cb;
    }
    unregister(channel) {
      delete __privateGet(this, _control_cbs)[channel];
      delete __privateGet(this, _message_cbs)[channel];
    }
  };
  _last_channel = new WeakMap();
  _channel_seed = new WeakMap();
  _ws = new WeakMap();
  _ignore_health_check = new WeakMap();
  _got_message = new WeakMap();
  _check_health_timer = new WeakMap();
  _control_cbs = new WeakMap();
  _message_cbs = new WeakMap();
  _waiting_for_init = new WeakMap();
  _Transport_instances = new WeakSet();
  /* Called when ready for channels to interact */
  ready_for_channels_fn = function() {
    if (!this.ready) {
      this.ready = true;
      this.emit("ready");
    }
  };
  process_init_fn = function(options) {
    if (options.problem) {
      this.close({ problem: options.problem });
      return;
    }
    if (options.version !== 1) {
      console.error("received unsupported version in init message: " + options.version);
      this.close({ problem: "not-supported" });
      return;
    }
    if (options["channel-seed"])
      __privateSet(this, _channel_seed, String(options["channel-seed"]));
    if (typeof options.host === "string")
      transport_globals.default_host = options.host;
    if (transport_globals.init_callback)
      transport_globals.init_callback(options);
    if (__privateGet(this, _waiting_for_init)) {
      __privateSet(this, _waiting_for_init, false);
      __privateMethod(this, _Transport_instances, ready_for_channels_fn).call(this);
    }
  };
  process_control_fn = function(data2) {
    const channel = data2.channel;
    if (data2.command == "init") {
      __privateMethod(this, _Transport_instances, process_init_fn).call(this, data2);
    } else if (__privateGet(this, _waiting_for_init)) {
      __privateSet(this, _waiting_for_init, false);
      if (data2.command != "close" || channel) {
        console.error("received message before init: ", data2.command);
        data2 = { problem: "protocol-error" };
      }
      this.close(data2);
    } else if (data2.command == "ping") {
      data2.command = "pong";
      this.send_control(data2);
    } else if (data2.command == "pong") {
    } else if (data2.command == "hint") {
      if (transport_globals.process_hints)
        transport_globals.process_hints(data2);
    } else if (typeof channel === "string") {
      const func = __privateGet(this, _control_cbs)[channel];
      if (func)
        func(data2);
    }
  };
  process_message_fn = function(channel, payload) {
    const func = __privateGet(this, _message_cbs)[channel];
    if (func)
      func(payload);
  };
  function ensure_transport(callback) {
    if (!transport_globals.default_transport)
      transport_globals.default_transport = new Transport();
    const transport = transport_globals.default_transport;
    if (transport.ready) {
      callback(transport);
    } else {
      transport.on("ready", () => {
        callback(transport);
      });
    }
  }
  window.addEventListener("unload", () => {
    if (transport_globals.default_transport)
      transport_globals.default_transport.close();
  });

  // pkg/lib/cockpit/_internal/channel.js
  function Channel(options) {
    const self2 = this;
    event_mixin(self2, {});
    let transport;
    let ready = null;
    let closed = null;
    let waiting = null;
    let received_done = false;
    let sent_done = false;
    let id = null;
    const binary = options.binary === true;
    const queue = [];
    self2.valid = true;
    self2.options = options;
    self2.binary = binary;
    self2.id = id;
    function on_message(payload) {
      if (received_done) {
        console.warn("received message after done");
        self2.close("protocol-error");
      } else {
        self2.dispatchEvent("message", payload);
      }
    }
    function on_close(data2) {
      closed = data2;
      self2.valid = false;
      if (transport && id)
        transport.unregister(id);
      if (closed.message && !options.err)
        console.warn(closed.message);
      self2.dispatchEvent("close", closed);
      if (waiting)
        waiting.resolve(closed);
    }
    function on_ready(data2) {
      ready = data2;
      self2.dispatchEvent("ready", ready);
    }
    function on_control(data2) {
      if (data2.command == "close") {
        on_close(data2);
        return;
      } else if (data2.command == "ready") {
        on_ready(data2);
      }
      const done = data2.command === "done";
      if (done && received_done) {
        console.warn("received two done commands on channel");
        self2.close("protocol-error");
      } else {
        if (done)
          received_done = true;
        self2.dispatchEvent("control", data2);
      }
    }
    function send_payload(payload) {
      if (!binary) {
        if (typeof payload !== "string")
          payload = String(payload);
      }
      transport.send_message(payload, id);
    }
    ensure_transport(function(trans) {
      transport = trans;
      if (closed)
        return;
      id = transport.next_channel();
      self2.id = id;
      transport.register(id, on_control, on_message);
      const command = {};
      for (const i in options)
        if (i !== "binary")
          command[i] = options[i];
      if (binary)
        command.binary = "raw";
      command.command = "open";
      command.channel = id;
      if (!command.host) {
        if (transport_globals.default_host)
          command.host = transport_globals.default_host;
      }
      command["flow-control"] = true;
      transport.send_control(command);
      while (queue.length > 0) {
        const item = queue.shift();
        if (item[0]) {
          item[1].channel = id;
          transport.send_control(item[1]);
        } else {
          send_payload(item[1]);
        }
      }
    });
    self2.send = function send(message) {
      if (closed)
        console.warn("sending message on closed channel");
      else if (sent_done)
        console.warn("sending message after done");
      else if (!transport)
        queue.push([false, message]);
      else
        send_payload(message);
    };
    self2.control = function control(options2) {
      options2 = options2 || {};
      if (!options2.command)
        options2.command = "options";
      if (options2.command === "done")
        sent_done = true;
      options2.channel = id;
      if (!transport)
        queue.push([true, options2]);
      else
        transport.send_control(options2);
    };
    self2.wait = function wait(callback) {
      if (!waiting) {
        waiting = new Deferred();
        if (closed) {
          waiting.reject(closed);
        } else if (ready) {
          waiting.resolve(ready);
        } else {
          self2.addEventListener("ready", function(event, data2) {
            waiting.resolve(data2);
          });
          self2.addEventListener("close", function(event, data2) {
            waiting.reject(data2);
          });
        }
      }
      const promise = waiting.promise;
      if (callback)
        promise.then(callback, callback);
      return promise;
    };
    self2.close = function close(options2) {
      if (closed)
        return;
      if (!options2)
        options2 = {};
      else if (typeof options2 == "string")
        options2 = { problem: options2 };
      options2.command = "close";
      options2.channel = id;
      if (!transport)
        queue.push([true, options2]);
      else
        transport.send_control(options2);
      on_close(options2);
    };
    self2.buffer = function buffer(callback) {
      const buffers = [];
      buffers.callback = callback;
      buffers.squash = function squash() {
        return join_data(buffers, binary);
      };
      function on_message2(event, data2) {
        buffers.push(data2);
        if (buffers.callback) {
          const block = join_data(buffers, binary);
          if (block.length > 0) {
            const consumed = buffers.callback.call(self2, block);
            if (typeof consumed !== "number" || consumed === block.length) {
              buffers.length = 0;
            } else if (consumed === 0) {
              buffers.length = 1;
              buffers[0] = block;
            } else if (consumed !== 0) {
              buffers.length = 1;
              if (block.subarray)
                buffers[0] = block.subarray(consumed);
              else if (block.substring)
                buffers[0] = block.substring(consumed);
              else
                buffers[0] = block.slice(consumed);
            }
          }
        }
      }
      function on_close2() {
        self2.removeEventListener("message", on_message2);
        self2.removeEventListener("close", on_close2);
      }
      self2.addEventListener("message", on_message2);
      self2.addEventListener("close", on_close2);
      return buffers;
    };
    self2.toString = function toString() {
      const host = options.host || "localhost";
      return "[Channel " + (self2.valid ? id : "<invalid>") + " -> " + host + "]";
    };
  }

  // pkg/lib/cockpit/_internal/location.ts
  var _hash_changed, _Location_instances, resolve_path_dots_fn, href_for_go_or_replace_fn, decode_path_fn;
  var _Location = class _Location {
    constructor() {
      __privateAdd(this, _Location_instances);
      __privateAdd(this, _hash_changed, false);
      const application = calculate_application();
      this.url_root = url_root || "";
      if (window.mock?.url_root)
        this.url_root = window.mock.url_root;
      if (application.indexOf("cockpit+=") === 0) {
        if (this.url_root)
          this.url_root += "/";
        this.url_root = this.url_root + application.replace("cockpit+", "");
      }
      this.href = window.location.hash.slice(1);
      this.options = {};
      this.path = this.decode(this.href, this.options);
    }
    encode(path, options, with_root = false) {
      if (typeof path == "string")
        path = __privateMethod(this, _Location_instances, decode_path_fn).call(this, path);
      let href2 = "/" + path.map(encodeURIComponent).join("/");
      if (with_root && this.url_root && href2.indexOf("/" + this.url_root + "/") !== 0)
        href2 = "/" + this.url_root + href2;
      href2 = href2.replaceAll("%40", "@");
      href2 = href2.replaceAll("%3D", "=");
      href2 = href2.replaceAll("%2B", "+");
      href2 = href2.replaceAll("%23", "#");
      const query = [];
      if (options) {
        for (const opt in options) {
          let value = options[opt];
          if (!Array.isArray(value))
            value = [value];
          value.forEach(function(v) {
            query.push(encodeURIComponent(opt) + "=" + encodeURIComponent(v));
          });
        }
        if (query.length > 0)
          href2 += "?" + query.join("&");
      }
      return href2;
    }
    // NOTE: The options argument is modified in place
    decode(href2, options) {
      if (href2[0] == "#")
        href2 = href2.substring(1);
      const pos = href2.indexOf("?");
      const first = pos === -1 ? href2 : href2.substring(0, pos);
      const path = __privateMethod(this, _Location_instances, decode_path_fn).call(this, first);
      if (pos !== -1 && options) {
        href2.substring(pos + 1).split("&").forEach(function(opt) {
          const parts = opt.split("=");
          const name = decodeURIComponent(parts[0]);
          const value = decodeURIComponent(parts[1]);
          if (options[name]) {
            let last = options[name];
            if (!Array.isArray(last))
              last = options[name] = [last];
            last.push(value);
          } else {
            options[name] = value;
          }
        });
      }
      return path;
    }
    replace(path, options) {
      if (__privateGet(this, _hash_changed))
        return;
      const href2 = __privateMethod(this, _Location_instances, href_for_go_or_replace_fn).call(this, path, options);
      window.location.replace(window.location.pathname + "#" + href2);
    }
    go(path, options) {
      if (__privateGet(this, _hash_changed))
        return;
      const href2 = __privateMethod(this, _Location_instances, href_for_go_or_replace_fn).call(this, path, options);
      window.location.hash = "#" + href2;
    }
    invalidate() {
      __privateSet(this, _hash_changed, true);
    }
    toString() {
      return this.href;
    }
  };
  _hash_changed = new WeakMap();
  _Location_instances = new WeakSet();
  resolve_path_dots_fn = function(parts) {
    const out = [];
    for (let i = 0; i < parts.length; i++) {
      const part = parts[i];
      if (part === "" || part == ".") {
        continue;
      } else if (part == "..") {
        if (out.length === 0)
          return [];
        out.pop();
      } else {
        out.push(part);
      }
    }
    return out;
  };
  href_for_go_or_replace_fn = function(path, options) {
    options = options || {};
    if (typeof path === "string") {
      return this.encode(this.decode(path, options), options);
    } else if (path instanceof _Location) {
      return path.href;
    } else {
      return this.encode(path, options);
    }
  };
  decode_path_fn = function(input) {
    let result, i;
    let pre_parts = [];
    const parts = input.split("/").map(decodeURIComponent);
    if (this.url_root)
      pre_parts = this.url_root.split("/").map(decodeURIComponent);
    if (input && input[0] !== "/" && this.path !== void 0) {
      result = [...this.path];
      result.pop();
      result = result.concat(parts);
    } else {
      result = parts;
    }
    result = __privateMethod(this, _Location_instances, resolve_path_dots_fn).call(this, result);
    for (i = 0; i < pre_parts.length; i++) {
      if (pre_parts[i] !== result[i])
        break;
    }
    if (i == pre_parts.length)
      result.splice(0, pre_parts.length);
    return result;
  };
  var Location = _Location;

  // pkg/lib/cockpit/channel.ts
  var _transport, _received, _queue, _sent_done, _Channel_instances, on_control_fn;
  var Channel2 = class extends EventEmitter {
    /**
     * Open a new channel to the bridge.
     *
     * @options: The options for the channel.  A payload type must be specified.
     */
    constructor(options) {
      super();
      __privateAdd(this, _Channel_instances);
      this.id = null;
      __privateAdd(this, _transport, null);
      __privateAdd(this, _received, {});
      __privateAdd(this, _queue, []);
      __privateAdd(this, _sent_done, false);
      this.options = { ...options };
      this.binary = options?.binary === true;
      ensure_transport((transport) => {
        if (__privateGet(this, _received).close)
          return;
        __privateSet(this, _transport, transport);
        this.id = transport.next_channel();
        transport.register(
          this.id,
          (control) => {
            if (typeof control.command !== "string") {
              console.error("Received control message without command", this.id, this.options, control);
            } else {
              __privateMethod(this, _Channel_instances, on_control_fn).call(this, control);
            }
          },
          (data2) => {
            if (this.binary && typeof data2 === "string") {
              console.error("Text message received on binary channel", this.id, this.options, data2);
            } else if (!this.binary && typeof data2 !== "string") {
              console.error("Binary message received on text channel", this.id, this.options, data2);
            } else {
              this.emit("data", data2);
            }
          }
        );
        const command = { ...this.options };
        if (!command.host && transport_globals.default_host) {
          command.host = transport_globals.default_host;
        }
        if (this.binary) {
          command.binary = "raw";
        } else {
          delete command.binary;
        }
        transport.send_control({ ...command, command: "open", channel: this.id, "flow-control": true });
        for (const [is_control, message] of __privateGet(this, _queue)) {
          if (is_control) {
            transport.send_control({ ...message, channel: this.id });
          } else {
            transport.send_message(message, this.id);
          }
        }
        __privateSet(this, _queue, []);
      });
    }
    /**
     * Sends a payload frame.
     *
     * You may not call this after you've sent a 'done' control message or
     * after the channel has been closed.  This implies that you need to
     * register a 'close' event handler, and stop sending data after it's
     * called.
     *
     * @message the payload to send, either a string or a Uint8Array.
     */
    send_data(message) {
      if (__privateGet(this, _sent_done)) {
        console.error("sending data after .done()", this.id, this.options, message);
      } else if (__privateGet(this, _received).close) {
        console.error("sending data after close", this.id, this.options, message);
      } else if (__privateGet(this, _transport) && this.id) {
        __privateGet(this, _transport).send_message(message, this.id);
      } else {
        __privateGet(this, _queue).push([false, message]);
      }
    }
    /**
     * Sends a control message on the channel.
     *
     * You may not call this after the channel is closed.  This implies that
     * you need to register a 'close' event handler, and stop sending data
     * after it's called.
     *
     * @options: the message to send.  A command must be specified.
     */
    send_control(options) {
      if (__privateGet(this, _received).close) {
        console.error("sending control after close", this.id, this.options, options);
        return;
      }
      if (options.command === "close") {
        __privateMethod(this, _Channel_instances, on_control_fn).call(this, options);
      } else if (options.command === "done") {
        __privateSet(this, _sent_done, true);
      }
      if (__privateGet(this, _transport) && this.id) {
        __privateGet(this, _transport).send_control({ ...options, channel: this.id });
      } else {
        __privateGet(this, _queue).push([true, options]);
      }
    }
    /**
     * Sends a done control message on the channel.  This is something like
     * EOF: it means that you won't send any more data using `.send_data()`.
     *
     * @options: optional extra arguments for the message.
     */
    done(options) {
      this.send_control({ ...options, command: "done" });
    }
    /**
     * Closes the channel.
     *
     * This means that you're completely finished with the channel.  Any
     * underlying resources will be freed as soon as possible.  When you call
     * this you'll receive a 'close' signal (synchronously) and then nothing
     * else.
     *
     * @problem: a problem code.  If this is unset it implies something like a
     * "successful" close.  Otherwise, it indicates an error.
     * @options: the bridge will ignore this, but it will be thrown as the
     * result of any pending wait() operations and passed to the 'close' signal
     * handler, so you can use it to communicate with your own code.
     */
    close(problem, options) {
      if (!__privateGet(this, _received).close) {
        this.send_control({ ...options, ...problem && { problem }, command: "close" });
      }
    }
    /**
     * Waits for the result of the channel open request.
     *
     * @return: the content of the ready message, on success
     * @throws: the content of the close message, on fail
     */
    wait() {
      return new Promise((resolve, reject) => {
        if (__privateGet(this, _received).ready) {
          resolve(__privateGet(this, _received).ready);
        } else if (__privateGet(this, _received).close) {
          reject(__privateGet(this, _received).close);
        } else {
          this.on("ready", resolve);
          this.on("close", reject);
        }
      });
    }
    /**
     * Provides a text description of the channel.
     */
    toString() {
      const state = !this.id && "waiting for transport" || __privateGet(this, _received).close?.problem && `${this.id} error ${__privateGet(this, _received).close.problem}` || __privateGet(this, _received).close && `${this.id} closed` || __privateGet(this, _received).ready && `${this.id} opened` || `${this.id} waiting for open`;
      const host = this.options?.host || "localhost";
      return `[Channel ${state} -> ${this.options?.payload}@${host}]`;
    }
  };
  _transport = new WeakMap();
  _received = new WeakMap();
  _queue = new WeakMap();
  _sent_done = new WeakMap();
  _Channel_instances = new WeakSet();
  on_control_fn = function(control) {
    const command = control.command;
    if (command === "ready" || command === "close" || command === "done") {
      if (__privateGet(this, _received)[command]) {
        console.error("received duplicate control message", this.id, this.options, control);
        return;
      }
      __privateGet(this, _received)[command] = control;
      this.emit(command, control);
    } else {
      this.emit("control", control);
    }
    if (command === "close") {
      if (__privateGet(this, _transport) && this.id)
        __privateGet(this, _transport).unregister(this.id);
      if (control.message && !this.options?.err)
        console.warn("channel error", control.message, this.id, this.options);
    }
  };

  // pkg/lib/cockpit/fsinfo.ts
  function is_json_dict(value) {
    return value?.constructor === Object;
  }
  function json_merge(current, patch) {
    if (is_json_dict(patch)) {
      const updated = is_json_dict(current) ? { ...current } : {};
      for (const [key, value] of Object.entries(patch)) {
        if (value === null) {
          delete updated[key];
        } else {
          updated[key] = json_merge(updated[key], value);
        }
      }
      return updated;
    } else {
      return patch;
    }
  }
  var FsInfoClient = class extends EventEmitter {
    constructor(path, attrs, options) {
      super();
      this.state = { loading: true };
      this.partial_state = null;
      this.channel = new Channel2({
        payload: "fsinfo",
        path,
        attrs,
        watch: true,
        ...options
      });
      this.channel.on("data", (payload) => {
        this.partial_state = json_merge(this.partial_state, JSON.parse(payload));
        if (is_json_dict(this.partial_state) && !this.partial_state.partial) {
          this.state = { ...this.partial_state };
          this.emit("change", this.state);
        }
      });
      this.channel.on("close", (message) => {
        this.emit("close", message);
      });
    }
    close() {
      this.channel.close();
    }
    static entry(info2, name) {
      return info2.entries?.[name] ?? null;
    }
    static target(info2, name) {
      const entries = info2.entries ?? {};
      const targets = info2.targets ?? {};
      let entry = entries[name] ?? null;
      for (let i = 0; i < 40; i++) {
        const target = entry?.target;
        if (!target)
          return entry;
        if (target === ".")
          return info2;
        entry = entries[target] ?? targets[target] ?? null;
      }
      return null;
    }
  };

  // pkg/lib/cockpit.js
  function factory() {
    const cockpit2 = {};
    event_mixin(cockpit2, {});
    cockpit2.channel = function channel(options) {
      return new Channel(options);
    };
    cockpit2.event_target = function event_target(obj) {
      event_mixin(obj, {});
      return obj;
    };
    cockpit2.extend = Object.assign;
    cockpit2.manifests = {};
    cockpit2.base64_encode = base64_encode;
    cockpit2.base64_decode = base64_decode;
    cockpit2.kill = function kill(host, group) {
      const options = {};
      if (host)
        options.host = host;
      if (group)
        options.group = group;
      cockpit2.transport.control("kill", options);
    };
    cockpit2.hint = function hint(name, options) {
      if (!transport_globals.default_transport)
        return;
      if (!options)
        options = transport_globals.default_host;
      if (typeof options == "string")
        options = { host: options };
      options.hint = name;
      cockpit2.transport.control("hint", options);
    };
    cockpit2.transport = {
      wait: ensure_transport,
      inject: function inject(message, out) {
        if (!transport_globals.default_transport)
          return false;
        if (out === void 0 || out)
          return transport_globals.default_transport.send_data(message);
        else
          return transport_globals.default_transport.dispatch_data({ data: message });
      },
      filter: function filter(callback, out) {
        if (out) {
          console.error("'out' filters are no longer supported");
        } else {
          transport_globals.incoming_filters.push(callback);
        }
      },
      close: function close(problem) {
        if (transport_globals.default_transport)
          transport_globals.default_transport.close(problem ? { problem } : void 0);
        transport_globals.default_transport = null;
        this.options = {};
      },
      origin: transport_origin,
      options: {},
      uri: calculate_url,
      control: function(command, options) {
        options = { ...options, command };
        ensure_transport(function(transport) {
          transport.send_control(options);
        });
      },
      application: function() {
        if (!transport_globals.default_transport || window.mock)
          return calculate_application();
        return transport_globals.default_transport.application;
      }
    };
    cockpit2.resolve = function resolve(result) {
      console.warn("cockpit.resolve() is deprecated. Use Promise.resolve()");
      return Promise.resolve(result);
    };
    cockpit2.reject = function reject(ex) {
      console.warn("cockpit.reject() is deprecated. Use Promise.reject()");
      return Promise.reject(ex);
    };
    cockpit2.defer = function() {
      return new Deferred();
    };
    const fmt_re = /\$\{([^}]+)\}|\$([a-zA-Z0-9_]+)/g;
    cockpit2.format = function format(fmt, args) {
      if (arguments.length != 2 || !is_object(args) || args === null)
        args = Array.prototype.slice.call(arguments, 1);
      function replace2(m, x, y) {
        const value = args[x || y];
        if (value === 0)
          return "0";
        return value || "";
      }
      return fmt.replace(fmt_re, replace2);
    };
    cockpit2.format_number = function format_number(number, precision) {
      if (precision === void 0)
        precision = 3;
      const lang = cockpit2.language === void 0 ? void 0 : cockpit2.language.replace("_", "-");
      const smallestValue = 10 ** -precision;
      if (!number && number !== 0)
        return "";
      else if (number % 1 === 0)
        return number.toString();
      else if (number > 0 && number <= smallestValue)
        return smallestValue.toLocaleString(lang);
      else if (number < 0 && number >= -smallestValue)
        return (-smallestValue).toLocaleString(lang);
      else if (number > 999 || number < -999)
        return number.toFixed(0);
      else
        return number.toLocaleString(lang, {
          maximumSignificantDigits: precision,
          minimumSignificantDigits: precision
        });
    };
    let deprecated_format_warned = false;
    function format_units(suffixes, number, second_arg, third_arg) {
      let options = second_arg;
      let factor = options?.base2 ? 1024 : 1e3;
      if (third_arg || second_arg && !is_object(second_arg)) {
        if (!deprecated_format_warned) {
          console.warn(`cockpit.format_{bytes,bits}[_per_sec](..., ${second_arg}, ${third_arg}) is deprecated.`);
          deprecated_format_warned = true;
        }
        factor = second_arg || 1e3;
        options = third_arg;
        if (!is_object(options))
          options = { separate: options };
      }
      let suffix = null;
      if (!number && number !== 0) {
        suffix = null;
      } else if (typeof factor === "string") {
        const keys = [];
        for (const key in suffixes)
          keys.push(key);
        keys.sort().reverse();
        for (let y = 0; y < keys.length; y++) {
          for (let x = 0; x < suffixes[keys[y]].length; x++) {
            if (factor == suffixes[keys[y]][x]) {
              number = number / Math.pow(keys[y], x);
              suffix = factor;
              break;
            }
          }
          if (suffix)
            break;
        }
      } else if (factor in suffixes) {
        let divisor = 1;
        for (let i = 0; i < suffixes[factor].length; i++) {
          const quotient = number / divisor;
          if (quotient < factor) {
            number = quotient;
            suffix = suffixes[factor][i];
            break;
          }
          divisor *= factor;
        }
      }
      const string_representation = cockpit2.format_number(number, options?.precision);
      let ret;
      if (string_representation && suffix)
        ret = [string_representation, suffix];
      else
        ret = [string_representation];
      if (!options?.separate)
        ret = ret.join(" ");
      return ret;
    }
    const byte_suffixes = {
      1e3: ["B", "kB", "MB", "GB", "TB", "PB", "EB", "ZB"],
      1024: ["B", "KiB", "MiB", "GiB", "TiB", "PiB", "EiB", "ZiB"]
    };
    cockpit2.format_bytes = function format_bytes(number, ...args) {
      return format_units(byte_suffixes, number, ...args);
    };
    const byte_sec_suffixes = {
      1e3: ["B/s", "kB/s", "MB/s", "GB/s", "TB/s", "PB/s", "EB/s", "ZB/s"],
      1024: ["B/s", "KiB/s", "MiB/s", "GiB/s", "TiB/s", "PiB/s", "EiB/s", "ZiB/s"]
    };
    cockpit2.format_bytes_per_sec = function format_bytes_per_sec(number, ...args) {
      return format_units(byte_sec_suffixes, number, ...args);
    };
    const bit_suffixes = {
      1e3: ["bps", "Kbps", "Mbps", "Gbps", "Tbps", "Pbps", "Ebps", "Zbps"]
    };
    cockpit2.format_bits_per_sec = function format_bits_per_sec(number, ...args) {
      return format_units(bit_suffixes, number, ...args);
    };
    function StorageHelper(storageName) {
      const self2 = this;
      let storage;
      try {
        storage = window[storageName];
      } catch (e) {
      }
      self2.prefixedKey = function(key) {
        return cockpit2.transport.application() + ":" + key;
      };
      self2.getItem = function(key, both) {
        let value = storage.getItem(self2.prefixedKey(key));
        if (!value && both)
          value = storage.getItem(key);
        return value;
      };
      self2.setItem = function(key, value, both) {
        storage.setItem(self2.prefixedKey(key), value);
        if (both)
          storage.setItem(key, value);
      };
      self2.removeItem = function(key, both) {
        storage.removeItem(self2.prefixedKey(key));
        if (both)
          storage.removeItem(key);
      };
      self2.clear = function(full) {
        let i = 0;
        while (i < storage.length) {
          const k = storage.key(i);
          if (full && k.indexOf("cockpit") !== 0)
            storage.removeItem(k);
          else if (k.indexOf(cockpit2.transport.application()) === 0)
            storage.removeItem(k);
          else
            i++;
        }
      };
    }
    cockpit2.localStorage = new StorageHelper("localStorage");
    cockpit2.sessionStorage = new StorageHelper("sessionStorage");
    function lookup_storage(win) {
      let storage;
      if (win.parent && win.parent !== win)
        storage = lookup_storage(win.parent);
      if (!storage) {
        try {
          storage = win["cv1-storage"];
          if (!storage)
            win["cv1-storage"] = storage = {};
        } catch (ex) {
        }
      }
      return storage;
    }
    function StorageCache(org_key, provider, consumer) {
      const self2 = this;
      const key = cockpit2.transport.application() + ":" + org_key;
      const trigger = window.sessionStorage;
      let last;
      const storage = lookup_storage(window);
      let claimed = false;
      let source;
      function callback() {
        if (storage[key] !== void 0) {
          const value = storage[key];
          window.setTimeout(function() {
            if (consumer(value, org_key) === false)
              self2.close();
          });
        }
      }
      function result(value) {
        if (source && !claimed)
          claimed = true;
        if (!claimed)
          return;
        const version = Math.floor(Math.random() * 1e7) + 1;
        const ev = document.createEvent("StorageEvent");
        ev.initStorageEvent(
          "storage",
          false,
          false,
          key,
          null,
          version,
          window.location,
          trigger
        );
        storage[key] = value;
        trigger.setItem(key, version);
        ev.self = self2;
        window.dispatchEvent(ev);
      }
      self2.claim = function claim() {
        if (source)
          return;
        const claiming = { close: function() {
        } };
        source = claiming;
        const changed2 = provider(result, org_key);
        if (source === claiming)
          source = changed2;
        else
          changed2.close();
      };
      function unclaim() {
        if (source?.close)
          source.close();
        source = null;
        if (!claimed)
          return;
        claimed = false;
        let current_value = trigger.getItem(key);
        if (current_value)
          current_value = parseInt(current_value, 10);
        else
          current_value = null;
        if (last && last === current_value) {
          const ev = document.createEvent("StorageEvent");
          const version = trigger[key];
          ev.initStorageEvent(
            "storage",
            false,
            false,
            key,
            version,
            null,
            window.location,
            trigger
          );
          delete storage[key];
          trigger.removeItem(key);
          ev.self = self2;
          window.dispatchEvent(ev);
        }
      }
      function changed(event) {
        if (event.key !== key)
          return;
        if (event.self !== self2) {
          if (!event.newValue && !claimed) {
            self2.claim();
            return;
          }
        } else if (claimed && !event.oldValue && event.newValue !== trigger.getItem(key)) {
          unclaim();
        }
        let new_value = null;
        if (event.newValue)
          new_value = parseInt(event.newValue, 10);
        if (last !== new_value) {
          last = new_value;
          callback();
        }
      }
      self2.close = function() {
        window.removeEventListener("storage", changed, true);
        unclaim();
      };
      window.addEventListener("storage", changed, true);
      window.addEventListener("beforeunload", function() {
        self2.close();
      });
      window.addEventListener("unload", function() {
        self2.close();
      });
      if (trigger.getItem(key))
        callback();
      else
        self2.claim();
    }
    cockpit2.cache = function cache(key, provider, consumer) {
      return new StorageCache(key, provider, consumer);
    };
    function SeriesSink(interval, identifier, fetch_callback) {
      const self2 = this;
      self2.interval = interval;
      self2.limit = identifier ? 64 * 1024 : 1024;
      const index = setup_index(identifier);
      let count = 0;
      let head = null;
      let tail = null;
      function setup_index(id) {
        if (!id)
          return [];
        const storage = lookup_storage(window);
        let index2 = storage[id];
        if (!index2)
          storage[id] = index2 = [];
        return index2;
      }
      function search(idx, beg) {
        let low = 0;
        let high = idx.length - 1;
        while (low <= high) {
          const mid = (low + high) / 2 | 0;
          const val = idx[mid].beg;
          if (val < beg)
            low = mid + 1;
          else if (val > beg)
            high = mid - 1;
          else
            return mid;
        }
        return low;
      }
      function fetch2(beg, end3, for_walking) {
        if (fetch_callback) {
          if (!for_walking) {
            stash(beg, new Array(end3 - beg), {});
          }
          fetch_callback(beg, end3, for_walking);
        }
      }
      self2.load = function load(beg, end3, for_walking) {
        if (end3 <= beg)
          return;
        const at = search(index, beg);
        const len = index.length;
        let last = beg;
        const fetches = [];
        for (let i = at > 0 ? at - 1 : at; i < len; i++) {
          const entry = index[i];
          const en = entry.items.length;
          if (!en)
            continue;
          const eb = entry.beg;
          const b = Math.max(eb, beg);
          const e = Math.min(eb + en, end3);
          if (b < e) {
            if (b > last)
              fetches.push([last, b]);
            process2(b, entry.items.slice(b - eb, e - eb), entry.mapping);
            last = e;
          } else if (i >= at) {
            break;
          }
        }
        for (let i = 0; i < fetches.length; i++)
          fetch2(fetches[i][0], fetches[i][1], for_walking);
        if (last != end3)
          fetch2(last, end3, for_walking);
      };
      function stash(beg, items, mapping) {
        if (!items.length)
          return;
        let at = search(index, beg);
        const end3 = beg + items.length;
        const len = index.length;
        let i;
        for (i = at > 0 ? at - 1 : at; i < len; i++) {
          const entry2 = index[i];
          const en = entry2.items.length;
          if (!en)
            continue;
          const eb = entry2.beg;
          const b = Math.max(eb, beg);
          const e = Math.min(eb + en, end3);
          if (b < e) {
            const num = e - b;
            entry2.items.splice(b - eb, num);
            count -= num;
            if (b - eb === 0)
              entry2.beg += e - eb;
          } else if (i >= at) {
            break;
          }
        }
        const entry = { beg, items, mapping };
        if (!head)
          head = entry;
        if (tail)
          tail.next = entry;
        tail = entry;
        count += items.length;
        index.splice(at, 0, entry);
        for (at--; at <= i; at++) {
          const entry2 = index[at];
          if (entry2 && !entry2.items.length) {
            index.splice(at, 1);
            at--;
          }
        }
        while (head && count > self2.limit) {
          count -= head.items.length;
          head.items = [];
          head.mapping = null;
          head = head.next || null;
        }
        const newlen = index.length;
        for (i = 0; i < newlen; i++) {
          if (index[i].items.length > 0)
            break;
        }
        index.splice(0, i);
      }
      const registered = {};
      self2._register = function _register(grid, id) {
        if (grid.interval != interval)
          throw Error("mismatched metric interval between grid and sink");
        let gdata = registered[id];
        if (!gdata) {
          gdata = registered[id] = { grid, links: [] };
          gdata.links.remove = function remove() {
            delete registered[id];
          };
        }
        return gdata.links;
      };
      function process2(beg, items, mapping) {
        const end3 = beg + items.length;
        for (const id in registered) {
          const gdata = registered[id];
          const grid = gdata.grid;
          const b = Math.max(beg, grid.beg);
          const e = Math.min(end3, grid.end);
          if (b < e) {
            const f = b - beg;
            const t = b - grid.beg;
            const n = e - b;
            for (let i = 0; i < n; i++) {
              const klen = gdata.links.length;
              for (let k = 0; k < klen; k++) {
                const path = gdata.links[k][0];
                const row = gdata.links[k][1];
                let data2 = items[f + i];
                let map = mapping;
                const jlen = path.length;
                for (let j = 0; data2 !== void 0 && j < jlen; j++) {
                  if (!data2) {
                    data2 = void 0;
                  } else if (map !== void 0 && map !== null) {
                    map = map[path[j]];
                    if (map)
                      data2 = data2[map[""]];
                    else
                      data2 = data2[path[j]];
                  } else {
                    data2 = data2[path[j]];
                  }
                }
                row[t + i] = data2;
              }
            }
            grid.notify(t, n);
          }
        }
      }
      self2.input = function input(beg, items, mapping) {
        process2(beg, items, mapping);
        stash(beg, items, mapping);
      };
      self2.close = function() {
        for (const id in registered) {
          const grid = registered[id];
          if (grid?.grid)
            grid.grid.remove_sink(self2);
        }
      };
    }
    cockpit2.series = function series(interval, cache, fetch2) {
      return new SeriesSink(interval, cache, fetch2);
    };
    let unique = 1;
    function SeriesGrid(interval, beg, end3) {
      const self2 = this;
      event_mixin(self2, {});
      const rows = [];
      self2.interval = interval;
      self2.beg = 0;
      self2.end = 0;
      const callbacks = [];
      const sinks = [];
      let suppress = 0;
      const id = "g1-" + unique;
      unique += 1;
      let walking = null;
      let offset3 = null;
      self2.notify = function notify(x, n) {
        if (suppress)
          return;
        if (x + n > self2.end - self2.beg)
          n = self2.end - self2.beg - x;
        if (n <= 0)
          return;
        const jlen = callbacks.length;
        for (let j = 0; j < jlen; j++) {
          const callback = callbacks[j][0];
          const row = callbacks[j][1];
          callback.call(self2, row, x, n);
        }
        self2.dispatchEvent("notify", x, n);
      };
      self2.add = function add() {
        const row = [];
        rows.push(row);
        if (is_object(arguments[0])) {
          const sink = arguments[0].series || arguments[0];
          let path = arguments[1];
          if (!path)
            path = [];
          else if (typeof path === "string")
            path = path.split(".");
          const links = sink._register(self2, id);
          if (!links.length)
            sinks.push({ sink, links });
          links.push([path, row]);
        } else if (is_function(arguments[0])) {
          const cb = [arguments[0], row];
          if (arguments[1] === true)
            callbacks.unshift(cb);
          else
            callbacks.push(cb);
        } else if (arguments.length !== 0) {
          throw Error("invalid args to grid.add()");
        }
        return row;
      };
      self2.remove = function remove(row) {
        let ilen = sinks.length;
        for (let i = 0; i < ilen; i++) {
          const jlen = sinks[i].links.length;
          for (let j = 0; j < jlen; j++) {
            if (sinks[i].links[j][1] === row) {
              sinks[i].links.splice(j, 1);
              break;
            }
          }
        }
        ilen = rows.length;
        for (let i = 0; i < ilen; i++) {
          if (rows[i] === row) {
            rows.splice(i, 1);
            break;
          }
        }
      };
      self2.remove_sink = function remove_sink(sink) {
        const len = sinks.length;
        for (let i = 0; i < len; i++) {
          if (sinks[i].sink === sink) {
            sinks[i].links.remove();
            sinks.splice(i, 1);
            break;
          }
        }
      };
      self2.sync = function sync(for_walking) {
        suppress++;
        const len = sinks.length;
        for (let i = 0; i < len; i++) {
          const sink = sinks[i].sink;
          sink.load(self2.beg, self2.end, for_walking);
        }
        suppress--;
        self2.notify(0, self2.end - self2.beg);
      };
      function move_internal(beg2, end4, for_walking) {
        if (end4 === void 0)
          end4 = beg2 + (self2.end - self2.beg);
        if (end4 < beg2)
          beg2 = end4;
        self2.beg = beg2;
        self2.end = end4;
        if (!rows.length)
          return;
        rows.forEach(function(row) {
          row.length = 0;
        });
        self2.sync(for_walking);
      }
      function stop_walking() {
        window.clearInterval(walking);
        walking = null;
        offset3 = null;
      }
      function is_negative(n) {
        return ((n = +n) || 1 / n) < 0;
      }
      self2.move = function move(beg2, end4) {
        stop_walking();
        let now = null;
        if (beg2 === void 0) {
          beg2 = 0;
        } else if (is_negative(beg2)) {
          now = Date.now();
          beg2 = Math.floor(now / self2.interval) + beg2;
        }
        if (end4 !== void 0 && is_negative(end4)) {
          if (now === null)
            now = Date.now();
          end4 = Math.floor(now / self2.interval) + end4;
        }
        move_internal(beg2, end4, false);
      };
      self2.walk = function walk() {
        const start3 = Date.now();
        if (self2.interval > 2e9)
          return;
        stop_walking();
        offset3 = start3 - self2.beg * self2.interval;
        walking = window.setInterval(function() {
          const now = Date.now();
          move_internal(Math.floor((now - offset3) / self2.interval), void 0, true);
        }, self2.interval);
      };
      self2.close = function close() {
        stop_walking();
        while (sinks.length)
          sinks.pop().links.remove();
      };
      self2.move(beg, end3);
    }
    cockpit2.grid = function grid(interval, beg, end3) {
      return new SeriesGrid(interval, beg, end3);
    };
    function BasicError(problem, message) {
      this.problem = problem;
      this.message = message || cockpit2.message(problem);
      this.toString = function() {
        return this.message;
      };
    }
    cockpit2.logout = function logout(reload, reason) {
      cockpit2.sessionStorage.clear(true);
      cockpit2.localStorage.removeItem("login-data", true);
      cockpit2.localStorage.clear(false);
      if (reload !== false)
        transport_globals.reload_after_disconnect = true;
      ensure_transport(function(transport) {
        if (!transport.send_control({ command: "logout", disconnect: true }))
          window.location.reload(transport_globals.reload_after_disconnect);
      });
      window.sessionStorage.setItem("logout-intent", "explicit");
      if (reason)
        window.sessionStorage.setItem("logout-reason", reason);
    };
    cockpit2.drop_privileges = function drop_privileges() {
      ensure_transport(function(transport) {
        transport.send_control({ command: "logout", disconnect: false });
      });
    };
    cockpit2.info = {};
    event_mixin(cockpit2.info, {});
    transport_globals.init_callback = function(options) {
      if (options.system)
        Object.assign(cockpit2.info, options.system);
      if (options.system)
        cockpit2.info.dispatchEvent("changed");
      cockpit2.transport.options = options;
      cockpit2.transport.csrf_token = options["csrf-token"];
      cockpit2.transport.host = transport_globals.default_host;
    };
    let the_user = null;
    cockpit2.user = function() {
      if (!the_user) {
        const dbus = cockpit2.dbus(null, { bus: "internal" });
        return dbus.call(
          "/user",
          "org.freedesktop.DBus.Properties",
          "GetAll",
          ["cockpit.User"],
          { type: "s" }
        ).then(([user]) => {
          the_user = {
            id: user.Id.v,
            gid: user.Gid?.v,
            name: user.Name.v,
            full_name: user.Full.v,
            groups: user.Groups.v,
            home: user.Home.v,
            shell: user.Shell.v
          };
          return the_user;
        }).finally(() => dbus.close());
      } else {
        return Promise.resolve(the_user);
      }
    };
    document.addEventListener("click", function(ev) {
      if (ev.target.classList && in_array(ev.target.classList, "disabled"))
        ev.stopPropagation();
    }, true);
    let last_loc = null;
    Object.defineProperty(cockpit2, "location", {
      enumerable: true,
      get: function() {
        if (!last_loc || last_loc.href !== window.location.hash.slice(1))
          last_loc = new Location();
        return last_loc;
      },
      set: function(v) {
        cockpit2.location.go(v);
      }
    });
    window.addEventListener("hashchange", function() {
      if (last_loc)
        last_loc.invalidate();
      last_loc = null;
      const hash7 = window.location.hash.slice(1);
      cockpit2.hint("location", { hash: hash7 });
      cockpit2.dispatchEvent("locationchanged");
    });
    cockpit2.jump = function jump(path, host) {
      if (Array.isArray(path))
        path = "/" + path.map(encodeURIComponent).join("/").replaceAll("%40", "@").replaceAll("%3D", "=").replaceAll("%2B", "+");
      else
        path = "" + path;
      if (host === void 0)
        host = cockpit2.transport.host;
      const options = { command: "jump", location: path, host };
      cockpit2.transport.inject("\n" + JSON.stringify(options));
    };
    (function() {
      let hiddenHint = false;
      function visibility_change() {
        let value = document.hidden;
        if (value === false)
          value = hiddenHint;
        if (cockpit2.hidden !== value) {
          cockpit2.hidden = value;
          cockpit2.dispatchEvent("visibilitychange");
        }
      }
      document.addEventListener("visibilitychange", visibility_change);
      transport_globals.process_hints = function(data2) {
        if ("hidden" in data2) {
          hiddenHint = data2.hidden;
          visibility_change();
        }
      };
      visibility_change();
    })();
    function ProcessError(options, name) {
      this.problem = options.problem || null;
      this.exit_status = options["exit-status"];
      if (this.exit_status === void 0)
        this.exit_status = null;
      this.exit_signal = options["exit-signal"];
      if (this.exit_signal === void 0)
        this.exit_signal = null;
      this.message = options.message;
      if (this.message === void 0) {
        if (this.problem)
          this.message = cockpit2.message(options.problem);
        else if (this.exit_signal !== null)
          this.message = cockpit2.format(_3("$0 killed with signal $1"), name, this.exit_signal);
        else if (this.exit_status !== null)
          this.message = cockpit2.format(_3("$0 exited with code $1"), name, this.exit_status);
        else
          this.message = cockpit2.format(_3("$0 failed"), name);
      } else {
        this.message = this.message.trim();
      }
      this.toString = function() {
        return this.message;
      };
    }
    cockpit2.ProcessError = ProcessError;
    function spawn_debug() {
      if (window.debugging == "all" || window.debugging?.includes("spawn"))
        console.debug.apply(console, arguments);
    }
    cockpit2.spawn = function(command, options) {
      const dfd = cockpit2.defer();
      const args = { payload: "stream", spawn: [] };
      if (command instanceof Array) {
        for (let i = 0; i < command.length; i++)
          args.spawn.push(String(command[i]));
      } else {
        args.spawn.push(String(command));
      }
      if (options !== void 0)
        Object.assign(args, options);
      spawn_debug("process spawn:", JSON.stringify(args.spawn));
      const name = args.spawn[0] || "process";
      const channel = cockpit2.channel(args);
      const buffer = channel.buffer(null);
      channel.addEventListener("close", function(event, options2) {
        const data2 = buffer.squash();
        spawn_debug("process closed:", JSON.stringify(options2));
        if (data2)
          spawn_debug("process output:", data2);
        if (options2.message !== void 0)
          spawn_debug("process error:", options2.message);
        if (options2.problem)
          dfd.reject(new ProcessError(options2, name));
        else if (options2["exit-status"] || options2["exit-signal"])
          dfd.reject(new ProcessError(options2, name), data2);
        else if (options2.message !== void 0)
          dfd.resolve(data2, options2.message);
        else
          dfd.resolve(data2);
      });
      const ret = dfd.promise;
      ret.stream = function(callback) {
        buffer.callback = callback.bind(ret);
        return this;
      };
      ret.input = function(message, stream) {
        if (message !== null && message !== void 0) {
          spawn_debug("process input:", message);
          iterate_data(message, function(data2) {
            channel.send(data2);
          });
        }
        if (!stream)
          channel.control({ command: "done" });
        return this;
      };
      ret.close = function(problem) {
        spawn_debug("process closing:", problem);
        if (channel.valid)
          channel.close(problem);
        return this;
      };
      return ret;
    };
    cockpit2.script = function(script, args, options) {
      if (!options && is_plain_object(args)) {
        options = args;
        args = [];
      }
      const command = ["/bin/sh", "-c", script, "--"];
      command.push.apply(command, args);
      return cockpit2.spawn(command, options);
    };
    function dbus_debug() {
      if (window.debugging == "all" || window.debugging?.includes("dbus"))
        console.debug.apply(console, arguments);
    }
    function DBusError(arg, arg1) {
      if (typeof arg == "string") {
        this.problem = arg;
        this.name = null;
        this.message = arg1 || cockpit2.message(arg);
      } else {
        this.problem = null;
        this.name = arg[0];
        this.message = arg[1][0] || arg[0];
      }
      this.toString = function() {
        return this.message;
      };
    }
    function DBusCache() {
      const self2 = this;
      let callbacks = [];
      self2.data = {};
      self2.meta = {};
      self2.connect = function connect(path, iface, callback, first) {
        const cb = [path, iface, callback];
        if (first)
          callbacks.unshift(cb);
        else
          callbacks.push(cb);
        return {
          remove: function remove() {
            const length = callbacks.length;
            for (let i = 0; i < length; i++) {
              const cb2 = callbacks[i];
              if (cb2[0] === path && cb2[1] === iface && cb2[2] === callback) {
                delete cb2[i];
                break;
              }
            }
          }
        };
      };
      function emit(path, iface, props) {
        const copy = callbacks.slice();
        const length = copy.length;
        for (let i = 0; i < length; i++) {
          const cb = copy[i];
          if ((!cb[0] || cb[0] === path) && (!cb[1] || cb[1] === iface)) {
            cb[2](props, path);
          }
        }
      }
      self2.update = function update(path, iface, props) {
        if (!self2.data[path])
          self2.data[path] = {};
        if (!self2.data[path][iface])
          self2.data[path][iface] = props;
        else
          props = Object.assign(self2.data[path][iface], props);
        emit(path, iface, props);
      };
      self2.remove = function remove(path, iface) {
        if (self2.data[path]) {
          delete self2.data[path][iface];
          emit(path, iface, null);
        }
      };
      self2.lookup = function lookup(path, iface) {
        if (self2.data[path])
          return self2.data[path][iface];
        return void 0;
      };
      self2.each = function each(iface, callback) {
        for (const path in self2.data) {
          for (const ifa in self2.data[path]) {
            if (ifa == iface)
              callback(self2.data[path][iface], path);
          }
        }
      };
      self2.close = function close() {
        self2.data = {};
        const copy = callbacks;
        callbacks = [];
        const length = copy.length;
        for (let i = 0; i < length; i++)
          copy[i].callback();
      };
    }
    function DBusProxy(client, cache, iface, path, options) {
      const self2 = this;
      event_mixin(self2, {});
      let valid = false;
      let defined = false;
      const waits = cockpit2.defer();
      Object.defineProperties(self2, {
        client: { value: client, enumerable: false, writable: false },
        path: { value: path, enumerable: false, writable: false },
        iface: { value: iface, enumerable: false, writable: false },
        valid: { get: function() {
          return valid;
        }, enumerable: false },
        wait: {
          enumerable: false,
          writable: false,
          value: function(func) {
            if (func)
              waits.promise.always(func);
            return waits.promise;
          }
        },
        call: {
          value: function(name, args, options2) {
            return client.call(path, iface, name, args, options2);
          },
          enumerable: false,
          writable: false
        },
        data: { value: {}, enumerable: false }
      });
      if (!options)
        options = {};
      function define() {
        if (!cache.meta[iface])
          return;
        const meta = cache.meta[iface];
        defined = true;
        Object.keys(meta.methods || {}).forEach(function(name) {
          if (name[0].toLowerCase() == name[0])
            return;
          Object.defineProperty(self2, name, {
            enumerable: false,
            value: function() {
              const dfd = cockpit2.defer();
              client.call(path, iface, name, Array.prototype.slice.call(arguments)).done(function(reply) {
                dfd.resolve.apply(dfd, reply);
              }).fail(function(ex) {
                dfd.reject(ex);
              });
              return dfd.promise;
            }
          });
        });
        Object.keys(meta.properties || {}).forEach(function(name) {
          if (name[0].toLowerCase() == name[0])
            return;
          const config = {
            enumerable: true,
            get: function() {
              return self2.data[name];
            },
            set: function(v) {
              throw Error(name + "is not writable");
            }
          };
          const prop = meta.properties[name];
          if (prop.flags && prop.flags.indexOf("w") !== -1) {
            config.set = function(v) {
              client.call(
                path,
                "org.freedesktop.DBus.Properties",
                "Set",
                [iface, name, cockpit2.variant(prop.type, v)]
              ).fail(function(ex) {
                console.log("Couldn't set " + iface + " " + name + " at " + path + ": " + ex);
              });
            };
          }
          Object.defineProperty(self2, name, config);
        });
      }
      function update(props) {
        if (props) {
          Object.assign(self2.data, props);
          if (!defined)
            define();
          valid = true;
        } else {
          valid = false;
        }
        self2.dispatchEvent("changed", props);
      }
      cache.connect(path, iface, update, true);
      update(cache.lookup(path, iface));
      function signal(path2, iface2, name, args) {
        self2.dispatchEvent("signal", name, args);
        if (name[0].toLowerCase() != name[0]) {
          args = args.slice();
          args.unshift(name);
          self2.dispatchEvent.apply(self2, args);
        }
      }
      client.subscribe({ path, interface: iface }, signal, options.subscribe !== false);
      function waited(ex) {
        if (valid)
          waits.resolve();
        else
          waits.reject(ex);
      }
      if (options.watch !== false)
        client.watch({ path, interface: iface }).always(waited);
      else
        waited();
    }
    function DBusProxies(client, cache, iface, path_namespace, options) {
      const self2 = this;
      event_mixin(self2, {});
      self2.client = client;
      self2.iface = iface;
      self2.path_namespace = path_namespace;
      let waits;
      self2.wait = function(func) {
        if (func)
          waits.always(func);
        return waits;
      };
      Object.defineProperties(self2, {
        client: { enumerable: false, writable: false },
        iface: { enumerable: false, writable: false },
        path_namespace: { enumerable: false, writable: false },
        wait: { enumerable: false, writable: false }
      });
      const match = { interface: iface, path_namespace };
      client.subscribe(match);
      if (options.watch !== false) {
        waits = client.watch(match);
      } else {
        waits = cockpit2.defer().resolve().promise;
      }
      options = { watch: false, subscribe: false, ...options };
      function update(props, path) {
        let proxy = self2[path];
        if (path) {
          if (!props && proxy) {
            delete self2[path];
            self2.dispatchEvent("removed", proxy);
          } else if (props) {
            if (!proxy) {
              proxy = self2[path] = client.proxy(iface, path, options);
              self2.dispatchEvent("added", proxy);
            }
            self2.dispatchEvent("changed", proxy);
          }
        }
      }
      cache.connect(null, iface, update, false);
      cache.each(iface, update);
    }
    function DBusClient(name, options) {
      const self2 = this;
      event_mixin(self2, {});
      const args = {};
      let track = false;
      let owner = null;
      if (options) {
        if (options.track)
          track = true;
        delete options.track;
        Object.assign(args, options);
      }
      args.payload = "dbus-json3";
      if (name)
        args.name = name;
      self2.options = options;
      self2.unique_name = null;
      dbus_debug("dbus open: ", args);
      let channel = cockpit2.channel(args);
      const subscribers = {};
      let calls = {};
      let cache;
      let closed;
      self2.constructors = { "*": DBusProxy };
      self2.wait = channel.wait;
      function ensure_cache() {
        if (!cache)
          cache = new DBusCache();
      }
      function send(payload) {
        if (channel?.valid) {
          dbus_debug("dbus:", payload);
          channel.send(payload);
          return true;
        }
        return false;
      }
      function matches2(signal, match) {
        if (match.path && signal[0] !== match.path)
          return false;
        if (match.path_namespace && signal[0].indexOf(match.path_namespace) !== 0)
          return false;
        if (match.interface && signal[1] !== match.interface)
          return false;
        if (match.member && signal[2] !== match.member)
          return false;
        if (match.arg0 && (!signal[3] || signal[3][0] !== match.arg0))
          return false;
        return true;
      }
      function on_message(event, payload) {
        dbus_debug("dbus:", payload);
        let msg;
        try {
          msg = JSON.parse(payload);
        } catch (ex) {
          console.warn("received invalid dbus json message:", ex);
        }
        if (msg === void 0) {
          channel.close({ problem: "protocol-error" });
          return;
        }
        const dfd = msg.id !== void 0 ? calls[msg.id] : void 0;
        if (msg.reply) {
          if (dfd) {
            const options2 = {};
            if (msg.type)
              options2.type = msg.type;
            if (msg.flags)
              options2.flags = msg.flags;
            dfd.resolve(msg.reply[0] || [], options2);
            delete calls[msg.id];
          }
          return;
        } else if (msg.error) {
          if (dfd) {
            dfd.reject(new DBusError(msg.error));
            delete calls[msg.id];
          }
          return;
        }
        later_invoke(function() {
          if (msg.signal) {
            for (const id in subscribers) {
              const subscription = subscribers[id];
              if (subscription.callback) {
                if (matches2(msg.signal, subscription.match))
                  subscription.callback.apply(self2, msg.signal);
              }
            }
          } else if (msg.notify) {
            notify(msg.notify);
          } else if (msg.meta) {
            meta(msg.meta);
          } else if (msg.owner !== void 0) {
            self2.dispatchEvent("owner", msg.owner);
            if (track && owner)
              self2.close();
            owner = msg.owner;
          } else {
            dbus_debug("received unexpected dbus json message:", payload);
          }
        });
      }
      function meta(data2) {
        ensure_cache();
        Object.assign(cache.meta, data2);
        self2.dispatchEvent("meta", data2);
      }
      function notify(data2) {
        ensure_cache();
        for (const path in data2) {
          for (const iface in data2[path]) {
            const props = data2[path][iface];
            if (!props)
              cache.remove(path, iface);
            else
              cache.update(path, iface, props);
          }
        }
        self2.dispatchEvent("notify", data2);
      }
      this.notify = notify;
      function close_perform(options2) {
        closed = options2.problem || "disconnected";
        const outstanding = calls;
        calls = {};
        for (const id in outstanding) {
          outstanding[id].reject(new DBusError(closed, options2.message));
        }
        self2.dispatchEvent("close", options2);
      }
      this.close = function close(options2) {
        if (typeof options2 == "string")
          options2 = { problem: options2 };
        if (!options2)
          options2 = {};
        if (channel)
          channel.close(options2);
        else
          close_perform(options2);
      };
      function on_ready(event, message) {
        dbus_debug("dbus ready:", options);
        self2.unique_name = message["unique-name"];
      }
      function on_close(event, options2) {
        dbus_debug("dbus close:", options2);
        channel.removeEventListener("ready", on_ready);
        channel.removeEventListener("message", on_message);
        channel.removeEventListener("close", on_close);
        channel = null;
        close_perform(options2);
      }
      channel.addEventListener("ready", on_ready);
      channel.addEventListener("message", on_message);
      channel.addEventListener("close", on_close);
      let last_cookie = 1;
      this.call = function call(path, iface, method, args2, options2) {
        const dfd = cockpit2.defer();
        const id = String(last_cookie);
        last_cookie++;
        const method_call = {
          ...options2,
          call: [path, iface, method, args2 || []],
          id
        };
        const msg = JSON.stringify(method_call);
        if (send(msg))
          calls[id] = dfd;
        else
          dfd.reject(new DBusError(closed));
        return dfd.promise;
      };
      self2.signal = function signal(path, iface, member, args2, options2) {
        if (!channel || !channel.valid)
          return;
        const message = { ...options2, signal: [path, iface, member, args2 || []] };
        send(JSON.stringify(message));
      };
      this.subscribe = function subscribe(match, callback, rule) {
        const subscription = {
          match: { ...match },
          callback
        };
        if (rule !== false)
          send(JSON.stringify({ "add-match": subscription.match }));
        let id;
        if (callback) {
          id = String(last_cookie);
          last_cookie++;
          subscribers[id] = subscription;
        }
        return {
          remove: function() {
            let prev;
            if (id) {
              prev = subscribers[id];
              if (prev)
                delete subscribers[id];
            }
            if (rule !== false && prev)
              send(JSON.stringify({ "remove-match": prev.match }));
          }
        };
      };
      self2.watch = function watch(path) {
        const match = is_plain_object(path) ? { ...path } : { path: String(path) };
        const id = String(last_cookie);
        last_cookie++;
        const dfd = cockpit2.defer();
        const msg = JSON.stringify({ watch: match, id });
        if (send(msg))
          calls[id] = dfd;
        else
          dfd.reject(new DBusError(closed));
        const ret = dfd.promise;
        ret.remove = function remove() {
          if (id in calls) {
            dfd.reject(new DBusError("cancelled"));
            delete calls[id];
          }
          send(JSON.stringify({ unwatch: match }));
        };
        return ret;
      };
      self2.proxy = function proxy(iface, path, options2) {
        if (!iface)
          iface = name;
        iface = String(iface);
        if (!path)
          path = "/" + iface.replaceAll(".", "/");
        let Constructor = self2.constructors[iface];
        if (!Constructor)
          Constructor = self2.constructors["*"];
        if (!options2)
          options2 = {};
        ensure_cache();
        return new Constructor(self2, cache, iface, String(path), options2);
      };
      self2.proxies = function proxies(iface, path_namespace, options2) {
        if (!iface)
          iface = name;
        if (!path_namespace)
          path_namespace = "/";
        if (!options2)
          options2 = {};
        ensure_cache();
        return new DBusProxies(self2, cache, String(iface), String(path_namespace), options2);
      };
    }
    const shared_dbus = {
      internal: null,
      session: null,
      system: null
    };
    cockpit2.dbus = function dbus(name, options) {
      if (!options)
        options = { bus: "system" };
      const keys = Object.keys(options);
      const bus = options.bus;
      const shared = !name && keys.length == 1 && bus in shared_dbus;
      if (shared && shared_dbus[bus])
        return shared_dbus[bus];
      const client = new DBusClient(name, options);
      if (shared) {
        const old_close = client.close;
        client.close = function() {
          if (arguments.length > 0)
            old_close.apply(client, arguments);
        };
        client.addEventListener("close", function() {
          if (shared_dbus[bus] == client)
            shared_dbus[bus] = null;
        });
        shared_dbus[bus] = client;
      }
      return client;
    };
    cockpit2.variant = function variant(type, value) {
      return { v: value, t: type };
    };
    cockpit2.byte_array = function byte_array(string) {
      return window.btoa(string);
    };
    cockpit2.file = function file3(path, options) {
      options = options || {};
      const binary = options.binary;
      const self2 = {
        path,
        read: read3,
        replace: replace2,
        modify,
        watch,
        close
      };
      const base_channel_options = { ...options };
      delete base_channel_options.syntax;
      function parse2(str) {
        if (options.syntax?.parse)
          return options.syntax.parse(str);
        else
          return str;
      }
      function stringify(obj) {
        if (options.syntax?.stringify)
          return options.syntax.stringify(obj);
        else
          return obj;
      }
      let read_promise = null;
      let read_channel;
      function read3() {
        if (read_promise)
          return read_promise;
        const dfd = cockpit2.defer();
        const opts = {
          ...base_channel_options,
          payload: "fsread1",
          path
        };
        function try_read() {
          read_channel = cockpit2.channel(opts);
          const content_parts = [];
          read_channel.addEventListener("message", function(event, message) {
            content_parts.push(message);
          });
          read_channel.addEventListener("close", function(event, message) {
            read_channel = null;
            if (message.problem == "change-conflict") {
              try_read();
              return;
            }
            read_promise = null;
            if (message.problem) {
              const error = new BasicError(message.problem, message.message);
              fire_watch_callbacks(null, null, error);
              dfd.reject(error);
              return;
            }
            let content;
            if (message.tag == "-")
              content = null;
            else {
              try {
                content = parse2(join_data(content_parts, binary));
              } catch (e) {
                fire_watch_callbacks(null, null, e);
                dfd.reject(e);
                return;
              }
            }
            fire_watch_callbacks(content, message.tag);
            dfd.resolve(content, message.tag);
          });
        }
        try_read();
        read_promise = dfd.promise;
        return read_promise;
      }
      let replace_channel = null;
      function replace2(new_content, expected_tag) {
        const dfd = cockpit2.defer();
        let file_content;
        try {
          file_content = new_content === null ? null : stringify(new_content);
        } catch (e) {
          dfd.reject(e);
          return dfd.promise;
        }
        if (replace_channel)
          replace_channel.close("abort");
        const opts = {
          ...base_channel_options,
          payload: "fsreplace1",
          path,
          tag: expected_tag
        };
        replace_channel = cockpit2.channel(opts);
        replace_channel.addEventListener("close", function(event, message) {
          replace_channel = null;
          if (message.problem) {
            dfd.reject(new BasicError(message.problem, message.message));
          } else {
            fire_watch_callbacks(new_content, message.tag);
            dfd.resolve(message.tag);
          }
        });
        if (file_content !== null) {
          if (file_content.length === 0 || file_content.byteLength === 0) {
            replace_channel.send(file_content);
          } else {
            iterate_data(file_content, (data2) => {
              replace_channel.send(data2);
            });
          }
        }
        replace_channel.control({ command: "done" });
        return dfd.promise;
      }
      function modify(callback, initial_content, initial_tag) {
        const dfd = cockpit2.defer();
        function update(content, tag) {
          let new_content = callback(content);
          if (new_content === void 0)
            new_content = content;
          replace2(new_content, tag).done(function(new_tag) {
            dfd.resolve(new_content, new_tag);
          }).fail(function(error) {
            if (error.problem == "change-conflict")
              read_then_update();
            else
              dfd.reject(error);
          });
        }
        function read_then_update() {
          read3().done(update).fail(function(error) {
            dfd.reject(error);
          });
        }
        if (initial_content === void 0)
          read_then_update();
        else
          update(initial_content, initial_tag);
        return dfd.promise;
      }
      const watch_callbacks = [];
      let n_watch_callbacks = 0;
      let watch_channel = null;
      let watch_tag;
      function ensure_watch_channel(options2) {
        if (n_watch_callbacks > 0) {
          if (watch_channel)
            return;
          watch_channel = new FsInfoClient(path, ["tag"], { superuser: base_channel_options.superuser });
          watch_channel.on("change", (state) => {
            if (state.error) {
              if (state.error.problem === "not-found") {
                fire_watch_callbacks(null, "-");
              } else {
                const error = new BasicError(state.error.problem, state.error.message);
                fire_watch_callbacks(null, null, error);
              }
            } else if (state.info && state.info.tag) {
              if (state.info.tag !== watch_tag) {
                if (options2?.read === false)
                  fire_watch_callbacks(null, state.info.tag);
                else
                  read3();
              }
            }
          });
          watch_channel.on("close", (ex) => {
            if (ex.problem === "not-supported") {
              const opts = {
                payload: "fswatch1",
                path,
                superuser: base_channel_options.superuser
              };
              watch_channel = cockpit2.channel(opts);
              watch_channel.addEventListener("message", (event, message_string) => {
                let message;
                try {
                  message = JSON.parse(message_string);
                } catch (e) {
                  message = null;
                }
                if (message && message.path == path && message.tag && message.tag != watch_tag) {
                  if (options2 && options2.read !== void 0 && !options2.read)
                    fire_watch_callbacks(null, message.tag);
                  else
                    read3();
                }
              });
              read3();
            }
          });
        } else {
          if (watch_channel) {
            watch_channel.close();
            watch_channel = null;
          }
        }
      }
      function fire_watch_callbacks() {
        watch_tag = arguments[1] || null;
        invoke_functions(watch_callbacks, self2, arguments);
      }
      function watch(callback, options2) {
        if (callback)
          watch_callbacks.push(callback);
        n_watch_callbacks += 1;
        ensure_watch_channel(options2);
        watch_tag = null;
        return {
          remove: function() {
            if (callback) {
              const index = watch_callbacks.indexOf(callback);
              if (index > -1)
                watch_callbacks[index] = null;
            }
            n_watch_callbacks -= 1;
            ensure_watch_channel(options2);
          }
        };
      }
      function close() {
        if (read_channel)
          read_channel.close("cancelled");
        if (replace_channel)
          replace_channel.close("cancelled");
        if (watch_channel)
          watch_channel.close();
      }
      return self2;
    };
    let po_data = {};
    let po_plural;
    cockpit2.language = "en";
    cockpit2.language_direction = "ltr";
    const test_l10n = window.localStorage.test_l10n;
    cockpit2.locale = function locale(po) {
      let lang = cockpit2.language;
      let lang_dir = cockpit2.language_direction;
      let header;
      if (po) {
        Object.assign(po_data, po);
        header = po[""];
      } else if (po === null) {
        po_data = {};
      }
      if (header) {
        if (header["plural-forms"])
          po_plural = header["plural-forms"];
        if (header.language)
          lang = header.language;
        if (header["language-direction"])
          lang_dir = header["language-direction"];
      }
      cockpit2.language = lang;
      cockpit2.language_direction = lang_dir;
    };
    cockpit2.translate = function translate() {
      let what;
      if (arguments.length === 0)
        what = [document];
      else if (arguments.length === 1 && arguments[0].length)
        what = arguments[0];
      else
        what = arguments;
      const wlen = what.length;
      for (let w = 0; w < wlen; w++) {
        let list = null;
        if (what[w].querySelectorAll)
          list = what[w].querySelectorAll("[translate]");
        if (!list)
          continue;
        for (let i = 0; i < list.length; i++) {
          const el = list[i];
          let val = el.getAttribute("translate") || "yes";
          if (val == "no")
            continue;
          const tasks = val.split(" ");
          val = el.getAttribute("translate-context") || el.getAttribute("context");
          for (let t = 0; t < tasks.length; t++) {
            if (tasks[t] == "yes" || tasks[t] == "translate")
              el.textContent = cockpit2.gettext(val, el.textContent);
            else if (tasks[t])
              el.setAttribute(tasks[t], cockpit2.gettext(val, el.getAttribute(tasks[t]) || ""));
          }
          el.removeAttribute("translate");
        }
      }
    };
    cockpit2.gettext = function gettext(context, string) {
      if (arguments.length == 1) {
        string = context;
        context = void 0;
      }
      const key = context ? context + "" + string : string;
      if (po_data) {
        const translated = po_data[key];
        if (translated?.[1])
          string = translated[1];
      }
      if (test_l10n === "true")
        return "\xBB" + string + "\xAB";
      return string;
    };
    function imply(val) {
      return val === true ? 1 : val || 0;
    }
    cockpit2.ngettext = function ngettext(context, string1, stringN, num) {
      if (arguments.length == 3) {
        num = stringN;
        stringN = string1;
        string1 = context;
        context = void 0;
      }
      const key = context ? context + "" + string1 : string1;
      if (po_data && po_plural) {
        const translated = po_data[key];
        if (translated) {
          const i = imply(po_plural(num)) + 1;
          if (translated[i])
            return translated[i];
        }
      }
      if (num == 1)
        return string1;
      return stringN;
    };
    cockpit2.noop = function noop(arg0, arg1) {
      return arguments[arguments.length - 1];
    };
    const _3 = cockpit2.gettext;
    cockpit2.message = function message(arg) {
      if (arg.message)
        return arg.message;
      let problem = null;
      if (arg.problem)
        problem = arg.problem;
      else
        problem = arg + "";
      if (problem == "terminated")
        return _3("Your session has been terminated.");
      else if (problem == "no-session")
        return _3("Your session has expired. Please log in again.");
      else if (problem == "access-denied")
        return _3("Not permitted to perform this action.");
      else if (problem == "authentication-failed")
        return _3("Login failed");
      else if (problem == "authentication-not-supported")
        return _3("The server refused to authenticate using any supported methods.");
      else if (problem == "unknown-hostkey")
        return _3("Untrusted host");
      else if (problem == "unknown-host")
        return _3("Untrusted host");
      else if (problem == "invalid-hostkey")
        return _3("Host key is incorrect");
      else if (problem == "internal-error")
        return _3("Internal error");
      else if (problem == "timeout")
        return _3("Connection has timed out.");
      else if (problem == "no-cockpit")
        return _3("Cockpit is not installed on the system.");
      else if (problem == "no-forwarding")
        return _3("Cannot forward login credentials");
      else if (problem == "disconnected")
        return _3("Server has closed the connection.");
      else if (problem == "not-supported")
        return _3("Cockpit is not compatible with the software on the system.");
      else if (problem == "no-host")
        return _3("Cockpit could not contact the given host.");
      else if (problem == "too-large")
        return _3("Too much data");
      else
        return problem;
    };
    function HttpError(arg0, arg1, message) {
      this.status = parseInt(arg0, 10);
      this.reason = arg1;
      this.message = message || arg1;
      this.problem = null;
      this.valueOf = function() {
        return this.status;
      };
      this.toString = function() {
        return this.status + " " + this.message;
      };
    }
    function http_debug() {
      if (window.debugging == "all" || window.debugging?.includes("http"))
        console.debug.apply(console, arguments);
    }
    function find_header(headers, name) {
      if (!headers)
        return void 0;
      name = name.toLowerCase();
      for (const head in headers) {
        if (head.toLowerCase() == name)
          return headers[head];
      }
      return void 0;
    }
    function HttpClient(endpoint, options) {
      const self2 = this;
      self2.options = options;
      options.payload = "http-stream2";
      const active_requests = [];
      if (endpoint !== void 0) {
        if (endpoint.indexOf && endpoint.indexOf("/") === 0) {
          options.unix = endpoint;
        } else {
          const port = parseInt(endpoint, 10);
          if (!isNaN(port))
            options.port = port;
          else
            throw Error("The endpoint must be either a unix path or port number");
        }
      }
      if (options.address) {
        if (!options.capabilities)
          options.capabilities = [];
        options.capabilities.push("address");
      }
      function param(obj) {
        return Object.keys(obj).map(function(k) {
          return encodeURIComponent(k) + "=" + encodeURIComponent(obj[k]);
        }).join("&").split("%20").join("+");
      }
      self2.request = function request(req) {
        const dfd = cockpit2.defer();
        const ret = dfd.promise;
        if (!req.path)
          req.path = "/";
        if (!req.method)
          req.method = "GET";
        if (req.params) {
          if (req.path.indexOf("?") === -1)
            req.path += "?" + param(req.params);
          else
            req.path += "&" + param(req.params);
        }
        delete req.params;
        const input = req.body;
        delete req.body;
        const headers = req.headers;
        delete req.headers;
        Object.assign(req, options);
        if (options.headers && headers)
          req.headers = { ...options.headers, ...headers };
        else if (options.headers)
          req.headers = options.headers;
        else
          req.headers = headers;
        http_debug("http request:", JSON.stringify(req));
        const channel = cockpit2.channel(req);
        if (input !== void 0) {
          if (input !== "") {
            http_debug("http input:", input);
            iterate_data(input, function(data2) {
              channel.send(data2);
            });
          }
          http_debug("http done");
          channel.control({ command: "done" });
        }
        let streamer = null;
        let responsers = null;
        let resp = null;
        const buffer = channel.buffer(function(data2) {
          if (resp && resp.status >= 200 && resp.status <= 299 && streamer)
            return streamer.call(ret, data2);
          return 0;
        });
        function on_control(event, options2) {
          if (options2.command == "response") {
            resp = options2;
            if (responsers) {
              resp.headers = resp.headers || {};
              invoke_functions(responsers, ret, [resp.status, resp.headers]);
            }
          }
        }
        function on_close(event, options2) {
          const pos = active_requests.indexOf(ret);
          if (pos >= 0)
            active_requests.splice(pos, 1);
          if (options2.problem) {
            http_debug("http problem: ", options2.problem);
            dfd.reject(new BasicError(options2.problem, options2.message));
          } else {
            const body = buffer.squash();
            if (resp && (resp.status < 200 || resp.status > 299)) {
              let message;
              const type = find_header(resp.headers, "Content-Type");
              if (type && !channel.binary) {
                if (type.indexOf("text/plain") === 0)
                  message = body;
              }
              http_debug("http status: ", resp.status);
              dfd.reject(new HttpError(resp.status, resp.reason, message), body);
            } else {
              http_debug("http done");
              dfd.resolve(body);
            }
          }
          channel.removeEventListener("control", on_control);
          channel.removeEventListener("close", on_close);
        }
        channel.addEventListener("control", on_control);
        channel.addEventListener("close", on_close);
        ret.stream = function(callback) {
          streamer = callback;
          return ret;
        };
        ret.response = function(callback) {
          if (responsers === null)
            responsers = [];
          responsers.push(callback);
          return ret;
        };
        ret.input = function(message, stream) {
          if (message !== null && message !== void 0) {
            http_debug("http input:", message);
            iterate_data(message, function(data2) {
              channel.send(data2);
            });
          }
          if (!stream) {
            http_debug("http done");
            channel.control({ command: "done" });
          }
          return ret;
        };
        ret.close = function(problem) {
          http_debug("http closing:", problem);
          channel.close(problem);
          return ret;
        };
        active_requests.push(ret);
        return ret;
      };
      self2.get = function get(path, params, headers) {
        return self2.request({
          method: "GET",
          params,
          path,
          body: "",
          headers
        });
      };
      self2.post = function post(path, body, headers) {
        headers = headers || {};
        if (is_plain_object(body) || Array.isArray(body)) {
          body = JSON.stringify(body);
          if (find_header(headers, "Content-Type") === void 0)
            headers["Content-Type"] = "application/json";
        } else if (body === void 0 || body === null) {
          body = "";
        } else if (typeof body !== "string") {
          body = String(body);
        }
        return self2.request({
          method: "POST",
          path,
          body,
          headers
        });
      };
      self2.close = function close(problem) {
        const reqs = active_requests.slice();
        for (let i = 0; i < reqs.length; i++)
          reqs[i].close(problem);
      };
    }
    cockpit2.http = function(endpoint, options) {
      if (is_plain_object(endpoint) && options === void 0) {
        options = endpoint;
        endpoint = void 0;
      }
      return new HttpClient(endpoint, options || {});
    };
    function check_superuser() {
      return new Promise((resolve, reject) => {
        const ch = cockpit2.channel({ payload: "null", superuser: "require" });
        ch.wait().then(() => resolve(true)).catch(() => resolve(false)).always(() => ch.close());
      });
    }
    function Permission(options) {
      const self2 = this;
      event_mixin(self2, {});
      const api = cockpit2.dbus(null, { bus: "internal" }).proxy("cockpit.Superuser", "/superuser");
      api.addEventListener("changed", maybe_reload);
      function maybe_reload() {
        if (api.valid && self2.allowed !== null) {
          if (self2.allowed != (api.Current != "none"))
            window.location.reload(true);
        }
      }
      self2.allowed = null;
      self2.user = options ? options.user : null;
      self2.is_superuser = options ? options._is_superuser : null;
      let group = null;
      let admin = false;
      if (options)
        group = options.group;
      if (options?.admin)
        admin = true;
      function decide(user) {
        if (user.id === 0)
          return true;
        if (group)
          return !!(user.groups || []).includes(group);
        if (admin)
          return self2.is_superuser;
        if (user.id === void 0)
          return null;
        return false;
      }
      if (self2.user && self2.is_superuser !== null) {
        self2.allowed = decide(self2.user);
      } else {
        Promise.all([cockpit2.user(), check_superuser()]).then(([user, is_superuser]) => {
          self2.user = user;
          self2.is_superuser = is_superuser;
          const allowed = decide(user);
          if (self2.allowed !== allowed) {
            self2.allowed = allowed;
            maybe_reload();
            self2.dispatchEvent("changed");
          }
        });
      }
      self2.close = function close() {
      };
    }
    cockpit2.permission = function permission(arg) {
      return new Permission(arg);
    };
    function MetricsChannel(interval, options_list, cache) {
      const self2 = this;
      event_mixin(self2, {});
      if (options_list.length === void 0)
        options_list = [options_list];
      const channels = [];
      let following = false;
      self2.series = cockpit2.series(interval, cache, fetch_for_series);
      self2.archives = null;
      self2.meta = null;
      function fetch_for_series(beg, end3, for_walking) {
        if (!for_walking)
          self2.fetch(beg, end3);
        else
          self2.follow();
      }
      function transfer(options_list2, callback, is_archive) {
        if (options_list2.length === 0)
          return;
        if (!is_archive) {
          if (following)
            return;
          following = true;
        }
        const options = {
          payload: "metrics1",
          interval,
          source: "internal",
          ...options_list2[0]
        };
        delete options.archive_source;
        const channel = cockpit2.channel(options);
        channels.push(channel);
        let meta = null;
        let last = null;
        let beg;
        channel.addEventListener("close", function(ev, close_options) {
          if (!is_archive)
            following = false;
          if (options_list2.length > 1 && (close_options.problem == "not-supported" || close_options.problem == "not-found")) {
            transfer(options_list2.slice(1), callback);
          } else if (close_options.problem) {
            if (close_options.problem != "terminated" && close_options.problem != "disconnected" && close_options.problem != "authentication-failed" && (close_options.problem != "not-found" || !is_archive) && (close_options.problem != "not-supported" || !is_archive)) {
              console.warn("metrics channel failed: " + close_options.problem);
            }
          } else if (is_archive) {
            if (!self2.archives) {
              self2.archives = true;
              self2.dispatchEvent("changed");
            }
          }
        });
        channel.addEventListener("message", function(ev, payload) {
          const message = JSON.parse(payload);
          const message_len = message.length;
          if (message_len === void 0) {
            meta = message;
            let timestamp = 0;
            if (meta.now && meta.timestamp)
              timestamp = meta.timestamp + (Date.now() - meta.now);
            beg = Math.floor(timestamp / interval);
            callback(beg, meta, null, options_list2[0]);
            self2.meta = meta;
            self2.dispatchEvent("changed");
          } else if (meta) {
            for (let i = 0; i < message_len; i++) {
              const data2 = message[i];
              if (last) {
                for (let j = 0; j < last.length; j++) {
                  const dataj = data2[j];
                  if (dataj === null || dataj === void 0) {
                    data2[j] = last[j];
                  } else {
                    const dataj_len = dataj.length;
                    if (dataj_len !== void 0) {
                      const lastj = last[j];
                      const lastj_len = last[j].length;
                      let k;
                      for (k = 0; k < dataj_len; k++) {
                        if (dataj[k] === null)
                          dataj[k] = lastj[k];
                      }
                      for (; k < lastj_len; k++)
                        dataj[k] = lastj[k];
                    }
                  }
                }
              }
              last = data2;
            }
            callback(beg, meta, message, options_list2[0]);
            beg += message_len;
            meta.timestamp += interval * message_len;
          }
        });
      }
      function drain(beg, meta, message, options) {
        let mapping = meta.mapping;
        if (!mapping) {
          mapping = {};
          meta.metrics.forEach(function(metric, i) {
            const map = { "": i };
            const name = options.metrics_path_names?.[i] ?? metric.name;
            mapping[name] = map;
            if (metric.instances) {
              metric.instances.forEach(function(instance, i2) {
                if (instance === "")
                  instance = "/";
                map[instance] = { "": i2 };
              });
            }
          });
          meta.mapping = mapping;
        }
        if (message)
          self2.series.input(beg, message, mapping);
      }
      self2.fetch = function fetch2(beg, end3) {
        const timestamp = beg * interval - Date.now();
        const limit = end3 - beg;
        const archive_options_list = [];
        for (let i = 0; i < options_list.length; i++) {
          if (options_list[i].archive_source) {
            archive_options_list.push({
              ...options_list[i],
              source: options_list[i].archive_source,
              timestamp,
              limit
            });
          }
        }
        transfer(archive_options_list, drain, true);
      };
      self2.follow = function follow() {
        transfer(options_list, drain);
      };
      self2.close = function close(options) {
        const len = channels.length;
        if (self2.series)
          self2.series.close();
        for (let i = 0; i < len; i++)
          channels[i].close(options);
      };
    }
    cockpit2.metrics = function metrics(interval, options) {
      return new MetricsChannel(interval, options);
    };
    cockpit2.oops = function oops() {
      if (window.parent !== window && window.name.indexOf("cockpit1:") === 0)
        window.parent.postMessage('\n{ "command": "oops" }', transport_origin);
    };
    const old_onerror = window.onerror;
    window.onerror = function(msg, url, line) {
      if (url != "")
        cockpit2.oops();
      if (old_onerror)
        return old_onerror(msg, url, line);
      return false;
    };
    cockpit2.assert = (predicate, message) => {
      if (!predicate) {
        throw new Error(`Assertion failed: ${message}`);
      }
    };
    return cockpit2;
  }
  var cockpit = factory();
  var cockpit_default = cockpit;
  window.cockpit = cockpit;

  // src/srw.tsx
  var _ = cockpit_default.gettext;
  var SRW = () => {
    const [nodes, setNodes] = (0, import_react11.useState)([]);
    (0, import_react11.useEffect)(() => {
      let file3, handle;
      cockpit_default.user().then((user) => {
        let username = user.name;
        file3 = cockpit_default.file("/tmp/gpu/" + username + ".txt");
        handle = file3.watch((content, tag) => {
          if (content) {
            const lines = content.trim().split("\n");
            const gpuPropsArray = lines.map((line) => {
              const parts = line.split(" ");
              return {
                date: parts[0],
                time: parts[1],
                job_id: parts[2],
                hostname: parts[3],
                gpu_index: parts[4],
                gpu_usage: parts[5],
                gpu_memory_used: parts[6],
                gpu_memory_total: parts[7]
              };
            });
            console.log(gpuPropsArray);
            const groupData = gpuPropsArray.reduce((acc, item) => {
              const { job_id, hostname, gpu_index, date, time } = item;
              const timestamp = (/* @__PURE__ */ new Date(`${date} ${time}`)).getTime();
              if (!acc[job_id]) {
                acc[job_id] = {};
              }
              if (!acc[job_id][hostname]) {
                acc[job_id][hostname] = {};
              }
              if (!acc[job_id][hostname][gpu_index]) {
                acc[job_id][hostname][gpu_index] = [];
              }
              const existingItem = acc[job_id][hostname][gpu_index].find((gpu) => gpu.gpu_index === gpu_index);
              if (!existingItem || (/* @__PURE__ */ new Date(`${existingItem.date} ${existingItem.time}`)).getTime() < timestamp) {
                acc[job_id][hostname][gpu_index] = [item];
              }
              return acc;
            }, {});
            setNodes(Object.entries(groupData).map(([job_id, hostData]) => ({
              job_id,
              hostData
            })));
          }
        });
      });
      return () => {
        handle.remove();
        file3.close();
      };
    }, []);
    return /* @__PURE__ */ import_react11.default.createElement("div", { style: { paddingLeft: "35px", paddingRight: "35px", paddingTop: "20px", height: "85vh", overflowY: "auto" } }, /* @__PURE__ */ import_react11.default.createElement(Title, { headingLevel: "h1", style: { fontSize: "30px", paddingBottom: "20px" } }, "Slurm \u8D44\u6E90\u76D1\u63A7\u5DE5\u5177"), nodes.length === 0 && /* @__PURE__ */ import_react11.default.createElement("div", null, "\u6682\u65E0 GPU \u8D44\u6E90"), nodes.map(({ job_id, hostData }) => /* @__PURE__ */ import_react11.default.createElement("div", { key: job_id }, /* @__PURE__ */ import_react11.default.createElement(Card, { ouiaId: "SecondaryCard" }, /* @__PURE__ */ import_react11.default.createElement(CardTitle, null, "\u4F5C\u4E1A ID: ", job_id), /* @__PURE__ */ import_react11.default.createElement(CardBody, null, Object.entries(hostData).map(([hostname, gpuIndexData]) => /* @__PURE__ */ import_react11.default.createElement("div", { key: hostname, style: { width: "100%" } }, /* @__PURE__ */ import_react11.default.createElement("br", null), /* @__PURE__ */ import_react11.default.createElement(Table, { "aria-label": hostname, style: { width: "100%" } }, /* @__PURE__ */ import_react11.default.createElement(Caption, null, "\u4E3B\u673A\uFF1A", hostname), /* @__PURE__ */ import_react11.default.createElement(Thead, null, /* @__PURE__ */ import_react11.default.createElement(Tr, { style: { lineHeight: "50px" } }, /* @__PURE__ */ import_react11.default.createElement(Th, { style: { width: "10%" } }, "GPU \u7F16\u53F7"), /* @__PURE__ */ import_react11.default.createElement(Th, { style: { width: "10%" } }, "GPU \u5229\u7528\u7387"), /* @__PURE__ */ import_react11.default.createElement(Th, { style: { width: "20%" } }, "GPU \u5185\u5B58\u5DF2\u4F7F\u7528"), /* @__PURE__ */ import_react11.default.createElement(Th, { style: { width: "60%" } }, "\u6700\u540E\u68C0\u67E5\u65F6\u95F4"))), Object.entries(gpuIndexData).map(([gpu_index, gpuList]) => /* @__PURE__ */ import_react11.default.createElement(Tbody, { key: gpu_index }, /* @__PURE__ */ import_react11.default.createElement(Tr, { style: { lineHeight: "30px" } }), gpuList.map((gpu, index) => /* @__PURE__ */ import_react11.default.createElement(Tr, { key: index }, /* @__PURE__ */ import_react11.default.createElement(Td, null, gpu.gpu_index), /* @__PURE__ */ import_react11.default.createElement(Td, null, gpu.gpu_usage, "%"), /* @__PURE__ */ import_react11.default.createElement(Td, null, gpu.gpu_memory_used, " MB / ", gpu.gpu_memory_total, " MB"), /* @__PURE__ */ import_react11.default.createElement(Td, null, gpu.date, " ", gpu.time))), /* @__PURE__ */ import_react11.default.createElement(Tr, null)))))))))));
  };

  // src/stst.tsx
  var import_react12 = __toESM(require_react(), 1);
  var _2 = cockpit_default.gettext;
  var STST = () => {
    const [taskName, setTaskName] = (0, import_react12.useState)("");
    const [taskLogPath, setTaskLogPath] = (0, import_react12.useState)("");
    const [taskResource, setTaskResource] = (0, import_react12.useState)({
      node: 1,
      gpu_per_node: 0,
      cpu_per_node: 1,
      memory_per_node: 1
    });
    const [params, setParams] = (0, import_react12.useState)("");
    const [taskType, setSelectedTaskType] = (0, import_react12.useState)("task-train");
    const [isOpenTaskType, setIsOpenTaskType] = (0, import_react12.useState)(false);
    const [submitStatus, setSubmitStatus] = (0, import_react12.useState)(null);
    const taskTypes = [
      { value: "task-debug", label: "\u8C03\u8BD5\u4EFB\u52A1" },
      { value: "task-train", label: "\u8BAD\u7EC3\u4EFB\u52A1" }
    ];
    const onToggleClickTaskType = () => setIsOpenTaskType(!isOpenTaskType);
    const onSelectTaskType = (_event, value) => {
      setSelectedTaskType(value);
      setIsOpenTaskType(false);
    };
    const toggleTaskType = (toggleRef) => /* @__PURE__ */ import_react12.default.createElement(
      MenuToggle,
      {
        ref: toggleRef,
        onClick: onToggleClickTaskType,
        isExpanded: isOpenTaskType
      },
      taskType
    );
    const handleTaskSubmit = async () => {
      try {
        if (taskType === "task-train") {
          let task_partition = "Normal";
          let sbatch_script = `
                    #!/bin/bash
                    #SBATCH --job-name=${taskName}
                    #SBATCH --output=${taskLogPath}/${taskName}.out
                    #SBATCH --error=${taskLogPath}/${taskName}.err
                    #SBATCH --partition=${task_partition}
                    #SBATCH --nodes=${taskResource.node}
                    #SBATCH --ntasks-per-node=1
                    #SBATCH --gpus-per-task=${taskResource.gpu_per_node}
                    #SBATCH --cpus-per-task=${taskResource.cpu_per_node}
                    #SBATCH --mem=${taskResource.memory_per_node}G

                    nodes=( $( scontrol show hostnames $SLURM_JOB_NODELIST ) )
                    nodes_array=($nodes)
                    head_node=\${nodes_array[0]}
                    head_node_ip=$(srun --nodes=1 --ntasks=1 -w "$head_node" hostname --ip-address)

                    export LOGLEVEL=INFO

                    srun ${params}
                `.replace(/^\s+/gm, "");
          let user = await cockpit_default.user();
          let script_filename = "/tmp/slurm_" + user.id + "_" + Date.now().toString() + ".sh";
          await cockpit_default.file(script_filename).replace(sbatch_script);
          let res = await cockpit_default.spawn(["sbatch", script_filename]);
          setSubmitStatus({
            variant: "success",
            title: "\u4EFB\u52A1\u63D0\u4EA4\u6210\u529F",
            message: res
          });
        } else {
          let task_partition = "Debug";
          await cockpit_default.spawn([
            "salloc",
            "--job-name",
            taskName,
            "--nodes",
            taskResource.node.toString(),
            "--partition",
            task_partition,
            "--ntasks-per-node",
            "1",
            "--gpus-per-task",
            taskResource.gpu_per_node.toString(),
            "--cpus-per-task",
            taskResource.cpu_per_node.toString(),
            "--mem",
            taskResource.memory_per_node.toString() + "G",
            "--no-shell"
          ]);
          let user = await cockpit_default.user();
          let node_info = await cockpit_default.spawn(["squeue", "-u", user.name, "-p", task_partition, "--format", "%N", "--noheader"]);
          setSubmitStatus({
            variant: "success",
            title: "\u4EFB\u52A1\u63D0\u4EA4\u6210\u529F",
            message: [...new Set(node_info.split("\n"))].toString().replace(",", " ")
          });
        }
        setTaskName("");
        setTaskLogPath("");
        setTaskResource((prevState) => ({ ...prevState, node: 1, gpu_per_node: 0, cpu_per_node: 1, memory_per_node: 1 }));
        setParams("");
        setSelectedTaskType("task-train");
      } catch (error) {
        setSubmitStatus({
          variant: "danger",
          title: "\u63D0\u4EA4\u5931\u8D25",
          message: `\u4EFB\u52A1\u63D0\u4EA4\u5931\u8D25\uFF1A${error}`
        });
      }
    };
    return /* @__PURE__ */ import_react12.default.createElement("div", { style: { paddingLeft: "35px", paddingTop: "20px", height: "85vh", overflowY: "auto" } }, /* @__PURE__ */ import_react12.default.createElement(Title, { headingLevel: "h1", style: { fontSize: "30px", paddingBottom: "20px" } }, "Slurm \u4EFB\u52A1\u63D0\u4EA4\u5DE5\u5177"), /* @__PURE__ */ import_react12.default.createElement(Form2, { isWidthLimited: true, className: "pf-u-w-66" }, /* @__PURE__ */ import_react12.default.createElement(FormGroup, { label: "\u4EFB\u52A1\u540D\u79F0", isRequired: true, fieldId: "task-name" }, /* @__PURE__ */ import_react12.default.createElement(
      TextInput,
      {
        id: "task-name",
        value: taskName,
        onChange: (_event, value) => setTaskName(value),
        placeholder: "\u8BF7\u8F93\u5165\u4EFB\u52A1\u540D\u79F0",
        className: "pf-u-w-50"
      }
    )), /* @__PURE__ */ import_react12.default.createElement(FormGroup, { label: "\u65E5\u5FD7\u6587\u4EF6\u8DEF\u5F84\uFF08\u4F7F\u7528\u7EDD\u5BF9\u8DEF\u5F84\uFF09", isRequired: taskType != "task-debug", fieldId: "task-log-path" }, /* @__PURE__ */ import_react12.default.createElement(
      TextInput,
      {
        id: "task-log-path",
        value: taskLogPath,
        onChange: (_event, value) => setTaskLogPath(value),
        placeholder: "\u8BF7\u8F93\u5165\u65E5\u5FD7\u6587\u4EF6\u8DEF\u5F84",
        className: "pf-u-w-50"
      }
    )), /* @__PURE__ */ import_react12.default.createElement(FormGroup, { label: "\u4EFB\u52A1\u7C7B\u578B", isRequired: true, fieldId: "task-type" }, /* @__PURE__ */ import_react12.default.createElement(
      Select,
      {
        id: "task-type",
        isOpen: isOpenTaskType,
        selected: taskType,
        onSelect: onSelectTaskType,
        onOpenChange: (isOpenTaskType2) => setIsOpenTaskType(isOpenTaskType2),
        toggle: toggleTaskType,
        shouldFocusToggleOnSelect: true
      },
      taskTypes.map((type) => /* @__PURE__ */ import_react12.default.createElement(SelectOption, { key: type.value, value: type.value }, /* @__PURE__ */ import_react12.default.createElement("span", { className: "pf-u-mr-sm" }, type.label), /* @__PURE__ */ import_react12.default.createElement("span", { className: "pf-u-font-size-sm pf-u-color-400" }, "(", type.value, ")")))
    )), /* @__PURE__ */ import_react12.default.createElement(FormGroup, { label: "\u7533\u8BF7\u8D44\u6E90\uFF08\u4ECE\u5DE6\u5230\u53F3\u4F9D\u6B21\u4E3A\u3010\u8282\u70B9\u6570\u91CF\u3011\u3010\u6BCF\u4E2A\u8282\u70B9\u7684GPU\u3011\u3010\u6BCF\u4E2A\u8282\u70B9\u7684CPU\u3011\u3010\u6BCF\u4E2A\u8282\u70B9\u7684\u5185\u5B58(\u5355\u4F4D:G)\u3011\uFF09", isRequired: true, fieldId: "task-resource" }, /* @__PURE__ */ import_react12.default.createElement(InputGroup, null, /* @__PURE__ */ import_react12.default.createElement(InputGroupItem, null, /* @__PURE__ */ import_react12.default.createElement(
      TextInput,
      {
        id: "task-resource-node",
        value: taskResource.node,
        onChange: (_event, value) => setTaskResource({ ...taskResource, node: Number(value) })
      }
    )), /* @__PURE__ */ import_react12.default.createElement(InputGroupItem, null, /* @__PURE__ */ import_react12.default.createElement(
      TextInput,
      {
        id: "task-resource-gpu",
        value: taskResource.gpu_per_node,
        onChange: (_event, value) => setTaskResource({ ...taskResource, gpu_per_node: Number(value) })
      }
    )), /* @__PURE__ */ import_react12.default.createElement(InputGroupItem, null, /* @__PURE__ */ import_react12.default.createElement(
      TextInput,
      {
        id: "task-resource-cpu",
        value: taskResource.cpu_per_node,
        onChange: (_event, value) => setTaskResource({ ...taskResource, cpu_per_node: Number(value) })
      }
    )), /* @__PURE__ */ import_react12.default.createElement(InputGroupItem, null, /* @__PURE__ */ import_react12.default.createElement(
      TextInput,
      {
        id: "task-resource-memory",
        value: taskResource.memory_per_node,
        onChange: (_event, value) => setTaskResource({ ...taskResource, memory_per_node: Number(value) })
      }
    )))), /* @__PURE__ */ import_react12.default.createElement(FormGroup, { label: "\u8BAD\u7EC3\u4EFB\u52A1\uFF08\u4F7F\u7528\u7EDD\u5BF9\u8DEF\u5F84\uFF09", isRequired: taskType != "task-debug", fieldId: "task-params" }, /* @__PURE__ */ import_react12.default.createElement(
      TextArea,
      {
        value: params,
        onChange: (_event, value) => setParams(value),
        "aria-label": "\u8BAD\u7EC3\u4EFB\u52A1\u53CA\u53C2\u6570",
        resizeOrientation: "vertical",
        rows: 8,
        className: "pf-u-w-75",
        style: { fontFamily: "monospace" }
      }
    )), submitStatus && /* @__PURE__ */ import_react12.default.createElement(
      Alert,
      {
        variant: submitStatus.variant,
        title: submitStatus.title,
        className: "pf-u-mt-md",
        isInline: true
      },
      submitStatus.message
    ), /* @__PURE__ */ import_react12.default.createElement("div", { className: "pf-u-mt-xl", style: { "marginBottom": "50px" } }, /* @__PURE__ */ import_react12.default.createElement(
      Button,
      {
        variant: "primary",
        onClick: handleTaskSubmit,
        isDisabled: !taskName || !taskType
      },
      "\u63D0\u4EA4\u4EFB\u52A1"
    ))));
  };

  // node_modules/@patternfly/react-icons/dist/esm/icons/bars-icon.js
  var BarsIconConfig = {
    name: "BarsIcon",
    height: 512,
    width: 448,
    svgPath: "M16 132h416c8.837 0 16-7.163 16-16V76c0-8.837-7.163-16-16-16H16C7.163 60 0 67.163 0 76v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16z",
    yOffset: 0,
    xOffset: 0
  };
  var BarsIcon = createIcon(BarsIconConfig);

  // src/app.tsx
  var Application = () => {
    const [activeItem, setActiveItem] = import_react13.default.useState(0);
    const onNavSelect = (_event, selectedItem) => {
      typeof selectedItem.itemId === "number" && setActiveItem(selectedItem.itemId);
    };
    return /* @__PURE__ */ import_react13.default.createElement(BrowserRouter, null, /* @__PURE__ */ import_react13.default.createElement(Masthead, null, /* @__PURE__ */ import_react13.default.createElement(MastheadToggle, null, /* @__PURE__ */ import_react13.default.createElement("button", { "aria-label": "Toggle navigation", style: { background: "none", border: "none", color: "#fff" } }, /* @__PURE__ */ import_react13.default.createElement(BarsIcon, null))), /* @__PURE__ */ import_react13.default.createElement(MastheadMain, null, /* @__PURE__ */ import_react13.default.createElement(MastheadBrand, null, "Slurm \u5DE5\u5177")), /* @__PURE__ */ import_react13.default.createElement(MastheadContent, null, /* @__PURE__ */ import_react13.default.createElement(ToolbarItem, { isOverflowContainer: true }, /* @__PURE__ */ import_react13.default.createElement(
      Nav,
      {
        id: "page-layout-horizontal-nav-horizontal-nav",
        onSelect: onNavSelect,
        "aria-label": "Global",
        variant: "horizontal"
      },
      /* @__PURE__ */ import_react13.default.createElement(NavList, null, /* @__PURE__ */ import_react13.default.createElement(NavItem, { itemId: 0, isActive: activeItem === 0 }, /* @__PURE__ */ import_react13.default.createElement(Link, { to: "/" }, "\u4F5C\u4E1A\u63D0\u4EA4")), /* @__PURE__ */ import_react13.default.createElement(NavItem, { itemId: 1, isActive: activeItem === 1 }, /* @__PURE__ */ import_react13.default.createElement(Link, { to: "/srw" }, "\u8D44\u6E90\u76D1\u63A7")))
    )))), /* @__PURE__ */ import_react13.default.createElement(Routes, null, /* @__PURE__ */ import_react13.default.createElement(Route, { path: "/*", element: /* @__PURE__ */ import_react13.default.createElement(STST, null) }), /* @__PURE__ */ import_react13.default.createElement(Route, { path: "/srw", element: /* @__PURE__ */ import_react13.default.createElement(SRW, null) })));
  };

  // src/index.tsx
  document.addEventListener("DOMContentLoaded", () => {
    (0, import_client.createRoot)(document.getElementById("app")).render(/* @__PURE__ */ import_react14.default.createElement(Application, null));
  });
})();
//# sourceMappingURL=index.js.map
